[build-system]
requires = ["setuptools>=75.0.0", "wheel", "setuptools_scm[toml]>=5.0"]

[tool.ape.test]
show_internal = true

[tool.mypy]
exclude = ["build/", "dist/", "docs/", "tests/integration/cli/projects/"]
check_untyped_defs = true
plugins = ["pydantic.mypy"]

[tool.setuptools_scm]
# The fallback version is so that CI/CD systems will use a more accurate version.
# Otherwise, you may have issues with plugins' pinning Ape and not using the expected version.
# This version is purposely set to really high minor so that it should always work
# with newer, stricter plugin releases.
# NOTE: This should be bumped with every minor release!
fallback_version = "0.8.999"
write_to = "src/ape/version.py"

[tool.pytest.ini_options]
norecursedirs = "projects"

# NOTE: 'no:ape_test' Prevents the ape plugin from activating on our tests
#    And 'pytest_ethereum' is not used and causes issues in some environments.
addopts = """
-p no:pytest_ethereum
-p no:boa_test
"""

python_files = "test_*.py"
testpaths = "tests"
markers = """fuzzing: Run Hypothesis fuzz test suite
pip: tests that rely on pip install operations"""
timeout = 300

[tool.ruff]
target-version = "py39"
line-length = 100

[tool.ruff.lint]
# Select rule categories to enforce
select = [
    # Core Python errors and style
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "W",    # pycodestyle warnings
    "I",    # isort
    "B",    # flake8-bugbear - common bugs/design issues
    "C4",   # flake8-comprehensions - simplify comprehensions
    "UP",   # pyupgrade - modern Python features/idioms
    "RET",  # flake8-return - cleaner return statements
    "SIM",  # flake8-simplify - code simplification
    "S",    # flake8-bandit - security issues
    "TCH",  # flake8-type-checking - type annotation improvements
]

# Rules to ignore
ignore = [
    "E501",

    # Specific bugbear issues 
    "B904",     # Use 'raise from' in except blocks
    "B006",     # Mutable default arguments
    "B007",     # Loop control variable not used within loop body
    "B012",     # Jump statements in finally blocks
    "B028",     # No explicit stacklevel in warnings
    
    # Code structure preferences
    "SIM102",   # Use a single if statement instead of nested if statements
    "SIM105",   # Use contextlib.suppress instead of try-except-pass
    "SIM108",   # Use ternary operator instead of if-else block
    "SIM113",   # Use enumerate instead of manually incrementing counter
    "SIM114",   # If branches with identical arm bodies (combine with or)
    "SIM115",   # Use context manager for opening files
    "SIM116",   # Use dictionary instead of if-statements
    "SIM117",   # Multiple with statements
    "B018",     # Useless expression
    
    # Return statement style
    "RET501",   # Do not explicitly return None
    "RET502",   # Implicit return at the end of function able to return non-None value
    "RET503",   # Missing explicit return at the end of function able to return non-None value 
    "RET504",   # Unnecessary assignment before return
    "RET505",   # Unnecessary else after return
    "RET506",   # Unnecessary else after raise
    "RET507",   # Unnecessary else after continue
    "RET508",   # Unnecessary else after break
    
    # Security issues (allow common patterns in the codebase)
    "S101",     # Use of assert (many asserts are used for type checking)
    "S102",     # Use of exec (needed in some specific places)
    "S105",     # Hardcoded password string
    "S110",     # Try-except-pass (common pattern for handling optional features)
    "S112",     # Try-except-continue
    "S113",     # Request without timeout
    "S202",     # Tarfile unsafe members
    "S307",     # Use of eval
    "S311",     # Suspicious non-cryptographic random usage
    "S603",     # Subprocess without shell=True
    "S607",     # Start process with partial path

    # Style/readability issues (improve incrementally)
    "C416",     # Unnecessary comprehension (rewrite using list/set/dict)
    "C408",     # Unnecessary dict() call (rewrite as literal)
    "C417",     # Unnecessary map usage (replace with generator)
    "C414",     # Unnecessary list/dict call within another function
    "C401",     # Unnecessary generator (rewrite as comprehension)
    "C409",     # Unnecessary literal within tuple/list/dict call
    "C419",     # Unnecessary comprehension in call
    "SIM101",   # Duplicate isinstance call
    "SIM103",   # Needless boolean conversion
    "SIM110",   # Reimplemented builtin
    "SIM118",   # Use 'key in dict' instead of 'key in dict.keys()'
    "SIM401",   # Use dict.get instead of if-else block
    "SIM910",   # Use dict.get(key) instead of dict.get(key, None)
    "TC001",    # Move application import into type-checking block
    "TC003",    # Move standard library import into type-checking block
    "UP028",    # Replace yield over for loop with yield from
]

[tool.ruff.lint.per-file-ignores]
"**/tests/**/*.py" = [
    "D",        # Don't require docstrings in tests
    "E501",     # Line length in tests is less critical
    "S101",     # Allow assert in tests
    "B011",     # Allow assert False in tests (common pattern)
]
"**/conftest.py" = [
    "F401",     # Unused imports in conftest.py are often for fixtures
    "F841",     # Allow unused variables in conftest (often for fixture side effects)
]
"**/tests/integration/cli/projects/**/*.py" = [
    "F841",     # These are test files that intentionally create errors
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["ape", "ape_accounts", "ape_console", "ape_ethereum", "ape_geth", "ape_networks", "ape_node", "ape_plugins", "ape_pm", "ape_test"]

[tool.ruff.format]
quote-style = "double"
line-ending = "auto"
indent-style = "space"
docstring-code-format = true

[tool.mdformat]
number = true