{"manifest": "ethpm/3", "sources": {"GSN/IRelayRecipient.sol": {"checksum": {"algorithm": "md5", "hash": "a084b0fb2690126db8dff705523ae7a0"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Base interface for a contract that will be called via the GSN from {IRelayHub}.\n *\n * TIP: You don't need to write an implementation yourself! Inherit from {GSNRecipient} instead.\n */\ninterface IRelayRecipient {\n    /**\n     * @dev Returns the address of the {IRelayHub} instance this recipient interacts with.\n     */\n    function getHubAddr() external view returns (address);\n\n    /**\n     * @dev Called by {IRelayHub} to validate if this recipient accepts being charged for a relayed call. Note that the\n     * recipient will be charged regardless of the execution result of the relayed call (i.e. if it reverts or not).\n     *\n     * The relay request was originated by `from` and will be served by `relay`. `encodedFunction` is the relayed call\n     * calldata, so its first four bytes are the function selector. The relayed call will be forwarded `gasLimit` gas,\n     * and the transaction executed with a gas price of at least `gasPrice`. ``relay``'s fee is `transactionFee`, and the\n     * recipient will be charged at most `maxPossibleCharge` (in wei). `nonce` is the sender's (`from`) nonce for\n     * replay attack protection in {IRelayHub}, and `approvalData` is a optional parameter that can be used to hold a signature\n     * over all or some of the previous values.\n     *\n     * Returns a tuple, where the first value is used to indicate approval (0) or rejection (custom non-zero error code,\n     * values 1 to 10 are reserved) and the second one is data to be passed to the other {IRelayRecipient} functions.\n     *\n     * {acceptRelayedCall} is called with 50k gas: if it runs out during execution, the request will be considered\n     * rejected. A regular revert will also trigger a rejection.\n     */\n    function acceptRelayedCall(\n        address relay,\n        address from,\n        bytes calldata encodedFunction,\n        uint256 transactionFee,\n        uint256 gasPrice,\n        uint256 gasLimit,\n        uint256 nonce,\n        bytes calldata approvalData,\n        uint256 maxPossibleCharge\n    )\n        external\n        view\n        returns (uint256, bytes memory);\n\n    /**\n     * @dev Called by {IRelayHub} on approved relay call requests, before the relayed call is executed. This allows to e.g.\n     * pre-charge the sender of the transaction.\n     *\n     * `context` is the second value returned in the tuple by {acceptRelayedCall}.\n     *\n     * Returns a value to be passed to {postRelayedCall}.\n     *\n     * {preRelayedCall} is called with 100k gas: if it runs out during exection or otherwise reverts, the relayed call\n     * will not be executed, but the recipient will still be charged for the transaction's cost.\n     */\n    function preRelayedCall(bytes calldata context) external returns (bytes32);\n\n    /**\n     * @dev Called by {IRelayHub} on approved relay call requests, after the relayed call is executed. This allows to e.g.\n     * charge the user for the relayed call costs, return any overcharges from {preRelayedCall}, or perform\n     * contract-specific bookkeeping.\n     *\n     * `context` is the second value returned in the tuple by {acceptRelayedCall}. `success` is the execution status of\n     * the relayed call. `actualCharge` is an estimate of how much the recipient will be charged for the transaction,\n     * not including any gas used by {postRelayedCall} itself. `preRetVal` is {preRelayedCall}'s return value.\n     *\n     *\n     * {postRelayedCall} is called with 100k gas: if it runs out during execution or otherwise reverts, the relayed call\n     * and the call to {preRelayedCall} will be reverted retroactively, but the recipient will still be charged for the\n     * transaction's cost.\n     */\n    function postRelayedCall(bytes calldata context, bool success, uint256 actualCharge, bytes32 preRetVal) external;\n}\n"}, "mocks/ERC777SenderRecipientMock.sol": {"checksum": {"algorithm": "md5", "hash": "d8906a8a9d56b81380fbf4e764a69bef"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\nimport \"../token/ERC777/IERC777.sol\";\nimport \"../token/ERC777/IERC777Sender.sol\";\nimport \"../token/ERC777/IERC777Recipient.sol\";\nimport \"../introspection/IERC1820Registry.sol\";\nimport \"../introspection/ERC1820Implementer.sol\";\n\ncontract ERC777SenderRecipientMock is Context, IERC777Sender, IERC777Recipient, ERC1820Implementer {\n    event TokensToSendCalled(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData,\n        address token,\n        uint256 fromBalance,\n        uint256 toBalance\n    );\n\n    event TokensReceivedCalled(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData,\n        address token,\n        uint256 fromBalance,\n        uint256 toBalance\n    );\n\n    bool private _shouldRevertSend;\n    bool private _shouldRevertReceive;\n\n    IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n    bytes32 constant private _TOKENS_SENDER_INTERFACE_HASH = keccak256(\"ERC777TokensSender\");\n    bytes32 constant private _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\"ERC777TokensRecipient\");\n\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external override {\n        if (_shouldRevertSend) {\n            revert();\n        }\n\n        IERC777 token = IERC777(_msgSender());\n\n        uint256 fromBalance = token.balanceOf(from);\n        // when called due to burn, to will be the zero address, which will have a balance of 0\n        uint256 toBalance = token.balanceOf(to);\n\n        emit TokensToSendCalled(\n            operator,\n            from,\n            to,\n            amount,\n            userData,\n            operatorData,\n            address(token),\n            fromBalance,\n            toBalance\n        );\n    }\n\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external override {\n        if (_shouldRevertReceive) {\n            revert();\n        }\n\n        IERC777 token = IERC777(_msgSender());\n\n        uint256 fromBalance = token.balanceOf(from);\n        // when called due to burn, to will be the zero address, which will have a balance of 0\n        uint256 toBalance = token.balanceOf(to);\n\n        emit TokensReceivedCalled(\n            operator,\n            from,\n            to,\n            amount,\n            userData,\n            operatorData,\n            address(token),\n            fromBalance,\n            toBalance\n        );\n    }\n\n    function senderFor(address account) public {\n        _registerInterfaceForAddress(_TOKENS_SENDER_INTERFACE_HASH, account);\n\n        address self = address(this);\n        if (account == self) {\n            registerSender(self);\n        }\n    }\n\n    function registerSender(address sender) public {\n        _erc1820.setInterfaceImplementer(address(this), _TOKENS_SENDER_INTERFACE_HASH, sender);\n    }\n\n    function recipientFor(address account) public {\n        _registerInterfaceForAddress(_TOKENS_RECIPIENT_INTERFACE_HASH, account);\n\n        address self = address(this);\n        if (account == self) {\n            registerRecipient(self);\n        }\n    }\n\n    function registerRecipient(address recipient) public {\n        _erc1820.setInterfaceImplementer(address(this), _TOKENS_RECIPIENT_INTERFACE_HASH, recipient);\n    }\n\n    function setShouldRevertSend(bool shouldRevert) public {\n        _shouldRevertSend = shouldRevert;\n    }\n\n    function setShouldRevertReceive(bool shouldRevert) public {\n        _shouldRevertReceive = shouldRevert;\n    }\n\n    function send(IERC777 token, address to, uint256 amount, bytes memory data) public {\n        // This is 777's send function, not the Solidity send function\n        token.send(to, amount, data); // solhint-disable-line check-send-result\n    }\n\n    function burn(IERC777 token, uint256 amount, bytes memory data) public {\n        token.burn(amount, data);\n    }\n}\n\n"}, "mocks/CallReceiverMock.sol": {"checksum": {"algorithm": "md5", "hash": "46a156029b59b541d74a0bf30d78e558"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\ncontract CallReceiverMock {\n\n    event MockFunctionCalled();\n\n    uint256[] private _array;\n\n    function mockFunction() public payable returns (string memory) {\n        emit MockFunctionCalled();\n\n        return \"0x1234\";\n    }\n\n    function mockFunctionNonPayable() public returns (string memory) {\n        emit MockFunctionCalled();\n\n        return \"0x1234\";\n    }\n\n    function mockFunctionRevertsNoReason() public payable {\n        revert();\n    }\n\n    function mockFunctionRevertsReason() public payable {\n        revert(\"CallReceiverMock: reverting\");\n    }\n\n    function mockFunctionThrows() public payable {\n        assert(false);\n    }\n\n    function mockFunctionOutOfGas() public payable {\n        for (uint256 i = 0; ; ++i) {\n            _array.push(i);\n        }\n    }\n}\n"}, "mocks/ERC165/ERC165NotSupported.sol": {"checksum": {"algorithm": "md5", "hash": "4bc0654a2644d01db7f3ebf5ed7ef785"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\ncontract ERC165NotSupported { }\n"}, "token/ERC777/IERC777Recipient.sol": {"checksum": {"algorithm": "md5", "hash": "a42fd413c2f338128a3e3ef6eaf9ccab"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n *\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\n * contract implement this interface (contract holders can be their own\n * implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Recipient {\n    /**\n     * @dev Called by an {IERC777} token contract whenever tokens are being\n     * moved or created into a registered account (`to`). The type of operation\n     * is conveyed by `from` being the zero address or not.\n     *\n     * This call occurs _after_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"}, "mocks/SignedSafeMathMock.sol": {"checksum": {"algorithm": "md5", "hash": "6770a09edc0656885d0798f9f8278366"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../math/SignedSafeMath.sol\";\n\ncontract SignedSafeMathMock {\n    function mul(int256 a, int256 b) public pure returns (int256) {\n        return SignedSafeMath.mul(a, b);\n    }\n\n    function div(int256 a, int256 b) public pure returns (int256) {\n        return SignedSafeMath.div(a, b);\n    }\n\n    function sub(int256 a, int256 b) public pure returns (int256) {\n        return SignedSafeMath.sub(a, b);\n    }\n\n    function add(int256 a, int256 b) public pure returns (int256) {\n        return SignedSafeMath.add(a, b);\n    }\n}\n"}, "token/ERC721/ERC721Burnable.sol": {"checksum": {"algorithm": "md5", "hash": "0994460d332fcb71bac0394eef366204"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./ERC721.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n}\n"}, "mocks/ContextMock.sol": {"checksum": {"algorithm": "md5", "hash": "04cf2951293c617b1f9df4737909381f"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\n\ncontract ContextMock is Context {\n    event Sender(address sender);\n\n    function msgSender() public {\n        emit Sender(_msgSender());\n    }\n\n    event Data(bytes data, uint256 integerValue, string stringValue);\n\n    function msgData(uint256 integerValue, string memory stringValue) public {\n        emit Data(_msgData(), integerValue, stringValue);\n    }\n}\n\ncontract ContextMockCaller {\n    function callSender(ContextMock context) public {\n        context.msgSender();\n    }\n\n    function callData(ContextMock context, uint256 integerValue, string memory stringValue) public {\n        context.msgData(integerValue, stringValue);\n    }\n}\n"}, "token/ERC20/ERC20Pausable.sol": {"checksum": {"algorithm": "md5", "hash": "26e130d2743a47f3142a1666457672f6"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./ERC20.sol\";\nimport \"../../utils/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"}, "mocks/ERC20SnapshotMock.sol": {"checksum": {"algorithm": "md5", "hash": "8718d04ab852e932fd01798a18c3753a"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../token/ERC20/ERC20Snapshot.sol\";\n\n\ncontract ERC20SnapshotMock is ERC20Snapshot {\n    constructor(\n        string memory name,\n        string memory symbol,\n        address initialAccount,\n        uint256 initialBalance\n    ) public ERC20(name, symbol) {\n        _mint(initialAccount, initialBalance);\n    }\n\n    function snapshot() public {\n        _snapshot();\n    }\n\n    function mint(address account, uint256 amount) public {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) public {\n        _burn(account, amount);\n    }\n}\n"}, "mocks/ERC1820ImplementerMock.sol": {"checksum": {"algorithm": "md5", "hash": "86dbb4b25547086a829db4678ffe62b0"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../introspection/ERC1820Implementer.sol\";\n\ncontract ERC1820ImplementerMock is ERC1820Implementer {\n    function registerInterfaceForAddress(bytes32 interfaceHash, address account) public {\n        _registerInterfaceForAddress(interfaceHash, account);\n    }\n}\n"}, "mocks/AddressImpl.sol": {"checksum": {"algorithm": "md5", "hash": "af8143e92bf02651235abf46ba46ba6e"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../utils/Address.sol\";\n\ncontract AddressImpl {\n    event CallReturnValue(string data);\n\n    function isContract(address account) external view returns (bool) {\n        return Address.isContract(account);\n    }\n\n    function sendValue(address payable receiver, uint256 amount) external {\n        Address.sendValue(receiver, amount);\n    }\n\n    function functionCall(address target, bytes calldata data) external {\n        bytes memory returnData = Address.functionCall(target, data);\n\n        emit CallReturnValue(abi.decode(returnData, (string)));\n    }\n\n    function functionCallWithValue(address target, bytes calldata data, uint256 value) external payable {\n        bytes memory returnData = Address.functionCallWithValue(target, data, value);\n\n        emit CallReturnValue(abi.decode(returnData, (string)));\n    }\n\n    // sendValue's tests require the contract to hold Ether\n    receive () external payable { }\n}\n"}, "presets/ERC1155PresetMinterPauser.sol": {"checksum": {"algorithm": "md5", "hash": "54d61f91fded9161db409d5b49a1cb06"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../access/AccessControl.sol\";\nimport \"../GSN/Context.sol\";\nimport \"../token/ERC1155/ERC1155.sol\";\nimport \"../token/ERC1155/ERC1155Burnable.sol\";\nimport \"../token/ERC1155/ERC1155Pausable.sol\";\n\n/**\n * @dev {ERC1155} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n */\ncontract ERC1155PresetMinterPauser is Context, AccessControl, ERC1155Burnable, ERC1155Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE`, and `PAUSER_ROLE` to the account that\n     * deploys the contract.\n     */\n    constructor(string memory uri) public ERC1155(uri) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\n     *\n     * See {ERC1155-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 id, uint256 amount, bytes memory data) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have minter role to mint\");\n\n        _mint(to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}.\n     */\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have minter role to mint\");\n\n        _mintBatch(to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC1155Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC1155Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        internal virtual override(ERC1155, ERC1155Pausable)\n    {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n    }\n}\n"}, "mocks/OwnableMock.sol": {"checksum": {"algorithm": "md5", "hash": "533267bcc8c8c138bd8e6c862bf33058"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../access/Ownable.sol\";\n\ncontract OwnableMock is Ownable { }\n"}, "mocks/AccessControlMock.sol": {"checksum": {"algorithm": "md5", "hash": "7c675861833b4f6c1f9dc42e8eb28310"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../access/AccessControl.sol\";\n\ncontract AccessControlMock is AccessControl {\n    constructor() public {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    function setRoleAdmin(bytes32 roleId, bytes32 adminRoleId) public {\n        _setRoleAdmin(roleId, adminRoleId);\n    }\n}\n"}, "mocks/ERC1155BurnableMock.sol": {"checksum": {"algorithm": "md5", "hash": "506a1bf54da5fdb51a72c4ac96c61a1f"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../token/ERC1155/ERC1155Burnable.sol\";\n\ncontract ERC1155BurnableMock is ERC1155Burnable {\n    constructor(string memory uri) public ERC1155(uri) { }\n\n    function mint(address to, uint256 id, uint256 value, bytes memory data) public {\n        _mint(to, id, value, data);\n    }\n}\n"}, "presets/ERC721PresetMinterPauserAutoId.sol": {"checksum": {"algorithm": "md5", "hash": "4ef1178f765249c74fd46b450de8e205"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../access/AccessControl.sol\";\nimport \"../GSN/Context.sol\";\nimport \"../utils/Counters.sol\";\nimport \"../token/ERC721/ERC721.sol\";\nimport \"../token/ERC721/ERC721Burnable.sol\";\nimport \"../token/ERC721/ERC721Pausable.sol\";\n\n/**\n * @dev {ERC721} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *  - token ID and URI autogeneration\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n */\ncontract ERC721PresetMinterPauserAutoId is Context, AccessControl, ERC721Burnable, ERC721Pausable {\n    using Counters for Counters.Counter;\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    Counters.Counter private _tokenIdTracker;\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\n     * See {ERC721-tokenURI}.\n     */\n    constructor(string memory name, string memory symbol, string memory baseURI) public ERC721(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n\n        _setBaseURI(baseURI);\n    }\n\n    /**\n     * @dev Creates a new token for `to`. Its token ID will be automatically\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\n     * URI autogenerated based on the base URI passed at construction.\n     *\n     * See {ERC721-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have minter role to mint\");\n\n        // We can just use balanceOf to create the new tokenId because tokens\n        // can be burned (destroyed), so we need a separate counter.\n        _mint(to, _tokenIdTracker.current());\n        _tokenIdTracker.increment();\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721, ERC721Pausable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n}\n"}, "token/ERC1155/IERC1155.sol": {"checksum": {"algorithm": "md5", "hash": "f0886999d880b8d51def26232c4156a8"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transfered from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n"}, "mocks/ERC721Mock.sol": {"checksum": {"algorithm": "md5", "hash": "05d26627682494e4ab956ffdaf9fcb36"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../token/ERC721/ERC721.sol\";\n\n/**\n * @title ERC721Mock\n * This mock just provides a public safeMint, mint, and burn functions for testing purposes\n */\ncontract ERC721Mock is ERC721 {\n    constructor (string memory name, string memory symbol) public ERC721(name, symbol) { }\n\n    function exists(uint256 tokenId) public view returns (bool) {\n        return _exists(tokenId);\n    }\n\n    function setTokenURI(uint256 tokenId, string memory uri) public {\n        _setTokenURI(tokenId, uri);\n    }\n\n    function setBaseURI(string memory baseURI) public {\n        _setBaseURI(baseURI);\n    }\n\n    function mint(address to, uint256 tokenId) public {\n        _mint(to, tokenId);\n    }\n\n    function safeMint(address to, uint256 tokenId) public {\n        _safeMint(to, tokenId);\n    }\n\n    function safeMint(address to, uint256 tokenId, bytes memory _data) public {\n        _safeMint(to, tokenId, _data);\n    }\n\n    function burn(uint256 tokenId) public {\n        _burn(tokenId);\n    }\n}\n"}, "token/ERC20/ERC20Burnable.sol": {"checksum": {"algorithm": "md5", "hash": "e7d9974ca7596843e7515c1b27a2d0a8"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }\n}\n"}, "GSN/IRelayHub.sol": {"checksum": {"algorithm": "md5", "hash": "013284dab88792d544470bdc2eaea7f3"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface for `RelayHub`, the core contract of the GSN. Users should not need to interact with this contract\n * directly.\n *\n * See the https://github.com/OpenZeppelin/openzeppelin-gsn-helpers[OpenZeppelin GSN helpers] for more information on\n * how to deploy an instance of `RelayHub` on your local test network.\n */\ninterface IRelayHub {\n    // Relay management\n\n    /**\n     * @dev Adds stake to a relay and sets its `unstakeDelay`. If the relay does not exist, it is created, and the caller\n     * of this function becomes its owner. If the relay already exists, only the owner can call this function. A relay\n     * cannot be its own owner.\n     *\n     * All Ether in this function call will be added to the relay's stake.\n     * Its unstake delay will be assigned to `unstakeDelay`, but the new value must be greater or equal to the current one.\n     *\n     * Emits a {Staked} event.\n     */\n    function stake(address relayaddr, uint256 unstakeDelay) external payable;\n\n    /**\n     * @dev Emitted when a relay's stake or unstakeDelay are increased\n     */\n    event Staked(address indexed relay, uint256 stake, uint256 unstakeDelay);\n\n    /**\n     * @dev Registers the caller as a relay.\n     * The relay must be staked for, and not be a contract (i.e. this function must be called directly from an EOA).\n     *\n     * This function can be called multiple times, emitting new {RelayAdded} events. Note that the received\n     * `transactionFee` is not enforced by {relayCall}.\n     *\n     * Emits a {RelayAdded} event.\n     */\n    function registerRelay(uint256 transactionFee, string calldata url) external;\n\n    /**\n     * @dev Emitted when a relay is registered or re-registerd. Looking at these events (and filtering out\n     * {RelayRemoved} events) lets a client discover the list of available relays.\n     */\n    event RelayAdded(address indexed relay, address indexed owner, uint256 transactionFee, uint256 stake, uint256 unstakeDelay, string url);\n\n    /**\n     * @dev Removes (deregisters) a relay. Unregistered (but staked for) relays can also be removed.\n     *\n     * Can only be called by the owner of the relay. After the relay's `unstakeDelay` has elapsed, {unstake} will be\n     * callable.\n     *\n     * Emits a {RelayRemoved} event.\n     */\n    function removeRelayByOwner(address relay) external;\n\n    /**\n     * @dev Emitted when a relay is removed (deregistered). `unstakeTime` is the time when unstake will be callable.\n     */\n    event RelayRemoved(address indexed relay, uint256 unstakeTime);\n\n    /** Deletes the relay from the system, and gives back its stake to the owner.\n     *\n     * Can only be called by the relay owner, after `unstakeDelay` has elapsed since {removeRelayByOwner} was called.\n     *\n     * Emits an {Unstaked} event.\n     */\n    function unstake(address relay) external;\n\n    /**\n     * @dev Emitted when a relay is unstaked for, including the returned stake.\n     */\n    event Unstaked(address indexed relay, uint256 stake);\n\n    // States a relay can be in\n    enum RelayState {\n        Unknown, // The relay is unknown to the system: it has never been staked for\n        Staked, // The relay has been staked for, but it is not yet active\n        Registered, // The relay has registered itself, and is active (can relay calls)\n        Removed    // The relay has been removed by its owner and can no longer relay calls. It must wait for its unstakeDelay to elapse before it can unstake\n    }\n\n    /**\n     * @dev Returns a relay's status. Note that relays can be deleted when unstaked or penalized, causing this function\n     * to return an empty entry.\n     */\n    function getRelay(address relay) external view returns (uint256 totalStake, uint256 unstakeDelay, uint256 unstakeTime, address payable owner, RelayState state);\n\n    // Balance management\n\n    /**\n     * @dev Deposits Ether for a contract, so that it can receive (and pay for) relayed transactions.\n     *\n     * Unused balance can only be withdrawn by the contract itself, by calling {withdraw}.\n     *\n     * Emits a {Deposited} event.\n     */\n    function depositFor(address target) external payable;\n\n    /**\n     * @dev Emitted when {depositFor} is called, including the amount and account that was funded.\n     */\n    event Deposited(address indexed recipient, address indexed from, uint256 amount);\n\n    /**\n     * @dev Returns an account's deposits. These can be either a contracts's funds, or a relay owner's revenue.\n     */\n    function balanceOf(address target) external view returns (uint256);\n\n    /**\n     * Withdraws from an account's balance, sending it back to it. Relay owners call this to retrieve their revenue, and\n     * contracts can use it to reduce their funding.\n     *\n     * Emits a {Withdrawn} event.\n     */\n    function withdraw(uint256 amount, address payable dest) external;\n\n    /**\n     * @dev Emitted when an account withdraws funds from `RelayHub`.\n     */\n    event Withdrawn(address indexed account, address indexed dest, uint256 amount);\n\n    // Relaying\n\n    /**\n     * @dev Checks if the `RelayHub` will accept a relayed operation.\n     * Multiple things must be true for this to happen:\n     *  - all arguments must be signed for by the sender (`from`)\n     *  - the sender's nonce must be the current one\n     *  - the recipient must accept this transaction (via {acceptRelayedCall})\n     *\n     * Returns a `PreconditionCheck` value (`OK` when the transaction can be relayed), or a recipient-specific error\n     * code if it returns one in {acceptRelayedCall}.\n     */\n    function canRelay(\n        address relay,\n        address from,\n        address to,\n        bytes calldata encodedFunction,\n        uint256 transactionFee,\n        uint256 gasPrice,\n        uint256 gasLimit,\n        uint256 nonce,\n        bytes calldata signature,\n        bytes calldata approvalData\n    ) external view returns (uint256 status, bytes memory recipientContext);\n\n    // Preconditions for relaying, checked by canRelay and returned as the corresponding numeric values.\n    enum PreconditionCheck {\n        OK,                         // All checks passed, the call can be relayed\n        WrongSignature,             // The transaction to relay is not signed by requested sender\n        WrongNonce,                 // The provided nonce has already been used by the sender\n        AcceptRelayedCallReverted,  // The recipient rejected this call via acceptRelayedCall\n        InvalidRecipientStatusCode  // The recipient returned an invalid (reserved) status code\n    }\n\n    /**\n     * @dev Relays a transaction.\n     *\n     * For this to succeed, multiple conditions must be met:\n     *  - {canRelay} must `return PreconditionCheck.OK`\n     *  - the sender must be a registered relay\n     *  - the transaction's gas price must be larger or equal to the one that was requested by the sender\n     *  - the transaction must have enough gas to not run out of gas if all internal transactions (calls to the\n     * recipient) use all gas available to them\n     *  - the recipient must have enough balance to pay the relay for the worst-case scenario (i.e. when all gas is\n     * spent)\n     *\n     * If all conditions are met, the call will be relayed and the recipient charged. {preRelayedCall}, the encoded\n     * function and {postRelayedCall} will be called in that order.\n     *\n     * Parameters:\n     *  - `from`: the client originating the request\n     *  - `to`: the target {IRelayRecipient} contract\n     *  - `encodedFunction`: the function call to relay, including data\n     *  - `transactionFee`: fee (%) the relay takes over actual gas cost\n     *  - `gasPrice`: gas price the client is willing to pay\n     *  - `gasLimit`: gas to forward when calling the encoded function\n     *  - `nonce`: client's nonce\n     *  - `signature`: client's signature over all previous params, plus the relay and RelayHub addresses\n     *  - `approvalData`: dapp-specific data forwared to {acceptRelayedCall}. This value is *not* verified by the\n     * `RelayHub`, but it still can be used for e.g. a signature.\n     *\n     * Emits a {TransactionRelayed} event.\n     */\n    function relayCall(\n        address from,\n        address to,\n        bytes calldata encodedFunction,\n        uint256 transactionFee,\n        uint256 gasPrice,\n        uint256 gasLimit,\n        uint256 nonce,\n        bytes calldata signature,\n        bytes calldata approvalData\n    ) external;\n\n    /**\n     * @dev Emitted when an attempt to relay a call failed.\n     *\n     * This can happen due to incorrect {relayCall} arguments, or the recipient not accepting the relayed call. The\n     * actual relayed call was not executed, and the recipient not charged.\n     *\n     * The `reason` parameter contains an error code: values 1-10 correspond to `PreconditionCheck` entries, and values\n     * over 10 are custom recipient error codes returned from {acceptRelayedCall}.\n     */\n    event CanRelayFailed(address indexed relay, address indexed from, address indexed to, bytes4 selector, uint256 reason);\n\n    /**\n     * @dev Emitted when a transaction is relayed.\n     * Useful when monitoring a relay's operation and relayed calls to a contract\n     *\n     * Note that the actual encoded function might be reverted: this is indicated in the `status` parameter.\n     *\n     * `charge` is the Ether value deducted from the recipient's balance, paid to the relay's owner.\n     */\n    event TransactionRelayed(address indexed relay, address indexed from, address indexed to, bytes4 selector, RelayCallStatus status, uint256 charge);\n\n    // Reason error codes for the TransactionRelayed event\n    enum RelayCallStatus {\n        OK,                      // The transaction was successfully relayed and execution successful - never included in the event\n        RelayedCallFailed,       // The transaction was relayed, but the relayed call failed\n        PreRelayedFailed,        // The transaction was not relayed due to preRelatedCall reverting\n        PostRelayedFailed,       // The transaction was relayed and reverted due to postRelatedCall reverting\n        RecipientBalanceChanged  // The transaction was relayed and reverted due to the recipient's balance changing\n    }\n\n    /**\n     * @dev Returns how much gas should be forwarded to a call to {relayCall}, in order to relay a transaction that will\n     * spend up to `relayedCallStipend` gas.\n     */\n    function requiredGas(uint256 relayedCallStipend) external view returns (uint256);\n\n    /**\n     * @dev Returns the maximum recipient charge, given the amount of gas forwarded, gas price and relay fee.\n     */\n    function maxPossibleCharge(uint256 relayedCallStipend, uint256 gasPrice, uint256 transactionFee) external view returns (uint256);\n\n     // Relay penalization.\n     // Any account can penalize relays, removing them from the system immediately, and rewarding the\n    // reporter with half of the relay's stake. The other half is burned so that, even if the relay penalizes itself, it\n    // still loses half of its stake.\n\n    /**\n     * @dev Penalize a relay that signed two transactions using the same nonce (making only the first one valid) and\n     * different data (gas price, gas limit, etc. may be different).\n     *\n     * The (unsigned) transaction data and signature for both transactions must be provided.\n     */\n    function penalizeRepeatedNonce(bytes calldata unsignedTx1, bytes calldata signature1, bytes calldata unsignedTx2, bytes calldata signature2) external;\n\n    /**\n     * @dev Penalize a relay that sent a transaction that didn't target ``RelayHub``'s {registerRelay} or {relayCall}.\n     */\n    function penalizeIllegalTransaction(bytes calldata unsignedTx, bytes calldata signature) external;\n\n    /**\n     * @dev Emitted when a relay is penalized.\n     */\n    event Penalized(address indexed relay, address sender, uint256 amount);\n\n    /**\n     * @dev Returns an account's nonce in `RelayHub`.\n     */\n    function getNonce(address from) external view returns (uint256);\n}\n\n"}, "payment/PaymentSplitter.sol": {"checksum": {"algorithm": "md5", "hash": "d131da7471a0653d388cf310221b2b62"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\nimport \"../math/SafeMath.sol\";\n\n/**\n * @title PaymentSplitter\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\n * that the Ether will be split in this way, since it is handled transparently by the contract.\n *\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\n * an amount proportional to the percentage of total shares they were assigned.\n *\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\n * function.\n */\ncontract PaymentSplitter is Context {\n    using SafeMath for uint256;\n\n    event PayeeAdded(address account, uint256 shares);\n    event PaymentReleased(address to, uint256 amount);\n    event PaymentReceived(address from, uint256 amount);\n\n    uint256 private _totalShares;\n    uint256 private _totalReleased;\n\n    mapping(address => uint256) private _shares;\n    mapping(address => uint256) private _released;\n    address[] private _payees;\n\n    /**\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\n     * the matching position in the `shares` array.\n     *\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\n     * duplicates in `payees`.\n     */\n    constructor (address[] memory payees, uint256[] memory shares) public payable {\n        // solhint-disable-next-line max-line-length\n        require(payees.length == shares.length, \"PaymentSplitter: payees and shares length mismatch\");\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], shares[i]);\n        }\n    }\n\n    /**\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\n     * reliability of the events, and not the actual splitting of Ether.\n     *\n     * To learn more about this see the Solidity documentation for\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\n     * functions].\n     */\n    receive () external payable virtual {\n        emit PaymentReceived(_msgSender(), msg.value);\n    }\n\n    /**\n     * @dev Getter for the total shares held by payees.\n     */\n    function totalShares() public view returns (uint256) {\n        return _totalShares;\n    }\n\n    /**\n     * @dev Getter for the total amount of Ether already released.\n     */\n    function totalReleased() public view returns (uint256) {\n        return _totalReleased;\n    }\n\n    /**\n     * @dev Getter for the amount of shares held by an account.\n     */\n    function shares(address account) public view returns (uint256) {\n        return _shares[account];\n    }\n\n    /**\n     * @dev Getter for the amount of Ether already released to a payee.\n     */\n    function released(address account) public view returns (uint256) {\n        return _released[account];\n    }\n\n    /**\n     * @dev Getter for the address of the payee number `index`.\n     */\n    function payee(uint256 index) public view returns (address) {\n        return _payees[index];\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\n     * total shares and their previous withdrawals.\n     */\n    function release(address payable account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 totalReceived = address(this).balance.add(_totalReleased);\n        uint256 payment = totalReceived.mul(_shares[account]).div(_totalShares).sub(_released[account]);\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        _released[account] = _released[account].add(payment);\n        _totalReleased = _totalReleased.add(payment);\n\n        account.transfer(payment);\n        emit PaymentReleased(account, payment);\n    }\n\n    /**\n     * @dev Add a new payee to the contract.\n     * @param account The address of the payee to add.\n     * @param shares_ The number of shares owned by the payee.\n     */\n    function _addPayee(address account, uint256 shares_) private {\n        require(account != address(0), \"PaymentSplitter: account is the zero address\");\n        require(shares_ > 0, \"PaymentSplitter: shares are 0\");\n        require(_shares[account] == 0, \"PaymentSplitter: account already has shares\");\n\n        _payees.push(account);\n        _shares[account] = shares_;\n        _totalShares = _totalShares.add(shares_);\n        emit PayeeAdded(account, shares_);\n    }\n}\n"}, "token/ERC1155/ERC1155Pausable.sol": {"checksum": {"algorithm": "md5", "hash": "1bbfd8a9cf81ff8d9fdc7d6090d30188"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./ERC1155.sol\";\nimport \"../../utils/Pausable.sol\";\n\n/**\n * @dev ERC1155 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155Pausable is ERC1155, Pausable {\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        internal virtual override\n    {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        require(!paused(), \"ERC1155Pausable: token transfer while paused\");\n    }\n}\n"}, "payment/escrow/Escrow.sol": {"checksum": {"algorithm": "md5", "hash": "84ed05c521e6a76a91f65f6b72038ef5"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../../math/SafeMath.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n /**\n  * @title Escrow\n  * @dev Base escrow contract, holds funds designated for a payee until they\n  * withdraw them.\n  *\n  * Intended usage: This contract (and derived escrow contracts) should be a\n  * standalone contract, that only interacts with the contract that instantiated\n  * it. That way, it is guaranteed that all Ether will be handled according to\n  * the `Escrow` rules, and there is no need to check for payable functions or\n  * transfers in the inheritance tree. The contract that uses the escrow as its\n  * payment method should be its owner, and provide public methods redirecting\n  * to the escrow's deposit and withdraw.\n  */\ncontract Escrow is Ownable {\n    using SafeMath for uint256;\n    using Address for address payable;\n\n    event Deposited(address indexed payee, uint256 weiAmount);\n    event Withdrawn(address indexed payee, uint256 weiAmount);\n\n    mapping(address => uint256) private _deposits;\n\n    function depositsOf(address payee) public view returns (uint256) {\n        return _deposits[payee];\n    }\n\n    /**\n     * @dev Stores the sent amount as credit to be withdrawn.\n     * @param payee The destination address of the funds.\n     */\n    function deposit(address payee) public virtual payable onlyOwner {\n        uint256 amount = msg.value;\n        _deposits[payee] = _deposits[payee].add(amount);\n\n        emit Deposited(payee, amount);\n    }\n\n    /**\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\n     * recipient.\n     *\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n     * Make sure you trust the recipient, or are either following the\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n     *\n     * @param payee The address whose funds will be withdrawn and transferred to.\n     */\n    function withdraw(address payable payee) public virtual onlyOwner {\n        uint256 payment = _deposits[payee];\n\n        _deposits[payee] = 0;\n\n        payee.sendValue(payment);\n\n        emit Withdrawn(payee, payment);\n    }\n}\n"}, "mocks/ERC165CheckerMock.sol": {"checksum": {"algorithm": "md5", "hash": "6d638f2c072109194fef80edcebf3433"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../introspection/ERC165Checker.sol\";\n\ncontract ERC165CheckerMock {\n    using ERC165Checker for address;\n\n    function supportsERC165(address account) public view returns (bool) {\n        return account.supportsERC165();\n    }\n\n    function supportsInterface(address account, bytes4 interfaceId) public view returns (bool) {\n        return account.supportsInterface(interfaceId);\n    }\n\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) public view returns (bool) {\n        return account.supportsAllInterfaces(interfaceIds);\n    }\n}\n"}, "token/ERC20/ERC20Capped.sol": {"checksum": {"algorithm": "md5", "hash": "c5ca9c630f692b96b5a4f2cb5123f04e"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n */\nabstract contract ERC20Capped is ERC20 {\n    uint256 private _cap;\n\n    /**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    constructor (uint256 cap) public {\n        require(cap > 0, \"ERC20Capped: cap is 0\");\n        _cap = cap;\n    }\n\n    /**\n     * @dev Returns the cap on the token's total supply.\n     */\n    function cap() public view returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - minted tokens must not cause the total supply to go over the cap.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        if (from == address(0)) { // When minting tokens\n            require(totalSupply().add(amount) <= _cap, \"ERC20Capped: cap exceeded\");\n        }\n    }\n}\n"}, "token/ERC20/ERC20.sol": {"checksum": {"algorithm": "md5", "hash": "84e7212989184a404420e487dc9bf91d"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"}, "mocks/ERC165Mock.sol": {"checksum": {"algorithm": "md5", "hash": "008bd90d08ace18e095cf2a53cc8f927"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../introspection/ERC165.sol\";\n\ncontract ERC165Mock is ERC165 {\n    function registerInterface(bytes4 interfaceId) public {\n        _registerInterface(interfaceId);\n    }\n}\n"}, "GSN/Context.sol": {"checksum": {"algorithm": "md5", "hash": "af1b36323856d0d1550abc7f878a8208"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"}, "utils/ReentrancyGuard.sol": {"checksum": {"algorithm": "md5", "hash": "d7295fcfe1e67e8b5e0099bdba192e19"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"}, "mocks/SafeCastMock.sol": {"checksum": {"algorithm": "md5", "hash": "f54ca6f4637f9e27151dadb1288f73af"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../utils/SafeCast.sol\";\n\ncontract SafeCastMock {\n    using SafeCast for uint;\n    using SafeCast for int;\n\n    function toUint256(int a) public pure returns (uint256) {\n        return a.toUint256();\n    }\n\n    function toInt256(uint a) public pure returns (int256) {\n        return a.toInt256();\n    }\n\n    function toUint128(uint a) public pure returns (uint128) {\n        return a.toUint128();\n    }\n\n    function toUint64(uint a) public pure returns (uint64) {\n        return a.toUint64();\n    }\n\n    function toUint32(uint a) public pure returns (uint32) {\n        return a.toUint32();\n    }\n\n    function toUint16(uint a) public pure returns (uint16) {\n        return a.toUint16();\n    }\n\n    function toUint8(uint a) public pure returns (uint8) {\n        return a.toUint8();\n    }\n\n    function toInt128(int a) public pure returns (int128) {\n        return a.toInt128();\n    }\n\n    function toInt64(int a) public pure returns (int64) {\n        return a.toInt64();\n    }\n\n    function toInt32(int a) public pure returns (int32) {\n        return a.toInt32();\n    }\n\n    function toInt16(int a) public pure returns (int16) {\n        return a.toInt16();\n    }\n\n    function toInt8(int a) public pure returns (int8) {\n        return a.toInt8();\n    }\n}\n"}, "token/ERC20/ERC20Snapshot.sol": {"checksum": {"algorithm": "md5", "hash": "4ed72e1899c314a3c0359220dec7a18d"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Arrays.sol\";\nimport \"../../utils/Counters.sol\";\nimport \"./ERC20.sol\";\n\n/**\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\n * total supply at the time are recorded for later access.\n *\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\n * In naive implementations it's possible to perform a \"double spend\" attack by reusing the same balance from different\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\n * used to create an efficient ERC20 forking mechanism.\n *\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\n * and the account address.\n *\n * ==== Gas Costs\n *\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\n *\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\n * transfers will have normal cost until the next snapshot, and so on.\n */\nabstract contract ERC20Snapshot is ERC20 {\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\n    // https://github.com/Giveth/minimd/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\n\n    using SafeMath for uint256;\n    using Arrays for uint256[];\n    using Counters for Counters.Counter;\n\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\n    // Snapshot struct, but that would impede usage of functions that work on an array.\n    struct Snapshots {\n        uint256[] ids;\n        uint256[] values;\n    }\n\n    mapping (address => Snapshots) private _accountBalanceSnapshots;\n    Snapshots private _totalSupplySnapshots;\n\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\n    Counters.Counter private _currentSnapshotId;\n\n    /**\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\n     */\n    event Snapshot(uint256 id);\n\n    /**\n     * @dev Creates a new snapshot and returns its snapshot id.\n     *\n     * Emits a {Snapshot} event that contains the same id.\n     *\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\n     *\n     * [WARNING]\n     * ====\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\n     * you must consider that it can potentially be used by attackers in two ways.\n     *\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\n     * section above.\n     *\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\n     * ====\n     */\n    function _snapshot() internal virtual returns (uint256) {\n        _currentSnapshotId.increment();\n\n        uint256 currentId = _currentSnapshotId.current();\n        emit Snapshot(currentId);\n        return currentId;\n    }\n\n    /**\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\n     */\n    function balanceOfAt(address account, uint256 snapshotId) public view returns (uint256) {\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\n\n        return snapshotted ? value : balanceOf(account);\n    }\n\n    /**\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\n     */\n    function totalSupplyAt(uint256 snapshotId) public view returns(uint256) {\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\n\n        return snapshotted ? value : totalSupply();\n    }\n\n    // _transfer, _mint and _burn are the only functions where the balances are modified, so it is there that the\n    // snapshots are updated. Note that the update happens _before_ the balance change, with the pre-modified value.\n    // The same is true for the total supply and _mint and _burn.\n    function _transfer(address from, address to, uint256 value) internal virtual override {\n        _updateAccountSnapshot(from);\n        _updateAccountSnapshot(to);\n\n        super._transfer(from, to, value);\n    }\n\n    function _mint(address account, uint256 value) internal virtual override {\n        _updateAccountSnapshot(account);\n        _updateTotalSupplySnapshot();\n\n        super._mint(account, value);\n    }\n\n    function _burn(address account, uint256 value) internal virtual override {\n        _updateAccountSnapshot(account);\n        _updateTotalSupplySnapshot();\n\n        super._burn(account, value);\n    }\n\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots)\n        private view returns (bool, uint256)\n    {\n        require(snapshotId > 0, \"ERC20Snapshot: id is 0\");\n        // solhint-disable-next-line max-line-length\n        require(snapshotId <= _currentSnapshotId.current(), \"ERC20Snapshot: nonexistent id\");\n\n        // When a valid snapshot is queried, there are three possibilities:\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\n        //  to this id is the current one.\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\n        //  requested id, and its value is the one to return.\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\n        //  larger than the requested one.\n        //\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\n        // exactly this.\n\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\n\n        if (index == snapshots.ids.length) {\n            return (false, 0);\n        } else {\n            return (true, snapshots.values[index]);\n        }\n    }\n\n    function _updateAccountSnapshot(address account) private {\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\n    }\n\n    function _updateTotalSupplySnapshot() private {\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\n    }\n\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\n        uint256 currentId = _currentSnapshotId.current();\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\n            snapshots.ids.push(currentId);\n            snapshots.values.push(currentValue);\n        }\n    }\n\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\n        if (ids.length == 0) {\n            return 0;\n        } else {\n            return ids[ids.length - 1];\n        }\n    }\n}\n"}, "token/ERC777/IERC777.sol": {"checksum": {"algorithm": "md5", "hash": "267e797e1d112942f4b176d4f85c89df"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC777Token standard as defined in the EIP.\n *\n * This contract uses the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\n * token holders and recipients react to token movements by using setting implementers\n * for the associated interfaces in said registry. See {IERC1820Registry} and\n * {ERC1820Implementer}.\n */\ninterface IERC777 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     * means all token operations (creation, movement and destruction) must have\n     * amounts that are a multiple of this number.\n     *\n     * For most token contracts, this value will equal 1.\n     */\n    function granularity() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address owner) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * If send or receive hooks are registered for the caller and `recipient`,\n     * the corresponding functions will be called with `data` and empty\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(address recipient, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * Emits an {AuthorizedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external;\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * Emits a {RevokedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external;\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    event Sent(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData\n    );\n\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\n\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\n\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\n}\n"}, "mocks/ERC1155ReceiverMock.sol": {"checksum": {"algorithm": "md5", "hash": "5267440e11e7ba04f66511ed78e70ecc"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../token/ERC1155/IERC1155Receiver.sol\";\nimport \"./ERC165Mock.sol\";\n\ncontract ERC1155ReceiverMock is IERC1155Receiver, ERC165Mock {\n    bytes4 private _recRetval;\n    bool private _recReverts;\n    bytes4 private _batRetval;\n    bool private _batReverts;\n\n    event Received(address operator, address from, uint256 id, uint256 value, bytes data, uint256 gas);\n    event BatchReceived(address operator, address from, uint256[] ids, uint256[] values, bytes data, uint256 gas);\n\n    constructor (\n        bytes4 recRetval,\n        bool recReverts,\n        bytes4 batRetval,\n        bool batReverts\n    )\n        public\n    {\n        _recRetval = recRetval;\n        _recReverts = recReverts;\n        _batRetval = batRetval;\n        _batReverts = batReverts;\n    }\n\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external\n        override\n        returns(bytes4)\n    {\n        require(!_recReverts, \"ERC1155ReceiverMock: reverting on receive\");\n        emit Received(operator, from, id, value, data, gasleft());\n        return _recRetval;\n    }\n\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n        override\n        returns(bytes4)\n    {\n        require(!_batReverts, \"ERC1155ReceiverMock: reverting on batch receive\");\n        emit BatchReceived(operator, from, ids, values, data, gasleft());\n        return _batRetval;\n    }\n}\n"}, "mocks/ECDSAMock.sol": {"checksum": {"algorithm": "md5", "hash": "e403750fbf6df6491ee0ad2b5f1a6f5f"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../cryptography/ECDSA.sol\";\n\ncontract ECDSAMock {\n    using ECDSA for bytes32;\n\n    function recover(bytes32 hash, bytes memory signature) public pure returns (address) {\n        return hash.recover(signature);\n    }\n\n    function toEthSignedMessageHash(bytes32 hash) public pure returns (bytes32) {\n        return hash.toEthSignedMessageHash();\n    }\n}\n"}, "token/ERC1155/ERC1155.sol": {"checksum": {"algorithm": "md5", "hash": "9aea29fcb7f1fe67447e29a23da4f8b6"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155MetadataURI.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"../../GSN/Context.sol\";\nimport \"../../introspection/ERC165.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n *\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using SafeMath for uint256;\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping (uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substition, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\n     *\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\n     */\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\n\n    /*\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\n     */\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor (string memory uri) public {\n        _setURI(uri);\n\n        // register the supported interfaces to conform to ERC1155 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC1155);\n\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substituion mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) external view override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    )\n        public\n        view\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            require(accounts[i] != address(0), \"ERC1155: batch balance query for the zero address\");\n            batchBalances[i] = _balances[ids[i]][accounts[i]];\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    )\n        public\n        virtual\n        override\n    {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][from] = _balances[id][from].sub(amount, \"ERC1155: insufficient balance for transfer\");\n        _balances[id][to] = _balances[id][to].add(amount);\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        public\n        virtual\n        override\n    {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            _balances[id][from] = _balances[id][from].sub(\n                amount,\n                \"ERC1155: insufficient balance for transfer\"\n            );\n            _balances[id][to] = _balances[id][to].add(amount);\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substituion mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\n        require(account != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][account] = _balances[id][account].add(amount);\n        emit TransferSingle(operator, address(0), account, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `account`\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        _balances[id][account] = _balances[id][account].sub(\n            amount,\n            \"ERC1155: burn amount exceeds balance\"\n        );\n\n        emit TransferSingle(operator, account, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\n\n        for (uint i = 0; i < ids.length; i++) {\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\n                amounts[i],\n                \"ERC1155: burn amount exceeds balance\"\n            );\n        }\n\n        emit TransferBatch(operator, account, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        internal virtual\n    { }\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    )\n        private\n    {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        private\n    {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"}, "payment/escrow/RefundEscrow.sol": {"checksum": {"algorithm": "md5", "hash": "4c1f258f032d089e6009841a1cd2fdd8"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./ConditionalEscrow.sol\";\n\n/**\n * @title RefundEscrow\n * @dev Escrow that holds funds for a beneficiary, deposited from multiple\n * parties.\n * @dev Intended usage: See {Escrow}. Same usage guidelines apply here.\n * @dev The owner account (that is, the contract that instantiates this\n * contract) may deposit, close the deposit period, and allow for either\n * withdrawal by the beneficiary, or refunds to the depositors. All interactions\n * with `RefundEscrow` will be made through the owner contract.\n */\ncontract RefundEscrow is ConditionalEscrow {\n    enum State { Active, Refunding, Closed }\n\n    event RefundsClosed();\n    event RefundsEnabled();\n\n    State private _state;\n    address payable private _beneficiary;\n\n    /**\n     * @dev Constructor.\n     * @param beneficiary The beneficiary of the deposits.\n     */\n    constructor (address payable beneficiary) public {\n        require(beneficiary != address(0), \"RefundEscrow: beneficiary is the zero address\");\n        _beneficiary = beneficiary;\n        _state = State.Active;\n    }\n\n    /**\n     * @return The current state of the escrow.\n     */\n    function state() public view returns (State) {\n        return _state;\n    }\n\n    /**\n     * @return The beneficiary of the escrow.\n     */\n    function beneficiary() public view returns (address) {\n        return _beneficiary;\n    }\n\n    /**\n     * @dev Stores funds that may later be refunded.\n     * @param refundee The address funds will be sent to if a refund occurs.\n     */\n    function deposit(address refundee) public payable virtual override {\n        require(_state == State.Active, \"RefundEscrow: can only deposit while active\");\n        super.deposit(refundee);\n    }\n\n    /**\n     * @dev Allows for the beneficiary to withdraw their funds, rejecting\n     * further deposits.\n     */\n    function close() public onlyOwner virtual {\n        require(_state == State.Active, \"RefundEscrow: can only close while active\");\n        _state = State.Closed;\n        emit RefundsClosed();\n    }\n\n    /**\n     * @dev Allows for refunds to take place, rejecting further deposits.\n     */\n    function enableRefunds() public onlyOwner virtual {\n        require(_state == State.Active, \"RefundEscrow: can only enable refunds while active\");\n        _state = State.Refunding;\n        emit RefundsEnabled();\n    }\n\n    /**\n     * @dev Withdraws the beneficiary's funds.\n     */\n    function beneficiaryWithdraw() public virtual {\n        require(_state == State.Closed, \"RefundEscrow: beneficiary can only withdraw while closed\");\n        _beneficiary.transfer(address(this).balance);\n    }\n\n    /**\n     * @dev Returns whether refundees can withdraw their deposits (be refunded). The overridden function receives a\n     * 'payee' argument, but we ignore it here since the condition is global, not per-payee.\n     */\n    function withdrawalAllowed(address) public view override returns (bool) {\n        return _state == State.Refunding;\n    }\n}\n"}, "mocks/SafeERC20Helper.sol": {"checksum": {"algorithm": "md5", "hash": "7c9583d50152ad6b7b2dcf88fbec45b0"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\nimport \"../token/ERC20/IERC20.sol\";\nimport \"../token/ERC20/SafeERC20.sol\";\n\ncontract ERC20ReturnFalseMock is Context {\n    uint256 private _allowance;\n\n    // IERC20's functions are not pure, but these mock implementations are: to prevent Solidity from issuing warnings,\n    // we write to a dummy state variable.\n    uint256 private _dummy;\n\n    function transfer(address, uint256) public returns (bool) {\n        _dummy = 0;\n        return false;\n    }\n\n    function transferFrom(address, address, uint256) public returns (bool) {\n        _dummy = 0;\n        return false;\n    }\n\n    function approve(address, uint256) public returns (bool) {\n        _dummy = 0;\n        return false;\n    }\n\n    function allowance(address, address) public view returns (uint256) {\n        require(_dummy == 0); // Duummy read from a state variable so that the function is view\n        return 0;\n    }\n}\n\ncontract ERC20ReturnTrueMock is Context {\n    mapping (address => uint256) private _allowances;\n\n    // IERC20's functions are not pure, but these mock implementations are: to prevent Solidity from issuing warnings,\n    // we write to a dummy state variable.\n    uint256 private _dummy;\n\n    function transfer(address, uint256) public returns (bool) {\n        _dummy = 0;\n        return true;\n    }\n\n    function transferFrom(address, address, uint256) public returns (bool) {\n        _dummy = 0;\n        return true;\n    }\n\n    function approve(address, uint256) public returns (bool) {\n        _dummy = 0;\n        return true;\n    }\n\n    function setAllowance(uint256 allowance_) public {\n        _allowances[_msgSender()] = allowance_;\n    }\n\n    function allowance(address owner, address) public view returns (uint256) {\n        return _allowances[owner];\n    }\n}\n\ncontract ERC20NoReturnMock is Context {\n    mapping (address => uint256) private _allowances;\n\n    // IERC20's functions are not pure, but these mock implementations are: to prevent Solidity from issuing warnings,\n    // we write to a dummy state variable.\n    uint256 private _dummy;\n\n    function transfer(address, uint256) public {\n        _dummy = 0;\n    }\n\n    function transferFrom(address, address, uint256) public {\n        _dummy = 0;\n    }\n\n    function approve(address, uint256) public {\n        _dummy = 0;\n    }\n\n    function setAllowance(uint256 allowance_) public {\n        _allowances[_msgSender()] = allowance_;\n    }\n\n    function allowance(address owner, address) public view returns (uint256) {\n        return _allowances[owner];\n    }\n}\n\ncontract SafeERC20Wrapper is Context {\n    using SafeERC20 for IERC20;\n\n    IERC20 private _token;\n\n    constructor (IERC20 token) public {\n        _token = token;\n    }\n\n    function transfer() public {\n        _token.safeTransfer(address(0), 0);\n    }\n\n    function transferFrom() public {\n        _token.safeTransferFrom(address(0), address(0), 0);\n    }\n\n    function approve(uint256 amount) public {\n        _token.safeApprove(address(0), amount);\n    }\n\n    function increaseAllowance(uint256 amount) public {\n        _token.safeIncreaseAllowance(address(0), amount);\n    }\n\n    function decreaseAllowance(uint256 amount) public {\n        _token.safeDecreaseAllowance(address(0), amount);\n    }\n\n    function setAllowance(uint256 allowance_) public {\n        ERC20ReturnTrueMock(address(_token)).setAllowance(allowance_);\n    }\n\n    function allowance() public view returns (uint256) {\n        return _token.allowance(address(0), address(0));\n    }\n}\n"}, "access/Ownable.sol": {"checksum": {"algorithm": "md5", "hash": "140e80ebd07ed05e7fe907c531e6746f"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"}, "token/ERC1155/IERC1155Receiver.sol": {"checksum": {"algorithm": "md5", "hash": "837aa60d99e32635f3b72bd8eecd910c"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n}\n"}, "introspection/IERC165.sol": {"checksum": {"algorithm": "md5", "hash": "39dfa4b6cbda90995ba59378dd6d9969"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"}, "utils/SafeCast.sol": {"checksum": {"algorithm": "md5", "hash": "135c97adf8509d5a256174357b73d472"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"}, "mocks/ReentrancyMock.sol": {"checksum": {"algorithm": "md5", "hash": "14f0710668959bbac4f61f3af5e06d37"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../utils/ReentrancyGuard.sol\";\nimport \"./ReentrancyAttack.sol\";\n\ncontract ReentrancyMock is ReentrancyGuard {\n    uint256 public counter;\n\n    constructor () public {\n        counter = 0;\n    }\n\n    function callback() external nonReentrant {\n        _count();\n    }\n\n    function countLocalRecursive(uint256 n) public nonReentrant {\n        if (n > 0) {\n            _count();\n            countLocalRecursive(n - 1);\n        }\n    }\n\n    function countThisRecursive(uint256 n) public nonReentrant {\n        if (n > 0) {\n            _count();\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success,) = address(this).call(abi.encodeWithSignature(\"countThisRecursive(uint256)\", n - 1));\n            require(success, \"ReentrancyMock: failed call\");\n        }\n    }\n\n    function countAndCall(ReentrancyAttack attacker) public nonReentrant {\n        _count();\n        bytes4 func = bytes4(keccak256(\"callback()\"));\n        attacker.callSender(func);\n    }\n\n    function _count() private {\n        counter += 1;\n    }\n}\n"}, "token/ERC1155/IERC1155MetadataURI.sol": {"checksum": {"algorithm": "md5", "hash": "561146e5a317176f08a42178416506b3"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\nimport \"./IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"}, "utils/Create2.sol": {"checksum": {"algorithm": "md5", "hash": "d96ebca53b723fbb148bf43ec4921f4b"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\n        address addr;\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n        return addr;\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\n        bytes32 _data = keccak256(\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\n        );\n        return address(uint256(_data));\n    }\n}\n"}, "mocks/GSNRecipientSignatureMock.sol": {"checksum": {"algorithm": "md5", "hash": "ab7ac384a272a6009e0240461c64c09a"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../GSN/GSNRecipient.sol\";\nimport \"../GSN/GSNRecipientSignature.sol\";\n\ncontract GSNRecipientSignatureMock is GSNRecipient, GSNRecipientSignature {\n    constructor(address trustedSigner) public GSNRecipientSignature(trustedSigner) { }\n\n    event MockFunctionCalled();\n\n    function mockFunction() public {\n        emit MockFunctionCalled();\n    }\n}\n"}, "payment/PullPayment.sol": {"checksum": {"algorithm": "md5", "hash": "02fc7757e896691cbe8a659ff20ba69b"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\nimport \"./escrow/Escrow.sol\";\n\n/**\n * @dev Simple implementation of a\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\n * strategy, where the paying contract doesn't interact directly with the\n * receiver account, which must withdraw its payments itself.\n *\n * Pull-payments are often considered the best practice when it comes to sending\n * Ether, security-wise. It prevents recipients from blocking execution, and\n * eliminates reentrancy concerns.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n *\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\n * instead of Solidity's `transfer` function. Payees can query their due\n * payments with {payments}, and retrieve them with {withdrawPayments}.\n */\ncontract PullPayment {\n    Escrow private _escrow;\n\n    constructor () internal {\n        _escrow = new Escrow();\n    }\n\n    /**\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\n     *\n     * Note that _any_ account can call this function, not just the `payee`.\n     * This means that contracts unaware of the `PullPayment` protocol can still\n     * receive funds this way, by having a separate account call\n     * {withdrawPayments}.\n     *\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n     * Make sure you trust the recipient, or are either following the\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n     *\n     * @param payee Whose payments will be withdrawn.\n     */\n    function withdrawPayments(address payable payee) public virtual {\n        _escrow.withdraw(payee);\n    }\n\n    /**\n     * @dev Returns the payments owed to an address.\n     * @param dest The creditor's address.\n     */\n    function payments(address dest) public view returns (uint256) {\n        return _escrow.depositsOf(dest);\n    }\n\n    /**\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\n     * there is no danger of them being spent before withdrawal.\n     *\n     * @param dest The destination address of the funds.\n     * @param amount The amount to transfer.\n     */\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\n        _escrow.deposit{ value: amount }(dest);\n    }\n}\n"}, "token/ERC20/SafeERC20.sol": {"checksum": {"algorithm": "md5", "hash": "9ad439345c515e1367ef104675b36e7b"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"}, "mocks/CountersImpl.sol": {"checksum": {"algorithm": "md5", "hash": "2de69ca9cefd362d42d2d4f23aa266cd"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../utils/Counters.sol\";\n\ncontract CountersImpl {\n    using Counters for Counters.Counter;\n\n    Counters.Counter private _counter;\n\n    function current() public view returns (uint256) {\n        return _counter.current();\n    }\n\n    function increment() public {\n        _counter.increment();\n    }\n\n    function decrement() public {\n        _counter.decrement();\n    }\n}\n"}, "mocks/PausableMock.sol": {"checksum": {"algorithm": "md5", "hash": "779953a03ecdbd351d63c712885e03f2"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../utils/Pausable.sol\";\n\ncontract PausableMock is Pausable {\n    bool public drasticMeasureTaken;\n    uint256 public count;\n\n    constructor () public {\n        drasticMeasureTaken = false;\n        count = 0;\n    }\n\n    function normalProcess() external whenNotPaused {\n        count++;\n    }\n\n    function drasticMeasure() external whenPaused {\n        drasticMeasureTaken = true;\n    }\n\n    function pause() external {\n        _pause();\n    }\n\n    function unpause() external {\n        _unpause();\n    }\n}\n"}, "token/ERC721/IERC721Receiver.sol": {"checksum": {"algorithm": "md5", "hash": "2d2dcc9d59c7447cc1cfbc446137b700"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\n    external returns (bytes4);\n}\n"}, "payment/escrow/ConditionalEscrow.sol": {"checksum": {"algorithm": "md5", "hash": "fdc807bf6aee1b0e209ae865ad71e58e"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./Escrow.sol\";\n\n/**\n * @title ConditionalEscrow\n * @dev Base abstract escrow to only allow withdrawal if a condition is met.\n * @dev Intended usage: See {Escrow}. Same usage guidelines apply here.\n */\nabstract contract ConditionalEscrow is Escrow {\n    /**\n     * @dev Returns whether an address is allowed to withdraw their funds. To be\n     * implemented by derived contracts.\n     * @param payee The destination address of the funds.\n     */\n    function withdrawalAllowed(address payee) public view virtual returns (bool);\n\n    function withdraw(address payable payee) public virtual override {\n        require(withdrawalAllowed(payee), \"ConditionalEscrow: payee is not allowed to withdraw\");\n        super.withdraw(payee);\n    }\n}\n"}, "utils/Strings.sol": {"checksum": {"algorithm": "md5", "hash": "35959f8ce36e9188c1d9b4348e125e48"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = byte(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n}\n"}, "token/ERC1155/ERC1155Burnable.sol": {"checksum": {"algorithm": "md5", "hash": "86d8146585fb1c15692c605d76dc60a3"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./ERC1155.sol\";\n\n/**\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\n * own tokens and those that they have been approved to use.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155Burnable is ERC1155 {\n    function burn(address account, uint256 id, uint256 value) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }\n}\n"}, "cryptography/MerkleProof.sol": {"checksum": {"algorithm": "md5", "hash": "237702fa0499578679f19d86853fa55b"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev These functions deal with verification of Merkle trees (hash trees),\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        // Check if the computed hash (root) is equal to the provided root\n        return computedHash == root;\n    }\n}\n"}, "token/ERC721/ERC721Holder.sol": {"checksum": {"algorithm": "md5", "hash": "849153ba2eabc98b7d4b106fca42537f"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC721Receiver.sol\";\n\n  /**\n   * @dev Implementation of the {IERC721Receiver} interface.\n   *\n   * Accepts all token transfers. \n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n   */\ncontract ERC721Holder is IERC721Receiver {\n\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"}, "math/SafeMath.sol": {"checksum": {"algorithm": "md5", "hash": "168f50d923a8f64094d8e761ca2e5fe6"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"}, "mocks/ConditionalEscrowMock.sol": {"checksum": {"algorithm": "md5", "hash": "23b3667f652518d58c2e9ce14c0a5b87"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../payment/escrow/ConditionalEscrow.sol\";\n\n// mock class using ConditionalEscrow\ncontract ConditionalEscrowMock is ConditionalEscrow {\n    mapping(address => bool) private _allowed;\n\n    function setAllowed(address payee, bool allowed) public {\n        _allowed[payee] = allowed;\n    }\n\n    function withdrawalAllowed(address payee) public view override returns (bool) {\n        return _allowed[payee];\n    }\n}\n"}, "utils/Pausable.sol": {"checksum": {"algorithm": "md5", "hash": "60a059f8750f0a453332f9a06a2cc3e1"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\ncontract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"}, "token/ERC777/ERC777.sol": {"checksum": {"algorithm": "md5", "hash": "c61bce18c2237ddb534967dce79869a2"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC777.sol\";\nimport \"./IERC777Recipient.sol\";\nimport \"./IERC777Sender.sol\";\nimport \"../../token/ERC20/IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../introspection/IERC1820Registry.sol\";\n\n/**\n * @dev Implementation of the {IERC777} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * Support for ERC20 is included in this contract, as specified by the EIP: both\n * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\n * Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token\n * movements.\n *\n * Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there\n * are no special restrictions in the amount of tokens that created, moved, or\n * destroyed. This makes integration with ERC20 applications seamless.\n */\ncontract ERC777 is Context, IERC777, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    IERC1820Registry constant internal _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n    mapping(address => uint256) private _balances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    // We inline the result of the following hashes because Solidity doesn't resolve them at compile time.\n    // See https://github.com/ethereum/solidity/issues/4024.\n\n    // keccak256(\"ERC777TokensSender\")\n    bytes32 constant private _TOKENS_SENDER_INTERFACE_HASH =\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\n\n    // keccak256(\"ERC777TokensRecipient\")\n    bytes32 constant private _TOKENS_RECIPIENT_INTERFACE_HASH =\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\n\n    // This isn't ever read from - it's only used to respond to the defaultOperators query.\n    address[] private _defaultOperatorsArray;\n\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\n    mapping(address => bool) private _defaultOperators;\n\n    // For each account, a mapping of its operators and revoked default operators.\n    mapping(address => mapping(address => bool)) private _operators;\n    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\n\n    // ERC20-allowances\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    /**\n     * @dev `defaultOperators` may be an empty array.\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        address[] memory defaultOperators\n    ) public {\n        _name = name;\n        _symbol = symbol;\n\n        _defaultOperatorsArray = defaultOperators;\n        for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {\n            _defaultOperators[_defaultOperatorsArray[i]] = true;\n        }\n\n        // register interfaces\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"ERC777Token\"), address(this));\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"ERC20Token\"), address(this));\n    }\n\n    /**\n     * @dev See {IERC777-name}.\n     */\n    function name() public view override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC777-symbol}.\n     */\n    function symbol() public view override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {ERC20-decimals}.\n     *\n     * Always returns 18, as per the\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\n     */\n    function decimals() public pure returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC777-granularity}.\n     *\n     * This implementation always returns `1`.\n     */\n    function granularity() public view override returns (uint256) {\n        return 1;\n    }\n\n    /**\n     * @dev See {IERC777-totalSupply}.\n     */\n    function totalSupply() public view override(IERC20, IERC777) returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\n     */\n    function balanceOf(address tokenHolder) public view override(IERC20, IERC777) returns (uint256) {\n        return _balances[tokenHolder];\n    }\n\n    /**\n     * @dev See {IERC777-send}.\n     *\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\n     */\n    function send(address recipient, uint256 amount, bytes memory data) public override  {\n        _send(_msgSender(), recipient, amount, data, \"\", true);\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\n     * interface if it is a contract.\n     *\n     * Also emits a {Sent} event.\n     */\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n\n        address from = _msgSender();\n\n        _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n\n        _move(from, from, recipient, amount, \"\", \"\");\n\n        _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n\n        return true;\n    }\n\n    /**\n     * @dev See {IERC777-burn}.\n     *\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\n     */\n    function burn(uint256 amount, bytes memory data) public override  {\n        _burn(_msgSender(), amount, data, \"\");\n    }\n\n    /**\n     * @dev See {IERC777-isOperatorFor}.\n     */\n    function isOperatorFor(\n        address operator,\n        address tokenHolder\n    ) public view override returns (bool) {\n        return operator == tokenHolder ||\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n            _operators[tokenHolder][operator];\n    }\n\n    /**\n     * @dev See {IERC777-authorizeOperator}.\n     */\n    function authorizeOperator(address operator) public override  {\n        require(_msgSender() != operator, \"ERC777: authorizing self as operator\");\n\n        if (_defaultOperators[operator]) {\n            delete _revokedDefaultOperators[_msgSender()][operator];\n        } else {\n            _operators[_msgSender()][operator] = true;\n        }\n\n        emit AuthorizedOperator(operator, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC777-revokeOperator}.\n     */\n    function revokeOperator(address operator) public override  {\n        require(operator != _msgSender(), \"ERC777: revoking self as operator\");\n\n        if (_defaultOperators[operator]) {\n            _revokedDefaultOperators[_msgSender()][operator] = true;\n        } else {\n            delete _operators[_msgSender()][operator];\n        }\n\n        emit RevokedOperator(operator, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC777-defaultOperators}.\n     */\n    function defaultOperators() public view override returns (address[] memory) {\n        return _defaultOperatorsArray;\n    }\n\n    /**\n     * @dev See {IERC777-operatorSend}.\n     *\n     * Emits {Sent} and {IERC20-Transfer} events.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    )\n    public override\n    {\n        require(isOperatorFor(_msgSender(), sender), \"ERC777: caller is not an operator for holder\");\n        _send(sender, recipient, amount, data, operatorData, true);\n    }\n\n    /**\n     * @dev See {IERC777-operatorBurn}.\n     *\n     * Emits {Burned} and {IERC20-Transfer} events.\n     */\n    function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public override {\n        require(isOperatorFor(_msgSender(), account), \"ERC777: caller is not an operator for holder\");\n        _burn(account, amount, data, operatorData);\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     *\n     * Note that operator and allowance concepts are orthogonal: operators may\n     * not have allowance, and accounts with allowance may not be operators\n     * themselves.\n     */\n    function allowance(address holder, address spender) public view override returns (uint256) {\n        return _allowances[holder][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Note that accounts cannot have allowance issued by their operators.\n     */\n    function approve(address spender, uint256 value) public override returns (bool) {\n        address holder = _msgSender();\n        _approve(holder, spender, value);\n        return true;\n    }\n\n   /**\n    * @dev See {IERC20-transferFrom}.\n    *\n    * Note that operator and allowance concepts are orthogonal: operators cannot\n    * call `transferFrom` (unless they have allowance), and accounts with\n    * allowance cannot call `operatorSend` (unless they are operators).\n    *\n    * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\n    */\n    function transferFrom(address holder, address recipient, uint256 amount) public override returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n        require(holder != address(0), \"ERC777: transfer from the zero address\");\n\n        address spender = _msgSender();\n\n        _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n\n        _move(spender, holder, recipient, amount, \"\", \"\");\n        _approve(holder, spender, _allowances[holder][spender].sub(amount, \"ERC777: transfer amount exceeds allowance\"));\n\n        _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n\n        return true;\n    }\n\n    /**\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `operator`, `data` and `operatorData`.\n     *\n     * See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits {Minted} and {IERC20-Transfer} events.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function _mint(\n        address account,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n    internal virtual\n    {\n        require(account != address(0), \"ERC777: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), account, amount);\n\n        // Update state variables\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\n\n        emit Minted(operator, account, amount, userData, operatorData);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Send tokens\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n     */\n    function _send(\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        internal\n    {\n        require(from != address(0), \"ERC777: send from the zero address\");\n        require(to != address(0), \"ERC777: send to the zero address\");\n\n        address operator = _msgSender();\n\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\n\n        _move(operator, from, to, amount, userData, operatorData);\n\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n    }\n\n    /**\n     * @dev Burn tokens\n     * @param from address token holder address\n     * @param amount uint256 amount of tokens to burn\n     * @param data bytes extra information provided by the token holder\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function _burn(\n        address from,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    )\n        internal virtual\n    {\n        require(from != address(0), \"ERC777: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), amount);\n\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n\n        // Update state variables\n        _balances[from] = _balances[from].sub(amount, \"ERC777: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n\n        emit Burned(operator, from, amount, data, operatorData);\n        emit Transfer(from, address(0), amount);\n    }\n\n    function _move(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        _beforeTokenTransfer(operator, from, to, amount);\n\n        _balances[from] = _balances[from].sub(amount, \"ERC777: transfer amount exceeds balance\");\n        _balances[to] = _balances[to].add(amount);\n\n        emit Sent(operator, from, to, amount, userData, operatorData);\n        emit Transfer(from, to, amount);\n    }\n\n    /**\n     * @dev See {ERC20-_approve}.\n     *\n     * Note that accounts cannot have allowance issued by their operators.\n     */\n    function _approve(address holder, address spender, uint256 value) internal {\n        require(holder != address(0), \"ERC777: approve from the zero address\");\n        require(spender != address(0), \"ERC777: approve to the zero address\");\n\n        _allowances[holder][spender] = value;\n        emit Approval(holder, spender, value);\n    }\n\n    /**\n     * @dev Call from.tokensToSend() if the interface is registered\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function _callTokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n        }\n    }\n\n    /**\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\n     * tokensReceived() was not registered for the recipient\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n     */\n    function _callTokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n        } else if (requireReceptionAck) {\n            require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes\n     * calls to {send}, {transfer}, {operatorSend}, minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address operator, address from, address to, uint256 amount) internal virtual { }\n}\n"}, "introspection/IERC1820Registry.sol": {"checksum": {"algorithm": "md5", "hash": "e4007711675473a0131babb0645d04c7"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the global ERC1820 Registry, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\n * implementers for interfaces in this registry, as well as query support.\n *\n * Implementers may be shared by multiple accounts, and can also implement more\n * than a single interface for each account. Contracts can implement interfaces\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\n * contract.\n *\n * {IERC165} interfaces can also be queried via the registry.\n *\n * For an in-depth explanation and source code analysis, see the EIP text.\n */\ninterface IERC1820Registry {\n    /**\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\n     * account is able to set interface implementers for it.\n     *\n     * By default, each account is its own manager. Passing a value of `0x0` in\n     * `newManager` will reset the manager to this initial state.\n     *\n     * Emits a {ManagerChanged} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     */\n    function setManager(address account, address newManager) external;\n\n    /**\n     * @dev Returns the manager for `account`.\n     *\n     * See {setManager}.\n     */\n    function getManager(address account) external view returns (address);\n\n    /**\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\n     * `interfaceHash`.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     * The zero address can also be used in `implementer` to remove an old one.\n     *\n     * See {interfaceHash} to learn how these are created.\n     *\n     * Emits an {InterfaceImplementerSet} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n     * end in 28 zeroes).\n     * - `implementer` must implement {IERC1820Implementer} and return true when\n     * queried for support, unless `implementer` is the caller. See\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\n\n    /**\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n     * implementer is registered, returns the zero address.\n     *\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n     * zeroes), `account` will be queried for support of it.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     */\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\n\n    /**\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n     * corresponding\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\n     */\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n\n    /**\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n     *  @param account Address of the contract for which to update the cache.\n     *  @param interfaceId ERC165 interface for which to update the cache.\n     */\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\n\n    /**\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\n     *  If the result is not cached a direct lookup on the contract address is performed.\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n     *  {updateERC165Cache} with the contract address.\n     *  @param account Address of the contract to check.\n     *  @param interfaceId ERC165 interface to check.\n     *  @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n\n    /**\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n     *  @param account Address of the contract to check.\n     *  @param interfaceId ERC165 interface to check.\n     *  @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n\n    event ManagerChanged(address indexed account, address indexed newManager);\n}\n"}, "mocks/ERC20BurnableMock.sol": {"checksum": {"algorithm": "md5", "hash": "9a84ded6a93b4aa01a620f0dd7c481c4"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../token/ERC20/ERC20Burnable.sol\";\n\ncontract ERC20BurnableMock is ERC20Burnable {\n    constructor (\n        string memory name,\n        string memory symbol,\n        address initialAccount,\n        uint256 initialBalance\n    ) public ERC20(name, symbol) {\n        _mint(initialAccount, initialBalance);\n    }\n}\n"}, "introspection/ERC165Checker.sol": {"checksum": {"algorithm": "md5", "hash": "57e11c5bb86710b859c71220a4067e31"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) &&\n            _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        // success determines whether the staticcall succeeded and result determines\n        // whether the contract at account indicates support of _interfaceId\n        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\n\n        return (success && result);\n    }\n\n    /**\n     * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return success true if the STATICCALL succeeded, false otherwise\n     * @return result true if the STATICCALL succeeded and the contract at account\n     * indicates support of the interface with identifier interfaceId, false otherwise\n     */\n    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\n        private\n        view\n        returns (bool, bool)\n    {\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\n        (bool success, bytes memory result) = account.staticcall{ gas: 30000 }(encodedParams);\n        if (result.length < 32) return (false, false);\n        return (success, abi.decode(result, (bool)));\n    }\n}\n"}, "GSN/GSNRecipientSignature.sol": {"checksum": {"algorithm": "md5", "hash": "3acdb3d516c31f192c424618a6447f66"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./GSNRecipient.sol\";\nimport \"../cryptography/ECDSA.sol\";\n\n/**\n * @dev A xref:ROOT:gsn-strategies.adoc#gsn-strategies[GSN strategy] that allows relayed transactions through when they are\n * accompanied by the signature of a trusted signer. The intent is for this signature to be generated by a server that\n * performs validations off-chain. Note that nothing is charged to the user in this scheme. Thus, the server should make\n * sure to account for this in their economic and threat model.\n */\ncontract GSNRecipientSignature is GSNRecipient {\n    using ECDSA for bytes32;\n\n    address private _trustedSigner;\n\n    enum GSNRecipientSignatureErrorCodes {\n        INVALID_SIGNER\n    }\n\n    /**\n     * @dev Sets the trusted signer that is going to be producing signatures to approve relayed calls.\n     */\n    constructor(address trustedSigner) public {\n        require(trustedSigner != address(0), \"GSNRecipientSignature: trusted signer is the zero address\");\n        _trustedSigner = trustedSigner;\n    }\n\n    /**\n     * @dev Ensures that only transactions with a trusted signature can be relayed through the GSN.\n     */\n    function acceptRelayedCall(\n        address relay,\n        address from,\n        bytes memory encodedFunction,\n        uint256 transactionFee,\n        uint256 gasPrice,\n        uint256 gasLimit,\n        uint256 nonce,\n        bytes memory approvalData,\n        uint256\n    )\n        public\n        view\n        virtual\n        override\n        returns (uint256, bytes memory)\n    {\n        bytes memory blob = abi.encodePacked(\n            relay,\n            from,\n            encodedFunction,\n            transactionFee,\n            gasPrice,\n            gasLimit,\n            nonce, // Prevents replays on RelayHub\n            getHubAddr(), // Prevents replays in multiple RelayHubs\n            address(this) // Prevents replays in multiple recipients\n        );\n        if (keccak256(blob).toEthSignedMessageHash().recover(approvalData) == _trustedSigner) {\n            return _approveRelayedCall();\n        } else {\n            return _rejectRelayedCall(uint256(GSNRecipientSignatureErrorCodes.INVALID_SIGNER));\n        }\n    }\n\n    function _preRelayedCall(bytes memory) internal virtual override returns (bytes32) { }\n\n    function _postRelayedCall(bytes memory, bool, uint256, bytes32) internal virtual override { }\n}\n"}, "mocks/ArraysImpl.sol": {"checksum": {"algorithm": "md5", "hash": "18b24ed00de9c9df4c81a1295cc0e5d5"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../utils/Arrays.sol\";\n\ncontract ArraysImpl {\n    using Arrays for uint256[];\n\n    uint256[] private _array;\n\n    constructor (uint256[] memory array) public {\n        _array = array;\n    }\n\n    function findUpperBound(uint256 element) external view returns (uint256) {\n        return _array.findUpperBound(element);\n    }\n}\n"}, "token/ERC721/IERC721Enumerable.sol": {"checksum": {"algorithm": "md5", "hash": "e282e7d4aa6b40bfc9ee622b0f006ed5"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"}, "utils/EnumerableMap.sol": {"checksum": {"algorithm": "md5", "hash": "587bbaf85d8405a72ea86e19e796d18d"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\n * supported.\n */\nlibrary EnumerableMap {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct MapEntry {\n        bytes32 _key;\n        bytes32 _value;\n    }\n\n    struct Map {\n        // Storage of map keys and values\n        MapEntry[] _entries;\n\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\n            map._entries.push(MapEntry({ _key: key, _value: value }));\n            // The entry is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map._indexes[key] = map._entries.length;\n            return true;\n        } else {\n            map._entries[keyIndex - 1]._value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map._entries.length - 1;\n\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            MapEntry storage lastEntry = map._entries[lastIndex];\n\n            // Move the last entry to the index where the entry to delete is\n            map._entries[toDeleteIndex] = lastEntry;\n            // Update the index for the moved entry\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved entry was stored\n            map._entries.pop();\n\n            // Delete the index for the deleted slot\n            delete map._indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._entries.length;\n    }\n\n   /**\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n    *\n    * Note that there are no guarantees on the ordering of entries inside the\n    * array, and it may change when more entries are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\n\n        MapEntry storage entry = map._entries[index];\n        return (entry._key, entry._value);\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        return _get(map, key, \"EnumerableMap: nonexistent key\");\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     */\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n   /**\n    * @dev Returns the element stored at position `index` in the set. O(1).\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), address(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint256(_get(map._inner, bytes32(key))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\n    }\n}\n"}, "GSN/GSNRecipient.sol": {"checksum": {"algorithm": "md5", "hash": "2c32a9ee9227f2e7c27167a08fda08f4"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IRelayRecipient.sol\";\nimport \"./IRelayHub.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Base GSN recipient contract: includes the {IRelayRecipient} interface\n * and enables GSN support on all contracts in the inheritance tree.\n *\n * TIP: This contract is abstract. The functions {IRelayRecipient-acceptRelayedCall},\n *  {_preRelayedCall}, and {_postRelayedCall} are not implemented and must be\n * provided by derived contracts. See the\n * xref:ROOT:gsn-strategies.adoc#gsn-strategies[GSN strategies] for more\n * information on how to use the pre-built {GSNRecipientSignature} and\n * {GSNRecipientERC20Fee}, or how to write your own.\n */\nabstract contract GSNRecipient is IRelayRecipient, Context {\n    // Default RelayHub address, deployed on mainnet and all testnets at the same address\n    address private _relayHub = 0xD216153c06E857cD7f72665E0aF1d7D82172F494;\n\n    uint256 constant private _RELAYED_CALL_ACCEPTED = 0;\n    uint256 constant private _RELAYED_CALL_REJECTED = 11;\n\n    // How much gas is forwarded to postRelayedCall\n    uint256 constant internal _POST_RELAYED_CALL_MAX_GAS = 100000;\n\n    /**\n     * @dev Emitted when a contract changes its {IRelayHub} contract to a new one.\n     */\n    event RelayHubChanged(address indexed oldRelayHub, address indexed newRelayHub);\n\n    /**\n     * @dev Returns the address of the {IRelayHub} contract for this recipient.\n     */\n    function getHubAddr() public view override returns (address) {\n        return _relayHub;\n    }\n\n    /**\n     * @dev Switches to a new {IRelayHub} instance. This method is added for future-proofing: there's no reason to not\n     * use the default instance.\n     *\n     * IMPORTANT: After upgrading, the {GSNRecipient} will no longer be able to receive relayed calls from the old\n     * {IRelayHub} instance. Additionally, all funds should be previously withdrawn via {_withdrawDeposits}.\n     */\n    function _upgradeRelayHub(address newRelayHub) internal virtual {\n        address currentRelayHub = _relayHub;\n        require(newRelayHub != address(0), \"GSNRecipient: new RelayHub is the zero address\");\n        require(newRelayHub != currentRelayHub, \"GSNRecipient: new RelayHub is the current one\");\n\n        emit RelayHubChanged(currentRelayHub, newRelayHub);\n\n        _relayHub = newRelayHub;\n    }\n\n    /**\n     * @dev Returns the version string of the {IRelayHub} for which this recipient implementation was built. If\n     * {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.\n     */\n    // This function is view for future-proofing, it may require reading from\n    // storage in the future.\n    function relayHubVersion() public view returns (string memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return \"1.0.0\";\n    }\n\n    /**\n     * @dev Withdraws the recipient's deposits in `RelayHub`.\n     *\n     * Derived contracts should expose this in an external interface with proper access control.\n     */\n    function _withdrawDeposits(uint256 amount, address payable payee) internal virtual {\n        IRelayHub(_relayHub).withdraw(amount, payee);\n    }\n\n    // Overrides for Context's functions: when called from RelayHub, sender and\n    // data require some pre-processing: the actual sender is stored at the end\n    // of the call data, which in turns means it needs to be removed from it\n    // when handling said data.\n\n    /**\n     * @dev Replacement for msg.sender. Returns the actual sender of a transaction: msg.sender for regular transactions,\n     * and the end-user for GSN relayed calls (where msg.sender is actually `RelayHub`).\n     *\n     * IMPORTANT: Contracts derived from {GSNRecipient} should never use `msg.sender`, and use {_msgSender} instead.\n     */\n    function _msgSender() internal view virtual override returns (address payable) {\n        if (msg.sender != _relayHub) {\n            return msg.sender;\n        } else {\n            return _getRelayedCallSender();\n        }\n    }\n\n    /**\n     * @dev Replacement for msg.data. Returns the actual calldata of a transaction: msg.data for regular transactions,\n     * and a reduced version for GSN relayed calls (where msg.data contains additional information).\n     *\n     * IMPORTANT: Contracts derived from {GSNRecipient} should never use `msg.data`, and use {_msgData} instead.\n     */\n    function _msgData() internal view virtual override returns (bytes memory) {\n        if (msg.sender != _relayHub) {\n            return msg.data;\n        } else {\n            return _getRelayedCallData();\n        }\n    }\n\n    // Base implementations for pre and post relayedCall: only RelayHub can invoke them, and data is forwarded to the\n    // internal hook.\n\n    /**\n     * @dev See `IRelayRecipient.preRelayedCall`.\n     *\n     * This function should not be overriden directly, use `_preRelayedCall` instead.\n     *\n     * * Requirements:\n     *\n     * - the caller must be the `RelayHub` contract.\n     */\n    function preRelayedCall(bytes memory context) public virtual override returns (bytes32) {\n        require(msg.sender == getHubAddr(), \"GSNRecipient: caller is not RelayHub\");\n        return _preRelayedCall(context);\n    }\n\n    /**\n     * @dev See `IRelayRecipient.preRelayedCall`.\n     *\n     * Called by `GSNRecipient.preRelayedCall`, which asserts the caller is the `RelayHub` contract. Derived contracts\n     * must implement this function with any relayed-call preprocessing they may wish to do.\n     *\n     */\n    function _preRelayedCall(bytes memory context) internal virtual returns (bytes32);\n\n    /**\n     * @dev See `IRelayRecipient.postRelayedCall`.\n     *\n     * This function should not be overriden directly, use `_postRelayedCall` instead.\n     *\n     * * Requirements:\n     *\n     * - the caller must be the `RelayHub` contract.\n     */\n    function postRelayedCall(bytes memory context, bool success, uint256 actualCharge, bytes32 preRetVal) public virtual override {\n        require(msg.sender == getHubAddr(), \"GSNRecipient: caller is not RelayHub\");\n        _postRelayedCall(context, success, actualCharge, preRetVal);\n    }\n\n    /**\n     * @dev See `IRelayRecipient.postRelayedCall`.\n     *\n     * Called by `GSNRecipient.postRelayedCall`, which asserts the caller is the `RelayHub` contract. Derived contracts\n     * must implement this function with any relayed-call postprocessing they may wish to do.\n     *\n     */\n    function _postRelayedCall(bytes memory context, bool success, uint256 actualCharge, bytes32 preRetVal) internal virtual;\n\n    /**\n     * @dev Return this in acceptRelayedCall to proceed with the execution of a relayed call. Note that this contract\n     * will be charged a fee by RelayHub\n     */\n    function _approveRelayedCall() internal pure returns (uint256, bytes memory) {\n        return _approveRelayedCall(\"\");\n    }\n\n    /**\n     * @dev See `GSNRecipient._approveRelayedCall`.\n     *\n     * This overload forwards `context` to _preRelayedCall and _postRelayedCall.\n     */\n    function _approveRelayedCall(bytes memory context) internal pure returns (uint256, bytes memory) {\n        return (_RELAYED_CALL_ACCEPTED, context);\n    }\n\n    /**\n     * @dev Return this in acceptRelayedCall to impede execution of a relayed call. No fees will be charged.\n     */\n    function _rejectRelayedCall(uint256 errorCode) internal pure returns (uint256, bytes memory) {\n        return (_RELAYED_CALL_REJECTED + errorCode, \"\");\n    }\n\n    /*\n     * @dev Calculates how much RelayHub will charge a recipient for using `gas` at a `gasPrice`, given a relayer's\n     * `serviceFee`.\n     */\n    function _computeCharge(uint256 gas, uint256 gasPrice, uint256 serviceFee) internal pure returns (uint256) {\n        // The fee is expressed as a percentage. E.g. a value of 40 stands for a 40% fee, so the recipient will be\n        // charged for 1.4 times the spent amount.\n        return (gas * gasPrice * (100 + serviceFee)) / 100;\n    }\n\n    function _getRelayedCallSender() private pure returns (address payable result) {\n        // We need to read 20 bytes (an address) located at array index msg.data.length - 20. In memory, the array\n        // is prefixed with a 32-byte length value, so we first add 32 to get the memory read index. However, doing\n        // so would leave the address in the upper 20 bytes of the 32-byte word, which is inconvenient and would\n        // require bit shifting. We therefore subtract 12 from the read index so the address lands on the lower 20\n        // bytes. This can always be done due to the 32-byte prefix.\n\n        // The final memory read index is msg.data.length - 20 + 32 - 12 = msg.data.length. Using inline assembly is the\n        // easiest/most-efficient way to perform this operation.\n\n        // These fields are not accessible from assembly\n        bytes memory array = msg.data;\n        uint256 index = msg.data.length;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n            result := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    function _getRelayedCallData() private pure returns (bytes memory) {\n        // RelayHub appends the sender address at the end of the calldata, so in order to retrieve the actual msg.data,\n        // we must strip the last 20 bytes (length of an address type) from it.\n\n        uint256 actualDataLength = msg.data.length - 20;\n        bytes memory actualData = new bytes(actualDataLength);\n\n        for (uint256 i = 0; i < actualDataLength; ++i) {\n            actualData[i] = msg.data[i];\n        }\n\n        return actualData;\n    }\n}\n"}, "GSN/GSNRecipientERC20Fee.sol": {"checksum": {"algorithm": "md5", "hash": "e3089e31692de74f4adbbd00df4c673a"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./GSNRecipient.sol\";\nimport \"../math/SafeMath.sol\";\nimport \"../access/Ownable.sol\";\nimport \"../token/ERC20/SafeERC20.sol\";\nimport \"../token/ERC20/ERC20.sol\";\n\n/**\n * @dev A xref:ROOT:gsn-strategies.adoc#gsn-strategies[GSN strategy] that charges transaction fees in a special purpose ERC20\n * token, which we refer to as the gas payment token. The amount charged is exactly the amount of Ether charged to the\n * recipient. This means that the token is essentially pegged to the value of Ether.\n *\n * The distribution strategy of the gas payment token to users is not defined by this contract. It's a mintable token\n * whose only minter is the recipient, so the strategy must be implemented in a derived contract, making use of the\n * internal {_mint} function.\n */\ncontract GSNRecipientERC20Fee is GSNRecipient {\n    using SafeERC20 for __unstable__ERC20Owned;\n    using SafeMath for uint256;\n\n    enum GSNRecipientERC20FeeErrorCodes {\n        INSUFFICIENT_BALANCE\n    }\n\n    __unstable__ERC20Owned private _token;\n\n    /**\n     * @dev The arguments to the constructor are the details that the gas payment token will have: `name` and `symbol`. `decimals` is hard-coded to 18.\n     */\n    constructor(string memory name, string memory symbol) public {\n        _token = new __unstable__ERC20Owned(name, symbol);\n    }\n\n    /**\n     * @dev Returns the gas payment token.\n     */\n    function token() public view returns (IERC20) {\n        return IERC20(_token);\n    }\n\n    /**\n     * @dev Internal function that mints the gas payment token. Derived contracts should expose this function in their public API, with proper access control mechanisms.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        _token.mint(account, amount);\n    }\n\n    /**\n     * @dev Ensures that only users with enough gas payment token balance can have transactions relayed through the GSN.\n     */\n    function acceptRelayedCall(\n        address,\n        address from,\n        bytes memory,\n        uint256 transactionFee,\n        uint256 gasPrice,\n        uint256,\n        uint256,\n        bytes memory,\n        uint256 maxPossibleCharge\n    )\n        public\n        view\n        virtual\n        override\n        returns (uint256, bytes memory)\n    {\n        if (_token.balanceOf(from) < maxPossibleCharge) {\n            return _rejectRelayedCall(uint256(GSNRecipientERC20FeeErrorCodes.INSUFFICIENT_BALANCE));\n        }\n\n        return _approveRelayedCall(abi.encode(from, maxPossibleCharge, transactionFee, gasPrice));\n    }\n\n    /**\n     * @dev Implements the precharge to the user. The maximum possible charge (depending on gas limit, gas price, and\n     * fee) will be deducted from the user balance of gas payment token. Note that this is an overestimation of the\n     * actual charge, necessary because we cannot predict how much gas the execution will actually need. The remainder\n     * is returned to the user in {_postRelayedCall}.\n     */\n    function _preRelayedCall(bytes memory context) internal virtual override returns (bytes32) {\n        (address from, uint256 maxPossibleCharge) = abi.decode(context, (address, uint256));\n\n        // The maximum token charge is pre-charged from the user\n        _token.safeTransferFrom(from, address(this), maxPossibleCharge);\n    }\n\n    /**\n     * @dev Returns to the user the extra amount that was previously charged, once the actual execution cost is known.\n     */\n    function _postRelayedCall(bytes memory context, bool, uint256 actualCharge, bytes32) internal virtual override {\n        (address from, uint256 maxPossibleCharge, uint256 transactionFee, uint256 gasPrice) =\n            abi.decode(context, (address, uint256, uint256, uint256));\n\n        // actualCharge is an _estimated_ charge, which assumes postRelayedCall will use all available gas.\n        // This implementation's gas cost can be roughly estimated as 10k gas, for the two SSTORE operations in an\n        // ERC20 transfer.\n        uint256 overestimation = _computeCharge(_POST_RELAYED_CALL_MAX_GAS.sub(10000), gasPrice, transactionFee);\n        actualCharge = actualCharge.sub(overestimation);\n\n        // After the relayed call has been executed and the actual charge estimated, the excess pre-charge is returned\n        _token.safeTransfer(from, maxPossibleCharge.sub(actualCharge));\n    }\n}\n\n/**\n * @title __unstable__ERC20Owned\n * @dev An ERC20 token owned by another contract, which has minting permissions and can use transferFrom to receive\n * anyone's tokens. This contract is an internal helper for GSNRecipientERC20Fee, and should not be used\n * outside of this context.\n */\n// solhint-disable-next-line contract-name-camelcase\ncontract __unstable__ERC20Owned is ERC20, Ownable {\n    uint256 private constant _UINT256_MAX = 2**256 - 1;\n\n    constructor(string memory name, string memory symbol) public ERC20(name, symbol) { }\n\n    // The owner (GSNRecipientERC20Fee) can mint tokens\n    function mint(address account, uint256 amount) public onlyOwner {\n        _mint(account, amount);\n    }\n\n    // The owner has 'infinite' allowance for all token holders\n    function allowance(address tokenOwner, address spender) public view override returns (uint256) {\n        if (spender == owner()) {\n            return _UINT256_MAX;\n        } else {\n            return super.allowance(tokenOwner, spender);\n        }\n    }\n\n    // Allowance for the owner cannot be changed (it is always 'infinite')\n    function _approve(address tokenOwner, address spender, uint256 value) internal override {\n        if (spender == owner()) {\n            return;\n        } else {\n            super._approve(tokenOwner, spender, value);\n        }\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        if (recipient == owner()) {\n            _transfer(sender, recipient, amount);\n            return true;\n        } else {\n            return super.transferFrom(sender, recipient, amount);\n        }\n    }\n}\n"}, "mocks/MerkleProofWrapper.sol": {"checksum": {"algorithm": "md5", "hash": "cc1178674f68bc5747648335f14abc24"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport { MerkleProof } from \"../cryptography/MerkleProof.sol\";\n\ncontract MerkleProofWrapper {\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) public pure returns (bool) {\n        return MerkleProof.verify(proof, root, leaf);\n    }\n}\n"}, "mocks/PullPaymentMock.sol": {"checksum": {"algorithm": "md5", "hash": "83a0a817fbc6257afd0d9f592ef6358d"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../payment/PullPayment.sol\";\n\n// mock class using PullPayment\ncontract PullPaymentMock is PullPayment {\n    constructor () public payable { }\n\n    // test helper function to call asyncTransfer\n    function callTransfer(address dest, uint256 amount) public {\n        _asyncTransfer(dest, amount);\n    }\n}\n"}, "mocks/GSNRecipientERC20FeeMock.sol": {"checksum": {"algorithm": "md5", "hash": "cee02fe683f6fd1060bf4024cc9b1f4d"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../GSN/GSNRecipient.sol\";\nimport \"../GSN/GSNRecipientERC20Fee.sol\";\n\ncontract GSNRecipientERC20FeeMock is GSNRecipient, GSNRecipientERC20Fee {\n    constructor(string memory name, string memory symbol) public GSNRecipientERC20Fee(name, symbol) { }\n\n    function mint(address account, uint256 amount) public {\n        _mint(account, amount);\n    }\n\n    event MockFunctionCalled(uint256 senderBalance);\n\n    function mockFunction() public {\n        emit MockFunctionCalled(token().balanceOf(_msgSender()));\n    }\n}\n"}, "mocks/StringsMock.sol": {"checksum": {"algorithm": "md5", "hash": "d70adefe709b809be3f1c073dcb541ee"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../utils/Strings.sol\";\n\ncontract StringsMock {\n    function fromUint256(uint256 value) public pure returns (string memory) {\n        return Strings.toString(value);\n    }\n}\n"}, "mocks/ERC20PausableMock.sol": {"checksum": {"algorithm": "md5", "hash": "222f3abc5d9eecd2d7612f6ad20d8258"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../token/ERC20/ERC20Pausable.sol\";\n\n// mock class using ERC20Pausable\ncontract ERC20PausableMock is ERC20Pausable {\n    constructor (\n        string memory name,\n        string memory symbol,\n        address initialAccount,\n        uint256 initialBalance\n    ) public ERC20(name, symbol) {\n        _mint(initialAccount, initialBalance);\n    }\n\n    function pause() external {\n        _pause();\n    }\n\n    function unpause() external {\n        _unpause();\n    }\n\n    function mint(address to, uint256 amount) public {\n        _mint(to, amount);\n    }\n\n    function burn(address from, uint256 amount) public {\n        _burn(from, amount);\n    }\n}\n"}, "mocks/ReentrancyAttack.sol": {"checksum": {"algorithm": "md5", "hash": "adba009be08741fd8ff4de9166fb2d8e"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\ncontract ReentrancyAttack is Context {\n    function callSender(bytes4 data) public {\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success,) = _msgSender().call(abi.encodeWithSelector(data));\n        require(success, \"ReentrancyAttack: failed call\");\n    }\n}\n"}, "cryptography/ECDSA.sol": {"checksum": {"algorithm": "md5", "hash": "de499ecd49c1c3d9b455a0551b669b14"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        if (signature.length != 65) {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n\n        if (v != 27 && v != 28) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * replicates the behavior of the\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n     * JSON-RPC method.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n"}, "mocks/EnumerableMapMock.sol": {"checksum": {"algorithm": "md5", "hash": "50fd36a12258baff5d0cb021907e2fd0"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../utils/EnumerableMap.sol\";\n\ncontract EnumerableMapMock {\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\n\n    event OperationResult(bool result);\n\n    EnumerableMap.UintToAddressMap private _map;\n\n    function contains(uint256 key) public view returns (bool) {\n        return _map.contains(key);\n    }\n\n    function set(uint256 key, address value) public {\n        bool result = _map.set(key, value);\n        emit OperationResult(result);\n    }\n\n    function remove(uint256 key) public {\n        bool result = _map.remove(key);\n        emit OperationResult(result);\n    }\n\n    function length() public view returns (uint256) {\n        return _map.length();\n    }\n\n    function at(uint256 index) public view returns (uint256 key, address value) {\n        return _map.at(index);\n    }\n\n\n    function get(uint256 key) public view returns (address) {\n        return _map.get(key);\n    }\n}\n"}, "mocks/MathMock.sol": {"checksum": {"algorithm": "md5", "hash": "9ff46084f44edf19dbb44c8bcab9c933"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../math/Math.sol\";\n\ncontract MathMock {\n    function max(uint256 a, uint256 b) public pure returns (uint256) {\n        return Math.max(a, b);\n    }\n\n    function min(uint256 a, uint256 b) public pure returns (uint256) {\n        return Math.min(a, b);\n    }\n\n    function average(uint256 a, uint256 b) public pure returns (uint256) {\n        return Math.average(a, b);\n    }\n}\n"}, "math/SignedSafeMath.sol": {"checksum": {"algorithm": "md5", "hash": "b89f896065342db5c60b9288674254b9"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @title SignedSafeMath\n * @dev Signed math operations with safety checks that revert on error.\n */\nlibrary SignedSafeMath {\n    int256 constant private _INT256_MIN = -2**255;\n\n        /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\n\n        int256 c = a * b;\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"SignedSafeMath: division by zero\");\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\n\n        return c;\n    }\n}\n"}, "mocks/GSNRecipientMock.sol": {"checksum": {"algorithm": "md5", "hash": "b4e08fba2d602ac1923c61f67c80df87"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./ContextMock.sol\";\nimport \"../GSN/GSNRecipient.sol\";\n\n// By inheriting from GSNRecipient, Context's internal functions are overridden automatically\ncontract GSNRecipientMock is ContextMock, GSNRecipient {\n    function withdrawDeposits(uint256 amount, address payable payee) public {\n        _withdrawDeposits(amount, payee);\n    }\n\n    function acceptRelayedCall(address, address, bytes calldata, uint256, uint256, uint256, uint256, bytes calldata, uint256)\n        external\n        view\n        override\n        returns (uint256, bytes memory)\n    {\n        return (0, \"\");\n    }\n\n    function _preRelayedCall(bytes memory) internal override returns (bytes32) { }\n\n    function _postRelayedCall(bytes memory, bool, uint256, bytes32) internal override { }\n\n    function upgradeRelayHub(address newRelayHub) public {\n        return _upgradeRelayHub(newRelayHub);\n    }\n\n    function _msgSender() internal override(Context, GSNRecipient) view virtual returns (address payable) {\n        return GSNRecipient._msgSender();\n    }\n\n    function _msgData() internal override(Context, GSNRecipient) view virtual returns (bytes memory) {\n        return GSNRecipient._msgData();\n    }\n}\n"}, "token/ERC721/IERC721Metadata.sol": {"checksum": {"algorithm": "md5", "hash": "c747635b7aafc7aaef8ff5783ed25e6b"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"}, "presets/ERC20PresetMinterPauser.sol": {"checksum": {"algorithm": "md5", "hash": "52e38bee0c37102d0aa6631b7263c99b"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../access/AccessControl.sol\";\nimport \"../GSN/Context.sol\";\nimport \"../token/ERC20/ERC20.sol\";\nimport \"../token/ERC20/ERC20Burnable.sol\";\nimport \"../token/ERC20/ERC20Pausable.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n */\ncontract ERC20PresetMinterPauser is Context, AccessControl, ERC20Burnable, ERC20Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(string memory name, string memory symbol) public ERC20(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Pausable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"}, "mocks/ERC20DecimalsMock.sol": {"checksum": {"algorithm": "md5", "hash": "96359a68d0dcbc24d205b3a2a79f19ca"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../token/ERC20/ERC20.sol\";\n\ncontract ERC20DecimalsMock is ERC20 {\n    constructor (string memory name, string memory symbol, uint8 decimals) public ERC20(name, symbol) {\n        _setupDecimals(decimals);\n    }\n}\n"}, "utils/EnumerableSet.sol": {"checksum": {"algorithm": "md5", "hash": "335c4591d8f63429138e843e91156f03"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n * (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"}, "introspection/ERC165.sol": {"checksum": {"algorithm": "md5", "hash": "cd8a4a4c1e298943d96dd5ed09ad27f3"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\ncontract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"}, "mocks/ERC721ReceiverMock.sol": {"checksum": {"algorithm": "md5", "hash": "28d58da69ab92a1ee57448ddb682cf28"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../token/ERC721/IERC721Receiver.sol\";\n\ncontract ERC721ReceiverMock is IERC721Receiver {\n    bytes4 private _retval;\n    bool private _reverts;\n\n    event Received(address operator, address from, uint256 tokenId, bytes data, uint256 gas);\n\n    constructor (bytes4 retval, bool reverts) public {\n        _retval = retval;\n        _reverts = reverts;\n    }\n\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n        public override returns (bytes4)\n    {\n        require(!_reverts, \"ERC721ReceiverMock: reverting\");\n        emit Received(operator, from, tokenId, data, gasleft());\n        return _retval;\n    }\n}\n"}, "introspection/IERC1820Implementer.sol": {"checksum": {"algorithm": "md5", "hash": "4338cf7f4966ea93b5cf21e0e93d7ba5"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface for an ERC1820 implementer, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP].\n * Used by contracts that will be registered as implementers in the\n * {IERC1820Registry}.\n */\ninterface IERC1820Implementer {\n    /**\n     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\n     * implements `interfaceHash` for `account`.\n     *\n     * See {IERC1820Registry-setInterfaceImplementer}.\n     */\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\n}\n"}, "token/ERC721/IERC721.sol": {"checksum": {"algorithm": "md5", "hash": "c859be45d4e9a8e9234c730c5da2c123"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transfered from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"}, "mocks/EnumerableSetMock.sol": {"checksum": {"algorithm": "md5", "hash": "68c13f0b1526b7716b182e8d49df8f1c"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../utils/EnumerableSet.sol\";\n\n// AddressSet\ncontract EnumerableAddressSetMock {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    event OperationResult(bool result);\n\n    EnumerableSet.AddressSet private _set;\n\n    function contains(address value) public view returns (bool) {\n        return _set.contains(value);\n    }\n\n    function add(address value) public {\n        bool result = _set.add(value);\n        emit OperationResult(result);\n    }\n\n    function remove(address value) public {\n        bool result = _set.remove(value);\n        emit OperationResult(result);\n    }\n\n    function length() public view returns (uint256) {\n        return _set.length();\n    }\n\n    function at(uint256 index) public view returns (address) {\n        return _set.at(index);\n    }\n}\n\n// UintSet\ncontract EnumerableUintSetMock {\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    event OperationResult(bool result);\n\n    EnumerableSet.UintSet private _set;\n\n    function contains(uint256 value) public view returns (bool) {\n        return _set.contains(value);\n    }\n\n    function add(uint256 value) public {\n        bool result = _set.add(value);\n        emit OperationResult(result);\n    }\n\n    function remove(uint256 value) public {\n        bool result = _set.remove(value);\n        emit OperationResult(result);\n    }\n\n    function length() public view returns (uint256) {\n        return _set.length();\n    }\n\n    function at(uint256 index) public view returns (uint256) {\n        return _set.at(index);\n    }\n}"}, "mocks/ERC165/ERC165InterfacesSupported.sol": {"checksum": {"algorithm": "md5", "hash": "0aa6213b79446bc21b046940dbfaad3f"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * https://eips.ethereum.org/EIPS/eip-214#specification\n * From the specification:\n * > Any attempts to make state-changing operations inside an execution instance with STATIC set to true will instead\n * throw an exception.\n * > These operations include [...], LOG0, LOG1, LOG2, [...]\n *\n * therefore, because this contract is staticcall'd we need to not emit events (which is how solidity-coverage works)\n * solidity-coverage ignores the /mocks folder, so we duplicate its implementation here to avoid instrumenting it\n */\ncontract SupportsInterfaceWithLookupMock is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 public constant INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev A mapping of interface id to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev A contract implementing SupportsInterfaceWithLookup\n     * implement ERC165 itself.\n     */\n    constructor () public {\n        _registerInterface(INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev Implement supportsInterface(bytes4) using a lookup table.\n     */\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Private method for registering an interface.\n     */\n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff, \"ERC165InterfacesSupported: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\ncontract ERC165InterfacesSupported is SupportsInterfaceWithLookupMock {\n    constructor (bytes4[] memory interfaceIds) public {\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            _registerInterface(interfaceIds[i]);\n        }\n    }\n}\n"}, "utils/Address.sol": {"checksum": {"algorithm": "md5", "hash": "123f93732b38fa4a14febeab42234999"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"}, "mocks/ERC777Mock.sol": {"checksum": {"algorithm": "md5", "hash": "51c9c3b393c0efbcca9aa5e449bf5f8d"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\nimport \"../token/ERC777/ERC777.sol\";\n\ncontract ERC777Mock is Context, ERC777 {\n    constructor(\n        address initialHolder,\n        uint256 initialBalance,\n        string memory name,\n        string memory symbol,\n        address[] memory defaultOperators\n    ) public ERC777(name, symbol, defaultOperators) {\n        _mint(initialHolder, initialBalance, \"\", \"\");\n    }\n\n    function mintInternal (\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    ) public {\n        _mint(to, amount, userData, operatorData);\n    }\n\n    function approveInternal(address holder, address spender, uint256 value) public {\n        _approve(holder, spender, value);\n    }\n}\n"}, "token/ERC20/IERC20.sol": {"checksum": {"algorithm": "md5", "hash": "95e76adf687e1a31a4b8ece4e9bb757a"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"}, "mocks/ERC1155Mock.sol": {"checksum": {"algorithm": "md5", "hash": "737b3b3e4bdf5aae82f4360f10dd8000"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../token/ERC1155/ERC1155.sol\";\n\n/**\n * @title ERC1155Mock\n * This mock just publicizes internal functions for testing purposes\n */\ncontract ERC1155Mock is ERC1155 {\n    constructor (string memory uri) public ERC1155(uri) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function setURI(string memory newuri) public {\n        _setURI(newuri);\n    }\n\n    function mint(address to, uint256 id, uint256 value, bytes memory data) public {\n        _mint(to, id, value, data);\n    }\n\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) public {\n        _mintBatch(to, ids, values, data);\n    }\n\n    function burn(address owner, uint256 id, uint256 value) public {\n        _burn(owner, id, value);\n    }\n\n    function burnBatch(address owner, uint256[] memory ids, uint256[] memory values) public {\n        _burnBatch(owner, ids, values);\n    }\n}\n"}, "token/ERC20/TokenTimelock.sol": {"checksum": {"algorithm": "md5", "hash": "e81eb206344e66625c3ac7abf6d2c39b"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./SafeERC20.sol\";\n\n/**\n * @dev A token holder contract that will allow a beneficiary to extract the\n * tokens after a given release time.\n *\n * Useful for simple vesting schedules like \"advisors get all of their tokens\n * after 1 year\".\n */\ncontract TokenTimelock {\n    using SafeERC20 for IERC20;\n\n    // ERC20 basic token contract being held\n    IERC20 private _token;\n\n    // beneficiary of tokens after they are released\n    address private _beneficiary;\n\n    // timestamp when token release is enabled\n    uint256 private _releaseTime;\n\n    constructor (IERC20 token, address beneficiary, uint256 releaseTime) public {\n        // solhint-disable-next-line not-rely-on-time\n        require(releaseTime > block.timestamp, \"TokenTimelock: release time is before current time\");\n        _token = token;\n        _beneficiary = beneficiary;\n        _releaseTime = releaseTime;\n    }\n\n    /**\n     * @return the token being held.\n     */\n    function token() public view returns (IERC20) {\n        return _token;\n    }\n\n    /**\n     * @return the beneficiary of the tokens.\n     */\n    function beneficiary() public view returns (address) {\n        return _beneficiary;\n    }\n\n    /**\n     * @return the time when the tokens are released.\n     */\n    function releaseTime() public view returns (uint256) {\n        return _releaseTime;\n    }\n\n    /**\n     * @notice Transfers tokens held by timelock to beneficiary.\n     */\n    function release() public virtual {\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp >= _releaseTime, \"TokenTimelock: current time is before release time\");\n\n        uint256 amount = _token.balanceOf(address(this));\n        require(amount > 0, \"TokenTimelock: no tokens to release\");\n\n        _token.safeTransfer(_beneficiary, amount);\n    }\n}\n"}, "token/ERC721/ERC721Pausable.sol": {"checksum": {"algorithm": "md5", "hash": "cc162080e8c5d3988dd50ceed8359aac"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./ERC721.sol\";\nimport \"../../utils/Pausable.sol\";\n\n/**\n * @dev ERC721 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC721Pausable is ERC721, Pausable {\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        require(!paused(), \"ERC721Pausable: token transfer while paused\");\n    }\n}\n"}, "mocks/ERC20CappedMock.sol": {"checksum": {"algorithm": "md5", "hash": "765c3db6aee44d776df952460c5006c7"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../token/ERC20/ERC20Capped.sol\";\n\ncontract ERC20CappedMock is ERC20Capped {\n    constructor (string memory name, string memory symbol, uint256 cap)\n        public ERC20(name, symbol) ERC20Capped(cap)\n    { }\n\n    function mint(address to, uint256 tokenId) public {\n        _mint(to, tokenId);\n    }\n}\n"}, "mocks/ERC1155PausableMock.sol": {"checksum": {"algorithm": "md5", "hash": "336f26b00c47b1ae18fcba3b5c4a4585"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./ERC1155Mock.sol\";\nimport \"../token/ERC1155/ERC1155Pausable.sol\";\n\ncontract ERC1155PausableMock is ERC1155Mock, ERC1155Pausable {\n    constructor(string memory uri) public ERC1155Mock(uri) { }\n\n    function pause() external {\n        _pause();\n    }\n\n    function unpause() external {\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        internal virtual override(ERC1155, ERC1155Pausable)\n    {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n    }\n}\n"}, "utils/Counters.sol": {"checksum": {"algorithm": "md5", "hash": "5414dbd62bbfba220645349dad9685ea"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../math/SafeMath.sol\";\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n * directly accessed.\n */\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n"}, "utils/Arrays.sol": {"checksum": {"algorithm": "md5", "hash": "b6ffa573cbe936f2acd965991895e653"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary Arrays {\n   /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        if (array.length == 0) {\n            return 0;\n        }\n\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds down (it does integer division with truncation).\n            if (array[mid] > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && array[low - 1] == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n}\n"}, "mocks/Create2Impl.sol": {"checksum": {"algorithm": "md5", "hash": "dbb9428115c6fe3278b1f15b4ed92be4"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../utils/Create2.sol\";\nimport \"../introspection/ERC1820Implementer.sol\";\n\ncontract Create2Impl {\n    function deploy(uint256 value, bytes32 salt, bytes memory code) public {\n        Create2.deploy(value, salt, code);\n    }\n\n    function deployERC1820Implementer(uint256 value, bytes32 salt) public {\n        // solhint-disable-next-line indent\n        Create2.deploy(value, salt, type(ERC1820Implementer).creationCode);\n    }\n\n    function computeAddress(bytes32 salt, bytes32 codeHash) public view returns (address) {\n        return Create2.computeAddress(salt, codeHash);\n    }\n\n    function computeAddressWithDeployer(bytes32 salt, bytes32 codeHash, address deployer) public pure returns (address) {\n        return Create2.computeAddress(salt, codeHash, deployer);\n    }\n\n    receive() payable external {}\n}\n"}, "mocks/ERC721PausableMock.sol": {"checksum": {"algorithm": "md5", "hash": "0cf8e54da850503081103469f656366d"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../token/ERC721/ERC721Pausable.sol\";\n\n/**\n * @title ERC721PausableMock\n * This mock just provides a public mint, burn and exists functions for testing purposes\n */\ncontract ERC721PausableMock is ERC721Pausable {\n    constructor (string memory name, string memory symbol) public ERC721(name, symbol) { }\n\n    function mint(address to, uint256 tokenId) public {\n        super._mint(to, tokenId);\n    }\n\n    function burn(uint256 tokenId) public {\n        super._burn(tokenId);\n    }\n\n    function exists(uint256 tokenId) public view returns (bool) {\n        return super._exists(tokenId);\n    }\n\n    function pause() external {\n        _pause();\n    }\n\n    function unpause() external {\n        _unpause();\n    }\n}\n"}, "math/Math.sol": {"checksum": {"algorithm": "md5", "hash": "d9d26ff981b836b0e3bb45940cd56321"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"}, "mocks/SafeMathMock.sol": {"checksum": {"algorithm": "md5", "hash": "95f3f0e7913b822691eccebdf9970a60"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../math/SafeMath.sol\";\n\ncontract SafeMathMock {\n    function mul(uint256 a, uint256 b) public pure returns (uint256) {\n        return SafeMath.mul(a, b);\n    }\n\n    function div(uint256 a, uint256 b) public pure returns (uint256) {\n        return SafeMath.div(a, b);\n    }\n\n    function sub(uint256 a, uint256 b) public pure returns (uint256) {\n        return SafeMath.sub(a, b);\n    }\n\n    function add(uint256 a, uint256 b) public pure returns (uint256) {\n        return SafeMath.add(a, b);\n    }\n\n    function mod(uint256 a, uint256 b) public pure returns (uint256) {\n        return SafeMath.mod(a, b);\n    }\n}\n"}, "token/ERC1155/ERC1155Holder.sol": {"checksum": {"algorithm": "md5", "hash": "fe126d8ec9855e5561f8364a736917b5"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"}, "mocks/ERC721GSNRecipientMock.sol": {"checksum": {"algorithm": "md5", "hash": "ca6292ef46d86b9d11987f301e8566d7"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../token/ERC721/ERC721.sol\";\nimport \"../GSN/GSNRecipient.sol\";\nimport \"../GSN/GSNRecipientSignature.sol\";\n\n/**\n * @title ERC721GSNRecipientMock\n * A simple ERC721 mock that has GSN support enabled\n */\ncontract ERC721GSNRecipientMock is ERC721, GSNRecipient, GSNRecipientSignature {\n    constructor(string memory name, string memory symbol, address trustedSigner)\n        public\n        ERC721(name, symbol)\n        GSNRecipientSignature(trustedSigner)\n    { }\n\n    function mint(uint256 tokenId) public {\n        _mint(_msgSender(), tokenId);\n    }\n\n    function _msgSender() internal view override(Context, GSNRecipient) returns (address payable) {\n        return GSNRecipient._msgSender();\n    }\n\n    function _msgData() internal view override(Context, GSNRecipient) returns (bytes memory) {\n        return GSNRecipient._msgData();\n    }\n}\n"}, "mocks/ERC20Mock.sol": {"checksum": {"algorithm": "md5", "hash": "27188f8bd49d64d4fc38fee828b9b116"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../token/ERC20/ERC20.sol\";\n\n// mock class using ERC20\ncontract ERC20Mock is ERC20 {\n    constructor (\n        string memory name,\n        string memory symbol,\n        address initialAccount,\n        uint256 initialBalance\n    ) public payable ERC20(name, symbol) {\n        _mint(initialAccount, initialBalance);\n    }\n\n    function mint(address account, uint256 amount) public {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) public {\n        _burn(account, amount);\n    }\n\n    function transferInternal(address from, address to, uint256 value) public {\n        _transfer(from, to, value);\n    }\n\n    function approveInternal(address owner, address spender, uint256 value) public {\n        _approve(owner, spender, value);\n    }\n}\n"}, "token/ERC721/ERC721.sol": {"checksum": {"algorithm": "md5", "hash": "449aafedea7ae428f27c303b54a38647"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC721.sol\";\nimport \"./IERC721Metadata.sol\";\nimport \"./IERC721Enumerable.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"../../introspection/ERC165.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/EnumerableSet.sol\";\nimport \"../../utils/EnumerableMap.sol\";\nimport \"../../utils/Strings.sol\";\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\n    using SafeMath for uint256;\n    using Address for address;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\n    using Strings for uint256;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from holder address to their (enumerable) set of owned tokens\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\n\n    // Enumerable mapping from token ids to their owners\n    EnumerableMap.UintToAddressMap private _tokenOwners;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    // Base URI\n    string private _baseURI;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    /*\n     *     bytes4(keccak256('name()')) == 0x06fdde03\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n     *\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    /*\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n     *\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n\n        return _holderTokens[owner].length();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n\n        // If there is no base URI, return the token URI.\n        if (bytes(_baseURI).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(_baseURI, _tokenURI));\n        }\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n        return string(abi.encodePacked(_baseURI, tokenId.toString()));\n    }\n\n    /**\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\n    * to the token ID if no specific URI is set for that token ID.\n    */\n    function baseURI() public view returns (string memory) {\n        return _baseURI;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\n        return _holderTokens[owner].at(index);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\n        return _tokenOwners.length();\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\n        (uint256 tokenId, ) = _tokenOwners.at(index);\n        return tokenId;\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mecanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return _tokenOwners.contains(tokenId);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     d*\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n\n        _holderTokens[owner].remove(tokenId);\n\n        _tokenOwners.remove(tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _holderTokens[from].remove(tokenId);\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Internal function to set the base URI for all token IDs. It is\n     * automatically added as a prefix to the value returned in {tokenURI},\n     * or to the token ID if {tokenURI} is empty.\n     */\n    function _setBaseURI(string memory baseURI_) internal virtual {\n        _baseURI = baseURI_;\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        private returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\n            IERC721Receiver(to).onERC721Received.selector,\n            _msgSender(),\n            from,\n            tokenId,\n            _data\n        ), \"ERC721: transfer to non ERC721Receiver implementer\");\n        bytes4 retval = abi.decode(returndata, (bytes4));\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    function _approve(address to, uint256 tokenId) private {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n}\n"}, "access/AccessControl.sol": {"checksum": {"algorithm": "md5", "hash": "f60e3ddea9dc23bc52984afdb18d59ec"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../utils/EnumerableSet.sol\";\nimport \"../utils/Address.sol\";\nimport \"../GSN/Context.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"}, "mocks/EtherReceiverMock.sol": {"checksum": {"algorithm": "md5", "hash": "bbbf39ce2cab5a93136d45390d9cd408"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\ncontract EtherReceiverMock {\n    bool private _acceptEther;\n\n    function setAcceptEther(bool acceptEther) public {\n        _acceptEther = acceptEther;\n    }\n\n    receive () external payable {\n        if (!_acceptEther) {\n            revert();\n        }\n    }\n}\n"}, "introspection/ERC1820Implementer.sol": {"checksum": {"algorithm": "md5", "hash": "ccb7c1be24f76e73048a1a90621e0db7"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC1820Implementer.sol\";\n\n/**\n * @dev Implementation of the {IERC1820Implementer} interface.\n *\n * Contracts may inherit from this and call {_registerInterfaceForAddress} to\n * declare their willingness to be implementers.\n * {IERC1820Registry-setInterfaceImplementer} should then be called for the\n * registration to be complete.\n */\ncontract ERC1820Implementer is IERC1820Implementer {\n    bytes32 constant private _ERC1820_ACCEPT_MAGIC = keccak256(abi.encodePacked(\"ERC1820_ACCEPT_MAGIC\"));\n\n    mapping(bytes32 => mapping(address => bool)) private _supportedInterfaces;\n\n    /**\n     * See {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) public view override returns (bytes32) {\n        return _supportedInterfaces[interfaceHash][account] ? _ERC1820_ACCEPT_MAGIC : bytes32(0x00);\n    }\n\n    /**\n     * @dev Declares the contract as willing to be an implementer of\n     * `interfaceHash` for `account`.\n     *\n     * See {IERC1820Registry-setInterfaceImplementer} and\n     * {IERC1820Registry-interfaceHash}.\n     */\n    function _registerInterfaceForAddress(bytes32 interfaceHash, address account) internal virtual {\n        _supportedInterfaces[interfaceHash][account] = true;\n    }\n}\n"}, "mocks/ERC721BurnableMock.sol": {"checksum": {"algorithm": "md5", "hash": "b8dc87a3f8fe1bfde8153f6823c310c8"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../token/ERC721/ERC721Burnable.sol\";\n\ncontract ERC721BurnableMock is ERC721Burnable {\n    constructor(string memory name, string memory symbol) public ERC721(name, symbol) { }\n\n    function mint(address to, uint256 tokenId) public {\n        _mint(to, tokenId);\n    }\n}\n"}, "token/ERC777/IERC777Sender.sol": {"checksum": {"algorithm": "md5", "hash": "6e180bb0131dcdfb9aed306dc1ee078c"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\n *\n * {IERC777} Token holders can be notified of operations performed on their\n * tokens by having a contract implement this interface (contract holders can be\n *  their own implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Sender {\n    /**\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\n     * is conveyed by `to` being the zero address or not.\n     *\n     * This call occurs _before_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"}, "token/ERC1155/ERC1155Receiver.sol": {"checksum": {"algorithm": "md5", "hash": "590a5e8f1db978fd811a9998e70c38e2"}, "urls": [], "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC1155Receiver.sol\";\nimport \"../../introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    constructor() public {\n        _registerInterface(\n            ERC1155Receiver(0).onERC1155Received.selector ^\n            ERC1155Receiver(0).onERC1155BatchReceived.selector\n        );\n    }\n}\n"}}, "contractTypes": {"Context": {"contractName": "Context", "sourceId": "GSN/Context.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "GSNRecipient": {"contractName": "GSNRecipient", "sourceId": "GSN/GSNRecipient.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "event", "name": "RelayHubChanged", "inputs": [{"name": "oldRelayHub", "type": "address", "indexed": true, "internalType": "address"}, {"name": "newRelayHub", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "acceptRelayedCall", "stateMutability": "view", "inputs": [{"name": "relay", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "encodedFunction", "type": "bytes", "internalType": "bytes"}, {"name": "transactionFee", "type": "uint256", "internalType": "uint256"}, {"name": "gasPrice", "type": "uint256", "internalType": "uint256"}, {"name": "gasLimit", "type": "uint256", "internalType": "uint256"}, {"name": "nonce", "type": "uint256", "internalType": "uint256"}, {"name": "approvalData", "type": "bytes", "internalType": "bytes"}, {"name": "maxPossibleCharge", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "bytes", "internalType": "bytes"}]}, {"type": "function", "name": "getHubAddr", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "postRelayedCall", "stateMutability": "nonpayable", "inputs": [{"name": "context", "type": "bytes", "internalType": "bytes"}, {"name": "success", "type": "bool", "internalType": "bool"}, {"name": "actualCharge", "type": "uint256", "internalType": "uint256"}, {"name": "preRetVal", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "preRelayedCall", "stateMutability": "nonpayable", "inputs": [{"name": "context", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "relayHubVersion", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Base GSN recipient contract: includes the {IRelayRecipient} interface and enables GSN support on all contracts in the inheritance tree. TIP: This contract is abstract. The functions {IRelayRecipient-acceptRelayedCall},  {_preRelayedCall}, and {_postRelayedCall} are not implemented and must be provided by derived contracts. See the xref:ROOT:gsn-strategies.adoc#gsn-strategies[GSN strategies] for more information on how to use the pre-built {GSNRecipientSignature} and {GSNRecipientERC20Fee}, or how to write your own.", "events": {"RelayHubChanged(address,address)": {"details": "Emitted when a contract changes its {IRelayHub} contract to a new one."}}, "kind": "dev", "methods": {"acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)": {"details": "Called by {IRelayHub} to validate if this recipient accepts being charged for a relayed call. Note that the recipient will be charged regardless of the execution result of the relayed call (i.e. if it reverts or not). The relay request was originated by `from` and will be served by `relay`. `encodedFunction` is the relayed call calldata, so its first four bytes are the function selector. The relayed call will be forwarded `gasLimit` gas, and the transaction executed with a gas price of at least `gasPrice`. ``relay``'s fee is `transactionFee`, and the recipient will be charged at most `maxPossibleCharge` (in wei). `nonce` is the sender's (`from`) nonce for replay attack protection in {IRelayHub}, and `approvalData` is a optional parameter that can be used to hold a signature over all or some of the previous values. Returns a tuple, where the first value is used to indicate approval (0) or rejection (custom non-zero error code, values 1 to 10 are reserved) and the second one is data to be passed to the other {IRelayRecipient} functions. {acceptRelayedCall} is called with 50k gas: if it runs out during execution, the request will be considered rejected. A regular revert will also trigger a rejection."}, "getHubAddr()": {"details": "Returns the address of the {IRelayHub} contract for this recipient."}, "postRelayedCall(bytes,bool,uint256,bytes32)": {"details": "See `IRelayRecipient.postRelayedCall`. This function should not be overriden directly, use `_postRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract."}, "preRelayedCall(bytes)": {"details": "See `IRelayRecipient.preRelayedCall`. This function should not be overriden directly, use `_preRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract."}, "relayHubVersion()": {"details": "Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version."}}, "version": 1}}, "GSNRecipientERC20Fee": {"contractName": "GSNRecipientERC20Fee", "sourceId": "GSN/GSNRecipientERC20Fee.sol", "deploymentBytecode": {"bytecode": "6080604052600080546001600160a01b03191673d216153c06e857cd7f72665e0af1d7d82172f4941790553480156200003757600080fd5b50604051620020cd380380620020cd833981810160405260408110156200005d57600080fd5b81019080805160405193929190846401000000008211156200007e57600080fd5b9083019060208201858111156200009457600080fd5b8251640100000000811182820188101715620000af57600080fd5b82525081516020918201929091019080838360005b83811015620000de578181015183820152602001620000c4565b50505050905090810190601f1680156200010c5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200013057600080fd5b9083019060208201858111156200014657600080fd5b82516401000000008111828201881017156200016157600080fd5b82525081516020918201929091019080838360005b838110156200019057818101518382015260200162000176565b50505050905090810190601f168015620001be5780820380516001836020036101000a031916815260200191505b506040525050508181604051620001d590620002f1565b604080825283519082015282518190602080830191606084019187019080838360005b8381101562000212578181015183820152602001620001f8565b50505050905090810190601f168015620002405780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015620002755781810151838201526020016200025b565b50505050905090810190601f168015620002a35780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f080158015620002c7573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b039290921691909117905550620002ff9050565b6111ea8062000ee383390190565b610bd4806200030f6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806374e861d61461006757806380274db71461008b57806383947ea014610141578063ad61ccd51461031d578063e06e0e221461039a578063fc0c546a1461044d575b600080fd5b61006f610455565b604080516001600160a01b039092168252519081900360200190f35b61012f600480360360208110156100a157600080fd5b810190602081018135600160201b8111156100bb57600080fd5b8201836020820111156100cd57600080fd5b803590602001918460018302840111600160201b831117156100ee57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610464945050505050565b60408051918252519081900360200190f35b61029e600480360361012081101561015857600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561018b57600080fd5b82018360208201111561019d57600080fd5b803590602001918460018302840111600160201b831117156101be57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929584359560208601359560408101359550606081013594509192509060a081019060800135600160201b81111561022857600080fd5b82018360208201111561023a57600080fd5b803590602001918460018302840111600160201b8311171561025b57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050913592506104cc915050565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102e15781810151838201526020016102c9565b50505050905090810190601f16801561030e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6103256105bb565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561035f578181015183820152602001610347565b50505050905090810190601f16801561038c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61044b600480360360808110156103b057600080fd5b810190602081018135600160201b8111156103ca57600080fd5b8201836020820111156103dc57600080fd5b803590602001918460018302840111600160201b831117156103fd57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550505050803515159150602081013590604001356105da565b005b61006f610643565b6000546001600160a01b031690565b600061046e610455565b6001600160a01b0316336001600160a01b0316146104bd5760405162461bcd60e51b8152600401808060200182810382526024815260200180610b516024913960400191505060405180910390fd5b6104c682610652565b92915050565b600154604080516370a0823160e01b81526001600160a01b038b81166004830152915160009360609386939116916370a0823191602480820192602092909190829003018186803b15801561052057600080fd5b505afa158015610534573d6000803e3d6000fd5b505050506040513d602081101561054a57600080fd5b505110156105655761055c6000610699565b915091506105ad565b604080516001600160a01b038c166020820152808201859052606081018a905260808082018a90528251808303909101815260a09091019091526105a8906106b1565b915091505b995099975050505050505050565b6040805180820190915260058152640312e302e360dc1b602082015290565b6105e2610455565b6001600160a01b0316336001600160a01b0316146106315760405162461bcd60e51b8152600401808060200182810382526024815260200180610b516024913960400191505060405180910390fd5b61063d848484846106b6565b50505050565b6001546001600160a01b031690565b600080600083806020019051604081101561066c57600080fd5b5080516020909101516001549193509150610692906001600160a01b0316833084610743565b5050919050565b604080516020810190915260008152600b9190910191565b600091565b6000806000808780602001905160808110156106d157600080fd5b50805160208201516040830151606090930151919650945090925090506000610709610702620186a061271061079d565b83856107e6565b9050610715878261079d565b965061073885610725868a61079d565b6001546001600160a01b031691906107f4565b505050505050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261063d90859061084b565b60006107df83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506108fc565b9392505050565b606490810191909202020490565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261084690849061084b565b505050565b60606108a0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109939092919063ffffffff16565b805190915015610846578080602001905160208110156108bf57600080fd5b50516108465760405162461bcd60e51b815260040180806020018281038252602a815260200180610b75602a913960400191505060405180910390fd5b6000818484111561098b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610950578181015183820152602001610938565b50505050905090810190601f16801561097d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60606109a284846000856109aa565b949350505050565b60606109b585610b17565b610a06576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310610a455780518252601f199092019160209182019101610a26565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610aa7576040519150601f19603f3d011682016040523d82523d6000602084013e610aac565b606091505b50915091508115610ac05791506109a29050565b805115610ad05780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315610950578181015183820152602001610938565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906109a257505015159291505056fe47534e526563697069656e743a2063616c6c6572206973206e6f742052656c61794875625361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220f692cd5cea7f0f944b303577005792bb7343f456b7b8739ed54b54274eba292864736f6c634300060c003360806040523480156200001157600080fd5b50604051620011ea380380620011ea833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b50604052505082518391508290620001b89060039060208501906200024c565b508051620001ce9060049060208401906200024c565b50506005805460ff19166012179055506000620001ea62000248565b60058054610100600160a81b0319166101006001600160a01b03841690810291909117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3505050620002e8565b3390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028f57805160ff1916838001178555620002bf565b82800160010185558215620002bf579182015b82811115620002bf578251825591602001919060010190620002a2565b50620002cd929150620002d1565b5090565b5b80821115620002cd5760008155600101620002d2565b610ef280620002f86000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d7146102d9578063a9059cbb14610305578063dd62ed3e14610331578063f2fde38b1461035f576100f5565b806370a082311461027f578063715018a6146102a55780638da5cb5b146102ad57806395d89b41146102d1576100f5565b806323b872dd116100d357806323b872dd146101d1578063313ce56714610207578063395093511461022557806340c10f1914610251576100f5565b806306fdde03146100fa578063095ea7b31461017757806318160ddd146101b7575b600080fd5b610102610385565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561013c578181015183820152602001610124565b50505050905090810190601f1680156101695780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101a36004803603604081101561018d57600080fd5b506001600160a01b03813516906020013561041b565b604080519115158252519081900360200190f35b6101bf610439565b60408051918252519081900360200190f35b6101a3600480360360608110156101e757600080fd5b506001600160a01b0381358116916020810135909116906040013561043f565b61020f61048a565b6040805160ff9092168252519081900360200190f35b6101a36004803603604081101561023b57600080fd5b506001600160a01b038135169060200135610493565b61027d6004803603604081101561026757600080fd5b506001600160a01b0381351690602001356104e6565b005b6101bf6004803603602081101561029557600080fd5b50356001600160a01b0316610563565b61027d61057e565b6102b561063d565b604080516001600160a01b039092168252519081900360200190f35b610102610651565b6101a3600480360360408110156102ef57600080fd5b506001600160a01b0381351690602001356106b2565b6101a36004803603604081101561031b57600080fd5b506001600160a01b03813516906020013561071a565b6101bf6004803603604081101561034757600080fd5b506001600160a01b038135811691602001351661072e565b61027d6004803603602081101561037557600080fd5b50356001600160a01b031661076b565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104115780601f106103e657610100808354040283529160200191610411565b820191906000526020600020905b8154815290600101906020018083116103f457829003601f168201915b5050505050905090565b600061042f610428610886565b848461088a565b5060015b92915050565b60025490565b600061044961063d565b6001600160a01b0316836001600160a01b031614156104755761046d8484846108c0565b506001610483565b610480848484610a1b565b90505b9392505050565b60055460ff1690565b600061042f6104a0610886565b846104e185600160006104b1610886565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610a9d565b61088a565b6104ee610886565b60055461010090046001600160a01b03908116911614610555576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61055f8282610af7565b5050565b6001600160a01b031660009081526020819052604090205490565b610586610886565b60055461010090046001600160a01b039081169116146105ed576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b60055461010090046001600160a01b031690565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104115780601f106103e657610100808354040283529160200191610411565b600061042f6106bf610886565b846104e185604051806060016040528060258152602001610e9860259139600160006106e9610886565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610be7565b600061042f610727610886565b84846108c0565b600061073861063d565b6001600160a01b0316826001600160a01b0316141561075a5750600019610433565b6107648383610c7e565b9050610433565b610773610886565b60055461010090046001600160a01b039081169116146107da576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661081f5760405162461bcd60e51b8152600401808060200182810382526026815260200180610db96026913960400191505060405180910390fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b3390565b61089261063d565b6001600160a01b0316826001600160a01b031614156108b0576108bb565b6108bb838383610ca9565b505050565b6001600160a01b0383166109055760405162461bcd60e51b8152600401808060200182810382526025815260200180610e4f6025913960400191505060405180910390fd5b6001600160a01b03821661094a5760405162461bcd60e51b8152600401808060200182810382526023815260200180610d966023913960400191505060405180910390fd5b6109558383836108bb565b61099281604051806060016040528060268152602001610e01602691396001600160a01b0386166000908152602081905260409020549190610be7565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546109c19082610a9d565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000610a288484846108c0565b610a9384610a34610886565b6104e185604051806060016040528060288152602001610e27602891396001600160a01b038a16600090815260016020526040812090610a72610886565b6001600160a01b031681526020810191909152604001600020549190610be7565b5060019392505050565b600082820183811015610483576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b038216610b52576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610b5e600083836108bb565b600254610b6b9082610a9d565b6002556001600160a01b038216600090815260208190526040902054610b919082610a9d565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008184841115610c765760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c3b578181015183820152602001610c23565b50505050905090810190601f168015610c685780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b038316610cee5760405162461bcd60e51b8152600401808060200182810382526024815260200180610e746024913960400191505060405180910390fd5b6001600160a01b038216610d335760405162461bcd60e51b8152600401808060200182810382526022815260200180610ddf6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350505056fe45524332303a207472616e7366657220746f20746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220bbf790299035d06cb63826bea87e2cc4be5adf7ebe0fa37850c8920954f2a58d64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100625760003560e01c806374e861d61461006757806380274db71461008b57806383947ea014610141578063ad61ccd51461031d578063e06e0e221461039a578063fc0c546a1461044d575b600080fd5b61006f610455565b604080516001600160a01b039092168252519081900360200190f35b61012f600480360360208110156100a157600080fd5b810190602081018135600160201b8111156100bb57600080fd5b8201836020820111156100cd57600080fd5b803590602001918460018302840111600160201b831117156100ee57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610464945050505050565b60408051918252519081900360200190f35b61029e600480360361012081101561015857600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561018b57600080fd5b82018360208201111561019d57600080fd5b803590602001918460018302840111600160201b831117156101be57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929584359560208601359560408101359550606081013594509192509060a081019060800135600160201b81111561022857600080fd5b82018360208201111561023a57600080fd5b803590602001918460018302840111600160201b8311171561025b57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050913592506104cc915050565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102e15781810151838201526020016102c9565b50505050905090810190601f16801561030e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6103256105bb565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561035f578181015183820152602001610347565b50505050905090810190601f16801561038c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61044b600480360360808110156103b057600080fd5b810190602081018135600160201b8111156103ca57600080fd5b8201836020820111156103dc57600080fd5b803590602001918460018302840111600160201b831117156103fd57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550505050803515159150602081013590604001356105da565b005b61006f610643565b6000546001600160a01b031690565b600061046e610455565b6001600160a01b0316336001600160a01b0316146104bd5760405162461bcd60e51b8152600401808060200182810382526024815260200180610b516024913960400191505060405180910390fd5b6104c682610652565b92915050565b600154604080516370a0823160e01b81526001600160a01b038b81166004830152915160009360609386939116916370a0823191602480820192602092909190829003018186803b15801561052057600080fd5b505afa158015610534573d6000803e3d6000fd5b505050506040513d602081101561054a57600080fd5b505110156105655761055c6000610699565b915091506105ad565b604080516001600160a01b038c166020820152808201859052606081018a905260808082018a90528251808303909101815260a09091019091526105a8906106b1565b915091505b995099975050505050505050565b6040805180820190915260058152640312e302e360dc1b602082015290565b6105e2610455565b6001600160a01b0316336001600160a01b0316146106315760405162461bcd60e51b8152600401808060200182810382526024815260200180610b516024913960400191505060405180910390fd5b61063d848484846106b6565b50505050565b6001546001600160a01b031690565b600080600083806020019051604081101561066c57600080fd5b5080516020909101516001549193509150610692906001600160a01b0316833084610743565b5050919050565b604080516020810190915260008152600b9190910191565b600091565b6000806000808780602001905160808110156106d157600080fd5b50805160208201516040830151606090930151919650945090925090506000610709610702620186a061271061079d565b83856107e6565b9050610715878261079d565b965061073885610725868a61079d565b6001546001600160a01b031691906107f4565b505050505050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261063d90859061084b565b60006107df83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506108fc565b9392505050565b606490810191909202020490565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261084690849061084b565b505050565b60606108a0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109939092919063ffffffff16565b805190915015610846578080602001905160208110156108bf57600080fd5b50516108465760405162461bcd60e51b815260040180806020018281038252602a815260200180610b75602a913960400191505060405180910390fd5b6000818484111561098b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610950578181015183820152602001610938565b50505050905090810190601f16801561097d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60606109a284846000856109aa565b949350505050565b60606109b585610b17565b610a06576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310610a455780518252601f199092019160209182019101610a26565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610aa7576040519150601f19603f3d011682016040523d82523d6000602084013e610aac565b606091505b50915091508115610ac05791506109a29050565b805115610ad05780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315610950578181015183820152602001610938565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906109a257505015159291505056fe47534e526563697069656e743a2063616c6c6572206973206e6f742052656c61794875625361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220f692cd5cea7f0f944b303577005792bb7343f456b7b8739ed54b54274eba292864736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "RelayHubChanged", "inputs": [{"name": "oldRelayHub", "type": "address", "indexed": true, "internalType": "address"}, {"name": "newRelayHub", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "acceptRelayedCall", "stateMutability": "view", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "", "type": "bytes", "internalType": "bytes"}, {"name": "transactionFee", "type": "uint256", "internalType": "uint256"}, {"name": "gasPrice", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "bytes", "internalType": "bytes"}, {"name": "maxPossibleCharge", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "bytes", "internalType": "bytes"}]}, {"type": "function", "name": "getHubAddr", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "postRelayedCall", "stateMutability": "nonpayable", "inputs": [{"name": "context", "type": "bytes", "internalType": "bytes"}, {"name": "success", "type": "bool", "internalType": "bool"}, {"name": "actualCharge", "type": "uint256", "internalType": "uint256"}, {"name": "preRetVal", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "preRelayedCall", "stateMutability": "nonpayable", "inputs": [{"name": "context", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "relayHubVersion", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "token", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "contract IERC20"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "A xref:ROOT:gsn-strategies.adoc#gsn-strategies[GSN strategy] that charges transaction fees in a special purpose ERC20 token, which we refer to as the gas payment token. The amount charged is exactly the amount of Ether charged to the recipient. This means that the token is essentially pegged to the value of Ether. The distribution strategy of the gas payment token to users is not defined by this contract. It's a mintable token whose only minter is the recipient, so the strategy must be implemented in a derived contract, making use of the internal {_mint} function.", "kind": "dev", "methods": {"acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)": {"details": "Ensures that only users with enough gas payment token balance can have transactions relayed through the GSN."}, "constructor": {"details": "The arguments to the constructor are the details that the gas payment token will have: `name` and `symbol`. `decimals` is hard-coded to 18."}, "getHubAddr()": {"details": "Returns the address of the {IRelayHub} contract for this recipient."}, "postRelayedCall(bytes,bool,uint256,bytes32)": {"details": "See `IRelayRecipient.postRelayedCall`. This function should not be overriden directly, use `_postRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract."}, "preRelayedCall(bytes)": {"details": "See `IRelayRecipient.preRelayedCall`. This function should not be overriden directly, use `_preRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract."}, "relayHubVersion()": {"details": "Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version."}, "token()": {"details": "Returns the gas payment token."}}, "version": 1}}, "__unstable__ERC20Owned": {"contractName": "__unstable__ERC20Owned", "sourceId": "GSN/GSNRecipientERC20Fee.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d7146102d9578063a9059cbb14610305578063dd62ed3e14610331578063f2fde38b1461035f576100f5565b806370a082311461027f578063715018a6146102a55780638da5cb5b146102ad57806395d89b41146102d1576100f5565b806323b872dd116100d357806323b872dd146101d1578063313ce56714610207578063395093511461022557806340c10f1914610251576100f5565b806306fdde03146100fa578063095ea7b31461017757806318160ddd146101b7575b600080fd5b610102610385565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561013c578181015183820152602001610124565b50505050905090810190601f1680156101695780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101a36004803603604081101561018d57600080fd5b506001600160a01b03813516906020013561041b565b604080519115158252519081900360200190f35b6101bf610439565b60408051918252519081900360200190f35b6101a3600480360360608110156101e757600080fd5b506001600160a01b0381358116916020810135909116906040013561043f565b61020f61048a565b6040805160ff9092168252519081900360200190f35b6101a36004803603604081101561023b57600080fd5b506001600160a01b038135169060200135610493565b61027d6004803603604081101561026757600080fd5b506001600160a01b0381351690602001356104e6565b005b6101bf6004803603602081101561029557600080fd5b50356001600160a01b0316610563565b61027d61057e565b6102b561063d565b604080516001600160a01b039092168252519081900360200190f35b610102610651565b6101a3600480360360408110156102ef57600080fd5b506001600160a01b0381351690602001356106b2565b6101a36004803603604081101561031b57600080fd5b506001600160a01b03813516906020013561071a565b6101bf6004803603604081101561034757600080fd5b506001600160a01b038135811691602001351661072e565b61027d6004803603602081101561037557600080fd5b50356001600160a01b031661076b565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104115780601f106103e657610100808354040283529160200191610411565b820191906000526020600020905b8154815290600101906020018083116103f457829003601f168201915b5050505050905090565b600061042f610428610886565b848461088a565b5060015b92915050565b60025490565b600061044961063d565b6001600160a01b0316836001600160a01b031614156104755761046d8484846108c0565b506001610483565b610480848484610a1b565b90505b9392505050565b60055460ff1690565b600061042f6104a0610886565b846104e185600160006104b1610886565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610a9d565b61088a565b6104ee610886565b60055461010090046001600160a01b03908116911614610555576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61055f8282610af7565b5050565b6001600160a01b031660009081526020819052604090205490565b610586610886565b60055461010090046001600160a01b039081169116146105ed576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b60055461010090046001600160a01b031690565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104115780601f106103e657610100808354040283529160200191610411565b600061042f6106bf610886565b846104e185604051806060016040528060258152602001610e9860259139600160006106e9610886565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610be7565b600061042f610727610886565b84846108c0565b600061073861063d565b6001600160a01b0316826001600160a01b0316141561075a5750600019610433565b6107648383610c7e565b9050610433565b610773610886565b60055461010090046001600160a01b039081169116146107da576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661081f5760405162461bcd60e51b8152600401808060200182810382526026815260200180610db96026913960400191505060405180910390fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b3390565b61089261063d565b6001600160a01b0316826001600160a01b031614156108b0576108bb565b6108bb838383610ca9565b505050565b6001600160a01b0383166109055760405162461bcd60e51b8152600401808060200182810382526025815260200180610e4f6025913960400191505060405180910390fd5b6001600160a01b03821661094a5760405162461bcd60e51b8152600401808060200182810382526023815260200180610d966023913960400191505060405180910390fd5b6109558383836108bb565b61099281604051806060016040528060268152602001610e01602691396001600160a01b0386166000908152602081905260409020549190610be7565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546109c19082610a9d565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000610a288484846108c0565b610a9384610a34610886565b6104e185604051806060016040528060288152602001610e27602891396001600160a01b038a16600090815260016020526040812090610a72610886565b6001600160a01b031681526020810191909152604001600020549190610be7565b5060019392505050565b600082820183811015610483576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b038216610b52576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610b5e600083836108bb565b600254610b6b9082610a9d565b6002556001600160a01b038216600090815260208190526040902054610b919082610a9d565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008184841115610c765760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c3b578181015183820152602001610c23565b50505050905090810190601f168015610c685780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b038316610cee5760405162461bcd60e51b8152600401808060200182810382526024815260200180610e746024913960400191505060405180910390fd5b6001600160a01b038216610d335760405162461bcd60e51b8152600401808060200182810382526022815260200180610ddf6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350505056fe45524332303a207472616e7366657220746f20746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220bbf790299035d06cb63826bea87e2cc4be5adf7ebe0fa37850c8920954f2a58d64736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "spender", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "OwnershipTransferred", "inputs": [{"name": "previousOwner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "newOwner", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "tokenOwner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "owner", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "renounceOwnership", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferOwnership", "stateMutability": "nonpayable", "inputs": [{"name": "newOwner", "type": "address", "internalType": "address"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "An ERC20 token owned by another contract, which has minting permissions and can use transferFrom to receive anyone's tokens. This contract is an internal helper for GSNRecipientERC20Fee, and should not be used outside of this context.", "kind": "dev", "methods": {"approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "owner()": {"details": "Returns the address of the current owner."}, "renounceOwnership()": {"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}, "transferOwnership(address)": {"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}, "title": "__unstable__ERC20Owned", "version": 1}}, "GSNRecipientSignature": {"contractName": "GSNRecipientSignature", "sourceId": "GSN/GSNRecipientSignature.sol", "deploymentBytecode": {"bytecode": "6080604052600080546001600160a01b03191673d216153c06e857cd7f72665e0af1d7d82172f49417905534801561003657600080fd5b50604051610aa7380380610aa78339818101604052602081101561005957600080fd5b50516001600160a01b0381166100a05760405162461bcd60e51b8152600401808060200182810382526039815260200180610a6e6039913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b039290921691909117905561099f806100cf6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806374e861d61461005c57806380274db71461008057806383947ea014610136578063ad61ccd514610312578063e06e0e221461038f575b600080fd5b610064610442565b604080516001600160a01b039092168252519081900360200190f35b6101246004803603602081101561009657600080fd5b810190602081018135600160201b8111156100b057600080fd5b8201836020820111156100c257600080fd5b803590602001918460018302840111600160201b831117156100e357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610451945050505050565b60408051918252519081900360200190f35b610293600480360361012081101561014d57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561018057600080fd5b82018360208201111561019257600080fd5b803590602001918460018302840111600160201b831117156101b357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929584359560208601359560408101359550606081013594509192509060a081019060800135600160201b81111561021d57600080fd5b82018360208201111561022f57600080fd5b803590602001918460018302840111600160201b8311171561025057600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050913592506104b9915050565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102d65781810151838201526020016102be565b50505050905090810190601f1680156103035780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b61031a6105fa565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561035457818101518382015260200161033c565b50505050905090810190601f1680156103815780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610440600480360360808110156103a557600080fd5b810190602081018135600160201b8111156103bf57600080fd5b8201836020820111156103d157600080fd5b803590602001918460018302840111600160201b831117156103f257600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050505080351515915060208101359060400135610619565b005b6000546001600160a01b031690565b600061045b610442565b6001600160a01b0316336001600160a01b0316146104aa5760405162461bcd60e51b81526004018080602001828103825260248152602001806109466024913960400191505060405180910390fd5b6104b38261067e565b92915050565b60006060808b8b8b8b8b8b8b6104cd610442565b30604051602001808a6001600160a01b031660601b8152601401896001600160a01b031660601b815260140188805190602001908083835b602083106105245780518252601f199092019160209182019101610505565b51815160209384036101000a6000190180199092169116179052920198895250878101969096525060408087019490945260608087019390935290821b6bffffffffffffffffffffffff199081166080870152911b1660948401528051808403608801815260a890930190526001548251918301919091209195506001600160a01b031693506105c192508891506105bb90610684565b906106d5565b6001600160a01b031614156105e2576105d86108c0565b92509250506105ec565b6105d860006108e4565b995099975050505050505050565b6040805180820190915260058152640312e302e360dc1b602082015290565b610621610442565b6001600160a01b0316336001600160a01b0316146106705760405162461bcd60e51b81526004018080602001828103825260248152602001806109466024913960400191505060405180910390fd5b610678848484845b50505050565b50600090565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b6000815160411461072d576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561079e5760405162461bcd60e51b81526004018080602001828103825260228152602001806109026022913960400191505060405180910390fd5b8060ff16601b141580156107b657508060ff16601c14155b156107f25760405162461bcd60e51b81526004018080602001828103825260228152602001806109246022913960400191505060405180910390fd5b600060018783868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561084e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166108b6576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b9695505050505050565b600060606108dc604051806020016040528060008152506108fc565b915091509091565b604080516020810190915260008152600b9190910191565b60009156fe45434453413a20696e76616c6964207369676e6174757265202773272076616c756545434453413a20696e76616c6964207369676e6174757265202776272076616c756547534e526563697069656e743a2063616c6c6572206973206e6f742052656c6179487562a26469706673582212201f76282a751f4d949dfc0f04112a73a6feb9a1743590935db8ec8200630c41b864736f6c634300060c003347534e526563697069656e745369676e61747572653a2074727573746564207369676e657220697320746865207a65726f2061646472657373"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100575760003560e01c806374e861d61461005c57806380274db71461008057806383947ea014610136578063ad61ccd514610312578063e06e0e221461038f575b600080fd5b610064610442565b604080516001600160a01b039092168252519081900360200190f35b6101246004803603602081101561009657600080fd5b810190602081018135600160201b8111156100b057600080fd5b8201836020820111156100c257600080fd5b803590602001918460018302840111600160201b831117156100e357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610451945050505050565b60408051918252519081900360200190f35b610293600480360361012081101561014d57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561018057600080fd5b82018360208201111561019257600080fd5b803590602001918460018302840111600160201b831117156101b357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929584359560208601359560408101359550606081013594509192509060a081019060800135600160201b81111561021d57600080fd5b82018360208201111561022f57600080fd5b803590602001918460018302840111600160201b8311171561025057600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050913592506104b9915050565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102d65781810151838201526020016102be565b50505050905090810190601f1680156103035780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b61031a6105fa565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561035457818101518382015260200161033c565b50505050905090810190601f1680156103815780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610440600480360360808110156103a557600080fd5b810190602081018135600160201b8111156103bf57600080fd5b8201836020820111156103d157600080fd5b803590602001918460018302840111600160201b831117156103f257600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050505080351515915060208101359060400135610619565b005b6000546001600160a01b031690565b600061045b610442565b6001600160a01b0316336001600160a01b0316146104aa5760405162461bcd60e51b81526004018080602001828103825260248152602001806109466024913960400191505060405180910390fd5b6104b38261067e565b92915050565b60006060808b8b8b8b8b8b8b6104cd610442565b30604051602001808a6001600160a01b031660601b8152601401896001600160a01b031660601b815260140188805190602001908083835b602083106105245780518252601f199092019160209182019101610505565b51815160209384036101000a6000190180199092169116179052920198895250878101969096525060408087019490945260608087019390935290821b6bffffffffffffffffffffffff199081166080870152911b1660948401528051808403608801815260a890930190526001548251918301919091209195506001600160a01b031693506105c192508891506105bb90610684565b906106d5565b6001600160a01b031614156105e2576105d86108c0565b92509250506105ec565b6105d860006108e4565b995099975050505050505050565b6040805180820190915260058152640312e302e360dc1b602082015290565b610621610442565b6001600160a01b0316336001600160a01b0316146106705760405162461bcd60e51b81526004018080602001828103825260248152602001806109466024913960400191505060405180910390fd5b610678848484845b50505050565b50600090565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b6000815160411461072d576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561079e5760405162461bcd60e51b81526004018080602001828103825260228152602001806109026022913960400191505060405180910390fd5b8060ff16601b141580156107b657508060ff16601c14155b156107f25760405162461bcd60e51b81526004018080602001828103825260228152602001806109246022913960400191505060405180910390fd5b600060018783868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561084e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166108b6576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b9695505050505050565b600060606108dc604051806020016040528060008152506108fc565b915091509091565b604080516020810190915260008152600b9190910191565b60009156fe45434453413a20696e76616c6964207369676e6174757265202773272076616c756545434453413a20696e76616c6964207369676e6174757265202776272076616c756547534e526563697069656e743a2063616c6c6572206973206e6f742052656c6179487562a26469706673582212201f76282a751f4d949dfc0f04112a73a6feb9a1743590935db8ec8200630c41b864736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "trustedSigner", "type": "address", "internalType": "address"}]}, {"type": "event", "name": "RelayHubChanged", "inputs": [{"name": "oldRelayHub", "type": "address", "indexed": true, "internalType": "address"}, {"name": "newRelayHub", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "acceptRelayedCall", "stateMutability": "view", "inputs": [{"name": "relay", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "encodedFunction", "type": "bytes", "internalType": "bytes"}, {"name": "transactionFee", "type": "uint256", "internalType": "uint256"}, {"name": "gasPrice", "type": "uint256", "internalType": "uint256"}, {"name": "gasLimit", "type": "uint256", "internalType": "uint256"}, {"name": "nonce", "type": "uint256", "internalType": "uint256"}, {"name": "approvalData", "type": "bytes", "internalType": "bytes"}, {"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "bytes", "internalType": "bytes"}]}, {"type": "function", "name": "getHubAddr", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "postRelayedCall", "stateMutability": "nonpayable", "inputs": [{"name": "context", "type": "bytes", "internalType": "bytes"}, {"name": "success", "type": "bool", "internalType": "bool"}, {"name": "actualCharge", "type": "uint256", "internalType": "uint256"}, {"name": "preRetVal", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "preRelayedCall", "stateMutability": "nonpayable", "inputs": [{"name": "context", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "relayHubVersion", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "A xref:ROOT:gsn-strategies.adoc#gsn-strategies[GSN strategy] that allows relayed transactions through when they are accompanied by the signature of a trusted signer. The intent is for this signature to be generated by a server that performs validations off-chain. Note that nothing is charged to the user in this scheme. Thus, the server should make sure to account for this in their economic and threat model.", "kind": "dev", "methods": {"acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)": {"details": "Ensures that only transactions with a trusted signature can be relayed through the GSN."}, "constructor": {"details": "Sets the trusted signer that is going to be producing signatures to approve relayed calls."}, "getHubAddr()": {"details": "Returns the address of the {IRelayHub} contract for this recipient."}, "postRelayedCall(bytes,bool,uint256,bytes32)": {"details": "See `IRelayRecipient.postRelayedCall`. This function should not be overriden directly, use `_postRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract."}, "preRelayedCall(bytes)": {"details": "See `IRelayRecipient.preRelayedCall`. This function should not be overriden directly, use `_preRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract."}, "relayHubVersion()": {"details": "Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version."}}, "version": 1}}, "IRelayHub": {"contractName": "IRelayHub", "sourceId": "GSN/IRelayHub.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "event", "name": "CanRelayFailed", "inputs": [{"name": "relay", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "selector", "type": "bytes4", "indexed": false, "internalType": "bytes4"}, {"name": "reason", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Deposited", "inputs": [{"name": "recipient", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "amount", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Penalized", "inputs": [{"name": "relay", "type": "address", "indexed": true, "internalType": "address"}, {"name": "sender", "type": "address", "indexed": false, "internalType": "address"}, {"name": "amount", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "RelayAdded", "inputs": [{"name": "relay", "type": "address", "indexed": true, "internalType": "address"}, {"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "transactionFee", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "stake", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "unstakeDelay", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "url", "type": "string", "indexed": false, "internalType": "string"}], "anonymous": false}, {"type": "event", "name": "RelayRemoved", "inputs": [{"name": "relay", "type": "address", "indexed": true, "internalType": "address"}, {"name": "unstakeTime", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Staked", "inputs": [{"name": "relay", "type": "address", "indexed": true, "internalType": "address"}, {"name": "stake", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "unstakeDelay", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "TransactionRelayed", "inputs": [{"name": "relay", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "selector", "type": "bytes4", "indexed": false, "internalType": "bytes4"}, {"name": "status", "type": "uint8", "indexed": false, "internalType": "enum IRelayHub.RelayCallStatus"}, {"name": "charge", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Unstaked", "inputs": [{"name": "relay", "type": "address", "indexed": true, "internalType": "address"}, {"name": "stake", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Withdrawn", "inputs": [{"name": "account", "type": "address", "indexed": true, "internalType": "address"}, {"name": "dest", "type": "address", "indexed": true, "internalType": "address"}, {"name": "amount", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "target", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "canRelay", "stateMutability": "view", "inputs": [{"name": "relay", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "encodedFunction", "type": "bytes", "internalType": "bytes"}, {"name": "transactionFee", "type": "uint256", "internalType": "uint256"}, {"name": "gasPrice", "type": "uint256", "internalType": "uint256"}, {"name": "gasLimit", "type": "uint256", "internalType": "uint256"}, {"name": "nonce", "type": "uint256", "internalType": "uint256"}, {"name": "signature", "type": "bytes", "internalType": "bytes"}, {"name": "approvalData", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "status", "type": "uint256", "internalType": "uint256"}, {"name": "recipientContext", "type": "bytes", "internalType": "bytes"}]}, {"type": "function", "name": "depositFor", "stateMutability": "payable", "inputs": [{"name": "target", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "getNonce", "stateMutability": "view", "inputs": [{"name": "from", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getRelay", "stateMutability": "view", "inputs": [{"name": "relay", "type": "address", "internalType": "address"}], "outputs": [{"name": "totalStake", "type": "uint256", "internalType": "uint256"}, {"name": "unstakeDelay", "type": "uint256", "internalType": "uint256"}, {"name": "unstakeTime", "type": "uint256", "internalType": "uint256"}, {"name": "owner", "type": "address", "internalType": "address payable"}, {"name": "state", "type": "uint8", "internalType": "enum IRelayHub.RelayState"}]}, {"type": "function", "name": "maxPossibleCharge", "stateMutability": "view", "inputs": [{"name": "relayedCallStipend", "type": "uint256", "internalType": "uint256"}, {"name": "gasPrice", "type": "uint256", "internalType": "uint256"}, {"name": "transactionFee", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "penalizeIllegalTransaction", "stateMutability": "nonpayable", "inputs": [{"name": "unsignedTx", "type": "bytes", "internalType": "bytes"}, {"name": "signature", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "penalizeRepeatedNonce", "stateMutability": "nonpayable", "inputs": [{"name": "unsignedTx1", "type": "bytes", "internalType": "bytes"}, {"name": "signature1", "type": "bytes", "internalType": "bytes"}, {"name": "unsignedTx2", "type": "bytes", "internalType": "bytes"}, {"name": "signature2", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "registerRelay", "stateMutability": "nonpayable", "inputs": [{"name": "transactionFee", "type": "uint256", "internalType": "uint256"}, {"name": "url", "type": "string", "internalType": "string"}], "outputs": []}, {"type": "function", "name": "relayCall", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "encodedFunction", "type": "bytes", "internalType": "bytes"}, {"name": "transactionFee", "type": "uint256", "internalType": "uint256"}, {"name": "gasPrice", "type": "uint256", "internalType": "uint256"}, {"name": "gasLimit", "type": "uint256", "internalType": "uint256"}, {"name": "nonce", "type": "uint256", "internalType": "uint256"}, {"name": "signature", "type": "bytes", "internalType": "bytes"}, {"name": "approvalData", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "removeRelayByOwner", "stateMutability": "nonpayable", "inputs": [{"name": "relay", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "requiredGas", "stateMutability": "view", "inputs": [{"name": "relayedCallStipend", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "stake", "stateMutability": "payable", "inputs": [{"name": "relayaddr", "type": "address", "internalType": "address"}, {"name": "unstakeDelay", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "unstake", "stateMutability": "nonpayable", "inputs": [{"name": "relay", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "withdraw", "stateMutability": "nonpayable", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "dest", "type": "address", "internalType": "address payable"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {"unstake(address)": {"notice": "Deletes the relay from the system, and gives back its stake to the owner. Can only be called by the relay owner, after `unstakeDelay` has elapsed since {removeRelayByOwner} was called. Emits an {Unstaked} event."}, "withdraw(uint256,address)": {"notice": "Withdraws from an account's balance, sending it back to it. Relay owners call this to retrieve their revenue, and contracts can use it to reduce their funding. Emits a {Withdrawn} event."}}, "version": 1}, "devdoc": {"details": "Interface for `RelayHub`, the core contract of the GSN. Users should not need to interact with this contract directly. See the https://github.com/OpenZeppelin/openzeppelin-gsn-helpers[OpenZeppelin GSN helpers] for more information on how to deploy an instance of `RelayHub` on your local test network.", "events": {"CanRelayFailed(address,address,address,bytes4,uint256)": {"details": "Emitted when an attempt to relay a call failed. This can happen due to incorrect {relayCall} arguments, or the recipient not accepting the relayed call. The actual relayed call was not executed, and the recipient not charged. The `reason` parameter contains an error code: values 1-10 correspond to `PreconditionCheck` entries, and values over 10 are custom recipient error codes returned from {acceptRelayedCall}."}, "Deposited(address,address,uint256)": {"details": "Emitted when {depositFor} is called, including the amount and account that was funded."}, "Penalized(address,address,uint256)": {"details": "Emitted when a relay is penalized."}, "RelayAdded(address,address,uint256,uint256,uint256,string)": {"details": "Emitted when a relay is registered or re-registerd. Looking at these events (and filtering out {RelayRemoved} events) lets a client discover the list of available relays."}, "RelayRemoved(address,uint256)": {"details": "Emitted when a relay is removed (deregistered). `unstakeTime` is the time when unstake will be callable."}, "Staked(address,uint256,uint256)": {"details": "Emitted when a relay's stake or unstakeDelay are increased"}, "TransactionRelayed(address,address,address,bytes4,uint8,uint256)": {"details": "Emitted when a transaction is relayed. Useful when monitoring a relay's operation and relayed calls to a contract Note that the actual encoded function might be reverted: this is indicated in the `status` parameter. `charge` is the Ether value deducted from the recipient's balance, paid to the relay's owner."}, "Unstaked(address,uint256)": {"details": "Emitted when a relay is unstaked for, including the returned stake."}, "Withdrawn(address,address,uint256)": {"details": "Emitted when an account withdraws funds from `RelayHub`."}}, "kind": "dev", "methods": {"balanceOf(address)": {"details": "Returns an account's deposits. These can be either a contracts's funds, or a relay owner's revenue."}, "canRelay(address,address,address,bytes,uint256,uint256,uint256,uint256,bytes,bytes)": {"details": "Checks if the `RelayHub` will accept a relayed operation. Multiple things must be true for this to happen:  - all arguments must be signed for by the sender (`from`)  - the sender's nonce must be the current one  - the recipient must accept this transaction (via {acceptRelayedCall}) Returns a `PreconditionCheck` value (`OK` when the transaction can be relayed), or a recipient-specific error code if it returns one in {acceptRelayedCall}."}, "depositFor(address)": {"details": "Deposits Ether for a contract, so that it can receive (and pay for) relayed transactions. Unused balance can only be withdrawn by the contract itself, by calling {withdraw}. Emits a {Deposited} event."}, "getNonce(address)": {"details": "Returns an account's nonce in `RelayHub`."}, "getRelay(address)": {"details": "Returns a relay's status. Note that relays can be deleted when unstaked or penalized, causing this function to return an empty entry."}, "maxPossibleCharge(uint256,uint256,uint256)": {"details": "Returns the maximum recipient charge, given the amount of gas forwarded, gas price and relay fee."}, "penalizeIllegalTransaction(bytes,bytes)": {"details": "Penalize a relay that sent a transaction that didn't target ``RelayHub``'s {registerRelay} or {relayCall}."}, "penalizeRepeatedNonce(bytes,bytes,bytes,bytes)": {"details": "Penalize a relay that signed two transactions using the same nonce (making only the first one valid) and different data (gas price, gas limit, etc. may be different). The (unsigned) transaction data and signature for both transactions must be provided."}, "registerRelay(uint256,string)": {"details": "Registers the caller as a relay. The relay must be staked for, and not be a contract (i.e. this function must be called directly from an EOA). This function can be called multiple times, emitting new {RelayAdded} events. Note that the received `transactionFee` is not enforced by {relayCall}. Emits a {RelayAdded} event."}, "relayCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,bytes)": {"details": "Relays a transaction. For this to succeed, multiple conditions must be met:  - {canRelay} must `return PreconditionCheck.OK`  - the sender must be a registered relay  - the transaction's gas price must be larger or equal to the one that was requested by the sender  - the transaction must have enough gas to not run out of gas if all internal transactions (calls to the recipient) use all gas available to them  - the recipient must have enough balance to pay the relay for the worst-case scenario (i.e. when all gas is spent) If all conditions are met, the call will be relayed and the recipient charged. {preRelayedCall}, the encoded function and {postRelayedCall} will be called in that order. Parameters:  - `from`: the client originating the request  - `to`: the target {IRelayRecipient} contract  - `encodedFunction`: the function call to relay, including data  - `transactionFee`: fee (%) the relay takes over actual gas cost  - `gasPrice`: gas price the client is willing to pay  - `gasLimit`: gas to forward when calling the encoded function  - `nonce`: client's nonce  - `signature`: client's signature over all previous params, plus the relay and RelayHub addresses  - `approvalData`: dapp-specific data forwared to {acceptRelayedCall}. This value is *not* verified by the `RelayHub`, but it still can be used for e.g. a signature. Emits a {TransactionRelayed} event."}, "removeRelayByOwner(address)": {"details": "Removes (deregisters) a relay. Unregistered (but staked for) relays can also be removed. Can only be called by the owner of the relay. After the relay's `unstakeDelay` has elapsed, {unstake} will be callable. Emits a {RelayRemoved} event."}, "requiredGas(uint256)": {"details": "Returns how much gas should be forwarded to a call to {relayCall}, in order to relay a transaction that will spend up to `relayedCallStipend` gas."}, "stake(address,uint256)": {"details": "Adds stake to a relay and sets its `unstakeDelay`. If the relay does not exist, it is created, and the caller of this function becomes its owner. If the relay already exists, only the owner can call this function. A relay cannot be its own owner. All Ether in this function call will be added to the relay's stake. Its unstake delay will be assigned to `unstakeDelay`, but the new value must be greater or equal to the current one. Emits a {Staked} event."}}, "version": 1}}, "IRelayRecipient": {"contractName": "IRelayRecipient", "sourceId": "GSN/IRelayRecipient.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "function", "name": "acceptRelayedCall", "stateMutability": "view", "inputs": [{"name": "relay", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "encodedFunction", "type": "bytes", "internalType": "bytes"}, {"name": "transactionFee", "type": "uint256", "internalType": "uint256"}, {"name": "gasPrice", "type": "uint256", "internalType": "uint256"}, {"name": "gasLimit", "type": "uint256", "internalType": "uint256"}, {"name": "nonce", "type": "uint256", "internalType": "uint256"}, {"name": "approvalData", "type": "bytes", "internalType": "bytes"}, {"name": "maxPossibleCharge", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "bytes", "internalType": "bytes"}]}, {"type": "function", "name": "getHubAddr", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "postRelayedCall", "stateMutability": "nonpayable", "inputs": [{"name": "context", "type": "bytes", "internalType": "bytes"}, {"name": "success", "type": "bool", "internalType": "bool"}, {"name": "actualCharge", "type": "uint256", "internalType": "uint256"}, {"name": "preRetVal", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "preRelayedCall", "stateMutability": "nonpayable", "inputs": [{"name": "context", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Base interface for a contract that will be called via the GSN from {IRelayHub}. TIP: You don't need to write an implementation yourself! Inherit from {GSNRecipient} instead.", "kind": "dev", "methods": {"acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)": {"details": "Called by {IRelayHub} to validate if this recipient accepts being charged for a relayed call. Note that the recipient will be charged regardless of the execution result of the relayed call (i.e. if it reverts or not). The relay request was originated by `from` and will be served by `relay`. `encodedFunction` is the relayed call calldata, so its first four bytes are the function selector. The relayed call will be forwarded `gasLimit` gas, and the transaction executed with a gas price of at least `gasPrice`. ``relay``'s fee is `transactionFee`, and the recipient will be charged at most `maxPossibleCharge` (in wei). `nonce` is the sender's (`from`) nonce for replay attack protection in {IRelayHub}, and `approvalData` is a optional parameter that can be used to hold a signature over all or some of the previous values. Returns a tuple, where the first value is used to indicate approval (0) or rejection (custom non-zero error code, values 1 to 10 are reserved) and the second one is data to be passed to the other {IRelayRecipient} functions. {acceptRelayedCall} is called with 50k gas: if it runs out during execution, the request will be considered rejected. A regular revert will also trigger a rejection."}, "getHubAddr()": {"details": "Returns the address of the {IRelayHub} instance this recipient interacts with."}, "postRelayedCall(bytes,bool,uint256,bytes32)": {"details": "Called by {IRelayHub} on approved relay call requests, after the relayed call is executed. This allows to e.g. charge the user for the relayed call costs, return any overcharges from {preRelayedCall}, or perform contract-specific bookkeeping. `context` is the second value returned in the tuple by {acceptRelayedCall}. `success` is the execution status of the relayed call. `actualCharge` is an estimate of how much the recipient will be charged for the transaction, not including any gas used by {postRelayedCall} itself. `preRetVal` is {preRelayedCall}'s return value. {postRelayedCall} is called with 100k gas: if it runs out during execution or otherwise reverts, the relayed call and the call to {preRelayedCall} will be reverted retroactively, but the recipient will still be charged for the transaction's cost."}, "preRelayedCall(bytes)": {"details": "Called by {IRelayHub} on approved relay call requests, before the relayed call is executed. This allows to e.g. pre-charge the sender of the transaction. `context` is the second value returned in the tuple by {acceptRelayedCall}. Returns a value to be passed to {postRelayedCall}. {preRelayedCall} is called with 100k gas: if it runs out during exection or otherwise reverts, the relayed call will not be executed, but the recipient will still be charged for the transaction's cost."}}, "version": 1}}, "AccessControl": {"contractName": "AccessControl", "sourceId": "access/AccessControl.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "event", "name": "RoleAdminChanged", "inputs": [{"name": "role", "type": "bytes32", "indexed": true, "internalType": "bytes32"}, {"name": "previousAdminRole", "type": "bytes32", "indexed": true, "internalType": "bytes32"}, {"name": "newAdminRole", "type": "bytes32", "indexed": true, "internalType": "bytes32"}], "anonymous": false}, {"type": "event", "name": "RoleGranted", "inputs": [{"name": "role", "type": "bytes32", "indexed": true, "internalType": "bytes32"}, {"name": "account", "type": "address", "indexed": true, "internalType": "address"}, {"name": "sender", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "RoleRevoked", "inputs": [{"name": "role", "type": "bytes32", "indexed": true, "internalType": "bytes32"}, {"name": "account", "type": "address", "indexed": true, "internalType": "address"}, {"name": "sender", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "DEFAULT_ADMIN_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "getRoleAdmin", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "getRoleMember", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getRoleMemberCount", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "grantRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "hasRole", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "renounceRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "revokeRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Contract module that allows children to implement role-based access control mechanisms. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.", "events": {"RoleAdminChanged(bytes32,bytes32,bytes32)": {"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"}, "RoleGranted(bytes32,address,address)": {"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {_setupRole}."}, "RoleRevoked(bytes32,address,address)": {"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}}, "kind": "dev", "methods": {"getRoleAdmin(bytes32)": {"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."}, "getRoleMember(bytes32,uint256)": {"details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."}, "getRoleMemberCount(bytes32)": {"details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."}, "grantRole(bytes32,address)": {"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."}, "hasRole(bytes32,address)": {"details": "Returns `true` if `account` has been granted `role`."}, "renounceRole(bytes32,address)": {"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."}, "revokeRole(bytes32,address)": {"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}}, "version": 1}}, "Ownable": {"contractName": "Ownable", "sourceId": "access/Ownable.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "event", "name": "OwnershipTransferred", "inputs": [{"name": "previousOwner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "newOwner", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "owner", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "renounceOwnership", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "transferOwnership", "stateMutability": "nonpayable", "inputs": [{"name": "newOwner", "type": "address", "internalType": "address"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.", "kind": "dev", "methods": {"constructor": {"details": "Initializes the contract setting the deployer as the initial owner."}, "owner()": {"details": "Returns the address of the current owner."}, "renounceOwnership()": {"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."}, "transferOwnership(address)": {"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}, "version": 1}}, "ECDSA": {"contractName": "ECDSA", "sourceId": "cryptography/ECDSA.sol", "deploymentBytecode": {"bytecode": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fa452bebc6aa4f980907e2dad81f6dadeba828e1b2f6de08701740906fad0e2764736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fa452bebc6aa4f980907e2dad81f6dadeba828e1b2f6de08701740906fad0e2764736f6c634300060c0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.", "kind": "dev", "methods": {}, "version": 1}}, "MerkleProof": {"contractName": "MerkleProof", "sourceId": "cryptography/MerkleProof.sol", "deploymentBytecode": {"bytecode": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202bfc25abc56955da37b5340306a4a3663f40ce2dbde416ded500ee3f3df88e1664736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202bfc25abc56955da37b5340306a4a3663f40ce2dbde416ded500ee3f3df88e1664736f6c634300060c0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "These functions deal with verification of Merkle trees (hash trees),", "kind": "dev", "methods": {}, "version": 1}}, "ERC165": {"contractName": "ERC165", "sourceId": "introspection/ERC165.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Implementation of the {IERC165} interface. Contracts may inherit from this and call {_registerInterface} to declare their support of an interface.", "kind": "dev", "methods": {"supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."}}, "stateVariables": {"_supportedInterfaces": {"details": "Mapping of interface ids to whether or not it's supported."}}, "version": 1}}, "ERC165Checker": {"contractName": "ERC165Checker", "sourceId": "introspection/ERC165Checker.sol", "deploymentBytecode": {"bytecode": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a4e336009f81318a2cd7fff57a5d242877b4622ee7d6b2f272abd2143eb5f68964736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a4e336009f81318a2cd7fff57a5d242877b4622ee7d6b2f272abd2143eb5f68964736f6c634300060c0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Library used to query support of an interface declared via {IERC165}. Note that these functions return the actual result of the query: they do not `revert` if an interface is not supported. It is up to the caller to decide what to do in these cases.", "kind": "dev", "methods": {}, "version": 1}}, "ERC1820Implementer": {"contractName": "ERC1820Implementer", "sourceId": "introspection/ERC1820Implementer.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b50610111806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063249cb3fa14602d575b600080fd5b605660048036036040811015604157600080fd5b50803590602001356001600160a01b03166068565b60408051918252519081900360200190f35b6000828152602081815260408083206001600160a01b038516845290915281205460ff16609557600060d4565b604051602001808073455243313832305f4143434550545f4d4147494360601b8152506014019050604051602081830303815290604052805190602001205b939250505056fea2646970667358221220993d610d335a613a80eef2dcab54c8b7df6ab64f2c927807a2e9051fa9af896d64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "6080604052348015600f57600080fd5b506004361060285760003560e01c8063249cb3fa14602d575b600080fd5b605660048036036040811015604157600080fd5b50803590602001356001600160a01b03166068565b60408051918252519081900360200190f35b6000828152602081815260408083206001600160a01b038516845290915281205460ff16609557600060d4565b604051602001808073455243313832305f4143434550545f4d4147494360601b8152506014019050604051602081830303815290604052805190602001205b939250505056fea2646970667358221220993d610d335a613a80eef2dcab54c8b7df6ab64f2c927807a2e9051fa9af896d64736f6c634300060c0033"}, "abi": [{"type": "function", "name": "canImplementInterfaceForAddress", "stateMutability": "view", "inputs": [{"name": "interfaceHash", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}], "userdoc": {"kind": "user", "methods": {"canImplementInterfaceForAddress(bytes32,address)": {"notice": "See {IERC1820Implementer-canImplementInterfaceForAddress}."}}, "version": 1}, "devdoc": {"details": "Implementation of the {IERC1820Implementer} interface. Contracts may inherit from this and call {_registerInterfaceForAddress} to declare their willingness to be implementers. {IERC1820Registry-setInterfaceImplementer} should then be called for the registration to be complete.", "kind": "dev", "methods": {}, "version": 1}}, "IERC165": {"contractName": "IERC165", "sourceId": "introspection/IERC165.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.", "kind": "dev", "methods": {"supportsInterface(bytes4)": {"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}}, "version": 1}}, "IERC1820Implementer": {"contractName": "IERC1820Implementer", "sourceId": "introspection/IERC1820Implementer.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "function", "name": "canImplementInterfaceForAddress", "stateMutability": "view", "inputs": [{"name": "interfaceHash", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Interface for an ERC1820 implementer, as defined in the https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP]. Used by contracts that will be registered as implementers in the {IERC1820Registry}.", "kind": "dev", "methods": {"canImplementInterfaceForAddress(bytes32,address)": {"details": "Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract implements `interfaceHash` for `account`. See {IERC1820Registry-setInterfaceImplementer}."}}, "version": 1}}, "IERC1820Registry": {"contractName": "IERC1820Registry", "sourceId": "introspection/IERC1820Registry.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "event", "name": "InterfaceImplementerSet", "inputs": [{"name": "account", "type": "address", "indexed": true, "internalType": "address"}, {"name": "interfaceHash", "type": "bytes32", "indexed": true, "internalType": "bytes32"}, {"name": "implementer", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "ManagerChanged", "inputs": [{"name": "account", "type": "address", "indexed": true, "internalType": "address"}, {"name": "newManager", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "getInterfaceImplementer", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "interfaceHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getManager", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "implementsERC165Interface", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "implementsERC165InterfaceNoCache", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "interfaceHash", "stateMutability": "pure", "inputs": [{"name": "interfaceName", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "setInterfaceImplementer", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "interfaceHash", "type": "bytes32", "internalType": "bytes32"}, {"name": "implementer", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "setManager", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "newManager", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "updateERC165Cache", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {"implementsERC165Interface(address,bytes4)": {"notice": "Checks whether a contract implements an ERC165 interface or not.  If the result is not cached a direct lookup on the contract address is performed.  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling  {updateERC165Cache} with the contract address."}, "implementsERC165InterfaceNoCache(address,bytes4)": {"notice": "Checks whether a contract implements an ERC165 interface or not without using nor updating the cache."}, "updateERC165Cache(address,bytes4)": {"notice": "Updates the cache with whether the contract implements an ERC165 interface or not."}}, "version": 1}, "devdoc": {"details": "Interface of the global ERC1820 Registry, as defined in the https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register implementers for interfaces in this registry, as well as query support. Implementers may be shared by multiple accounts, and can also implement more than a single interface for each account. Contracts can implement interfaces for themselves, but externally-owned accounts (EOA) must delegate this to a contract. {IERC165} interfaces can also be queried via the registry. For an in-depth explanation and source code analysis, see the EIP text.", "kind": "dev", "methods": {"getInterfaceImplementer(address,bytes32)": {"details": "Returns the implementer of `interfaceHash` for `account`. If no such implementer is registered, returns the zero address. If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28 zeroes), `account` will be queried for support of it. `account` being the zero address is an alias for the caller's address."}, "getManager(address)": {"details": "Returns the manager for `account`. See {setManager}."}, "implementsERC165Interface(address,bytes4)": {"params": {"account": "Address of the contract to check.", "interfaceId": "ERC165 interface to check."}, "returns": {"_0": "True if `account` implements `interfaceId`, false otherwise."}}, "implementsERC165InterfaceNoCache(address,bytes4)": {"params": {"account": "Address of the contract to check.", "interfaceId": "ERC165 interface to check."}, "returns": {"_0": "True if `account` implements `interfaceId`, false otherwise."}}, "interfaceHash(string)": {"details": "Returns the interface hash for an `interfaceName`, as defined in the corresponding https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP]."}, "setInterfaceImplementer(address,bytes32,address)": {"details": "Sets the `implementer` contract as ``account``'s implementer for `interfaceHash`. `account` being the zero address is an alias for the caller's address. The zero address can also be used in `implementer` to remove an old one. See {interfaceHash} to learn how these are created. Emits an {InterfaceImplementerSet} event. Requirements: - the caller must be the current manager for `account`. - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not end in 28 zeroes). - `implementer` must implement {IERC1820Implementer} and return true when queried for support, unless `implementer` is the caller. See {IERC1820Implementer-canImplementInterfaceForAddress}."}, "setManager(address,address)": {"details": "Sets `newManager` as the manager for `account`. A manager of an account is able to set interface implementers for it. By default, each account is its own manager. Passing a value of `0x0` in `newManager` will reset the manager to this initial state. Emits a {ManagerChanged} event. Requirements: - the caller must be the current manager for `account`."}, "updateERC165Cache(address,bytes4)": {"params": {"account": "Address of the contract for which to update the cache.", "interfaceId": "ERC165 interface for which to update the cache."}}}, "version": 1}}, "Math": {"contractName": "Math", "sourceId": "math/Math.sol", "deploymentBytecode": {"bytecode": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122059fea7316362cc2650931b100f91b1c68818111263df9606c91b2da8888c583564736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122059fea7316362cc2650931b100f91b1c68818111263df9606c91b2da8888c583564736f6c634300060c0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Standard math utilities missing in the Solidity language.", "kind": "dev", "methods": {}, "version": 1}}, "SafeMath": {"contractName": "SafeMath", "sourceId": "math/SafeMath.sol", "deploymentBytecode": {"bytecode": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ea8e7f66c105c93f121d1740118b004865cad085265b18a3fd90ac518a8bfe4364736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ea8e7f66c105c93f121d1740118b004865cad085265b18a3fd90ac518a8bfe4364736f6c634300060c0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.", "kind": "dev", "methods": {}, "version": 1}}, "SignedSafeMath": {"contractName": "SignedSafeMath", "sourceId": "math/SignedSafeMath.sol", "deploymentBytecode": {"bytecode": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220916f8a4de0458f685012a3e5cf2afb6357123140f8805a96340a09e6454adcd164736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220916f8a4de0458f685012a3e5cf2afb6357123140f8805a96340a09e6454adcd164736f6c634300060c0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Signed math operations with safety checks that revert on error.", "kind": "dev", "methods": {}, "title": "SignedSafeMath", "version": 1}}, "AccessControlMock": {"contractName": "AccessControlMock", "sourceId": "mocks/AccessControlMock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b50610023600061001e610028565b61002c565b61012d565b3390565b610036828261003a565b5050565b60008281526020818152604090912061005c9183906103ae6100ad821b17901c565b1561003657610069610028565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006100c2836001600160a01b0384166100cb565b90505b92915050565b60006100d78383610115565b61010d575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556100c5565b5060006100c5565b60009081526001919091016020526040902054151590565b6107a28061013c6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80639010d07c116100665780639010d07c1461014457806391d1485414610183578063a217fddf146101c3578063ca15c873146101cb578063d547741f146101e857610093565b80631e4e009114610098578063248a9ca3146100bd5780632f2ff15d146100ec57806336568abe14610118575b600080fd5b6100bb600480360360408110156100ae57600080fd5b5080359060200135610214565b005b6100da600480360360208110156100d357600080fd5b5035610222565b60408051918252519081900360200190f35b6100bb6004803603604081101561010257600080fd5b50803590602001356001600160a01b0316610237565b6100bb6004803603604081101561012e57600080fd5b50803590602001356001600160a01b031661029f565b6101676004803603604081101561015a57600080fd5b5080359060200135610300565b604080516001600160a01b039092168252519081900360200190f35b6101af6004803603604081101561019957600080fd5b50803590602001356001600160a01b0316610321565b604080519115158252519081900360200190f35b6100da610339565b6100da600480360360208110156101e157600080fd5b503561033e565b6100bb600480360360408110156101fe57600080fd5b50803590602001356001600160a01b0316610355565b61021e82826103c3565b5050565b60009081526020819052604090206002015490565b60008281526020819052604090206002015461025a90610255610415565b610321565b6102955760405162461bcd60e51b815260040180806020018281038252602f8152602001806106df602f913960400191505060405180910390fd5b61021e8282610419565b6102a7610415565b6001600160a01b0316816001600160a01b0316146102f65760405162461bcd60e51b815260040180806020018281038252602f81526020018061073e602f913960400191505060405180910390fd5b61021e8282610482565b600082815260208190526040812061031890836104eb565b90505b92915050565b600082815260208190526040812061031890836104f7565b600081565b600081815260208190526040812061031b9061050c565b60008281526020819052604090206002015461037390610255610415565b6102f65760405162461bcd60e51b815260040180806020018281038252603081526020018061070e6030913960400191505060405180910390fd5b6000610318836001600160a01b038416610517565b600082815260208190526040808220600201549051839285917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a460009182526020829052604090912060020155565b3390565b600082815260208190526040902061043190826103ae565b1561021e5761043e610415565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260208190526040902061049a9082610561565b1561021e576104a7610415565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006103188383610576565b6000610318836001600160a01b0384166105da565b600061031b826105f2565b600061052383836105da565b6105595750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561031b565b50600061031b565b6000610318836001600160a01b0384166105f6565b815460009082106105b85760405162461bcd60e51b81526004018080602001828103825260228152602001806106bd6022913960400191505060405180910390fd5b8260000182815481106105c757fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b600081815260018301602052604081205480156106b2578354600019808301919081019060009087908390811061062957fe5b906000526020600020015490508087600001848154811061064657fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061067657fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061031b565b600091505061031b56fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220320568f1fde2cbbb5cc95fce10ba909c1ea0ae54a3ad6951f25bf064609e604164736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100935760003560e01c80639010d07c116100665780639010d07c1461014457806391d1485414610183578063a217fddf146101c3578063ca15c873146101cb578063d547741f146101e857610093565b80631e4e009114610098578063248a9ca3146100bd5780632f2ff15d146100ec57806336568abe14610118575b600080fd5b6100bb600480360360408110156100ae57600080fd5b5080359060200135610214565b005b6100da600480360360208110156100d357600080fd5b5035610222565b60408051918252519081900360200190f35b6100bb6004803603604081101561010257600080fd5b50803590602001356001600160a01b0316610237565b6100bb6004803603604081101561012e57600080fd5b50803590602001356001600160a01b031661029f565b6101676004803603604081101561015a57600080fd5b5080359060200135610300565b604080516001600160a01b039092168252519081900360200190f35b6101af6004803603604081101561019957600080fd5b50803590602001356001600160a01b0316610321565b604080519115158252519081900360200190f35b6100da610339565b6100da600480360360208110156101e157600080fd5b503561033e565b6100bb600480360360408110156101fe57600080fd5b50803590602001356001600160a01b0316610355565b61021e82826103c3565b5050565b60009081526020819052604090206002015490565b60008281526020819052604090206002015461025a90610255610415565b610321565b6102955760405162461bcd60e51b815260040180806020018281038252602f8152602001806106df602f913960400191505060405180910390fd5b61021e8282610419565b6102a7610415565b6001600160a01b0316816001600160a01b0316146102f65760405162461bcd60e51b815260040180806020018281038252602f81526020018061073e602f913960400191505060405180910390fd5b61021e8282610482565b600082815260208190526040812061031890836104eb565b90505b92915050565b600082815260208190526040812061031890836104f7565b600081565b600081815260208190526040812061031b9061050c565b60008281526020819052604090206002015461037390610255610415565b6102f65760405162461bcd60e51b815260040180806020018281038252603081526020018061070e6030913960400191505060405180910390fd5b6000610318836001600160a01b038416610517565b600082815260208190526040808220600201549051839285917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a460009182526020829052604090912060020155565b3390565b600082815260208190526040902061043190826103ae565b1561021e5761043e610415565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260208190526040902061049a9082610561565b1561021e576104a7610415565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006103188383610576565b6000610318836001600160a01b0384166105da565b600061031b826105f2565b600061052383836105da565b6105595750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561031b565b50600061031b565b6000610318836001600160a01b0384166105f6565b815460009082106105b85760405162461bcd60e51b81526004018080602001828103825260228152602001806106bd6022913960400191505060405180910390fd5b8260000182815481106105c757fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b600081815260018301602052604081205480156106b2578354600019808301919081019060009087908390811061062957fe5b906000526020600020015490508087600001848154811061064657fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061067657fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061031b565b600091505061031b56fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220320568f1fde2cbbb5cc95fce10ba909c1ea0ae54a3ad6951f25bf064609e604164736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": []}, {"type": "event", "name": "RoleAdminChanged", "inputs": [{"name": "role", "type": "bytes32", "indexed": true, "internalType": "bytes32"}, {"name": "previousAdminRole", "type": "bytes32", "indexed": true, "internalType": "bytes32"}, {"name": "newAdminRole", "type": "bytes32", "indexed": true, "internalType": "bytes32"}], "anonymous": false}, {"type": "event", "name": "RoleGranted", "inputs": [{"name": "role", "type": "bytes32", "indexed": true, "internalType": "bytes32"}, {"name": "account", "type": "address", "indexed": true, "internalType": "address"}, {"name": "sender", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "RoleRevoked", "inputs": [{"name": "role", "type": "bytes32", "indexed": true, "internalType": "bytes32"}, {"name": "account", "type": "address", "indexed": true, "internalType": "address"}, {"name": "sender", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "DEFAULT_ADMIN_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "getRoleAdmin", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "getRoleMember", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getRoleMemberCount", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "grantRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "hasRole", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "renounceRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "revokeRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "setRoleAdmin", "stateMutability": "nonpayable", "inputs": [{"name": "roleId", "type": "bytes32", "internalType": "bytes32"}, {"name": "adminRoleId", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"getRoleAdmin(bytes32)": {"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."}, "getRoleMember(bytes32,uint256)": {"details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."}, "getRoleMemberCount(bytes32)": {"details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."}, "grantRole(bytes32,address)": {"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."}, "hasRole(bytes32,address)": {"details": "Returns `true` if `account` has been granted `role`."}, "renounceRole(bytes32,address)": {"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."}, "revokeRole(bytes32,address)": {"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}}, "version": 1}}, "AddressImpl": {"contractName": "AddressImpl", "sourceId": "mocks/AddressImpl.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b5061099c806100206000396000f3fe6080604052600436106100435760003560e01c8063162790551461004f57806324a084df146100965780632a011594146100d1578063a0b5ffb01461014f5761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b506100826004803603602081101561007257600080fd5b50356001600160a01b03166101da565b604080519115158252519081900360200190f35b3480156100a257600080fd5b506100cf600480360360408110156100b957600080fd5b506001600160a01b0381351690602001356101eb565b005b6100cf600480360360608110156100e757600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561011157600080fd5b82018360208201111561012357600080fd5b803590602001918460018302840111600160201b8311171561014457600080fd5b9193509150356101f9565b34801561015b57600080fd5b506100cf6004803603604081101561017257600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561019c57600080fd5b8201836020820111156101ae57600080fd5b803590602001918460018302840111600160201b831117156101cf57600080fd5b50909250905061039c565b60006101e58261053c565b92915050565b6101f58282610578565b5050565b606061023d8585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250610662915050565b90507fe518073da644d0626295bee74d5d5c51447a33857c62913bb30f35e2fba3db7c81806020019051602081101561027557600080fd5b8101908080516040519392919084600160201b82111561029457600080fd5b9083019060208201858111156102a957600080fd5b8251600160201b8111828201881017156102c257600080fd5b82525081516020918201929091019080838360005b838110156102ef5781810151838201526020016102d7565b50505050905090810190601f16801561031c5780820380516001836020036101000a031916815260200191505b50604081815260208083528651818401528651929550859450908401925085019080838360005b8381101561035b578181015183820152602001610343565b50505050905090810190601f1680156103885780820380516001836020036101000a031916815260200191505b509250505060405180910390a15050505050565b60606103de8484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061068892505050565b90507fe518073da644d0626295bee74d5d5c51447a33857c62913bb30f35e2fba3db7c81806020019051602081101561041657600080fd5b8101908080516040519392919084600160201b82111561043557600080fd5b90830190602082018581111561044a57600080fd5b8251600160201b81118282018810171561046357600080fd5b82525081516020918201929091019080838360005b83811015610490578181015183820152602001610478565b50505050905090810190601f1680156104bd5780820380516001836020036101000a031916815260200191505b50604081815260208083528651818401528651929550859450908401925085019080838360005b838110156104fc5781810151838201526020016104e4565b50505050905090810190601f1680156105295780820380516001836020036101000a031916815260200191505b509250505060405180910390a150505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061057057508115155b949350505050565b804710156105cd576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114610618576040519150601f19603f3d011682016040523d82523d6000602084013e61061d565b606091505b505090508061065d5760405162461bcd60e51b815260040180806020018281038252603a8152602001806108de603a913960400191505060405180910390fd5b505050565b606061057084848460405180606001604052806029815260200161093e602991396106d1565b60606106ca83836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250610727565b9392505050565b6060824710156107125760405162461bcd60e51b81526004018080602001828103825260268152602001806109186026913960400191505060405180910390fd5b61071e85858585610732565b95945050505050565b606061057084846000855b606061073d8561053c565b61078e576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106107cd5780518252601f1990920191602091820191016107ae565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461082f576040519150601f19603f3d011682016040523d82523d6000602084013e610834565b606091505b509150915081156108485791506105709050565b8051156108585780518082602001fd5b8360405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156108a257818101518382015260200161088a565b50505050905090810190601f1680156108cf5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a26469706673582212204b8899f1e11ce6add4da2ba57cf48b5c03db0b236f71385032a65104f561e6f464736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "6080604052600436106100435760003560e01c8063162790551461004f57806324a084df146100965780632a011594146100d1578063a0b5ffb01461014f5761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b506100826004803603602081101561007257600080fd5b50356001600160a01b03166101da565b604080519115158252519081900360200190f35b3480156100a257600080fd5b506100cf600480360360408110156100b957600080fd5b506001600160a01b0381351690602001356101eb565b005b6100cf600480360360608110156100e757600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561011157600080fd5b82018360208201111561012357600080fd5b803590602001918460018302840111600160201b8311171561014457600080fd5b9193509150356101f9565b34801561015b57600080fd5b506100cf6004803603604081101561017257600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561019c57600080fd5b8201836020820111156101ae57600080fd5b803590602001918460018302840111600160201b831117156101cf57600080fd5b50909250905061039c565b60006101e58261053c565b92915050565b6101f58282610578565b5050565b606061023d8585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250610662915050565b90507fe518073da644d0626295bee74d5d5c51447a33857c62913bb30f35e2fba3db7c81806020019051602081101561027557600080fd5b8101908080516040519392919084600160201b82111561029457600080fd5b9083019060208201858111156102a957600080fd5b8251600160201b8111828201881017156102c257600080fd5b82525081516020918201929091019080838360005b838110156102ef5781810151838201526020016102d7565b50505050905090810190601f16801561031c5780820380516001836020036101000a031916815260200191505b50604081815260208083528651818401528651929550859450908401925085019080838360005b8381101561035b578181015183820152602001610343565b50505050905090810190601f1680156103885780820380516001836020036101000a031916815260200191505b509250505060405180910390a15050505050565b60606103de8484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061068892505050565b90507fe518073da644d0626295bee74d5d5c51447a33857c62913bb30f35e2fba3db7c81806020019051602081101561041657600080fd5b8101908080516040519392919084600160201b82111561043557600080fd5b90830190602082018581111561044a57600080fd5b8251600160201b81118282018810171561046357600080fd5b82525081516020918201929091019080838360005b83811015610490578181015183820152602001610478565b50505050905090810190601f1680156104bd5780820380516001836020036101000a031916815260200191505b50604081815260208083528651818401528651929550859450908401925085019080838360005b838110156104fc5781810151838201526020016104e4565b50505050905090810190601f1680156105295780820380516001836020036101000a031916815260200191505b509250505060405180910390a150505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061057057508115155b949350505050565b804710156105cd576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114610618576040519150601f19603f3d011682016040523d82523d6000602084013e61061d565b606091505b505090508061065d5760405162461bcd60e51b815260040180806020018281038252603a8152602001806108de603a913960400191505060405180910390fd5b505050565b606061057084848460405180606001604052806029815260200161093e602991396106d1565b60606106ca83836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250610727565b9392505050565b6060824710156107125760405162461bcd60e51b81526004018080602001828103825260268152602001806109186026913960400191505060405180910390fd5b61071e85858585610732565b95945050505050565b606061057084846000855b606061073d8561053c565b61078e576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106107cd5780518252601f1990920191602091820191016107ae565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461082f576040519150601f19603f3d011682016040523d82523d6000602084013e610834565b606091505b509150915081156108485791506105709050565b8051156108585780518082602001fd5b8360405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156108a257818101518382015260200161088a565b50505050905090810190601f1680156108cf5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a26469706673582212204b8899f1e11ce6add4da2ba57cf48b5c03db0b236f71385032a65104f561e6f464736f6c634300060c0033"}, "abi": [{"type": "event", "name": "CallReturnValue", "inputs": [{"name": "data", "type": "string", "indexed": false, "internalType": "string"}], "anonymous": false}, {"type": "function", "name": "functionCall", "stateMutability": "nonpayable", "inputs": [{"name": "target", "type": "address", "internalType": "address"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "functionCallWithValue", "stateMutability": "payable", "inputs": [{"name": "target", "type": "address", "internalType": "address"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "isContract", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "sendValue", "stateMutability": "nonpayable", "inputs": [{"name": "receiver", "type": "address", "internalType": "address payable"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ArraysImpl": {"contractName": "ArraysImpl", "sourceId": "mocks/ArraysImpl.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b506040516102b73803806102b78339818101604052602081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b90830190602082018581111561006857600080fd5b825186602082028301116401000000008211171561008557600080fd5b82525081516020918201928201910280838360005b838110156100b257818101518382015260200161009a565b5050505091909101604052505082516100d492506000915060208401906100db565b505061013b565b828054828255906000526020600020908101928215610116579160200282015b828111156101165782518255916020019190600101906100fb565b50610122929150610126565b5090565b5b808211156101225760008155600101610127565b61016d8061014a6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806333e3a58a14610030575b600080fd5b61004d6004803603602081101561004657600080fd5b503561005f565b60408051918252519081900360200190f35b600061006b8183610071565b92915050565b81546000906100825750600061006b565b82546000905b808210156100d157600061009c8383610112565b9050848682815481106100ab57fe5b906000526020600020015411156100c4578091506100cb565b8060010192505b50610088565b6000821180156100f95750838560018403815481106100ec57fe5b9060005260206000200154145b1561010a575060001901905061006b565b509392505050565b6000600280830660028506018161012557fe5b0460028304600285040101939250505056fea2646970667358221220ec290e8b6c08162f2b067ae5cc15c308dcfed7bd40b0c3699c292e538df9a43e64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b506004361061002b5760003560e01c806333e3a58a14610030575b600080fd5b61004d6004803603602081101561004657600080fd5b503561005f565b60408051918252519081900360200190f35b600061006b8183610071565b92915050565b81546000906100825750600061006b565b82546000905b808210156100d157600061009c8383610112565b9050848682815481106100ab57fe5b906000526020600020015411156100c4578091506100cb565b8060010192505b50610088565b6000821180156100f95750838560018403815481106100ec57fe5b9060005260206000200154145b1561010a575060001901905061006b565b509392505050565b6000600280830660028506018161012557fe5b0460028304600285040101939250505056fea2646970667358221220ec290e8b6c08162f2b067ae5cc15c308dcfed7bd40b0c3699c292e538df9a43e64736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "array", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "function", "name": "findUpperBound", "stateMutability": "view", "inputs": [{"name": "element", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "CallReceiverMock": {"contractName": "CallReceiverMock", "sourceId": "mocks/CallReceiverMock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b5061021c806100206000396000f3fe6080604052600436106100555760003560e01c80630c0349681461005a5780630f63e42c146100645780632c81d638146100ee5780633bcfaa14146100f65780633e6fec04146100fe578063a793ab4714610106575b600080fd5b61006261010e565b005b34801561007057600080fd5b5061007961015b565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100b357818101518382015260200161009b565b50505050905090810190601f1680156100e05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610062610055565b6100626101a8565b61007961015b565b6100626101aa565b6040805162461bcd60e51b815260206004820152601b60248201527f43616c6c52656365697665724d6f636b3a20726576657274696e670000000000604482015290519081900360640190fd5b6040516060907f52c66ed6ec9ca819cba26fe2b2650059270d8981b295af300187a964f54a8c2390600090a1506040805180820190915260068152650c1e0c4c8ccd60d21b602082015290565bfe5b60005b60008054600181810183559180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301829055016101ad56fea264697066735822122079103995b18dc396d39aa8396213583b9af00ef312f7c601fc8e6cb48d12aaf964736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "6080604052600436106100555760003560e01c80630c0349681461005a5780630f63e42c146100645780632c81d638146100ee5780633bcfaa14146100f65780633e6fec04146100fe578063a793ab4714610106575b600080fd5b61006261010e565b005b34801561007057600080fd5b5061007961015b565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100b357818101518382015260200161009b565b50505050905090810190601f1680156100e05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610062610055565b6100626101a8565b61007961015b565b6100626101aa565b6040805162461bcd60e51b815260206004820152601b60248201527f43616c6c52656365697665724d6f636b3a20726576657274696e670000000000604482015290519081900360640190fd5b6040516060907f52c66ed6ec9ca819cba26fe2b2650059270d8981b295af300187a964f54a8c2390600090a1506040805180820190915260068152650c1e0c4c8ccd60d21b602082015290565bfe5b60005b60008054600181810183559180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301829055016101ad56fea264697066735822122079103995b18dc396d39aa8396213583b9af00ef312f7c601fc8e6cb48d12aaf964736f6c634300060c0033"}, "abi": [{"type": "event", "name": "MockFunctionCalled", "inputs": [], "anonymous": false}, {"type": "function", "name": "mockFunction", "stateMutability": "payable", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "mockFunctionNonPayable", "stateMutability": "nonpayable", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "mockFunctionOutOfGas", "stateMutability": "payable", "inputs": [], "outputs": []}, {"type": "function", "name": "mockFunctionRevertsNoReason", "stateMutability": "payable", "inputs": [], "outputs": []}, {"type": "function", "name": "mockFunctionRevertsReason", "stateMutability": "payable", "inputs": [], "outputs": []}, {"type": "function", "name": "mockFunctionThrows", "stateMutability": "payable", "inputs": [], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ConditionalEscrowMock": {"contractName": "ConditionalEscrowMock", "sourceId": "mocks/ConditionalEscrowMock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b50600061001b61006a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006e565b3390565b6108468061007d6000396000f3fe60806040526004361061007b5760003560e01c80638da5cb5b1161004e5780638da5cb5b1461014c578063e3a9db1a1461017d578063f2fde38b146101c2578063f340fa01146101f55761007b565b80634697f05d1461008057806351cff8d9146100bd578063685ca194146100f0578063715018a614610137575b600080fd5b34801561008c57600080fd5b506100bb600480360360408110156100a357600080fd5b506001600160a01b038135169060200135151561021b565b005b3480156100c957600080fd5b506100bb600480360360208110156100e057600080fd5b50356001600160a01b0316610246565b3480156100fc57600080fd5b506101236004803603602081101561011357600080fd5b50356001600160a01b0316610296565b604080519115158252519081900360200190f35b34801561014357600080fd5b506100bb6102b4565b34801561015857600080fd5b50610161610356565b604080516001600160a01b039092168252519081900360200190f35b34801561018957600080fd5b506101b0600480360360208110156101a057600080fd5b50356001600160a01b0316610365565b60408051918252519081900360200190f35b3480156101ce57600080fd5b506100bb600480360360208110156101e557600080fd5b50356001600160a01b0316610380565b6100bb6004803603602081101561020b57600080fd5b50356001600160a01b0316610478565b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b61024f81610296565b61028a5760405162461bcd60e51b81526004018080602001828103825260338152602001806107be6033913960400191505060405180910390fd5b6102938161054b565b50565b6001600160a01b031660009081526002602052604090205460ff1690565b6102bc61060e565b6000546001600160a01b0390811691161461030c576040805162461bcd60e51b815260206004820181905260248201526000805160206107f1833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6001600160a01b031660009081526001602052604090205490565b61038861060e565b6000546001600160a01b039081169116146103d8576040805162461bcd60e51b815260206004820181905260248201526000805160206107f1833981519152604482015290519081900360640190fd5b6001600160a01b03811661041d5760405162461bcd60e51b815260040180806020018281038252602681526020018061075e6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b61048061060e565b6000546001600160a01b039081169116146104d0576040805162461bcd60e51b815260206004820181905260248201526000805160206107f1833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526001602052604090205434906104f59082610612565b6001600160a01b038316600081815260016020908152604091829020939093558051848152905191927f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c492918290030190a25050565b61055361060e565b6000546001600160a01b039081169116146105a3576040805162461bcd60e51b815260206004820181905260248201526000805160206107f1833981519152604482015290519081900360640190fd5b6001600160a01b03811660008181526001602052604081208054919055906105cb9082610673565b6040805182815290516001600160a01b038416917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a25050565b3390565b60008282018381101561066c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b804710156106c8576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114610713576040519150601f19603f3d011682016040523d82523d6000602084013e610718565b606091505b50509050806107585760405162461bcd60e51b815260040180806020018281038252603a815260200180610784603a913960400191505060405180910390fd5b50505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564436f6e646974696f6e616c457363726f773a207061796565206973206e6f7420616c6c6f77656420746f2077697468647261774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212204cddfc48c972977f474d89ee28794590b53d5c92cc271a37f1b015b0ad6bf2cd64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "60806040526004361061007b5760003560e01c80638da5cb5b1161004e5780638da5cb5b1461014c578063e3a9db1a1461017d578063f2fde38b146101c2578063f340fa01146101f55761007b565b80634697f05d1461008057806351cff8d9146100bd578063685ca194146100f0578063715018a614610137575b600080fd5b34801561008c57600080fd5b506100bb600480360360408110156100a357600080fd5b506001600160a01b038135169060200135151561021b565b005b3480156100c957600080fd5b506100bb600480360360208110156100e057600080fd5b50356001600160a01b0316610246565b3480156100fc57600080fd5b506101236004803603602081101561011357600080fd5b50356001600160a01b0316610296565b604080519115158252519081900360200190f35b34801561014357600080fd5b506100bb6102b4565b34801561015857600080fd5b50610161610356565b604080516001600160a01b039092168252519081900360200190f35b34801561018957600080fd5b506101b0600480360360208110156101a057600080fd5b50356001600160a01b0316610365565b60408051918252519081900360200190f35b3480156101ce57600080fd5b506100bb600480360360208110156101e557600080fd5b50356001600160a01b0316610380565b6100bb6004803603602081101561020b57600080fd5b50356001600160a01b0316610478565b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b61024f81610296565b61028a5760405162461bcd60e51b81526004018080602001828103825260338152602001806107be6033913960400191505060405180910390fd5b6102938161054b565b50565b6001600160a01b031660009081526002602052604090205460ff1690565b6102bc61060e565b6000546001600160a01b0390811691161461030c576040805162461bcd60e51b815260206004820181905260248201526000805160206107f1833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6001600160a01b031660009081526001602052604090205490565b61038861060e565b6000546001600160a01b039081169116146103d8576040805162461bcd60e51b815260206004820181905260248201526000805160206107f1833981519152604482015290519081900360640190fd5b6001600160a01b03811661041d5760405162461bcd60e51b815260040180806020018281038252602681526020018061075e6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b61048061060e565b6000546001600160a01b039081169116146104d0576040805162461bcd60e51b815260206004820181905260248201526000805160206107f1833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526001602052604090205434906104f59082610612565b6001600160a01b038316600081815260016020908152604091829020939093558051848152905191927f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c492918290030190a25050565b61055361060e565b6000546001600160a01b039081169116146105a3576040805162461bcd60e51b815260206004820181905260248201526000805160206107f1833981519152604482015290519081900360640190fd5b6001600160a01b03811660008181526001602052604081208054919055906105cb9082610673565b6040805182815290516001600160a01b038416917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a25050565b3390565b60008282018381101561066c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b804710156106c8576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114610713576040519150601f19603f3d011682016040523d82523d6000602084013e610718565b606091505b50509050806107585760405162461bcd60e51b815260040180806020018281038252603a815260200180610784603a913960400191505060405180910390fd5b50505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564436f6e646974696f6e616c457363726f773a207061796565206973206e6f7420616c6c6f77656420746f2077697468647261774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212204cddfc48c972977f474d89ee28794590b53d5c92cc271a37f1b015b0ad6bf2cd64736f6c634300060c0033"}, "abi": [{"type": "event", "name": "Deposited", "inputs": [{"name": "payee", "type": "address", "indexed": true, "internalType": "address"}, {"name": "weiAmount", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "OwnershipTransferred", "inputs": [{"name": "previousOwner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "newOwner", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "Withdrawn", "inputs": [{"name": "payee", "type": "address", "indexed": true, "internalType": "address"}, {"name": "weiAmount", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "deposit", "stateMutability": "payable", "inputs": [{"name": "payee", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "depositsOf", "stateMutability": "view", "inputs": [{"name": "payee", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "owner", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "renounceOwnership", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "setAllowed", "stateMutability": "nonpayable", "inputs": [{"name": "payee", "type": "address", "internalType": "address"}, {"name": "allowed", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "transferOwnership", "stateMutability": "nonpayable", "inputs": [{"name": "newOwner", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "withdraw", "stateMutability": "nonpayable", "inputs": [{"name": "payee", "type": "address", "internalType": "address payable"}], "outputs": []}, {"type": "function", "name": "withdrawalAllowed", "stateMutability": "view", "inputs": [{"name": "payee", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"deposit(address)": {"details": "Stores the sent amount as credit to be withdrawn.", "params": {"payee": "The destination address of the funds."}}, "owner()": {"details": "Returns the address of the current owner."}, "renounceOwnership()": {"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."}, "transferOwnership(address)": {"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}, "withdraw(address)": {"details": "Withdraw accumulated balance for a payee, forwarding all gas to the recipient. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.", "params": {"payee": "The address whose funds will be withdrawn and transferred to."}}, "withdrawalAllowed(address)": {"details": "Returns whether an address is allowed to withdraw their funds. To be implemented by derived contracts.", "params": {"payee": "The destination address of the funds."}}}, "version": 1}}, "ContextMock": {"contractName": "ContextMock", "sourceId": "mocks/ContextMock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b506102c4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063376bf2621461003b578063d737d0c7146100ea575b600080fd5b6100e86004803603604081101561005157600080fd5b8135919081019060408101602082013564010000000081111561007357600080fd5b82018360208201111561008557600080fd5b803590602001918460018302840111640100000000831117156100a757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506100f2945050505050565b005b6100e8610205565b7faf235354a0a47c91ee171961326335cb2d1a8e55b8a89859b0e61eb049e50ea061011b61024b565b8383604051808060200184815260200180602001838103835286818151815260200191508051906020019080838360005b8381101561016457818101518382015260200161014c565b50505050905090810190601f1680156101915780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156101c45781810151838201526020016101ac565b50505050905090810190601f1680156101f15780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15050565b7fd6558c3ed910d959271054471fd1c326679d9fece99c5091b00ed89627cf2bfc61022e61028a565b604080516001600160a01b039092168252519081900360200190a1565b60606000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092935050505090565b339056fea26469706673582212206f466ebe817949ba6dc818e1bfb7a80371354f4ccf645cdf34e83988721926b864736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100365760003560e01c8063376bf2621461003b578063d737d0c7146100ea575b600080fd5b6100e86004803603604081101561005157600080fd5b8135919081019060408101602082013564010000000081111561007357600080fd5b82018360208201111561008557600080fd5b803590602001918460018302840111640100000000831117156100a757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506100f2945050505050565b005b6100e8610205565b7faf235354a0a47c91ee171961326335cb2d1a8e55b8a89859b0e61eb049e50ea061011b61024b565b8383604051808060200184815260200180602001838103835286818151815260200191508051906020019080838360005b8381101561016457818101518382015260200161014c565b50505050905090810190601f1680156101915780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156101c45781810151838201526020016101ac565b50505050905090810190601f1680156101f15780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15050565b7fd6558c3ed910d959271054471fd1c326679d9fece99c5091b00ed89627cf2bfc61022e61028a565b604080516001600160a01b039092168252519081900360200190a1565b60606000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092935050505090565b339056fea26469706673582212206f466ebe817949ba6dc818e1bfb7a80371354f4ccf645cdf34e83988721926b864736f6c634300060c0033"}, "abi": [{"type": "event", "name": "Data", "inputs": [{"name": "data", "type": "bytes", "indexed": false, "internalType": "bytes"}, {"name": "integerValue", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "stringValue", "type": "string", "indexed": false, "internalType": "string"}], "anonymous": false}, {"type": "event", "name": "Sender", "inputs": [{"name": "sender", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "msgData", "stateMutability": "nonpayable", "inputs": [{"name": "integerValue", "type": "uint256", "internalType": "uint256"}, {"name": "stringValue", "type": "string", "internalType": "string"}], "outputs": []}, {"type": "function", "name": "msgSender", "stateMutability": "nonpayable", "inputs": [], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ContextMockCaller": {"contractName": "ContextMockCaller", "sourceId": "mocks/ContextMock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b50610277806100206000396000f3fe608060405234801561001057600080fd5b50600436106100355760003560e01c80628604591461003a5780633207ad96146100f7575b600080fd5b6100f56004803603606081101561005057600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561008057600080fd5b82018360208201111561009257600080fd5b803590602001918460018302840111640100000000831117156100b457600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061011d945050505050565b005b6100f56004803603602081101561010d57600080fd5b50356001600160a01b03166101eb565b60408051631bb5f93160e11b815260048101848152602482019283528351604483015283516001600160a01b0387169363376bf262938793879390929160640190602085019080838360005b83811015610181578181015183820152602001610169565b50505050905090810190601f1680156101ae5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156101ce57600080fd5b505af11580156101e2573d6000803e3d6000fd5b50505050505050565b806001600160a01b031663d737d0c76040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561022657600080fd5b505af115801561023a573d6000803e3d6000fd5b505050505056fea26469706673582212203c91fafa4a296b97fbed28823977aa91ee0c86fe4f99f9289b3a855a8281f5f564736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100355760003560e01c80628604591461003a5780633207ad96146100f7575b600080fd5b6100f56004803603606081101561005057600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561008057600080fd5b82018360208201111561009257600080fd5b803590602001918460018302840111640100000000831117156100b457600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061011d945050505050565b005b6100f56004803603602081101561010d57600080fd5b50356001600160a01b03166101eb565b60408051631bb5f93160e11b815260048101848152602482019283528351604483015283516001600160a01b0387169363376bf262938793879390929160640190602085019080838360005b83811015610181578181015183820152602001610169565b50505050905090810190601f1680156101ae5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156101ce57600080fd5b505af11580156101e2573d6000803e3d6000fd5b50505050505050565b806001600160a01b031663d737d0c76040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561022657600080fd5b505af115801561023a573d6000803e3d6000fd5b505050505056fea26469706673582212203c91fafa4a296b97fbed28823977aa91ee0c86fe4f99f9289b3a855a8281f5f564736f6c634300060c0033"}, "abi": [{"type": "function", "name": "callData", "stateMutability": "nonpayable", "inputs": [{"name": "context", "type": "address", "internalType": "contract ContextMock"}, {"name": "integerValue", "type": "uint256", "internalType": "uint256"}, {"name": "stringValue", "type": "string", "internalType": "string"}], "outputs": []}, {"type": "function", "name": "callSender", "stateMutability": "nonpayable", "inputs": [{"name": "context", "type": "address", "internalType": "contract ContextMock"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "CountersImpl": {"contractName": "CountersImpl", "sourceId": "mocks/CountersImpl.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b506101cd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632baeceb7146100465780639fa6a6e314610050578063d09de08a1461006a575b600080fd5b61004e610072565b005b61005861007e565b60408051918252519081900360200190f35b61004e61008f565b61007c6000610099565b565b600061008a60006100aa565b905090565b61007c60006100ae565b80546100a69060016100b7565b9055565b5490565b80546001019055565b60006100f983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610100565b9392505050565b6000818484111561018f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561015457818101518382015260200161013c565b50505050905090810190601f1680156101815780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fea2646970667358221220c2ed2c0ee26ad26e6c81573d4287970b774e75d0b558d314c87654bdb3c11ef564736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100415760003560e01c80632baeceb7146100465780639fa6a6e314610050578063d09de08a1461006a575b600080fd5b61004e610072565b005b61005861007e565b60408051918252519081900360200190f35b61004e61008f565b61007c6000610099565b565b600061008a60006100aa565b905090565b61007c60006100ae565b80546100a69060016100b7565b9055565b5490565b80546001019055565b60006100f983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610100565b9392505050565b6000818484111561018f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561015457818101518382015260200161013c565b50505050905090810190601f1680156101815780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fea2646970667358221220c2ed2c0ee26ad26e6c81573d4287970b774e75d0b558d314c87654bdb3c11ef564736f6c634300060c0033"}, "abi": [{"type": "function", "name": "current", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decrement", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "increment", "stateMutability": "nonpayable", "inputs": [], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "Create2Impl": {"contractName": "Create2Impl", "sourceId": "mocks/Create2Impl.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b5061051f806100206000396000f3fe6080604052600436106100435760003560e01c8063076c37b21461004f578063481286e61461008157806356299481146100cd57806366cfa0571461010c5761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b5061007f6004803603604081101561007257600080fd5b50803590602001356101cb565b005b34801561008d57600080fd5b506100b1600480360360408110156100a457600080fd5b50803590602001356101fd565b604080516001600160a01b039092168252519081900360200190f35b3480156100d957600080fd5b506100b1600480360360608110156100f057600080fd5b50803590602081013590604001356001600160a01b0316610210565b34801561011857600080fd5b5061007f6004803603606081101561012f57600080fd5b81359160208101359181019060608101604082013564010000000081111561015657600080fd5b82018360208201111561016857600080fd5b8035906020019184600183028401116401000000008311171561018a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610225945050505050565b6101f88282604051806020016101e0906103ab565b601f1982820381018352601f90910116604052610236565b505050565b60006102098383610347565b9392505050565b600061021d848484610350565b949350505050565b610230838383610236565b50505050565b6000808447101561028e576040805162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b82516102e1576040805162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604482015290519081900360640190fd5b8383516020850187f590506001600160a01b03811661021d576040805162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604482015290519081900360640190fd5b60006102098383305b604080516001600160f81b031960208083019190915260609390931b6bffffffffffffffffffffffff191660218201526035810194909452605580850193909352805180850390930183526075909301909252805191012090565b610131806103b98339019056fe608060405234801561001057600080fd5b50610111806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063249cb3fa14602d575b600080fd5b605660048036036040811015604157600080fd5b50803590602001356001600160a01b03166068565b60408051918252519081900360200190f35b6000828152602081815260408083206001600160a01b038516845290915281205460ff16609557600060d4565b604051602001808073455243313832305f4143434550545f4d4147494360601b8152506014019050604051602081830303815290604052805190602001205b939250505056fea2646970667358221220993d610d335a613a80eef2dcab54c8b7df6ab64f2c927807a2e9051fa9af896d64736f6c634300060c0033a2646970667358221220866e158140bfdaec9b1bfc4bbabd27ae2f90786bee18f0eca53788435c59687d64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "6080604052600436106100435760003560e01c8063076c37b21461004f578063481286e61461008157806356299481146100cd57806366cfa0571461010c5761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b5061007f6004803603604081101561007257600080fd5b50803590602001356101cb565b005b34801561008d57600080fd5b506100b1600480360360408110156100a457600080fd5b50803590602001356101fd565b604080516001600160a01b039092168252519081900360200190f35b3480156100d957600080fd5b506100b1600480360360608110156100f057600080fd5b50803590602081013590604001356001600160a01b0316610210565b34801561011857600080fd5b5061007f6004803603606081101561012f57600080fd5b81359160208101359181019060608101604082013564010000000081111561015657600080fd5b82018360208201111561016857600080fd5b8035906020019184600183028401116401000000008311171561018a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610225945050505050565b6101f88282604051806020016101e0906103ab565b601f1982820381018352601f90910116604052610236565b505050565b60006102098383610347565b9392505050565b600061021d848484610350565b949350505050565b610230838383610236565b50505050565b6000808447101561028e576040805162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b82516102e1576040805162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604482015290519081900360640190fd5b8383516020850187f590506001600160a01b03811661021d576040805162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604482015290519081900360640190fd5b60006102098383305b604080516001600160f81b031960208083019190915260609390931b6bffffffffffffffffffffffff191660218201526035810194909452605580850193909352805180850390930183526075909301909252805191012090565b610131806103b98339019056fe608060405234801561001057600080fd5b50610111806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063249cb3fa14602d575b600080fd5b605660048036036040811015604157600080fd5b50803590602001356001600160a01b03166068565b60408051918252519081900360200190f35b6000828152602081815260408083206001600160a01b038516845290915281205460ff16609557600060d4565b604051602001808073455243313832305f4143434550545f4d4147494360601b8152506014019050604051602081830303815290604052805190602001205b939250505056fea2646970667358221220993d610d335a613a80eef2dcab54c8b7df6ab64f2c927807a2e9051fa9af896d64736f6c634300060c0033a2646970667358221220866e158140bfdaec9b1bfc4bbabd27ae2f90786bee18f0eca53788435c59687d64736f6c634300060c0033"}, "abi": [{"type": "function", "name": "computeAddress", "stateMutability": "view", "inputs": [{"name": "salt", "type": "bytes32", "internalType": "bytes32"}, {"name": "codeHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "computeAddressWithDeployer", "stateMutability": "pure", "inputs": [{"name": "salt", "type": "bytes32", "internalType": "bytes32"}, {"name": "codeHash", "type": "bytes32", "internalType": "bytes32"}, {"name": "deployer", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "deploy", "stateMutability": "nonpayable", "inputs": [{"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "salt", "type": "bytes32", "internalType": "bytes32"}, {"name": "code", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "deployERC1820Implementer", "stateMutability": "nonpayable", "inputs": [{"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "salt", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ECDSAMock": {"contractName": "ECDSAMock", "sourceId": "mocks/ECDSAMock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b5061040d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806319045a251461003b578063918a15cf14610104575b600080fd5b6100e86004803603604081101561005157600080fd5b8135919081019060408101602082013564010000000081111561007357600080fd5b82018360208201111561008557600080fd5b803590602001918460018302840111640100000000831117156100a757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610133945050505050565b604080516001600160a01b039092168252519081900360200190f35b6101216004803603602081101561011a57600080fd5b5035610146565b60408051918252519081900360200190f35b600061013f8383610157565b9392505050565b600061015182610342565b92915050565b600081516041146101af576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156102205760405162461bcd60e51b81526004018080602001828103825260228152602001806103946022913960400191505060405180910390fd5b8060ff16601b1415801561023857508060ff16601c14155b156102745760405162461bcd60e51b81526004018080602001828103825260228152602001806103b66022913960400191505060405180910390fd5b600060018783868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156102d0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610338576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b9695505050505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c90910190915281519101209056fe45434453413a20696e76616c6964207369676e6174757265202773272076616c756545434453413a20696e76616c6964207369676e6174757265202776272076616c7565a2646970667358221220ece205cb4721a8c9bd51d56de18625efc89f8f02b659f002b0ba46b3307a432c64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100365760003560e01c806319045a251461003b578063918a15cf14610104575b600080fd5b6100e86004803603604081101561005157600080fd5b8135919081019060408101602082013564010000000081111561007357600080fd5b82018360208201111561008557600080fd5b803590602001918460018302840111640100000000831117156100a757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610133945050505050565b604080516001600160a01b039092168252519081900360200190f35b6101216004803603602081101561011a57600080fd5b5035610146565b60408051918252519081900360200190f35b600061013f8383610157565b9392505050565b600061015182610342565b92915050565b600081516041146101af576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156102205760405162461bcd60e51b81526004018080602001828103825260228152602001806103946022913960400191505060405180910390fd5b8060ff16601b1415801561023857508060ff16601c14155b156102745760405162461bcd60e51b81526004018080602001828103825260228152602001806103b66022913960400191505060405180910390fd5b600060018783868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156102d0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610338576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b9695505050505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c90910190915281519101209056fe45434453413a20696e76616c6964207369676e6174757265202773272076616c756545434453413a20696e76616c6964207369676e6174757265202776272076616c7565a2646970667358221220ece205cb4721a8c9bd51d56de18625efc89f8f02b659f002b0ba46b3307a432c64736f6c634300060c0033"}, "abi": [{"type": "function", "name": "recover", "stateMutability": "pure", "inputs": [{"name": "hash", "type": "bytes32", "internalType": "bytes32"}, {"name": "signature", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "toEthSignedMessageHash", "stateMutability": "pure", "inputs": [{"name": "hash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ERC1155BurnableMock": {"contractName": "ERC1155BurnableMock", "sourceId": "mocks/ERC1155BurnableMock.sol", "deploymentBytecode": {"bytecode": "60806040523480156200001157600080fd5b506040516200217f3803806200217f833981810160405260208110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052508291506200010290506301ffc9a760e01b62000139565b6200010d81620001be565b6200011f636cdb3d1360e11b62000139565b620001316303a24d0760e21b62000139565b505062000273565b6001600160e01b0319808216141562000199576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b8051620001d3906003906020840190620001d7565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200021a57805160ff19168380011785556200024a565b828001600101855582156200024a579182015b828111156200024a5782518255916020019190600101906200022d565b50620002589291506200025c565b5090565b5b808211156200025857600081556001016200025d565b611efc80620002836000396000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c80636b20c454116100715780636b20c454146104ee578063731133e914610621578063a22cb465146106e1578063e985e9c51461070f578063f242432a1461073d578063f5298aca14610806576100a8565b8062fdd58e146100ad57806301ffc9a7146100eb5780630e89341c146101265780632eb2c2d6146101b85780634e1273f41461037b575b600080fd5b6100d9600480360360408110156100c357600080fd5b506001600160a01b038135169060200135610838565b60408051918252519081900360200190f35b6101126004803603602081101561010157600080fd5b50356001600160e01b0319166108a7565b604080519115158252519081900360200190f35b6101436004803603602081101561013c57600080fd5b50356108c6565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017d578181015183820152602001610165565b50505050905090810190601f1680156101aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610379600480360360a08110156101ce57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561020157600080fd5b82018360208201111561021357600080fd5b803590602001918460208302840111600160201b8311171561023457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561028357600080fd5b82018360208201111561029557600080fd5b803590602001918460208302840111600160201b831117156102b657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561030557600080fd5b82018360208201111561031757600080fd5b803590602001918460018302840111600160201b8311171561033857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061095e945050505050565b005b61049e6004803603604081101561039157600080fd5b810190602081018135600160201b8111156103ab57600080fd5b8201836020820111156103bd57600080fd5b803590602001918460208302840111600160201b831117156103de57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561042d57600080fd5b82018360208201111561043f57600080fd5b803590602001918460208302840111600160201b8311171561046057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610c5c945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104da5781810151838201526020016104c2565b505050509050019250505060405180910390f35b6103796004803603606081101561050457600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561052e57600080fd5b82018360208201111561054057600080fd5b803590602001918460208302840111600160201b8311171561056157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156105b057600080fd5b8201836020820111156105c257600080fd5b803590602001918460208302840111600160201b831117156105e357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610dda945050505050565b6103796004803603608081101561063757600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b81111561066d57600080fd5b82018360208201111561067f57600080fd5b803590602001918460018302840111600160201b831117156106a057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610e53945050505050565b610379600480360360408110156106f757600080fd5b506001600160a01b0381351690602001351515610e65565b6101126004803603604081101561072557600080fd5b506001600160a01b0381358116916020013516610f54565b610379600480360360a081101561075357600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b81111561079257600080fd5b8201836020820111156107a457600080fd5b803590602001918460018302840111600160201b831117156107c557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610f82945050505050565b6103796004803603606081101561081c57600080fd5b506001600160a01b03813516906020810135906040013561114d565b60006001600160a01b03831661087f5760405162461bcd60e51b815260040180806020018281038252602b815260200180611cdf602b913960400191505060405180910390fd5b5060009081526001602090815260408083206001600160a01b03949094168352929052205490565b6001600160e01b03191660009081526020819052604090205460ff1690565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109525780601f1061092757610100808354040283529160200191610952565b820191906000526020600020905b81548152906001019060200180831161093557829003601f168201915b50505050509050919050565b815183511461099e5760405162461bcd60e51b8152600401808060200182810382526028815260200180611e7e6028913960400191505060405180910390fd5b6001600160a01b0384166109e35760405162461bcd60e51b8152600401808060200182810382526025815260200180611d886025913960400191505060405180910390fd5b6109eb6111c1565b6001600160a01b0316856001600160a01b03161480610a165750610a1685610a116111c1565b610f54565b610a515760405162461bcd60e51b8152600401808060200182810382526032815260200180611dad6032913960400191505060405180910390fd5b6000610a5b6111c1565b9050610a6b818787878787610c54565b60005b8451811015610b6c576000858281518110610a8557fe5b602002602001015190506000858381518110610a9d57fe5b60200260200101519050610b0a816040518060600160405280602a8152602001611e02602a91396001600086815260200190815260200160002060008d6001600160a01b03166001600160a01b03168152602001908152602001600020546111c69092919063ffffffff16565b60008381526001602090815260408083206001600160a01b038e811685529252808320939093558a1681522054610b41908261125d565b60009283526001602081815260408086206001600160a01b038d168752909152909320555001610a6e565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610bf2578181015183820152602001610bda565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610c31578181015183820152602001610c19565b5050505090500194505050505060405180910390a4610c548187878787876112be565b505050505050565b60608151835114610c9e5760405162461bcd60e51b8152600401808060200182810382526029815260200180611e556029913960400191505060405180910390fd5b6060835167ffffffffffffffff81118015610cb857600080fd5b50604051908082528060200260200182016040528015610ce2578160200160208202803683370190505b50905060005b8451811015610dd25760006001600160a01b0316858281518110610d0857fe5b60200260200101516001600160a01b03161415610d565760405162461bcd60e51b8152600401808060200182810382526031815260200180611d0a6031913960400191505060405180910390fd5b60016000858381518110610d6657fe5b602002602001015181526020019081526020016000206000868381518110610d8a57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110610dbf57fe5b6020908102919091010152600101610ce8565b509392505050565b610de26111c1565b6001600160a01b0316836001600160a01b03161480610e085750610e0883610a116111c1565b610e435760405162461bcd60e51b8152600401808060200182810382526029815260200180611d5f6029913960400191505060405180910390fd5b610e4e83838361153d565b505050565b610e5f848484846117ab565b50505050565b816001600160a01b0316610e776111c1565b6001600160a01b03161415610ebd5760405162461bcd60e51b8152600401808060200182810382526029815260200180611e2c6029913960400191505060405180910390fd5b8060026000610eca6111c1565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610f0e6111c1565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b6001600160a01b038416610fc75760405162461bcd60e51b8152600401808060200182810382526025815260200180611d886025913960400191505060405180910390fd5b610fcf6111c1565b6001600160a01b0316856001600160a01b03161480610ff55750610ff585610a116111c1565b6110305760405162461bcd60e51b8152600401808060200182810382526029815260200180611d5f6029913960400191505060405180910390fd5b600061103a6111c1565b905061105a81878761104b886118b3565b611054886118b3565b87610c54565b6110a1836040518060600160405280602a8152602001611e02602a913960008781526001602090815260408083206001600160a01b038d16845290915290205491906111c6565b60008581526001602090815260408083206001600160a01b038b811685529252808320939093558716815220546110d8908461125d565b60008581526001602090815260408083206001600160a01b03808b168086529184529382902094909455805188815291820187905280518a8416938616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a4610c548187878787876118f7565b6111556111c1565b6001600160a01b0316836001600160a01b0316148061117b575061117b83610a116111c1565b6111b65760405162461bcd60e51b8152600401808060200182810382526029815260200180611d5f6029913960400191505060405180910390fd5b610e4e838383611a68565b335b90565b600081848411156112555760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561121a578181015183820152602001611202565b50505050905090810190601f1680156112475780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828201838110156112b7576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6112d0846001600160a01b0316611b9b565b15610c5457836001600160a01b031663bc197c8187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b03168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561135e578181015183820152602001611346565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561139d578181015183820152602001611385565b50505050905001848103825285818151815260200191508051906020019080838360005b838110156113d95781810151838201526020016113c1565b50505050905090810190601f1680156114065780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b15801561142b57600080fd5b505af192505050801561145057506040513d602081101561144b57600080fd5b505160015b6114e55761145c611bdd565b8061146757506114ae565b60405162461bcd60e51b815260206004820181815283516024840152835184939192839260440191908501908083836000831561121a578181015183820152602001611202565b60405162461bcd60e51b8152600401808060200182810382526034815260200180611c836034913960400191505060405180910390fd5b6001600160e01b0319811663bc197c8160e01b146115345760405162461bcd60e51b8152600401808060200182810382526028815260200180611cb76028913960400191505060405180910390fd5b50505050505050565b6001600160a01b0383166115825760405162461bcd60e51b8152600401808060200182810382526023815260200180611ddf6023913960400191505060405180910390fd5b80518251146115c25760405162461bcd60e51b8152600401808060200182810382526028815260200180611e7e6028913960400191505060405180910390fd5b60006115cc6111c1565b90506115ec81856000868660405180602001604052806000815250610c54565b60005b83518110156116ca5761168183828151811061160757fe5b6020026020010151604051806060016040528060248152602001611d3b602491396001600088868151811061163857fe5b602002602001015181526020019081526020016000206000896001600160a01b03166001600160a01b03168152602001908152602001600020546111c69092919063ffffffff16565b6001600086848151811061169157fe5b602090810291909101810151825281810192909252604090810160009081206001600160a01b038a1682529092529020556001016115ef565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015611751578181015183820152602001611739565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015611790578181015183820152602001611778565b5050505090500194505050505060405180910390a450505050565b6001600160a01b0384166117f05760405162461bcd60e51b8152600401808060200182810382526021815260200180611ea66021913960400191505060405180910390fd5b60006117fa6111c1565b905061180c8160008761104b886118b3565b60008481526001602090815260408083206001600160a01b0389168452909152902054611839908461125d565b60008581526001602090815260408083206001600160a01b03808b16808652918452828520959095558151898152928301889052815190948616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a46118ac816000878787876118f7565b5050505050565b6040805160018082528183019092526060918291906020808301908036833701905050905082816000815181106118e657fe5b602090810291909101015292915050565b611909846001600160a01b0316611b9b565b15610c5457836001600160a01b031663f23a6e6187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611998578181015183820152602001611980565b50505050905090810190601f1680156119c55780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b1580156119e857600080fd5b505af1925050508015611a0d57506040513d6020811015611a0857600080fd5b505160015b611a195761145c611bdd565b6001600160e01b0319811663f23a6e6160e01b146115345760405162461bcd60e51b8152600401808060200182810382526028815260200180611cb76028913960400191505060405180910390fd5b6001600160a01b038316611aad5760405162461bcd60e51b8152600401808060200182810382526023815260200180611ddf6023913960400191505060405180910390fd5b6000611ab76111c1565b9050611ae781856000611ac9876118b3565b611ad2876118b3565b60405180602001604052806000815250610c54565b611b2e82604051806060016040528060248152602001611d3b6024913960008681526001602090815260408083206001600160a01b038b16845290915290205491906111c6565b60008481526001602090815260408083206001600160a01b03808a16808652918452828520959095558151888152928301879052815193949093908616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a450505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611bcf57508115155b949350505050565b60e01c90565b600060443d1015611bed576111c3565b600481823e6308c379a0611c018251611bd7565b14611c0b576111c3565b6040513d600319016004823e80513d67ffffffffffffffff8160248401118184111715611c3b57505050506111c3565b82840192508251915080821115611c5557505050506111c3565b503d83016020828401011115611c6d575050506111c3565b601f01601f191681016020016040529150509056fe455243313135353a207472616e7366657220746f206e6f6e2045524331313535526563656976657220696d706c656d656e746572455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73455243313135353a2062616c616e636520717565727920666f7220746865207a65726f2061646472657373455243313135353a2062617463682062616c616e636520717565727920666f7220746865207a65726f2061646472657373455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373455243313135353a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572455243313135353a2073657474696e6720617070726f76616c2073746174757320666f722073656c66455243313135353a206163636f756e747320616e6420696473206c656e677468206d69736d61746368455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368455243313135353a206d696e7420746f20746865207a65726f2061646472657373a26469706673582212202122a0eb1cdad4bc3b28ef4098302ba88ad90030ba0a1966e761ea2f1ada812464736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100a85760003560e01c80636b20c454116100715780636b20c454146104ee578063731133e914610621578063a22cb465146106e1578063e985e9c51461070f578063f242432a1461073d578063f5298aca14610806576100a8565b8062fdd58e146100ad57806301ffc9a7146100eb5780630e89341c146101265780632eb2c2d6146101b85780634e1273f41461037b575b600080fd5b6100d9600480360360408110156100c357600080fd5b506001600160a01b038135169060200135610838565b60408051918252519081900360200190f35b6101126004803603602081101561010157600080fd5b50356001600160e01b0319166108a7565b604080519115158252519081900360200190f35b6101436004803603602081101561013c57600080fd5b50356108c6565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017d578181015183820152602001610165565b50505050905090810190601f1680156101aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610379600480360360a08110156101ce57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561020157600080fd5b82018360208201111561021357600080fd5b803590602001918460208302840111600160201b8311171561023457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561028357600080fd5b82018360208201111561029557600080fd5b803590602001918460208302840111600160201b831117156102b657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561030557600080fd5b82018360208201111561031757600080fd5b803590602001918460018302840111600160201b8311171561033857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061095e945050505050565b005b61049e6004803603604081101561039157600080fd5b810190602081018135600160201b8111156103ab57600080fd5b8201836020820111156103bd57600080fd5b803590602001918460208302840111600160201b831117156103de57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561042d57600080fd5b82018360208201111561043f57600080fd5b803590602001918460208302840111600160201b8311171561046057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610c5c945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104da5781810151838201526020016104c2565b505050509050019250505060405180910390f35b6103796004803603606081101561050457600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561052e57600080fd5b82018360208201111561054057600080fd5b803590602001918460208302840111600160201b8311171561056157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156105b057600080fd5b8201836020820111156105c257600080fd5b803590602001918460208302840111600160201b831117156105e357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610dda945050505050565b6103796004803603608081101561063757600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b81111561066d57600080fd5b82018360208201111561067f57600080fd5b803590602001918460018302840111600160201b831117156106a057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610e53945050505050565b610379600480360360408110156106f757600080fd5b506001600160a01b0381351690602001351515610e65565b6101126004803603604081101561072557600080fd5b506001600160a01b0381358116916020013516610f54565b610379600480360360a081101561075357600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b81111561079257600080fd5b8201836020820111156107a457600080fd5b803590602001918460018302840111600160201b831117156107c557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610f82945050505050565b6103796004803603606081101561081c57600080fd5b506001600160a01b03813516906020810135906040013561114d565b60006001600160a01b03831661087f5760405162461bcd60e51b815260040180806020018281038252602b815260200180611cdf602b913960400191505060405180910390fd5b5060009081526001602090815260408083206001600160a01b03949094168352929052205490565b6001600160e01b03191660009081526020819052604090205460ff1690565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109525780601f1061092757610100808354040283529160200191610952565b820191906000526020600020905b81548152906001019060200180831161093557829003601f168201915b50505050509050919050565b815183511461099e5760405162461bcd60e51b8152600401808060200182810382526028815260200180611e7e6028913960400191505060405180910390fd5b6001600160a01b0384166109e35760405162461bcd60e51b8152600401808060200182810382526025815260200180611d886025913960400191505060405180910390fd5b6109eb6111c1565b6001600160a01b0316856001600160a01b03161480610a165750610a1685610a116111c1565b610f54565b610a515760405162461bcd60e51b8152600401808060200182810382526032815260200180611dad6032913960400191505060405180910390fd5b6000610a5b6111c1565b9050610a6b818787878787610c54565b60005b8451811015610b6c576000858281518110610a8557fe5b602002602001015190506000858381518110610a9d57fe5b60200260200101519050610b0a816040518060600160405280602a8152602001611e02602a91396001600086815260200190815260200160002060008d6001600160a01b03166001600160a01b03168152602001908152602001600020546111c69092919063ffffffff16565b60008381526001602090815260408083206001600160a01b038e811685529252808320939093558a1681522054610b41908261125d565b60009283526001602081815260408086206001600160a01b038d168752909152909320555001610a6e565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610bf2578181015183820152602001610bda565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610c31578181015183820152602001610c19565b5050505090500194505050505060405180910390a4610c548187878787876112be565b505050505050565b60608151835114610c9e5760405162461bcd60e51b8152600401808060200182810382526029815260200180611e556029913960400191505060405180910390fd5b6060835167ffffffffffffffff81118015610cb857600080fd5b50604051908082528060200260200182016040528015610ce2578160200160208202803683370190505b50905060005b8451811015610dd25760006001600160a01b0316858281518110610d0857fe5b60200260200101516001600160a01b03161415610d565760405162461bcd60e51b8152600401808060200182810382526031815260200180611d0a6031913960400191505060405180910390fd5b60016000858381518110610d6657fe5b602002602001015181526020019081526020016000206000868381518110610d8a57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110610dbf57fe5b6020908102919091010152600101610ce8565b509392505050565b610de26111c1565b6001600160a01b0316836001600160a01b03161480610e085750610e0883610a116111c1565b610e435760405162461bcd60e51b8152600401808060200182810382526029815260200180611d5f6029913960400191505060405180910390fd5b610e4e83838361153d565b505050565b610e5f848484846117ab565b50505050565b816001600160a01b0316610e776111c1565b6001600160a01b03161415610ebd5760405162461bcd60e51b8152600401808060200182810382526029815260200180611e2c6029913960400191505060405180910390fd5b8060026000610eca6111c1565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610f0e6111c1565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b6001600160a01b038416610fc75760405162461bcd60e51b8152600401808060200182810382526025815260200180611d886025913960400191505060405180910390fd5b610fcf6111c1565b6001600160a01b0316856001600160a01b03161480610ff55750610ff585610a116111c1565b6110305760405162461bcd60e51b8152600401808060200182810382526029815260200180611d5f6029913960400191505060405180910390fd5b600061103a6111c1565b905061105a81878761104b886118b3565b611054886118b3565b87610c54565b6110a1836040518060600160405280602a8152602001611e02602a913960008781526001602090815260408083206001600160a01b038d16845290915290205491906111c6565b60008581526001602090815260408083206001600160a01b038b811685529252808320939093558716815220546110d8908461125d565b60008581526001602090815260408083206001600160a01b03808b168086529184529382902094909455805188815291820187905280518a8416938616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a4610c548187878787876118f7565b6111556111c1565b6001600160a01b0316836001600160a01b0316148061117b575061117b83610a116111c1565b6111b65760405162461bcd60e51b8152600401808060200182810382526029815260200180611d5f6029913960400191505060405180910390fd5b610e4e838383611a68565b335b90565b600081848411156112555760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561121a578181015183820152602001611202565b50505050905090810190601f1680156112475780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828201838110156112b7576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6112d0846001600160a01b0316611b9b565b15610c5457836001600160a01b031663bc197c8187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b03168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561135e578181015183820152602001611346565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561139d578181015183820152602001611385565b50505050905001848103825285818151815260200191508051906020019080838360005b838110156113d95781810151838201526020016113c1565b50505050905090810190601f1680156114065780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b15801561142b57600080fd5b505af192505050801561145057506040513d602081101561144b57600080fd5b505160015b6114e55761145c611bdd565b8061146757506114ae565b60405162461bcd60e51b815260206004820181815283516024840152835184939192839260440191908501908083836000831561121a578181015183820152602001611202565b60405162461bcd60e51b8152600401808060200182810382526034815260200180611c836034913960400191505060405180910390fd5b6001600160e01b0319811663bc197c8160e01b146115345760405162461bcd60e51b8152600401808060200182810382526028815260200180611cb76028913960400191505060405180910390fd5b50505050505050565b6001600160a01b0383166115825760405162461bcd60e51b8152600401808060200182810382526023815260200180611ddf6023913960400191505060405180910390fd5b80518251146115c25760405162461bcd60e51b8152600401808060200182810382526028815260200180611e7e6028913960400191505060405180910390fd5b60006115cc6111c1565b90506115ec81856000868660405180602001604052806000815250610c54565b60005b83518110156116ca5761168183828151811061160757fe5b6020026020010151604051806060016040528060248152602001611d3b602491396001600088868151811061163857fe5b602002602001015181526020019081526020016000206000896001600160a01b03166001600160a01b03168152602001908152602001600020546111c69092919063ffffffff16565b6001600086848151811061169157fe5b602090810291909101810151825281810192909252604090810160009081206001600160a01b038a1682529092529020556001016115ef565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015611751578181015183820152602001611739565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015611790578181015183820152602001611778565b5050505090500194505050505060405180910390a450505050565b6001600160a01b0384166117f05760405162461bcd60e51b8152600401808060200182810382526021815260200180611ea66021913960400191505060405180910390fd5b60006117fa6111c1565b905061180c8160008761104b886118b3565b60008481526001602090815260408083206001600160a01b0389168452909152902054611839908461125d565b60008581526001602090815260408083206001600160a01b03808b16808652918452828520959095558151898152928301889052815190948616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a46118ac816000878787876118f7565b5050505050565b6040805160018082528183019092526060918291906020808301908036833701905050905082816000815181106118e657fe5b602090810291909101015292915050565b611909846001600160a01b0316611b9b565b15610c5457836001600160a01b031663f23a6e6187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611998578181015183820152602001611980565b50505050905090810190601f1680156119c55780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b1580156119e857600080fd5b505af1925050508015611a0d57506040513d6020811015611a0857600080fd5b505160015b611a195761145c611bdd565b6001600160e01b0319811663f23a6e6160e01b146115345760405162461bcd60e51b8152600401808060200182810382526028815260200180611cb76028913960400191505060405180910390fd5b6001600160a01b038316611aad5760405162461bcd60e51b8152600401808060200182810382526023815260200180611ddf6023913960400191505060405180910390fd5b6000611ab76111c1565b9050611ae781856000611ac9876118b3565b611ad2876118b3565b60405180602001604052806000815250610c54565b611b2e82604051806060016040528060248152602001611d3b6024913960008681526001602090815260408083206001600160a01b038b16845290915290205491906111c6565b60008481526001602090815260408083206001600160a01b03808a16808652918452828520959095558151888152928301879052815193949093908616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a450505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611bcf57508115155b949350505050565b60e01c90565b600060443d1015611bed576111c3565b600481823e6308c379a0611c018251611bd7565b14611c0b576111c3565b6040513d600319016004823e80513d67ffffffffffffffff8160248401118184111715611c3b57505050506111c3565b82840192508251915080821115611c5557505050506111c3565b503d83016020828401011115611c6d575050506111c3565b601f01601f191681016020016040529150509056fe455243313135353a207472616e7366657220746f206e6f6e2045524331313535526563656976657220696d706c656d656e746572455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73455243313135353a2062616c616e636520717565727920666f7220746865207a65726f2061646472657373455243313135353a2062617463682062616c616e636520717565727920666f7220746865207a65726f2061646472657373455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373455243313135353a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572455243313135353a2073657474696e6720617070726f76616c2073746174757320666f722073656c66455243313135353a206163636f756e747320616e6420696473206c656e677468206d69736d61746368455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368455243313135353a206d696e7420746f20746865207a65726f2061646472657373a26469706673582212202122a0eb1cdad4bc3b28ef4098302ba88ad90030ba0a1966e761ea2f1ada812464736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "uri", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "account", "type": "address", "indexed": true, "internalType": "address"}, {"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "event", "name": "TransferBatch", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "ids", "type": "uint256[]", "indexed": false, "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "indexed": false, "internalType": "uint256[]"}], "anonymous": false}, {"type": "event", "name": "TransferSingle", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "id", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "URI", "inputs": [{"name": "value", "type": "string", "indexed": false, "internalType": "string"}, {"name": "id", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfBatch", "stateMutability": "view", "inputs": [{"name": "accounts", "type": "address[]", "internalType": "address[]"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": [{"name": "", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "burnBatch", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": []}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeBatchTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "uri", "stateMutability": "view", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"balanceOf(address,uint256)": {"details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."}, "balanceOfBatch(address[],uint256[])": {"details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."}, "isApprovedForAll(address,address)": {"details": "See {IERC1155-isApprovedForAll}."}, "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {"details": "See {IERC1155-safeBatchTransferFrom}."}, "safeTransferFrom(address,address,uint256,uint256,bytes)": {"details": "See {IERC1155-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC1155-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."}, "uri(uint256)": {"details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substituion mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}}, "version": 1}}, "ERC1155Mock": {"contractName": "ERC1155Mock", "sourceId": "mocks/ERC1155Mock.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100ce5760003560e01c80634e1273f41161008c578063a22cb46511610066578063a22cb46514610963578063e985e9c514610991578063f242432a146109bf578063f5298aca14610a88576100ce565b80634e1273f4146105fd5780636b20c45414610770578063731133e9146108a3576100ce565b8062fdd58e146100d357806301ffc9a71461011157806302fe53051461014c5780630e89341c146101f25780631f7fdffa146102845780632eb2c2d61461043c575b600080fd5b6100ff600480360360408110156100e957600080fd5b506001600160a01b038135169060200135610aba565b60408051918252519081900360200190f35b6101386004803603602081101561012757600080fd5b50356001600160e01b031916610b29565b604080519115158252519081900360200190f35b6101f06004803603602081101561016257600080fd5b810190602081018135600160201b81111561017c57600080fd5b82018360208201111561018e57600080fd5b803590602001918460018302840111600160201b831117156101af57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610b48945050505050565b005b61020f6004803603602081101561020857600080fd5b5035610b54565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610249578181015183820152602001610231565b50505050905090810190601f1680156102765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101f06004803603608081101561029a57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156102c457600080fd5b8201836020820111156102d657600080fd5b803590602001918460208302840111600160201b831117156102f757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561034657600080fd5b82018360208201111561035857600080fd5b803590602001918460208302840111600160201b8311171561037957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156103c857600080fd5b8201836020820111156103da57600080fd5b803590602001918460018302840111600160201b831117156103fb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610bec945050505050565b6101f0600480360360a081101561045257600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561048557600080fd5b82018360208201111561049757600080fd5b803590602001918460208302840111600160201b831117156104b857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561050757600080fd5b82018360208201111561051957600080fd5b803590602001918460208302840111600160201b8311171561053a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561058957600080fd5b82018360208201111561059b57600080fd5b803590602001918460018302840111600160201b831117156105bc57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610bfe945050505050565b6107206004803603604081101561061357600080fd5b810190602081018135600160201b81111561062d57600080fd5b82018360208201111561063f57600080fd5b803590602001918460208302840111600160201b8311171561066057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156106af57600080fd5b8201836020820111156106c157600080fd5b803590602001918460208302840111600160201b831117156106e257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610efc945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561075c578181015183820152602001610744565b505050509050019250505060405180910390f35b6101f06004803603606081101561078657600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156107b057600080fd5b8201836020820111156107c257600080fd5b803590602001918460208302840111600160201b831117156107e357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561083257600080fd5b82018360208201111561084457600080fd5b803590602001918460208302840111600160201b8311171561086557600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061107a945050505050565b6101f0600480360360808110156108b957600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b8111156108ef57600080fd5b82018360208201111561090157600080fd5b803590602001918460018302840111600160201b8311171561092257600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061108a945050505050565b6101f06004803603604081101561097957600080fd5b506001600160a01b0381351690602001351515611096565b610138600480360360408110156109a757600080fd5b506001600160a01b0381358116916020013516611185565b6101f0600480360360a08110156109d557600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b811115610a1457600080fd5b820183602082011115610a2657600080fd5b803590602001918460018302840111600160201b83111715610a4757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506111b3945050505050565b6101f060048036036060811015610a9e57600080fd5b506001600160a01b03813516906020810135906040013561137e565b60006001600160a01b038316610b015760405162461bcd60e51b815260040180806020018281038252602b81526020018061219f602b913960400191505060405180910390fd5b5060009081526001602090815260408083206001600160a01b03949094168352929052205490565b6001600160e01b03191660009081526020819052604090205460ff1690565b610b5181611389565b50565b60038054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610be05780601f10610bb557610100808354040283529160200191610be0565b820191906000526020600020905b815481529060010190602001808311610bc357829003601f168201915b50505050509050919050565b610bf8848484846113a0565b50505050565b8151835114610c3e5760405162461bcd60e51b815260040180806020018281038252602881526020018061233e6028913960400191505060405180910390fd5b6001600160a01b038416610c835760405162461bcd60e51b81526004018080602001828103825260258152602001806122486025913960400191505060405180910390fd5b610c8b6115f5565b6001600160a01b0316856001600160a01b03161480610cb65750610cb685610cb16115f5565b611185565b610cf15760405162461bcd60e51b815260040180806020018281038252603281526020018061226d6032913960400191505060405180910390fd5b6000610cfb6115f5565b9050610d0b818787878787610ef4565b60005b8451811015610e0c576000858281518110610d2557fe5b602002602001015190506000858381518110610d3d57fe5b60200260200101519050610daa816040518060600160405280602a81526020016122c2602a91396001600086815260200190815260200160002060008d6001600160a01b03166001600160a01b03168152602001908152602001600020546115fa9092919063ffffffff16565b60008381526001602090815260408083206001600160a01b038e811685529252808320939093558a1681522054610de19082611691565b60009283526001602081815260408086206001600160a01b038d168752909152909320555001610d0e565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610e92578181015183820152602001610e7a565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610ed1578181015183820152602001610eb9565b5050505090500194505050505060405180910390a4610ef48187878787876116f2565b505050505050565b60608151835114610f3e5760405162461bcd60e51b81526004018080602001828103825260298152602001806123156029913960400191505060405180910390fd5b6060835167ffffffffffffffff81118015610f5857600080fd5b50604051908082528060200260200182016040528015610f82578160200160208202803683370190505b50905060005b84518110156110725760006001600160a01b0316858281518110610fa857fe5b60200260200101516001600160a01b03161415610ff65760405162461bcd60e51b81526004018080602001828103825260318152602001806121ca6031913960400191505060405180910390fd5b6001600085838151811061100657fe5b60200260200101518152602001908152602001600020600086838151811061102a57fe5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205482828151811061105f57fe5b6020908102919091010152600101610f88565b509392505050565b611085838383611971565b505050565b610bf884848484611bdf565b816001600160a01b03166110a86115f5565b6001600160a01b031614156110ee5760405162461bcd60e51b81526004018080602001828103825260298152602001806122ec6029913960400191505060405180910390fd5b80600260006110fb6115f5565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff19169215159290921790915561113f6115f5565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b6001600160a01b0384166111f85760405162461bcd60e51b81526004018080602001828103825260258152602001806122486025913960400191505060405180910390fd5b6112006115f5565b6001600160a01b0316856001600160a01b03161480611226575061122685610cb16115f5565b6112615760405162461bcd60e51b815260040180806020018281038252602981526020018061221f6029913960400191505060405180910390fd5b600061126b6115f5565b905061128b81878761127c88611ce0565b61128588611ce0565b87610ef4565b6112d2836040518060600160405280602a81526020016122c2602a913960008781526001602090815260408083206001600160a01b038d16845290915290205491906115fa565b60008581526001602090815260408083206001600160a01b038b811685529252808320939093558716815220546113099084611691565b60008581526001602090815260408083206001600160a01b03808b168086529184529382902094909455805188815291820187905280518a8416938616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a4610ef4818787878787611d24565b611085838383611e95565b805161139c906003906020840190612004565b5050565b6001600160a01b0384166113e55760405162461bcd60e51b81526004018080602001828103825260218152602001806123666021913960400191505060405180910390fd5b81518351146114255760405162461bcd60e51b815260040180806020018281038252602881526020018061233e6028913960400191505060405180910390fd5b600061142f6115f5565b905061144081600087878787610ef4565b60005b8451811015611504576114bb6001600087848151811061145f57fe5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020548583815181106114a557fe5b602002602001015161169190919063ffffffff16565b600160008784815181106114cb57fe5b602090810291909101810151825281810192909252604090810160009081206001600160a01b038b168252909252902055600101611443565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561158b578181015183820152602001611573565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156115ca5781810151838201526020016115b2565b5050505090500194505050505060405180910390a46115ee816000878787876116f2565b5050505050565b335b90565b600081848411156116895760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561164e578181015183820152602001611636565b50505050905090810190601f16801561167b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828201838110156116eb576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b611704846001600160a01b0316611fc8565b15610ef457836001600160a01b031663bc197c8187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b03168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561179257818101518382015260200161177a565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156117d15781810151838201526020016117b9565b50505050905001848103825285818151815260200191508051906020019080838360005b8381101561180d5781810151838201526020016117f5565b50505050905090810190601f16801561183a5780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b15801561185f57600080fd5b505af192505050801561188457506040513d602081101561187f57600080fd5b505160015b6119195761189061209d565b8061189b57506118e2565b60405162461bcd60e51b815260206004820181815283516024840152835184939192839260440191908501908083836000831561164e578181015183820152602001611636565b60405162461bcd60e51b81526004018080602001828103825260348152602001806121436034913960400191505060405180910390fd5b6001600160e01b0319811663bc197c8160e01b146119685760405162461bcd60e51b81526004018080602001828103825260288152602001806121776028913960400191505060405180910390fd5b50505050505050565b6001600160a01b0383166119b65760405162461bcd60e51b815260040180806020018281038252602381526020018061229f6023913960400191505060405180910390fd5b80518251146119f65760405162461bcd60e51b815260040180806020018281038252602881526020018061233e6028913960400191505060405180910390fd5b6000611a006115f5565b9050611a2081856000868660405180602001604052806000815250610ef4565b60005b8351811015611afe57611ab5838281518110611a3b57fe5b60200260200101516040518060600160405280602481526020016121fb6024913960016000888681518110611a6c57fe5b602002602001015181526020019081526020016000206000896001600160a01b03166001600160a01b03168152602001908152602001600020546115fa9092919063ffffffff16565b60016000868481518110611ac557fe5b602090810291909101810151825281810192909252604090810160009081206001600160a01b038a168252909252902055600101611a23565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015611b85578181015183820152602001611b6d565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015611bc4578181015183820152602001611bac565b5050505090500194505050505060405180910390a450505050565b6001600160a01b038416611c245760405162461bcd60e51b81526004018080602001828103825260218152602001806123666021913960400191505060405180910390fd5b6000611c2e6115f5565b9050611c408160008761127c88611ce0565b60008481526001602090815260408083206001600160a01b0389168452909152902054611c6d9084611691565b60008581526001602090815260408083206001600160a01b03808b16808652918452828520959095558151898152928301889052815190948616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a46115ee81600087878787611d24565b604080516001808252818301909252606091829190602080830190803683370190505090508281600081518110611d1357fe5b602090810291909101015292915050565b611d36846001600160a01b0316611fc8565b15610ef457836001600160a01b031663f23a6e6187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611dc5578181015183820152602001611dad565b50505050905090810190601f168015611df25780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b158015611e1557600080fd5b505af1925050508015611e3a57506040513d6020811015611e3557600080fd5b505160015b611e465761189061209d565b6001600160e01b0319811663f23a6e6160e01b146119685760405162461bcd60e51b81526004018080602001828103825260288152602001806121776028913960400191505060405180910390fd5b6001600160a01b038316611eda5760405162461bcd60e51b815260040180806020018281038252602381526020018061229f6023913960400191505060405180910390fd5b6000611ee46115f5565b9050611f1481856000611ef687611ce0565b611eff87611ce0565b60405180602001604052806000815250610ef4565b611f5b826040518060600160405280602481526020016121fb6024913960008681526001602090815260408083206001600160a01b038b16845290915290205491906115fa565b60008481526001602090815260408083206001600160a01b03808a16808652918452828520959095558151888152928301879052815193949093908616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a450505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611ffc57508115155b949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061204557805160ff1916838001178555612072565b82800160010185558215612072579182015b82811115612072578251825591602001919060010190612057565b5061207e929150612082565b5090565b5b8082111561207e5760008155600101612083565b60e01c90565b600060443d10156120ad576115f7565b600481823e6308c379a06120c18251612097565b146120cb576115f7565b6040513d600319016004823e80513d67ffffffffffffffff81602484011181841117156120fb57505050506115f7565b8284019250825191508082111561211557505050506115f7565b503d8301602082840101111561212d575050506115f7565b601f01601f191681016020016040529150509056fe455243313135353a207472616e7366657220746f206e6f6e2045524331313535526563656976657220696d706c656d656e746572455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73455243313135353a2062616c616e636520717565727920666f7220746865207a65726f2061646472657373455243313135353a2062617463682062616c616e636520717565727920666f7220746865207a65726f2061646472657373455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373455243313135353a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572455243313135353a2073657474696e6720617070726f76616c2073746174757320666f722073656c66455243313135353a206163636f756e747320616e6420696473206c656e677468206d69736d61746368455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368455243313135353a206d696e7420746f20746865207a65726f2061646472657373a26469706673582212203baee85456c6c2ef49e85559b1b9526945fcbdccf53112937481138e75045d3964736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "uri", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "account", "type": "address", "indexed": true, "internalType": "address"}, {"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "event", "name": "TransferBatch", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "ids", "type": "uint256[]", "indexed": false, "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "indexed": false, "internalType": "uint256[]"}], "anonymous": false}, {"type": "event", "name": "TransferSingle", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "id", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "URI", "inputs": [{"name": "value", "type": "string", "indexed": false, "internalType": "string"}, {"name": "id", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfBatch", "stateMutability": "view", "inputs": [{"name": "accounts", "type": "address[]", "internalType": "address[]"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": [{"name": "", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "burnBatch", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": []}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "mintBatch", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeBatchTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "setURI", "stateMutability": "nonpayable", "inputs": [{"name": "newuri", "type": "string", "internalType": "string"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "uri", "stateMutability": "view", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"balanceOf(address,uint256)": {"details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."}, "balanceOfBatch(address[],uint256[])": {"details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."}, "isApprovedForAll(address,address)": {"details": "See {IERC1155-isApprovedForAll}."}, "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {"details": "See {IERC1155-safeBatchTransferFrom}."}, "safeTransferFrom(address,address,uint256,uint256,bytes)": {"details": "See {IERC1155-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC1155-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."}, "uri(uint256)": {"details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substituion mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}}, "title": "ERC1155Mock This mock just publicizes internal functions for testing purposes", "version": 1}}, "ERC1155PausableMock": {"contractName": "ERC1155PausableMock", "sourceId": "mocks/ERC1155PausableMock.sol", "deploymentBytecode": {"bytecode": "60806040523480156200001157600080fd5b506040516200285a3803806200285a833981810160405260208110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b5060405250829150819050620001036301ffc9a760e01b62000145565b6200010e81620001ca565b62000120636cdb3d1360e11b62000145565b620001326303a24d0760e21b62000145565b50506004805460ff19169055506200027f565b6001600160e01b03198082161415620001a5576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b8051620001df906003906020840190620001e3565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200022657805160ff191683800117855562000256565b8280016001018555821562000256579182015b828111156200025657825182559160200191906001019062000239565b506200026492915062000268565b5090565b5b8082111562000264576000815560010162000269565b6125cb806200028f6000396000f3fe608060405234801561001057600080fd5b50600436106100ff5760003560e01c80635c975abb11610097578063a22cb46511610066578063a22cb465146109ac578063e985e9c5146109da578063f242432a14610a08578063f5298aca14610ad1576100ff565b80635c975abb146107a95780636b20c454146107b1578063731133e9146108e45780638456cb59146109a4576100ff565b80631f7fdffa116100d35780631f7fdffa146102b55780632eb2c2d61461046d5780633f4ba83a1461062e5780634e1273f414610636576100ff565b8062fdd58e1461010457806301ffc9a71461014257806302fe53051461017d5780630e89341c14610223575b600080fd5b6101306004803603604081101561011a57600080fd5b506001600160a01b038135169060200135610b03565b60408051918252519081900360200190f35b6101696004803603602081101561015857600080fd5b50356001600160e01b031916610b72565b604080519115158252519081900360200190f35b6102216004803603602081101561019357600080fd5b810190602081018135600160201b8111156101ad57600080fd5b8201836020820111156101bf57600080fd5b803590602001918460018302840111600160201b831117156101e057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610b91945050505050565b005b6102406004803603602081101561023957600080fd5b5035610b9d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561027a578181015183820152602001610262565b50505050905090810190601f1680156102a75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610221600480360360808110156102cb57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156102f557600080fd5b82018360208201111561030757600080fd5b803590602001918460208302840111600160201b8311171561032857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561037757600080fd5b82018360208201111561038957600080fd5b803590602001918460208302840111600160201b831117156103aa57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156103f957600080fd5b82018360208201111561040b57600080fd5b803590602001918460018302840111600160201b8311171561042c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610c35945050505050565b610221600480360360a081101561048357600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156104b657600080fd5b8201836020820111156104c857600080fd5b803590602001918460208302840111600160201b831117156104e957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561053857600080fd5b82018360208201111561054a57600080fd5b803590602001918460208302840111600160201b8311171561056b57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156105ba57600080fd5b8201836020820111156105cc57600080fd5b803590602001918460018302840111600160201b831117156105ed57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610c47945050505050565b610221610f45565b6107596004803603604081101561064c57600080fd5b810190602081018135600160201b81111561066657600080fd5b82018360208201111561067857600080fd5b803590602001918460208302840111600160201b8311171561069957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156106e857600080fd5b8201836020820111156106fa57600080fd5b803590602001918460208302840111600160201b8311171561071b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610f4f945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561079557818101518382015260200161077d565b505050509050019250505060405180910390f35b6101696110cd565b610221600480360360608110156107c757600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156107f157600080fd5b82018360208201111561080357600080fd5b803590602001918460208302840111600160201b8311171561082457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561087357600080fd5b82018360208201111561088557600080fd5b803590602001918460208302840111600160201b831117156108a657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506110d7945050505050565b610221600480360360808110156108fa57600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b81111561093057600080fd5b82018360208201111561094257600080fd5b803590602001918460018302840111600160201b8311171561096357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506110e7945050505050565b6102216110f3565b610221600480360360408110156109c257600080fd5b506001600160a01b03813516906020013515156110fb565b610169600480360360408110156109f057600080fd5b506001600160a01b03813581169160200135166111ea565b610221600480360360a0811015610a1e57600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b811115610a5d57600080fd5b820183602082011115610a6f57600080fd5b803590602001918460018302840111600160201b83111715610a9057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611218945050505050565b61022160048036036060811015610ae757600080fd5b506001600160a01b0381351690602081013590604001356113e3565b60006001600160a01b038316610b4a5760405162461bcd60e51b815260040180806020018281038252602b815260200180612382602b913960400191505060405180910390fd5b5060009081526001602090815260408083206001600160a01b03949094168352929052205490565b6001600160e01b03191660009081526020819052604090205460ff1690565b610b9a816113ee565b50565b60038054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610c295780601f10610bfe57610100808354040283529160200191610c29565b820191906000526020600020905b815481529060010190602001808311610c0c57829003601f168201915b50505050509050919050565b610c4184848484611405565b50505050565b8151835114610c875760405162461bcd60e51b815260040180806020018281038252602881526020018061254d6028913960400191505060405180910390fd5b6001600160a01b038416610ccc5760405162461bcd60e51b81526004018080602001828103825260258152602001806124576025913960400191505060405180910390fd5b610cd461165a565b6001600160a01b0316856001600160a01b03161480610cff5750610cff85610cfa61165a565b6111ea565b610d3a5760405162461bcd60e51b815260040180806020018281038252603281526020018061247c6032913960400191505060405180910390fd5b6000610d4461165a565b9050610d5481878787878761165e565b60005b8451811015610e55576000858281518110610d6e57fe5b602002602001015190506000858381518110610d8657fe5b60200260200101519050610df3816040518060600160405280602a81526020016124d1602a91396001600086815260200190815260200160002060008d6001600160a01b03166001600160a01b031681526020019081526020016000205461166c9092919063ffffffff16565b60008381526001602090815260408083206001600160a01b038e811685529252808320939093558a1681522054610e2a9082611703565b60009283526001602081815260408086206001600160a01b038d168752909152909320555001610d57565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610edb578181015183820152602001610ec3565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610f1a578181015183820152602001610f02565b5050505090500194505050505060405180910390a4610f3d818787878787611764565b505050505050565b610f4d6119e3565b565b60608151835114610f915760405162461bcd60e51b81526004018080602001828103825260298152602001806125246029913960400191505060405180910390fd5b6060835167ffffffffffffffff81118015610fab57600080fd5b50604051908082528060200260200182016040528015610fd5578160200160208202803683370190505b50905060005b84518110156110c55760006001600160a01b0316858281518110610ffb57fe5b60200260200101516001600160a01b031614156110495760405162461bcd60e51b81526004018080602001828103825260318152602001806123ad6031913960400191505060405180910390fd5b6001600085838151811061105957fe5b60200260200101518152602001908152602001600020600086838151811061107d57fe5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020548282815181106110b257fe5b6020908102919091010152600101610fdb565b509392505050565b60045460ff165b90565b6110e2838383611a81565b505050565b610c4184848484611cef565b610f4d611df0565b816001600160a01b031661110d61165a565b6001600160a01b031614156111535760405162461bcd60e51b81526004018080602001828103825260298152602001806124fb6029913960400191505060405180910390fd5b806002600061116061165a565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556111a461165a565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b6001600160a01b03841661125d5760405162461bcd60e51b81526004018080602001828103825260258152602001806124576025913960400191505060405180910390fd5b61126561165a565b6001600160a01b0316856001600160a01b0316148061128b575061128b85610cfa61165a565b6112c65760405162461bcd60e51b815260040180806020018281038252602981526020018061242e6029913960400191505060405180910390fd5b60006112d061165a565b90506112f08187876112e188611e71565b6112ea88611e71565b8761165e565b611337836040518060600160405280602a81526020016124d1602a913960008781526001602090815260408083206001600160a01b038d168452909152902054919061166c565b60008581526001602090815260408083206001600160a01b038b8116855292528083209390935587168152205461136e9084611703565b60008581526001602090815260408083206001600160a01b03808b168086529184529382902094909455805188815291820187905280518a8416938616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a4610f3d818787878787611eb5565b6110e2838383612026565b80516114019060039060208401906121e7565b5050565b6001600160a01b03841661144a5760405162461bcd60e51b81526004018080602001828103825260218152602001806125756021913960400191505060405180910390fd5b815183511461148a5760405162461bcd60e51b815260040180806020018281038252602881526020018061254d6028913960400191505060405180910390fd5b600061149461165a565b90506114a58160008787878761165e565b60005b845181101561156957611520600160008784815181106114c457fe5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000205485838151811061150a57fe5b602002602001015161170390919063ffffffff16565b6001600087848151811061153057fe5b602090810291909101810151825281810192909252604090810160009081206001600160a01b038b1682529092529020556001016114a8565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156115f05781810151838201526020016115d8565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561162f578181015183820152602001611617565b5050505090500194505050505060405180910390a461165381600087878787611764565b5050505050565b3390565b610f3d868686868686612159565b600081848411156116fb5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156116c05781810151838201526020016116a8565b50505050905090810190601f1680156116ed5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008282018381101561175d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b611776846001600160a01b03166121ab565b15610f3d57836001600160a01b031663bc197c8187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b03168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156118045781810151838201526020016117ec565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561184357818101518382015260200161182b565b50505050905001848103825285818151815260200191508051906020019080838360005b8381101561187f578181015183820152602001611867565b50505050905090810190601f1680156118ac5780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b1580156118d157600080fd5b505af19250505080156118f657506040513d60208110156118f157600080fd5b505160015b61198b57611902612280565b8061190d5750611954565b60405162461bcd60e51b81526020600482018181528351602484015283518493919283926044019190850190808383600083156116c05781810151838201526020016116a8565b60405162461bcd60e51b81526004018080602001828103825260348152602001806123266034913960400191505060405180910390fd5b6001600160e01b0319811663bc197c8160e01b146119da5760405162461bcd60e51b815260040180806020018281038252602881526020018061235a6028913960400191505060405180910390fd5b50505050505050565b60045460ff16611a31576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6004805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611a6461165a565b604080516001600160a01b039092168252519081900360200190a1565b6001600160a01b038316611ac65760405162461bcd60e51b81526004018080602001828103825260238152602001806124ae6023913960400191505060405180910390fd5b8051825114611b065760405162461bcd60e51b815260040180806020018281038252602881526020018061254d6028913960400191505060405180910390fd5b6000611b1061165a565b9050611b308185600086866040518060200160405280600081525061165e565b60005b8351811015611c0e57611bc5838281518110611b4b57fe5b60200260200101516040518060600160405280602481526020016123de6024913960016000888681518110611b7c57fe5b602002602001015181526020019081526020016000206000896001600160a01b03166001600160a01b031681526020019081526020016000205461166c9092919063ffffffff16565b60016000868481518110611bd557fe5b602090810291909101810151825281810192909252604090810160009081206001600160a01b038a168252909252902055600101611b33565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015611c95578181015183820152602001611c7d565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015611cd4578181015183820152602001611cbc565b5050505090500194505050505060405180910390a450505050565b6001600160a01b038416611d345760405162461bcd60e51b81526004018080602001828103825260218152602001806125756021913960400191505060405180910390fd5b6000611d3e61165a565b9050611d50816000876112e188611e71565b60008481526001602090815260408083206001600160a01b0389168452909152902054611d7d9084611703565b60008581526001602090815260408083206001600160a01b03808b16808652918452828520959095558151898152928301889052815190948616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a461165381600087878787611eb5565b60045460ff1615611e3b576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6004805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a6461165a565b604080516001808252818301909252606091829190602080830190803683370190505090508281600081518110611ea457fe5b602090810291909101015292915050565b611ec7846001600160a01b03166121ab565b15610f3d57836001600160a01b031663f23a6e6187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611f56578181015183820152602001611f3e565b50505050905090810190601f168015611f835780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b158015611fa657600080fd5b505af1925050508015611fcb57506040513d6020811015611fc657600080fd5b505160015b611fd757611902612280565b6001600160e01b0319811663f23a6e6160e01b146119da5760405162461bcd60e51b815260040180806020018281038252602881526020018061235a6028913960400191505060405180910390fd5b6001600160a01b03831661206b5760405162461bcd60e51b81526004018080602001828103825260238152602001806124ae6023913960400191505060405180910390fd5b600061207561165a565b90506120a58185600061208787611e71565b61209087611e71565b6040518060200160405280600081525061165e565b6120ec826040518060600160405280602481526020016123de6024913960008681526001602090815260408083206001600160a01b038b168452909152902054919061166c565b60008481526001602090815260408083206001600160a01b03808a16808652918452828520959095558151888152928301879052815193949093908616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a450505050565b612167868686868686610f3d565b61216f6110cd565b15610f3d5760405162461bcd60e51b815260040180806020018281038252602c815260200180612402602c913960400191505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906121df57508115155b949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061222857805160ff1916838001178555612255565b82800160010185558215612255579182015b8281111561225557825182559160200191906001019061223a565b50612261929150612265565b5090565b5b808211156122615760008155600101612266565b60e01c90565b600060443d1015612290576110d4565b600481823e6308c379a06122a4825161227a565b146122ae576110d4565b6040513d600319016004823e80513d67ffffffffffffffff81602484011181841117156122de57505050506110d4565b828401925082519150808211156122f857505050506110d4565b503d83016020828401011115612310575050506110d4565b601f01601f191681016020016040529150509056fe455243313135353a207472616e7366657220746f206e6f6e2045524331313535526563656976657220696d706c656d656e746572455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73455243313135353a2062616c616e636520717565727920666f7220746865207a65726f2061646472657373455243313135353a2062617463682062616c616e636520717565727920666f7220746865207a65726f2061646472657373455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365455243313135355061757361626c653a20746f6b656e207472616e73666572207768696c6520706175736564455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373455243313135353a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572455243313135353a2073657474696e6720617070726f76616c2073746174757320666f722073656c66455243313135353a206163636f756e747320616e6420696473206c656e677468206d69736d61746368455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368455243313135353a206d696e7420746f20746865207a65726f2061646472657373a2646970667358221220a784d244386925847a63d1f58b765e99a2cd90819a97f2880cf8c1c3dcfb198c64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "uri", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "account", "type": "address", "indexed": true, "internalType": "address"}, {"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "event", "name": "Paused", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "TransferBatch", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "ids", "type": "uint256[]", "indexed": false, "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "indexed": false, "internalType": "uint256[]"}], "anonymous": false}, {"type": "event", "name": "TransferSingle", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "id", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "URI", "inputs": [{"name": "value", "type": "string", "indexed": false, "internalType": "string"}, {"name": "id", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Unpaused", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfBatch", "stateMutability": "view", "inputs": [{"name": "accounts", "type": "address[]", "internalType": "address[]"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": [{"name": "", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "burnBatch", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": []}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "mintBatch", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "pause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "paused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "safeBatchTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "setURI", "stateMutability": "nonpayable", "inputs": [{"name": "newuri", "type": "string", "internalType": "string"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "unpause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "uri", "stateMutability": "view", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"balanceOf(address,uint256)": {"details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."}, "balanceOfBatch(address[],uint256[])": {"details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."}, "isApprovedForAll(address,address)": {"details": "See {IERC1155-isApprovedForAll}."}, "paused()": {"details": "Returns true if the contract is paused, and false otherwise."}, "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {"details": "See {IERC1155-safeBatchTransferFrom}."}, "safeTransferFrom(address,address,uint256,uint256,bytes)": {"details": "See {IERC1155-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC1155-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."}, "uri(uint256)": {"details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substituion mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}}, "version": 1}}, "ERC1155ReceiverMock": {"contractName": "ERC1155ReceiverMock", "sourceId": "mocks/ERC1155ReceiverMock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b5060405161076e38038061076e8339818101604052608081101561003357600080fd5b508051602082015160408301516060909301519192909161005a6301ffc9a760e01b6100c4565b6001805463ffffffff191660e095861c1760ff60201b1916640100000000941515949094029390931763ffffffff60281b1916650100000000009290941c919091029290921760ff60481b1916690100000000000000000092151592909202919091179055610148565b6001600160e01b03198082161415610123576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b610617806101576000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a714610051578063214cdb801461008c578063bc197c81146100b5578063f23a6e61146101f9575b600080fd5b6100786004803603602081101561006757600080fd5b50356001600160e01b03191661028c565b604080519115158252519081900360200190f35b6100b3600480360360208110156100a257600080fd5b50356001600160e01b0319166102ab565b005b6101dc600480360360a08110156100cb57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156100fe57600080fd5b82018360208201111561011057600080fd5b803590602001918460208302840111600160201b8311171561013157600080fd5b919390929091602081019035600160201b81111561014e57600080fd5b82018360208201111561016057600080fd5b803590602001918460208302840111600160201b8311171561018157600080fd5b919390929091602081019035600160201b81111561019e57600080fd5b8201836020820111156101b057600080fd5b803590602001918460018302840111600160201b831117156101d157600080fd5b5090925090506102b7565b604080516001600160e01b03199092168252519081900360200190f35b6101dc600480360360a081101561020f57600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b81111561024e57600080fd5b82018360208201111561026057600080fd5b803590602001918460018302840111600160201b8311171561028157600080fd5b50909250905061040e565b6001600160e01b03191660009081526020819052604090205460ff1690565b6102b481610505565b50565b6001546000906901000000000000000000900460ff16156103095760405162461bcd60e51b815260040180806020018281038252602f8152602001806105b3602f913960400191505060405180910390fd5b7f0bcad9224ba33b574e9c85298de2f44b4c80015a21aa5df474896444909863d889898989898989895a604051808a6001600160a01b03168152602001896001600160a01b0316815260200180602001806020018060200185815260200184810384528b8b82818152602001925060200280828437600083820152601f01601f19169091018581038452898152602090810191508a908a0280828437600083820152601f01601f191690910185810383528781526020019050878780828437600083820152604051601f909101601f19169092018290039e50909c50505050505050505050505050a15060015465010000000000900460e01b98975050505050505050565b600154600090600160201b900460ff161561045a5760405162461bcd60e51b815260040180806020018281038252602981526020018061058a6029913960400191505060405180910390fd5b7f20dfa9f79060c8c4d7fe892c97c71bcf6e3b63d1dcf66fea7aefc0211628cf298787878787875a60405180886001600160a01b03168152602001876001600160a01b03168152602001868152602001858152602001806020018381526020018281038252858582818152602001925080828437600083820152604051601f909101601f19169092018290039a509098505050505050505050a15060015460e01b9695505050505050565b6001600160e01b03198082161415610564576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff1916600117905556fe4552433131353552656365697665724d6f636b3a20726576657274696e67206f6e20726563656976654552433131353552656365697665724d6f636b3a20726576657274696e67206f6e2062617463682072656365697665a2646970667358221220f61d88c7800e532ee806011199f80dc0c499b2f52ea41992136717efd1458fc164736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a714610051578063214cdb801461008c578063bc197c81146100b5578063f23a6e61146101f9575b600080fd5b6100786004803603602081101561006757600080fd5b50356001600160e01b03191661028c565b604080519115158252519081900360200190f35b6100b3600480360360208110156100a257600080fd5b50356001600160e01b0319166102ab565b005b6101dc600480360360a08110156100cb57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156100fe57600080fd5b82018360208201111561011057600080fd5b803590602001918460208302840111600160201b8311171561013157600080fd5b919390929091602081019035600160201b81111561014e57600080fd5b82018360208201111561016057600080fd5b803590602001918460208302840111600160201b8311171561018157600080fd5b919390929091602081019035600160201b81111561019e57600080fd5b8201836020820111156101b057600080fd5b803590602001918460018302840111600160201b831117156101d157600080fd5b5090925090506102b7565b604080516001600160e01b03199092168252519081900360200190f35b6101dc600480360360a081101561020f57600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b81111561024e57600080fd5b82018360208201111561026057600080fd5b803590602001918460018302840111600160201b8311171561028157600080fd5b50909250905061040e565b6001600160e01b03191660009081526020819052604090205460ff1690565b6102b481610505565b50565b6001546000906901000000000000000000900460ff16156103095760405162461bcd60e51b815260040180806020018281038252602f8152602001806105b3602f913960400191505060405180910390fd5b7f0bcad9224ba33b574e9c85298de2f44b4c80015a21aa5df474896444909863d889898989898989895a604051808a6001600160a01b03168152602001896001600160a01b0316815260200180602001806020018060200185815260200184810384528b8b82818152602001925060200280828437600083820152601f01601f19169091018581038452898152602090810191508a908a0280828437600083820152601f01601f191690910185810383528781526020019050878780828437600083820152604051601f909101601f19169092018290039e50909c50505050505050505050505050a15060015465010000000000900460e01b98975050505050505050565b600154600090600160201b900460ff161561045a5760405162461bcd60e51b815260040180806020018281038252602981526020018061058a6029913960400191505060405180910390fd5b7f20dfa9f79060c8c4d7fe892c97c71bcf6e3b63d1dcf66fea7aefc0211628cf298787878787875a60405180886001600160a01b03168152602001876001600160a01b03168152602001868152602001858152602001806020018381526020018281038252858582818152602001925080828437600083820152604051601f909101601f19169092018290039a509098505050505050505050a15060015460e01b9695505050505050565b6001600160e01b03198082161415610564576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff1916600117905556fe4552433131353552656365697665724d6f636b3a20726576657274696e67206f6e20726563656976654552433131353552656365697665724d6f636b3a20726576657274696e67206f6e2062617463682072656365697665a2646970667358221220f61d88c7800e532ee806011199f80dc0c499b2f52ea41992136717efd1458fc164736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "recRetval", "type": "bytes4", "internalType": "bytes4"}, {"name": "recReverts", "type": "bool", "internalType": "bool"}, {"name": "batRetval", "type": "bytes4", "internalType": "bytes4"}, {"name": "batReverts", "type": "bool", "internalType": "bool"}]}, {"type": "event", "name": "BatchReceived", "inputs": [{"name": "operator", "type": "address", "indexed": false, "internalType": "address"}, {"name": "from", "type": "address", "indexed": false, "internalType": "address"}, {"name": "ids", "type": "uint256[]", "indexed": false, "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "indexed": false, "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "indexed": false, "internalType": "bytes"}, {"name": "gas", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Received", "inputs": [{"name": "operator", "type": "address", "indexed": false, "internalType": "address"}, {"name": "from", "type": "address", "indexed": false, "internalType": "address"}, {"name": "id", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "data", "type": "bytes", "indexed": false, "internalType": "bytes"}, {"name": "gas", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "onERC1155BatchReceived", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}, {"type": "function", "name": "onERC1155Received", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}, {"type": "function", "name": "registerInterface", "stateMutability": "nonpayable", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {"details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).", "params": {"data": "Additional data with no specified format", "from": "The address which previously owned the token", "ids": "An array containing ids of each token being transferred (order and length must match values array)", "operator": "The address which initiated the batch transfer (i.e. msg.sender)", "values": "An array containing amounts of each token being transferred (order and length must match ids array)"}, "returns": {"_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"}}, "onERC1155Received(address,address,uint256,uint256,bytes)": {"details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).", "params": {"data": "Additional data with no specified format", "from": "The address which previously owned the token", "id": "The ID of the token being transferred", "operator": "The address which initiated the transfer (i.e. msg.sender)", "value": "The amount of tokens being transferred"}, "returns": {"_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"}}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."}}, "version": 1}}, "ERC165InterfacesSupported": {"contractName": "ERC165InterfacesSupported", "sourceId": "mocks/ERC165/ERC165InterfacesSupported.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b506040516102af3803806102af8339818101604052602081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b90830190602082018581111561006857600080fd5b825186602082028301116401000000008211171561008557600080fd5b82525081516020918201928201910280838360005b838110156100b257818101518382015260200161009a565b505050509050016040525050506100d56301ffc9a760e01b61011260201b60201c565b60005b815181101561010b576101038282815181106100f057fe5b602002602001015161011260201b60201c565b6001016100d8565b5050610180565b6001600160e01b0319808216141561015b5760405162461bcd60e51b815260040180806020018281038252602f815260200180610280602f913960400191505060405180910390fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b60f28061018e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806301ffc9a714603757806334d7006c14606f575b600080fd5b605b60048036036020811015604b57600080fd5b50356001600160e01b0319166092565b604080519115158252519081900360200190f35b607560b1565b604080516001600160e01b03199092168252519081900360200190f35b6001600160e01b03191660009081526020819052604090205460ff1690565b6301ffc9a760e01b8156fea26469706673582212207e7720c5e20c13e688394a0cf463e9269ab36f958e83ea46445145c08fc5899c64736f6c634300060c0033455243313635496e7465726661636573537570706f727465643a20696e76616c696420696e74657266616365206964"}, "runtimeBytecode": {"bytecode": "6080604052348015600f57600080fd5b506004361060325760003560e01c806301ffc9a714603757806334d7006c14606f575b600080fd5b605b60048036036020811015604b57600080fd5b50356001600160e01b0319166092565b604080519115158252519081900360200190f35b607560b1565b604080516001600160e01b03199092168252519081900360200190f35b6001600160e01b03191660009081526020819052604090205460ff1690565b6301ffc9a760e01b8156fea26469706673582212207e7720c5e20c13e688394a0cf463e9269ab36f958e83ea46445145c08fc5899c64736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "interfaceIds", "type": "bytes4[]", "internalType": "bytes4[]"}]}, {"type": "function", "name": "INTERFACE_ID_ERC165", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"supportsInterface(bytes4)": {"details": "Implement supportsInterface(bytes4) using a lookup table."}}, "version": 1}}, "SupportsInterfaceWithLookupMock": {"contractName": "SupportsInterfaceWithLookupMock", "sourceId": "mocks/ERC165/ERC165InterfacesSupported.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b506100216301ffc9a760e01b610026565b610094565b6001600160e01b0319808216141561006f5760405162461bcd60e51b815260040180806020018281038252602f815260200180610194602f913960400191505060405180910390fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b60f2806100a26000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806301ffc9a714603757806334d7006c14606f575b600080fd5b605b60048036036020811015604b57600080fd5b50356001600160e01b0319166092565b604080519115158252519081900360200190f35b607560b1565b604080516001600160e01b03199092168252519081900360200190f35b6001600160e01b03191660009081526020819052604090205460ff1690565b6301ffc9a760e01b8156fea264697066735822122031f0602cfccf8d6cb68a6c773c6f16928ce19db9d9af1e0d198adae1807c942a64736f6c634300060c0033455243313635496e7465726661636573537570706f727465643a20696e76616c696420696e74657266616365206964"}, "runtimeBytecode": {"bytecode": "6080604052348015600f57600080fd5b506004361060325760003560e01c806301ffc9a714603757806334d7006c14606f575b600080fd5b605b60048036036020811015604b57600080fd5b50356001600160e01b0319166092565b604080519115158252519081900360200190f35b607560b1565b604080516001600160e01b03199092168252519081900360200190f35b6001600160e01b03191660009081526020819052604090205460ff1690565b6301ffc9a760e01b8156fea264697066735822122031f0602cfccf8d6cb68a6c773c6f16928ce19db9d9af1e0d198adae1807c942a64736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": []}, {"type": "function", "name": "INTERFACE_ID_ERC165", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "notice": "https://eips.ethereum.org/EIPS/eip-214#specification From the specification: > Any attempts to make state-changing operations inside an execution instance with STATIC set to true will instead throw an exception. > These operations include [...], LOG0, LOG1, LOG2, [...] therefore, because this contract is staticcall'd we need to not emit events (which is how solidity-coverage works) solidity-coverage ignores the /mocks folder, so we duplicate its implementation here to avoid instrumenting it", "version": 1}, "devdoc": {"kind": "dev", "methods": {"constructor": {"details": "A contract implementing SupportsInterfaceWithLookup implement ERC165 itself."}, "supportsInterface(bytes4)": {"details": "Implement supportsInterface(bytes4) using a lookup table."}}, "stateVariables": {"_supportedInterfaces": {"details": "A mapping of interface id to whether or not it's supported."}}, "version": 1}}, "ERC165NotSupported": {"contractName": "ERC165NotSupported", "sourceId": "mocks/ERC165/ERC165NotSupported.sol", "deploymentBytecode": {"bytecode": "6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122057d9d305f2193c3cb8a5ff1d0bb94a8612f153fc3c5aa87f6774347412196ad764736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "6080604052600080fdfea264697066735822122057d9d305f2193c3cb8a5ff1d0bb94a8612f153fc3c5aa87f6774347412196ad764736f6c634300060c0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ERC165CheckerMock": {"contractName": "ERC165CheckerMock", "sourceId": "mocks/ERC165CheckerMock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b506103eb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634b9dd90414610046578063c398a9251461010d578063d905700714610133575b600080fd5b6100f96004803603604081101561005c57600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561008757600080fd5b82018360208201111561009957600080fd5b803590602001918460208302840111640100000000831117156100bb57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610169945050505050565b604080519115158252519081900360200190f35b6100f96004803603602081101561012357600080fd5b50356001600160a01b0316610187565b6100f96004803603604081101561014957600080fd5b5080356001600160a01b031690602001356001600160e01b03191661019b565b600061017e6001600160a01b038416836101b0565b90505b92915050565b6000610181826001600160a01b0316610210565b600061017e6001600160a01b03841683610243565b60006101bb83610210565b6101c757506000610181565b60005b8251811015610206576101f0848483815181106101e357fe5b602002602001015161025b565b6101fe576000915050610181565b6001016101ca565b5060019392505050565b6000610223826301ffc9a760e01b61025b565b8015610181575061023c826001600160e01b031961025b565b1592915050565b600061024e83610210565b801561017e575061017e83835b600080600061026a8585610281565b915091508180156102785750805b95945050505050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b1781529151815160009384939284926060926001600160a01b038a169261753092879282918083835b602083106103095780518252601f1990920191602091820191016102ea565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303818686fa925050503d806000811461036a576040519150601f19603f3d011682016040523d82523d6000602084013e61036f565b606091505b509150915060208151101561038d57600080945094505050506103ae565b818180602001905160208110156103a357600080fd5b505190955093505050505b925092905056fea26469706673582212205c1e9ddd4c5a66a20f28da959148013ceddce0f6028a9f7536fdffd83b4fbccc64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100415760003560e01c80634b9dd90414610046578063c398a9251461010d578063d905700714610133575b600080fd5b6100f96004803603604081101561005c57600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561008757600080fd5b82018360208201111561009957600080fd5b803590602001918460208302840111640100000000831117156100bb57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610169945050505050565b604080519115158252519081900360200190f35b6100f96004803603602081101561012357600080fd5b50356001600160a01b0316610187565b6100f96004803603604081101561014957600080fd5b5080356001600160a01b031690602001356001600160e01b03191661019b565b600061017e6001600160a01b038416836101b0565b90505b92915050565b6000610181826001600160a01b0316610210565b600061017e6001600160a01b03841683610243565b60006101bb83610210565b6101c757506000610181565b60005b8251811015610206576101f0848483815181106101e357fe5b602002602001015161025b565b6101fe576000915050610181565b6001016101ca565b5060019392505050565b6000610223826301ffc9a760e01b61025b565b8015610181575061023c826001600160e01b031961025b565b1592915050565b600061024e83610210565b801561017e575061017e83835b600080600061026a8585610281565b915091508180156102785750805b95945050505050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b1781529151815160009384939284926060926001600160a01b038a169261753092879282918083835b602083106103095780518252601f1990920191602091820191016102ea565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303818686fa925050503d806000811461036a576040519150601f19603f3d011682016040523d82523d6000602084013e61036f565b606091505b509150915060208151101561038d57600080945094505050506103ae565b818180602001905160208110156103a357600080fd5b505190955093505050505b925092905056fea26469706673582212205c1e9ddd4c5a66a20f28da959148013ceddce0f6028a9f7536fdffd83b4fbccc64736f6c634300060c0033"}, "abi": [{"type": "function", "name": "supportsAllInterfaces", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "interfaceIds", "type": "bytes4[]", "internalType": "bytes4[]"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "supportsERC165", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ERC165Mock": {"contractName": "ERC165Mock", "sourceId": "mocks/ERC165Mock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b506100216301ffc9a760e01b610026565b6100aa565b6001600160e01b03198082161415610085576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b610184806100b96000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b578063214cdb8014610076575b600080fd5b6100626004803603602081101561005157600080fd5b50356001600160e01b03191661009f565b604080519115158252519081900360200190f35b61009d6004803603602081101561008c57600080fd5b50356001600160e01b0319166100be565b005b6001600160e01b03191660009081526020819052604090205460ff1690565b6100c7816100ca565b50565b6001600160e01b03198082161415610129576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff1916600117905556fea26469706673582212208f8a8e0baf0faf4bfb6c9f8fe2a0b40412e97e5c652ee1ea86f1ab9e309df15764736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b578063214cdb8014610076575b600080fd5b6100626004803603602081101561005157600080fd5b50356001600160e01b03191661009f565b604080519115158252519081900360200190f35b61009d6004803603602081101561008c57600080fd5b50356001600160e01b0319166100be565b005b6001600160e01b03191660009081526020819052604090205460ff1690565b6100c7816100ca565b50565b6001600160e01b03198082161415610129576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff1916600117905556fea26469706673582212208f8a8e0baf0faf4bfb6c9f8fe2a0b40412e97e5c652ee1ea86f1ab9e309df15764736f6c634300060c0033"}, "abi": [{"type": "function", "name": "registerInterface", "stateMutability": "nonpayable", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."}}, "version": 1}}, "ERC1820ImplementerMock": {"contractName": "ERC1820ImplementerMock", "sourceId": "mocks/ERC1820ImplementerMock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b5061018e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063249cb3fa1461003b5780635536e45d14610079575b600080fd5b6100676004803603604081101561005157600080fd5b50803590602001356001600160a01b03166100a7565b60408051918252519081900360200190f35b6100a56004803603604081101561008f57600080fd5b50803590602001356001600160a01b031661011c565b005b6000828152602081815260408083206001600160a01b038516845290915281205460ff166100d6576000610115565b604051602001808073455243313832305f4143434550545f4d4147494360601b8152506014019050604051602081830303815290604052805190602001205b9392505050565b610126828261012a565b5050565b6000918252602082815260408084206001600160a01b0390931684529190529020805460ff1916600117905556fea2646970667358221220e7118d3285f44aa45c9a496d1b01504b7036cde36785183afcf211f88b46a66d64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100365760003560e01c8063249cb3fa1461003b5780635536e45d14610079575b600080fd5b6100676004803603604081101561005157600080fd5b50803590602001356001600160a01b03166100a7565b60408051918252519081900360200190f35b6100a56004803603604081101561008f57600080fd5b50803590602001356001600160a01b031661011c565b005b6000828152602081815260408083206001600160a01b038516845290915281205460ff166100d6576000610115565b604051602001808073455243313832305f4143434550545f4d4147494360601b8152506014019050604051602081830303815290604052805190602001205b9392505050565b610126828261012a565b5050565b6000918252602082815260408084206001600160a01b0390931684529190529020805460ff1916600117905556fea2646970667358221220e7118d3285f44aa45c9a496d1b01504b7036cde36785183afcf211f88b46a66d64736f6c634300060c0033"}, "abi": [{"type": "function", "name": "canImplementInterfaceForAddress", "stateMutability": "view", "inputs": [{"name": "interfaceHash", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "registerInterfaceForAddress", "stateMutability": "nonpayable", "inputs": [{"name": "interfaceHash", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {"canImplementInterfaceForAddress(bytes32,address)": {"notice": "See {IERC1820Implementer-canImplementInterfaceForAddress}."}}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ERC20BurnableMock": {"contractName": "ERC20BurnableMock", "sourceId": "mocks/ERC20BurnableMock.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100cf5760003560e01c806342966c681161008c57806395d89b411161006657806395d89b411461029c578063a457c2d7146102a4578063a9059cbb146102d0578063dd62ed3e146102fc576100cf565b806342966c681461022b57806370a082311461024a57806379cc679014610270576100cf565b806306fdde03146100d4578063095ea7b31461015157806318160ddd1461019157806323b872dd146101ab578063313ce567146101e157806339509351146101ff575b600080fd5b6100dc61032a565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561016757600080fd5b506001600160a01b0381351690602001356103c0565b604080519115158252519081900360200190f35b6101996103dd565b60408051918252519081900360200190f35b61017d600480360360608110156101c157600080fd5b506001600160a01b038135811691602081013590911690604001356103e3565b6101e961046a565b6040805160ff9092168252519081900360200190f35b61017d6004803603604081101561021557600080fd5b506001600160a01b038135169060200135610473565b6102486004803603602081101561024157600080fd5b50356104c1565b005b6101996004803603602081101561026057600080fd5b50356001600160a01b03166104d5565b6102486004803603604081101561028657600080fd5b506001600160a01b0381351690602001356104f0565b6100dc61054a565b61017d600480360360408110156102ba57600080fd5b506001600160a01b0381351690602001356105ab565b61017d600480360360408110156102e657600080fd5b506001600160a01b038135169060200135610613565b6101996004803603604081101561031257600080fd5b506001600160a01b0381358116916020013516610627565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103b65780601f1061038b576101008083540402835291602001916103b6565b820191906000526020600020905b81548152906001019060200180831161039957829003601f168201915b5050505050905090565b60006103d46103cd6106b3565b84846106b7565b50600192915050565b60025490565b60006103f08484846107a3565b610460846103fc6106b3565b61045b85604051806060016040528060288152602001610b61602891396001600160a01b038a1660009081526001602052604081209061043a6106b3565b6001600160a01b0316815260208101919091526040016000205491906108fe565b6106b7565b5060019392505050565b60055460ff1690565b60006103d46104806106b3565b8461045b85600160006104916106b3565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610652565b6104d26104cc6106b3565b82610995565b50565b6001600160a01b031660009081526020819052604090205490565b600061052782604051806060016040528060248152602001610b89602491396105208661051b6106b3565b610627565b91906108fe565b905061053b836105356106b3565b836106b7565b6105458383610995565b505050565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103b65780601f1061038b576101008083540402835291602001916103b6565b60006103d46105b86106b3565b8461045b85604051806060016040528060258152602001610c1760259139600160006105e26106b3565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906108fe565b60006103d46106206106b3565b84846107a3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6000828201838110156106ac576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b0383166106fc5760405162461bcd60e51b8152600401808060200182810382526024815260200180610bf36024913960400191505060405180910390fd5b6001600160a01b0382166107415760405162461bcd60e51b8152600401808060200182810382526022815260200180610b196022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166107e85760405162461bcd60e51b8152600401808060200182810382526025815260200180610bce6025913960400191505060405180910390fd5b6001600160a01b03821661082d5760405162461bcd60e51b8152600401808060200182810382526023815260200180610ad46023913960400191505060405180910390fd5b610838838383610545565b61087581604051806060016040528060268152602001610b3b602691396001600160a01b03861660009081526020819052604090205491906108fe565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546108a49082610652565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561098d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561095257818101518382015260200161093a565b50505050905090810190601f16801561097f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b0382166109da5760405162461bcd60e51b8152600401808060200182810382526021815260200180610bad6021913960400191505060405180910390fd5b6109e682600083610545565b610a2381604051806060016040528060228152602001610af7602291396001600160a01b03851660009081526020819052604090205491906108fe565b6001600160a01b038316600090815260208190526040902055600254610a499082610a91565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60006106ac83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506108fe56fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220fab51ef1dce47ae2a2d0913b1ae571a790a93dca59ac4c5a8f88b01fc27d8b3e64736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}, {"name": "initialAccount", "type": "address", "internalType": "address"}, {"name": "initialBalance", "type": "uint256", "internalType": "uint256"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "spender", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "burnFrom", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "burn(uint256)": {"details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."}, "burnFrom(address,uint256)": {"details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20CappedMock": {"contractName": "ERC20CappedMock", "sourceId": "mocks/ERC20CappedMock.sol", "deploymentBytecode": {"bytecode": "60806040523480156200001157600080fd5b5060405162000ec538038062000ec5833981810160405260608110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b50604052602090810151855190935083925085918591620001c0916003919085019062000246565b508051620001d690600490602084019062000246565b50506005805460ff19166012179055508062000239576040805162461bcd60e51b815260206004820152601560248201527f45524332304361707065643a2063617020697320300000000000000000000000604482015290519081900360640190fd5b60065550620002e2915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028957805160ff1916838001178555620002b9565b82800160010185558215620002b9579182015b82811115620002b95782518255916020019190600101906200029c565b50620002c7929150620002cb565b5090565b5b80821115620002c75760008155600101620002cc565b610bd380620002f26000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c57806395d89b411161006657806395d89b4114610287578063a457c2d71461028f578063a9059cbb146102bb578063dd62ed3e146102e7576100cf565b8063395093511461020757806340c10f191461023357806370a0823114610261576100cf565b806306fdde03146100d4578063095ea7b31461015157806318160ddd1461019157806323b872dd146101ab578063313ce567146101e1578063355274ea146101ff575b600080fd5b6100dc610315565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561016757600080fd5b506001600160a01b0381351690602001356103ab565b604080519115158252519081900360200190f35b6101996103c8565b60408051918252519081900360200190f35b61017d600480360360608110156101c157600080fd5b506001600160a01b038135811691602081013590911690604001356103ce565b6101e9610455565b6040805160ff9092168252519081900360200190f35b61019961045e565b61017d6004803603604081101561021d57600080fd5b506001600160a01b038135169060200135610464565b61025f6004803603604081101561024957600080fd5b506001600160a01b0381351690602001356104b2565b005b6101996004803603602081101561027757600080fd5b50356001600160a01b03166104c0565b6100dc6104db565b61017d600480360360408110156102a557600080fd5b506001600160a01b03813516906020013561053c565b61017d600480360360408110156102d157600080fd5b506001600160a01b0381351690602001356105a4565b610199600480360360408110156102fd57600080fd5b506001600160a01b03813581169160200135166105b8565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103a15780601f10610376576101008083540402835291602001916103a1565b820191906000526020600020905b81548152906001019060200180831161038457829003601f168201915b5050505050905090565b60006103bf6103b86105e3565b84846105e7565b50600192915050565b60025490565b60006103db8484846106d3565b61044b846103e76105e3565b61044685604051806060016040528060288152602001610b08602891396001600160a01b038a166000908152600160205260408120906104256105e3565b6001600160a01b03168152602081019190915260400160002054919061082e565b6105e7565b5060019392505050565b60055460ff1690565b60065490565b60006103bf6104716105e3565b8461044685600160006104826105e3565b6001600160a01b03908116825260208083019390935260409182016000908120918c1681529252902054906108c5565b6104bc8282610926565b5050565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103a15780601f10610376576101008083540402835291602001916103a1565b60006103bf6105496105e3565b8461044685604051806060016040528060258152602001610b7960259139600160006105736105e3565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919061082e565b60006103bf6105b16105e3565b84846106d3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b03831661062c5760405162461bcd60e51b8152600401808060200182810382526024815260200180610b556024913960400191505060405180910390fd5b6001600160a01b0382166106715760405162461bcd60e51b8152600401808060200182810382526022815260200180610ac06022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166107185760405162461bcd60e51b8152600401808060200182810382526025815260200180610b306025913960400191505060405180910390fd5b6001600160a01b03821661075d5760405162461bcd60e51b8152600401808060200182810382526023815260200180610a9d6023913960400191505060405180910390fd5b610768838383610a16565b6107a581604051806060016040528060268152602001610ae2602691396001600160a01b038616600090815260208190526040902054919061082e565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546107d490826108c5565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156108bd5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561088257818101518382015260200161086a565b50505050905090810190601f1680156108af5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008282018381101561091f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038216610981576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b61098d60008383610a16565b60025461099a90826108c5565b6002556001600160a01b0382166000908152602081905260409020546109c090826108c5565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b610a21838383610a97565b6001600160a01b038316610a9757600654610a4482610a3e6103c8565b906108c5565b1115610a97576040805162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015290519081900360640190fd5b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212205ed3580d732fe2f73462ff571df56c9e2fdae13d6b0bac5345ce72f92b10461e64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c57806395d89b411161006657806395d89b4114610287578063a457c2d71461028f578063a9059cbb146102bb578063dd62ed3e146102e7576100cf565b8063395093511461020757806340c10f191461023357806370a0823114610261576100cf565b806306fdde03146100d4578063095ea7b31461015157806318160ddd1461019157806323b872dd146101ab578063313ce567146101e1578063355274ea146101ff575b600080fd5b6100dc610315565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561016757600080fd5b506001600160a01b0381351690602001356103ab565b604080519115158252519081900360200190f35b6101996103c8565b60408051918252519081900360200190f35b61017d600480360360608110156101c157600080fd5b506001600160a01b038135811691602081013590911690604001356103ce565b6101e9610455565b6040805160ff9092168252519081900360200190f35b61019961045e565b61017d6004803603604081101561021d57600080fd5b506001600160a01b038135169060200135610464565b61025f6004803603604081101561024957600080fd5b506001600160a01b0381351690602001356104b2565b005b6101996004803603602081101561027757600080fd5b50356001600160a01b03166104c0565b6100dc6104db565b61017d600480360360408110156102a557600080fd5b506001600160a01b03813516906020013561053c565b61017d600480360360408110156102d157600080fd5b506001600160a01b0381351690602001356105a4565b610199600480360360408110156102fd57600080fd5b506001600160a01b03813581169160200135166105b8565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103a15780601f10610376576101008083540402835291602001916103a1565b820191906000526020600020905b81548152906001019060200180831161038457829003601f168201915b5050505050905090565b60006103bf6103b86105e3565b84846105e7565b50600192915050565b60025490565b60006103db8484846106d3565b61044b846103e76105e3565b61044685604051806060016040528060288152602001610b08602891396001600160a01b038a166000908152600160205260408120906104256105e3565b6001600160a01b03168152602081019190915260400160002054919061082e565b6105e7565b5060019392505050565b60055460ff1690565b60065490565b60006103bf6104716105e3565b8461044685600160006104826105e3565b6001600160a01b03908116825260208083019390935260409182016000908120918c1681529252902054906108c5565b6104bc8282610926565b5050565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103a15780601f10610376576101008083540402835291602001916103a1565b60006103bf6105496105e3565b8461044685604051806060016040528060258152602001610b7960259139600160006105736105e3565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919061082e565b60006103bf6105b16105e3565b84846106d3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b03831661062c5760405162461bcd60e51b8152600401808060200182810382526024815260200180610b556024913960400191505060405180910390fd5b6001600160a01b0382166106715760405162461bcd60e51b8152600401808060200182810382526022815260200180610ac06022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166107185760405162461bcd60e51b8152600401808060200182810382526025815260200180610b306025913960400191505060405180910390fd5b6001600160a01b03821661075d5760405162461bcd60e51b8152600401808060200182810382526023815260200180610a9d6023913960400191505060405180910390fd5b610768838383610a16565b6107a581604051806060016040528060268152602001610ae2602691396001600160a01b038616600090815260208190526040902054919061082e565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546107d490826108c5565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156108bd5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561088257818101518382015260200161086a565b50505050905090810190601f1680156108af5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008282018381101561091f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038216610981576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b61098d60008383610a16565b60025461099a90826108c5565b6002556001600160a01b0382166000908152602081905260409020546109c090826108c5565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b610a21838383610a97565b6001600160a01b038316610a9757600654610a4482610a3e6103c8565b906108c5565b1115610a97576040805162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015290519081900360640190fd5b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212205ed3580d732fe2f73462ff571df56c9e2fdae13d6b0bac5345ce72f92b10461e64736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}, {"name": "cap", "type": "uint256", "internalType": "uint256"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "spender", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "cap", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "cap()": {"details": "Returns the cap on the token's total supply."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20DecimalsMock": {"contractName": "ERC20DecimalsMock", "sourceId": "mocks/ERC20DecimalsMock.sol", "deploymentBytecode": {"bytecode": "60806040523480156200001157600080fd5b5060405162000cab38038062000cab833981810160405260608110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b5060405260209081015185519093508592508491620001bd916003918501906200020d565b508051620001d39060049060208401906200020d565b50506005805460ff1916601217905550620001ee81620001f7565b505050620002a9565b6005805460ff191660ff92909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025057805160ff191683800117855562000280565b8280016001018555821562000280579182015b828111156200028057825182559160200191906001019062000263565b506200028e92915062000292565b5090565b5b808211156200028e576000815560010162000293565b6109f280620002b96000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063395093511161007157806339509351146101d957806370a082311461020557806395d89b411461022b578063a457c2d714610233578063a9059cbb1461025f578063dd62ed3e1461028b576100a9565b806306fdde03146100ae578063095ea7b31461012b57806318160ddd1461016b57806323b872dd14610185578063313ce567146101bb575b600080fd5b6100b66102b9565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f05781810151838201526020016100d8565b50505050905090810190601f16801561011d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101576004803603604081101561014157600080fd5b506001600160a01b03813516906020013561034f565b604080519115158252519081900360200190f35b61017361036c565b60408051918252519081900360200190f35b6101576004803603606081101561019b57600080fd5b506001600160a01b03813581169160208101359091169060400135610372565b6101c36103f9565b6040805160ff9092168252519081900360200190f35b610157600480360360408110156101ef57600080fd5b506001600160a01b038135169060200135610402565b6101736004803603602081101561021b57600080fd5b50356001600160a01b0316610450565b6100b661046b565b6101576004803603604081101561024957600080fd5b506001600160a01b0381351690602001356104cc565b6101576004803603604081101561027557600080fd5b506001600160a01b038135169060200135610534565b610173600480360360408110156102a157600080fd5b506001600160a01b0381358116916020013516610548565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103455780601f1061031a57610100808354040283529160200191610345565b820191906000526020600020905b81548152906001019060200180831161032857829003601f168201915b5050505050905090565b600061036361035c610573565b8484610577565b50600192915050565b60025490565b600061037f848484610663565b6103ef8461038b610573565b6103ea85604051806060016040528060288152602001610927602891396001600160a01b038a166000908152600160205260408120906103c9610573565b6001600160a01b0316815260208101919091526040016000205491906107be565b610577565b5060019392505050565b60055460ff1690565b600061036361040f610573565b846103ea8560016000610420610573565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610855565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103455780601f1061031a57610100808354040283529160200191610345565b60006103636104d9610573565b846103ea856040518060600160405280602581526020016109986025913960016000610503610573565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906107be565b6000610363610541610573565b8484610663565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166105bc5760405162461bcd60e51b81526004018080602001828103825260248152602001806109746024913960400191505060405180910390fd5b6001600160a01b0382166106015760405162461bcd60e51b81526004018080602001828103825260228152602001806108df6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166106a85760405162461bcd60e51b815260040180806020018281038252602581526020018061094f6025913960400191505060405180910390fd5b6001600160a01b0382166106ed5760405162461bcd60e51b81526004018080602001828103825260238152602001806108bc6023913960400191505060405180910390fd5b6106f88383836108b6565b61073581604051806060016040528060268152602001610901602691396001600160a01b03861660009081526020819052604090205491906107be565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546107649082610855565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561084d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156108125781810151838201526020016107fa565b50505050905090810190601f16801561083f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828201838110156108af576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122088b8190186dee174e17283c307c692a50f685d4184ce2d29a7dd2f4eb69d281d64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100a95760003560e01c8063395093511161007157806339509351146101d957806370a082311461020557806395d89b411461022b578063a457c2d714610233578063a9059cbb1461025f578063dd62ed3e1461028b576100a9565b806306fdde03146100ae578063095ea7b31461012b57806318160ddd1461016b57806323b872dd14610185578063313ce567146101bb575b600080fd5b6100b66102b9565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f05781810151838201526020016100d8565b50505050905090810190601f16801561011d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101576004803603604081101561014157600080fd5b506001600160a01b03813516906020013561034f565b604080519115158252519081900360200190f35b61017361036c565b60408051918252519081900360200190f35b6101576004803603606081101561019b57600080fd5b506001600160a01b03813581169160208101359091169060400135610372565b6101c36103f9565b6040805160ff9092168252519081900360200190f35b610157600480360360408110156101ef57600080fd5b506001600160a01b038135169060200135610402565b6101736004803603602081101561021b57600080fd5b50356001600160a01b0316610450565b6100b661046b565b6101576004803603604081101561024957600080fd5b506001600160a01b0381351690602001356104cc565b6101576004803603604081101561027557600080fd5b506001600160a01b038135169060200135610534565b610173600480360360408110156102a157600080fd5b506001600160a01b0381358116916020013516610548565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103455780601f1061031a57610100808354040283529160200191610345565b820191906000526020600020905b81548152906001019060200180831161032857829003601f168201915b5050505050905090565b600061036361035c610573565b8484610577565b50600192915050565b60025490565b600061037f848484610663565b6103ef8461038b610573565b6103ea85604051806060016040528060288152602001610927602891396001600160a01b038a166000908152600160205260408120906103c9610573565b6001600160a01b0316815260208101919091526040016000205491906107be565b610577565b5060019392505050565b60055460ff1690565b600061036361040f610573565b846103ea8560016000610420610573565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610855565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103455780601f1061031a57610100808354040283529160200191610345565b60006103636104d9610573565b846103ea856040518060600160405280602581526020016109986025913960016000610503610573565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906107be565b6000610363610541610573565b8484610663565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166105bc5760405162461bcd60e51b81526004018080602001828103825260248152602001806109746024913960400191505060405180910390fd5b6001600160a01b0382166106015760405162461bcd60e51b81526004018080602001828103825260228152602001806108df6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166106a85760405162461bcd60e51b815260040180806020018281038252602581526020018061094f6025913960400191505060405180910390fd5b6001600160a01b0382166106ed5760405162461bcd60e51b81526004018080602001828103825260238152602001806108bc6023913960400191505060405180910390fd5b6106f88383836108b6565b61073581604051806060016040528060268152602001610901602691396001600160a01b03861660009081526020819052604090205491906107be565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546107649082610855565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561084d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156108125781810151838201526020016107fa565b50505050905090810190601f16801561083f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828201838110156108af576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122088b8190186dee174e17283c307c692a50f685d4184ce2d29a7dd2f4eb69d281d64736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}, {"name": "decimals", "type": "uint8", "internalType": "uint8"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "spender", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20Mock": {"contractName": "ERC20Mock", "sourceId": "mocks/ERC20Mock.sol", "deploymentBytecode": {"bytecode": "6080604052604051620011b8380380620011b8833981810160405260808110156200002957600080fd5b81019080805160405193929190846401000000008211156200004a57600080fd5b9083019060208201858111156200006057600080fd5b82516401000000008111828201881017156200007b57600080fd5b82525081516020918201929091019080838360005b83811015620000aa57818101518382015260200162000090565b50505050905090810190601f168015620000d85780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084640100000000821115620000fc57600080fd5b9083019060208201858111156200011257600080fd5b82516401000000008111828201881017156200012d57600080fd5b82525081516020918201929091019080838360005b838110156200015c57818101518382015260200162000142565b50505050905090810190601f1680156200018a5780820380516001836020036101000a031916815260200191505b50604090815260208281015192909101518651929450925085918591620001b79160039185019062000369565b508051620001cd90600490602084019062000369565b50506005805460ff1916601217905550620001e98282620001f3565b5050505062000405565b6001600160a01b0382166200024f576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6200025d6000838362000302565b62000279816002546200030760201b620006b81790919060201c565b6002556001600160a01b03821660009081526020818152604090912054620002ac918390620006b862000307821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b505050565b60008282018381101562000362576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003ac57805160ff1916838001178555620003dc565b82800160010185558215620003dc579182015b82811115620003dc578251825591602001919060010190620003bf565b50620003ea929150620003ee565b5090565b5b80821115620003ea5760008155600101620003ef565b610da380620004156000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806340c10f19116100975780639dc29fac116100665780639dc29fac14610319578063a457c2d714610345578063a9059cbb14610371578063dd62ed3e1461039d576100f5565b806340c10f191461028957806356189cb4146102b557806370a08231146102eb57806395d89b4114610311576100f5565b8063222f5be0116100d3578063222f5be0146101d157806323b872dd14610209578063313ce5671461023f578063395093511461025d576100f5565b806306fdde03146100fa578063095ea7b31461017757806318160ddd146101b7575b600080fd5b6101026103cb565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561013c578181015183820152602001610124565b50505050905090810190601f1680156101695780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101a36004803603604081101561018d57600080fd5b506001600160a01b038135169060200135610461565b604080519115158252519081900360200190f35b6101bf61047e565b60408051918252519081900360200190f35b610207600480360360608110156101e757600080fd5b506001600160a01b03813581169160208101359091169060400135610484565b005b6101a36004803603606081101561021f57600080fd5b506001600160a01b03813581169160208101359091169060400135610494565b61024761051b565b6040805160ff9092168252519081900360200190f35b6101a36004803603604081101561027357600080fd5b506001600160a01b038135169060200135610524565b6102076004803603604081101561029f57600080fd5b506001600160a01b038135169060200135610572565b610207600480360360608110156102cb57600080fd5b506001600160a01b03813581169160208101359091169060400135610580565b6101bf6004803603602081101561030157600080fd5b50356001600160a01b031661058b565b6101026105a6565b6102076004803603604081101561032f57600080fd5b506001600160a01b038135169060200135610607565b6101a36004803603604081101561035b57600080fd5b506001600160a01b038135169060200135610611565b6101a36004803603604081101561038757600080fd5b506001600160a01b038135169060200135610679565b6101bf600480360360408110156103b357600080fd5b506001600160a01b038135811691602001351661068d565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104575780601f1061042c57610100808354040283529160200191610457565b820191906000526020600020905b81548152906001019060200180831161043a57829003601f168201915b5050505050905090565b600061047561046e610719565b848461071d565b50600192915050565b60025490565b61048f838383610809565b505050565b60006104a1848484610809565b610511846104ad610719565b61050c85604051806060016040528060288152602001610cb7602891396001600160a01b038a166000908152600160205260408120906104eb610719565b6001600160a01b031681526020810191909152604001600020549190610964565b61071d565b5060019392505050565b60055460ff1690565b6000610475610531610719565b8461050c8560016000610542610719565b6001600160a01b03908116825260208083019390935260409182016000908120918c1681529252902054906106b8565b61057c82826109fb565b5050565b61048f83838361071d565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104575780601f1061042c57610100808354040283529160200191610457565b61057c8282610aeb565b600061047561061e610719565b8461050c85604051806060016040528060258152602001610d496025913960016000610648610719565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610964565b6000610475610686610719565b8484610809565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600082820183811015610712576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b0383166107625760405162461bcd60e51b8152600401808060200182810382526024815260200180610d256024913960400191505060405180910390fd5b6001600160a01b0382166107a75760405162461bcd60e51b8152600401808060200182810382526022815260200180610c6f6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831661084e5760405162461bcd60e51b8152600401808060200182810382526025815260200180610d006025913960400191505060405180910390fd5b6001600160a01b0382166108935760405162461bcd60e51b8152600401808060200182810382526023815260200180610c2a6023913960400191505060405180910390fd5b61089e83838361048f565b6108db81604051806060016040528060268152602001610c91602691396001600160a01b0386166000908152602081905260409020549190610964565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461090a90826106b8565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156109f35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156109b85781810151838201526020016109a0565b50505050905090810190601f1680156109e55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b038216610a56576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610a626000838361048f565b600254610a6f90826106b8565b6002556001600160a01b038216600090815260208190526040902054610a9590826106b8565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038216610b305760405162461bcd60e51b8152600401808060200182810382526021815260200180610cdf6021913960400191505060405180910390fd5b610b3c8260008361048f565b610b7981604051806060016040528060228152602001610c4d602291396001600160a01b0385166000908152602081905260409020549190610964565b6001600160a01b038316600090815260208190526040902055600254610b9f9082610be7565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600061071283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061096456fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220aee68d62a18be24adf54c7f0e0567c5c569ff395c012ff7b7bcc3b9f4863447c64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100f55760003560e01c806340c10f19116100975780639dc29fac116100665780639dc29fac14610319578063a457c2d714610345578063a9059cbb14610371578063dd62ed3e1461039d576100f5565b806340c10f191461028957806356189cb4146102b557806370a08231146102eb57806395d89b4114610311576100f5565b8063222f5be0116100d3578063222f5be0146101d157806323b872dd14610209578063313ce5671461023f578063395093511461025d576100f5565b806306fdde03146100fa578063095ea7b31461017757806318160ddd146101b7575b600080fd5b6101026103cb565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561013c578181015183820152602001610124565b50505050905090810190601f1680156101695780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101a36004803603604081101561018d57600080fd5b506001600160a01b038135169060200135610461565b604080519115158252519081900360200190f35b6101bf61047e565b60408051918252519081900360200190f35b610207600480360360608110156101e757600080fd5b506001600160a01b03813581169160208101359091169060400135610484565b005b6101a36004803603606081101561021f57600080fd5b506001600160a01b03813581169160208101359091169060400135610494565b61024761051b565b6040805160ff9092168252519081900360200190f35b6101a36004803603604081101561027357600080fd5b506001600160a01b038135169060200135610524565b6102076004803603604081101561029f57600080fd5b506001600160a01b038135169060200135610572565b610207600480360360608110156102cb57600080fd5b506001600160a01b03813581169160208101359091169060400135610580565b6101bf6004803603602081101561030157600080fd5b50356001600160a01b031661058b565b6101026105a6565b6102076004803603604081101561032f57600080fd5b506001600160a01b038135169060200135610607565b6101a36004803603604081101561035b57600080fd5b506001600160a01b038135169060200135610611565b6101a36004803603604081101561038757600080fd5b506001600160a01b038135169060200135610679565b6101bf600480360360408110156103b357600080fd5b506001600160a01b038135811691602001351661068d565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104575780601f1061042c57610100808354040283529160200191610457565b820191906000526020600020905b81548152906001019060200180831161043a57829003601f168201915b5050505050905090565b600061047561046e610719565b848461071d565b50600192915050565b60025490565b61048f838383610809565b505050565b60006104a1848484610809565b610511846104ad610719565b61050c85604051806060016040528060288152602001610cb7602891396001600160a01b038a166000908152600160205260408120906104eb610719565b6001600160a01b031681526020810191909152604001600020549190610964565b61071d565b5060019392505050565b60055460ff1690565b6000610475610531610719565b8461050c8560016000610542610719565b6001600160a01b03908116825260208083019390935260409182016000908120918c1681529252902054906106b8565b61057c82826109fb565b5050565b61048f83838361071d565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104575780601f1061042c57610100808354040283529160200191610457565b61057c8282610aeb565b600061047561061e610719565b8461050c85604051806060016040528060258152602001610d496025913960016000610648610719565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610964565b6000610475610686610719565b8484610809565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600082820183811015610712576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b0383166107625760405162461bcd60e51b8152600401808060200182810382526024815260200180610d256024913960400191505060405180910390fd5b6001600160a01b0382166107a75760405162461bcd60e51b8152600401808060200182810382526022815260200180610c6f6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831661084e5760405162461bcd60e51b8152600401808060200182810382526025815260200180610d006025913960400191505060405180910390fd5b6001600160a01b0382166108935760405162461bcd60e51b8152600401808060200182810382526023815260200180610c2a6023913960400191505060405180910390fd5b61089e83838361048f565b6108db81604051806060016040528060268152602001610c91602691396001600160a01b0386166000908152602081905260409020549190610964565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461090a90826106b8565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156109f35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156109b85781810151838201526020016109a0565b50505050905090810190601f1680156109e55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b038216610a56576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610a626000838361048f565b600254610a6f90826106b8565b6002556001600160a01b038216600090815260208190526040902054610a9590826106b8565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038216610b305760405162461bcd60e51b8152600401808060200182810382526021815260200180610cdf6021913960400191505060405180910390fd5b610b3c8260008361048f565b610b7981604051806060016040528060228152602001610c4d602291396001600160a01b0385166000908152602081905260409020549190610964565b6001600160a01b038316600090815260208190526040902055600254610b9f9082610be7565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600061071283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061096456fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220aee68d62a18be24adf54c7f0e0567c5c569ff395c012ff7b7bcc3b9f4863447c64736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "payable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}, {"name": "initialAccount", "type": "address", "internalType": "address"}, {"name": "initialBalance", "type": "uint256", "internalType": "uint256"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "spender", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "approveInternal", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferInternal", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20PausableMock": {"contractName": "ERC20PausableMock", "sourceId": "mocks/ERC20PausableMock.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106101005760003560e01c80635c975abb116100975780639dc29fac116100665780639dc29fac146102d0578063a457c2d7146102fc578063a9059cbb14610328578063dd62ed3e1461035457610100565b80635c975abb1461029257806370a082311461029a5780638456cb59146102c057806395d89b41146102c857610100565b8063313ce567116100d3578063313ce5671461021257806339509351146102305780633f4ba83a1461025c57806340c10f191461026657610100565b806306fdde0314610105578063095ea7b31461018257806318160ddd146101c257806323b872dd146101dc575b600080fd5b61010d610382565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014757818101518382015260200161012f565b50505050905090810190601f1680156101745780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101ae6004803603604081101561019857600080fd5b506001600160a01b038135169060200135610418565b604080519115158252519081900360200190f35b6101ca610435565b60408051918252519081900360200190f35b6101ae600480360360608110156101f257600080fd5b506001600160a01b0381358116916020810135909116906040013561043b565b61021a6104c2565b6040805160ff9092168252519081900360200190f35b6101ae6004803603604081101561024657600080fd5b506001600160a01b0381351690602001356104cb565b610264610519565b005b6102646004803603604081101561027c57600080fd5b506001600160a01b038135169060200135610523565b6101ae610531565b6101ca600480360360208110156102b057600080fd5b50356001600160a01b031661053f565b61026461055a565b61010d610562565b610264600480360360408110156102e657600080fd5b506001600160a01b0381351690602001356105c3565b6101ae6004803603604081101561031257600080fd5b506001600160a01b0381351690602001356105cd565b6101ae6004803603604081101561033e57600080fd5b506001600160a01b038135169060200135610635565b6101ca6004803603604081101561036a57600080fd5b506001600160a01b0381358116916020013516610649565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561040e5780601f106103e35761010080835404028352916020019161040e565b820191906000526020600020905b8154815290600101906020018083116103f157829003601f168201915b5050505050905090565b600061042c6104256106da565b84846106de565b50600192915050565b60025490565b60006104488484846107ca565b6104b8846104546106da565b6104b385604051806060016040528060288152602001610df3602891396001600160a01b038a166000908152600160205260408120906104926106da565b6001600160a01b031681526020810191909152604001600020549190610925565b6106de565b5060019392505050565b60055460ff1690565b600061042c6104d86106da565b846104b385600160006104e96106da565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610674565b6105216109bc565b565b61052d8282610a60565b5050565b600554610100900460ff1690565b6001600160a01b031660009081526020819052604090205490565b610521610b50565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561040e5780601f106103e35761010080835404028352916020019161040e565b61052d8282610bd8565b600061042c6105da6106da565b846104b385604051806060016040528060258152602001610e8560259139600160006106046106da565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610925565b600061042c6106426106da565b84846107ca565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6000828201838110156106ce576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b505050565b3390565b6001600160a01b0383166107235760405162461bcd60e51b8152600401808060200182810382526024815260200180610e616024913960400191505060405180910390fd5b6001600160a01b0382166107685760405162461bcd60e51b8152600401808060200182810382526022815260200180610dab6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831661080f5760405162461bcd60e51b8152600401808060200182810382526025815260200180610e3c6025913960400191505060405180910390fd5b6001600160a01b0382166108545760405162461bcd60e51b8152600401808060200182810382526023815260200180610d666023913960400191505060405180910390fd5b61085f838383610cd4565b61089c81604051806060016040528060268152602001610dcd602691396001600160a01b0386166000908152602081905260409020549190610925565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546108cb9082610674565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156109b45760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610979578181015183820152602001610961565b50505050905090810190601f1680156109a65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600554610100900460ff16610a0f576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6005805461ff00191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610a436106da565b604080516001600160a01b039092168252519081900360200190a1565b6001600160a01b038216610abb576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610ac760008383610cd4565b600254610ad49082610674565b6002556001600160a01b038216600090815260208190526040902054610afa9082610674565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600554610100900460ff1615610ba0576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6005805461ff0019166101001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610a436106da565b6001600160a01b038216610c1d5760405162461bcd60e51b8152600401808060200182810382526021815260200180610e1b6021913960400191505060405180910390fd5b610c2982600083610cd4565b610c6681604051806060016040528060228152602001610d89602291396001600160a01b0385166000908152602081905260409020549190610925565b6001600160a01b038316600090815260208190526040902055600254610c8c9082610d23565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b610cdf8383836106d5565b610ce7610531565b156106d55760405162461bcd60e51b815260040180806020018281038252602a815260200180610eaa602a913960400191505060405180910390fd5b60006106ce83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061092556fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f45524332305061757361626c653a20746f6b656e207472616e73666572207768696c6520706175736564a2646970667358221220ca1810d18176b471853c3bdb01c19e261edf594b4b33170f0f9701db7b90374f64736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}, {"name": "initialAccount", "type": "address", "internalType": "address"}, {"name": "initialBalance", "type": "uint256", "internalType": "uint256"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "spender", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Paused", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Unpaused", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "pause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "paused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "unpause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "paused()": {"details": "Returns true if the contract is paused, and false otherwise."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20SnapshotMock": {"contractName": "ERC20SnapshotMock", "sourceId": "mocks/ERC20SnapshotMock.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106101005760003560e01c806370a08231116100975780639dc29fac116100665780639dc29fac14610309578063a457c2d714610335578063a9059cbb14610361578063dd62ed3e1461038d57610100565b806370a08231146102b657806395d89b41146102dc5780639711715a146102e4578063981b24d0146102ec57610100565b8063313ce567116100d3578063313ce56714610212578063395093511461023057806340c10f191461025c5780634ee2cd7e1461028a57610100565b806306fdde0314610105578063095ea7b31461018257806318160ddd146101c257806323b872dd146101dc575b600080fd5b61010d6103bb565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014757818101518382015260200161012f565b50505050905090810190601f1680156101745780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101ae6004803603604081101561019857600080fd5b506001600160a01b038135169060200135610451565b604080519115158252519081900360200190f35b6101ca61046f565b60408051918252519081900360200190f35b6101ae600480360360608110156101f257600080fd5b506001600160a01b03813581169160208101359091169060400135610475565b61021a6104fc565b6040805160ff9092168252519081900360200190f35b6101ae6004803603604081101561024657600080fd5b506001600160a01b038135169060200135610505565b6102886004803603604081101561027257600080fd5b506001600160a01b038135169060200135610553565b005b6101ca600480360360408110156102a057600080fd5b506001600160a01b038135169060200135610561565b6101ca600480360360208110156102cc57600080fd5b50356001600160a01b03166105aa565b61010d6105c9565b61028861062a565b6101ca6004803603602081101561030257600080fd5b5035610635565b6102886004803603604081101561031f57600080fd5b506001600160a01b038135169060200135610665565b6101ae6004803603604081101561034b57600080fd5b506001600160a01b03813516906020013561066f565b6101ae6004803603604081101561037757600080fd5b506001600160a01b0381351690602001356106d7565b6101ca600480360360408110156103a357600080fd5b506001600160a01b03813581169160200135166106eb565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104475780601f1061041c57610100808354040283529160200191610447565b820191906000526020600020905b81548152906001019060200180831161042a57829003601f168201915b5050505050905090565b600061046561045e61086b565b848461086f565b5060015b92915050565b60025490565b600061048284848461095b565b6104f28461048e61086b565b6104ed8560405180606001604052806028815260200161104b602891396001600160a01b038a166000908152600160205260408120906104cc61086b565b6001600160a01b03168152602081019190915260400160002054919061097d565b61086f565b5060019392505050565b60055460ff1690565b600061046561051261086b565b846104ed856001600061052361086b565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610806565b61055d8282610a14565b5050565b6001600160a01b038216600090815260066020526040812081908190610588908590610a2f565b915091508161059f5761059a856105aa565b6105a1565b805b95945050505050565b6001600160a01b0381166000908152602081905260409020545b919050565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104475780601f1061041c57610100808354040283529160200191610447565b610632610b2c565b50565b6000806000610645846007610a2f565b915091508161065b5761065661046f565b61065d565b805b949350505050565b61055d8282610b80565b600061046561067c61086b565b846104ed856040518060600160405280602581526020016110dd60259139600160006106a661086b565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919061097d565b60006104656106e461086b565b848461095b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b038216610771576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b61077d60008383610978565b60025461078a9082610806565b6002556001600160a01b0382166000908152602081905260409020546107b09082610806565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600082820183811015610860576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b5490565b3390565b6001600160a01b0383166108b45760405162461bcd60e51b81526004018080602001828103825260248152602001806110b96024913960400191505060405180910390fd5b6001600160a01b0382166108f95760405162461bcd60e51b81526004018080602001828103825260228152602001806110036022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b61096483610b9b565b61096d82610b9b565b610978838383610bc5565b505050565b60008184841115610a0c5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156109d15781810151838201526020016109b9565b50505050905090810190601f1680156109fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b610a1d82610b9b565b610a25610d20565b61055d8282610716565b60008060008411610a80576040805162461bcd60e51b815260206004820152601660248201527504552433230536e617073686f743a20696420697320360541b604482015290519081900360640190fd5b610a8a6009610867565b841115610ade576040805162461bcd60e51b815260206004820152601d60248201527f4552433230536e617073686f743a206e6f6e6578697374656e74206964000000604482015290519081900360640190fd5b6000610aea8486610d2f565b8454909150811415610b03576000809250925050610b25565b6001846001018281548110610b1457fe5b906000526020600020015492509250505b9250929050565b6000610b386009610dd0565b6000610b446009610867565b6040805182815290519192507f8030e83b04d87bef53480e26263266d6ca66863aa8506aca6f2559d18aa1cb67919081900360200190a1905090565b610b8982610b9b565b610b91610d20565b61055d8282610dd9565b6001600160a01b038116600090815260066020526040902061063290610bc0836105aa565b610ed5565b6001600160a01b038316610c0a5760405162461bcd60e51b81526004018080602001828103825260258152602001806110946025913960400191505060405180910390fd5b6001600160a01b038216610c4f5760405162461bcd60e51b8152600401808060200182810382526023815260200180610fbe6023913960400191505060405180910390fd5b610c5a838383610978565b610c9781604051806060016040528060268152602001611025602691396001600160a01b038616600090815260208190526040902054919061097d565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610cc69082610806565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b610d2d6007610bc061046f565b565b8154600090610d4057506000610469565b82546000905b80821015610d8f576000610d5a8383610f21565b905084868281548110610d6957fe5b90600052602060002001541115610d8257809150610d89565b8060010192505b50610d46565b600082118015610db7575083856001840381548110610daa57fe5b9060005260206000200154145b15610dc85750600019019050610469565b509050610469565b80546001019055565b6001600160a01b038216610e1e5760405162461bcd60e51b81526004018080602001828103825260218152602001806110736021913960400191505060405180910390fd5b610e2a82600083610978565b610e6781604051806060016040528060228152602001610fe1602291396001600160a01b038516600090815260208190526040902054919061097d565b6001600160a01b038316600090815260208190526040902055600254610e8d9082610f46565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6000610ee16009610867565b905080610eed84610f88565b1015610978578254600180820185556000858152602080822090930193909355938401805494850181558252902090910155565b60006002808306600285060181610f3457fe5b04600283046002850401019392505050565b600061086083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061097d565b8054600090610f99575060006105c4565b815482906000198101908110610fab57fe5b906000526020600020015490506105c456fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122094528a30f64e9c54d4ed730eb8038dfe4747ecbb74d1f94010238cc9d8cab8c464736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}, {"name": "initialAccount", "type": "address", "internalType": "address"}, {"name": "initialBalance", "type": "uint256", "internalType": "uint256"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "spender", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Snapshot", "inputs": [{"name": "id", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfAt", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "snapshotId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "snapshot", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "totalSupplyAt", "stateMutability": "view", "inputs": [{"name": "snapshotId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "balanceOfAt(address,uint256)": {"details": "Retrieves the balance of `account` at the time `snapshotId` was created."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "totalSupplyAt(uint256)": {"details": "Retrieves the total supply at the time `snapshotId` was created."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC721BurnableMock": {"contractName": "ERC721BurnableMock", "sourceId": "mocks/ERC721BurnableMock.sol", "deploymentBytecode": {"bytecode": "60806040523480156200001157600080fd5b506040516200214938038062002149833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b5060405250839150829050620001b56301ffc9a760e01b62000221565b8151620001ca906006906020850190620002a6565b508051620001e0906007906020840190620002a6565b50620001f36380ac58cd60e01b62000221565b62000205635b5e139f60e01b62000221565b6200021763780e9d6360e01b62000221565b5050505062000342565b6001600160e01b0319808216141562000281576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002e957805160ff191683800117855562000319565b8280016001018555821562000319579182015b8281111562000319578251825591602001919060010190620002fc565b50620003279291506200032b565b5090565b5b808211156200032757600081556001016200032c565b611df780620003526000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806342966c68116100ad57806395d89b411161007157806395d89b41146103a8578063a22cb465146103b0578063b88d4fde146103de578063c87b56dd146104a4578063e985e9c5146104c157610121565b806342966c68146103235780634f6ccce7146103405780636352211e1461035d5780636c0360eb1461037a57806370a082311461038257610121565b806318160ddd116100f457806318160ddd1461024557806323b872dd1461025f5780632f745c591461029557806340c10f19146102c157806342842e0e146102ed57610121565b806301ffc9a71461012657806306fdde0314610161578063081812fc146101de578063095ea7b314610217575b600080fd5b61014d6004803603602081101561013c57600080fd5b50356001600160e01b0319166104ef565b604080519115158252519081900360200190f35b610169610512565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a357818101518382015260200161018b565b50505050905090810190601f1680156101d05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101fb600480360360208110156101f457600080fd5b50356105a8565b604080516001600160a01b039092168252519081900360200190f35b6102436004803603604081101561022d57600080fd5b506001600160a01b03813516906020013561060a565b005b61024d6106e5565b60408051918252519081900360200190f35b6102436004803603606081101561027557600080fd5b506001600160a01b038135811691602081013590911690604001356106f6565b61024d600480360360408110156102ab57600080fd5b506001600160a01b03813516906020013561074d565b610243600480360360408110156102d757600080fd5b506001600160a01b038135169060200135610778565b6102436004803603606081101561030357600080fd5b506001600160a01b03813581169160208101359091169060400135610786565b6102436004803603602081101561033957600080fd5b50356107a1565b61024d6004803603602081101561035657600080fd5b50356107f3565b6101fb6004803603602081101561037357600080fd5b5035610809565b610169610831565b61024d6004803603602081101561039857600080fd5b50356001600160a01b0316610892565b6101696108fa565b610243600480360360408110156103c657600080fd5b506001600160a01b038135169060200135151561095b565b610243600480360360808110156103f457600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561042f57600080fd5b82018360208201111561044157600080fd5b8035906020019184600183028401116401000000008311171561046357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610a60945050505050565b610169600480360360208110156104ba57600080fd5b5035610abe565b61014d600480360360408110156104d757600080fd5b506001600160a01b0381358116916020013516610d65565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b60068054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561059e5780601f106105735761010080835404028352916020019161059e565b820191906000526020600020905b81548152906001019060200180831161058157829003601f168201915b5050505050905090565b60006105b382610d93565b6105ee5760405162461bcd60e51b815260040180806020018281038252602c815260200180611cbc602c913960400191505060405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061061582610809565b9050806001600160a01b0316836001600160a01b031614156106685760405162461bcd60e51b8152600401808060200182810382526021815260200180611d406021913960400191505060405180910390fd5b806001600160a01b031661067a610da0565b6001600160a01b0316148061069b575061069b81610696610da0565b610d65565b6106d65760405162461bcd60e51b8152600401808060200182810382526038815260200180611c0f6038913960400191505060405180910390fd5b6106e08383610da4565b505050565b60006106f16002610e12565b905090565b610707610701610da0565b82610e1d565b6107425760405162461bcd60e51b8152600401808060200182810382526031815260200180611d616031913960400191505060405180910390fd5b6106e0838383610ec1565b6001600160a01b038216600090815260016020526040812061076f908361100d565b90505b92915050565b6107828282611019565b5050565b6106e083838360405180602001604052806000815250610a60565b6107ac610701610da0565b6107e75760405162461bcd60e51b8152600401808060200182810382526030815260200180611d926030913960400191505060405180910390fd5b6107f081611147565b50565b600080610801600284611214565b509392505050565b600061077282604051806060016040528060298152602001611c716029913960029190611230565b60098054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561059e5780601f106105735761010080835404028352916020019161059e565b60006001600160a01b0382166108d95760405162461bcd60e51b815260040180806020018281038252602a815260200180611c47602a913960400191505060405180910390fd5b6001600160a01b038216600090815260016020526040902061077290610e12565b60078054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561059e5780601f106105735761010080835404028352916020019161059e565b610963610da0565b6001600160a01b0316826001600160a01b031614156109c9576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b80600560006109d6610da0565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610a1a610da0565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b610a71610a6b610da0565b83610e1d565b610aac5760405162461bcd60e51b8152600401808060200182810382526031815260200180611d616031913960400191505060405180910390fd5b610ab884848484611247565b50505050565b6060610ac982610d93565b610b045760405162461bcd60e51b815260040180806020018281038252602f815260200180611d11602f913960400191505060405180910390fd5b60008281526008602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610b995780601f10610b6e57610100808354040283529160200191610b99565b820191906000526020600020905b815481529060010190602001808311610b7c57829003601f168201915b505060095493945050505060026000196101006001841615020190911604610bc257905061050d565b805115610c93576009816040516020018083805460018160011615610100020316600290048015610c2a5780601f10610c08576101008083540402835291820191610c2a565b820191906000526020600020905b815481529060010190602001808311610c16575b5050825160208401908083835b60208310610c565780518252601f199092019160209182019101610c37565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405291505061050d565b6009610c9e84611299565b6040516020018083805460018160011615610100020316600290048015610cfc5780601f10610cda576101008083540402835291820191610cfc565b820191906000526020600020905b815481529060010190602001808311610ce8575b5050825160208401908083835b60208310610d285780518252601f199092019160209182019101610d09565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000610772600283611374565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610dd982610809565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061077282611380565b6000610e2882610d93565b610e635760405162461bcd60e51b815260040180806020018281038252602c815260200180611be3602c913960400191505060405180910390fd5b6000610e6e83610809565b9050806001600160a01b0316846001600160a01b03161480610ea95750836001600160a01b0316610e9e846105a8565b6001600160a01b0316145b80610eb95750610eb98185610d65565b949350505050565b826001600160a01b0316610ed482610809565b6001600160a01b031614610f195760405162461bcd60e51b8152600401808060200182810382526029815260200180611ce86029913960400191505060405180910390fd5b6001600160a01b038216610f5e5760405162461bcd60e51b8152600401808060200182810382526024815260200180611bbf6024913960400191505060405180910390fd5b610f698383836106e0565b610f74600082610da4565b6001600160a01b0383166000908152600160205260409020610f969082611384565b506001600160a01b0382166000908152600160205260409020610fb99082611390565b50610fc66002828461139c565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600061076f83836113b2565b6001600160a01b038216611074576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b61107d81610d93565b156110cf576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b6110db600083836106e0565b6001600160a01b03821660009081526001602052604090206110fd9082611390565b5061110a6002828461139c565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600061115282610809565b9050611160816000846106e0565b61116b600083610da4565b60008281526008602052604090205460026000196101006001841615020190911604156111a95760008281526008602052604081206111a991611b12565b6001600160a01b03811660009081526001602052604090206111cb9083611384565b506111d7600283611416565b5060405182906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60008080806112238686611422565b9097909650945050505050565b600061123d84848461149d565b90505b9392505050565b611252848484610ec1565b61125e84848484611567565b610ab85760405162461bcd60e51b8152600401808060200182810382526032815260200180611b8d6032913960400191505060405180910390fd5b6060816112be57506040805180820190915260018152600360fc1b602082015261050d565b8160005b81156112d657600101600a820491506112c2565b60608167ffffffffffffffff811180156112ef57600080fd5b506040519080825280601f01601f19166020018201604052801561131a576020820181803683370190505b50859350905060001982015b831561136b57600a840660300160f81b8282806001900393508151811061134957fe5b60200101906001600160f81b031916908160001a905350600a84049350611326565b50949350505050565b600061076f83836116cf565b5490565b600061076f83836116e7565b600061076f83836117ad565b600061123d84846001600160a01b0385166117f7565b815460009082106113f45760405162461bcd60e51b8152600401808060200182810382526022815260200180611b6b6022913960400191505060405180910390fd5b82600001828154811061140357fe5b9060005260206000200154905092915050565b600061076f838361188e565b8154600090819083106114665760405162461bcd60e51b8152600401808060200182810382526022815260200180611c9a6022913960400191505060405180910390fd5b600084600001848154811061147757fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816115385760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156114fd5781810151838201526020016114e5565b50505050905090810190601f16801561152a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061154b57fe5b9060005260206000209060020201600101549150509392505050565b600061157b846001600160a01b0316611962565b61158757506001610eb9565b6060611695630a85bd0160e11b61159c610da0565b88878760405160240180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156116035781810151838201526020016115eb565b50505050905090810190601f1680156116305780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001611b8d603291396001600160a01b038816919061199b565b905060008180602001905160208110156116ae57600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b60009081526001919091016020526040902054151590565b600081815260018301602052604081205480156117a3578354600019808301919081019060009087908390811061171a57fe5b906000526020600020015490508087600001848154811061173757fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061176757fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610772565b6000915050610772565b60006117b983836116cf565b6117ef57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610772565b506000610772565b60008281526001840160205260408120548061185c575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055611240565b8285600001600183038154811061186f57fe5b9060005260206000209060020201600101819055506000915050611240565b600081815260018301602052604081205480156117a357835460001980830191908101906000908790839081106118c157fe5b90600052602060002090600202019050808760000184815481106118e157fe5b60009182526020808320845460029093020191825560019384015491840191909155835482528983019052604090209084019055865487908061192057fe5b60008281526020808220600260001990940193840201828155600190810183905592909355888152898201909252604082209190915594506107729350505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610eb9575050151592915050565b606061123d848460008560606119b085611962565b611a01576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611a405780518252601f199092019160209182019101611a21565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611aa2576040519150601f19603f3d011682016040523d82523d6000602084013e611aa7565b606091505b50915091508115611abb579150610eb99050565b805115611acb5780518082602001fd5b60405162461bcd60e51b81526020600482018181528651602484015286518793919283926044019190850190808383600083156114fd5781810151838201526020016114e5565b50805460018160011615610100020316600290046000825580601f10611b3857506107f0565b601f0160209004906000526020600020908101906107f091905b80821115611b665760008155600101611b52565b509056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a2646970667358221220194457e09e1989efd5598b04a77e4cfa9cd6e04c7412476ba43f1c98ed2591a964736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106101215760003560e01c806342966c68116100ad57806395d89b411161007157806395d89b41146103a8578063a22cb465146103b0578063b88d4fde146103de578063c87b56dd146104a4578063e985e9c5146104c157610121565b806342966c68146103235780634f6ccce7146103405780636352211e1461035d5780636c0360eb1461037a57806370a082311461038257610121565b806318160ddd116100f457806318160ddd1461024557806323b872dd1461025f5780632f745c591461029557806340c10f19146102c157806342842e0e146102ed57610121565b806301ffc9a71461012657806306fdde0314610161578063081812fc146101de578063095ea7b314610217575b600080fd5b61014d6004803603602081101561013c57600080fd5b50356001600160e01b0319166104ef565b604080519115158252519081900360200190f35b610169610512565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a357818101518382015260200161018b565b50505050905090810190601f1680156101d05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101fb600480360360208110156101f457600080fd5b50356105a8565b604080516001600160a01b039092168252519081900360200190f35b6102436004803603604081101561022d57600080fd5b506001600160a01b03813516906020013561060a565b005b61024d6106e5565b60408051918252519081900360200190f35b6102436004803603606081101561027557600080fd5b506001600160a01b038135811691602081013590911690604001356106f6565b61024d600480360360408110156102ab57600080fd5b506001600160a01b03813516906020013561074d565b610243600480360360408110156102d757600080fd5b506001600160a01b038135169060200135610778565b6102436004803603606081101561030357600080fd5b506001600160a01b03813581169160208101359091169060400135610786565b6102436004803603602081101561033957600080fd5b50356107a1565b61024d6004803603602081101561035657600080fd5b50356107f3565b6101fb6004803603602081101561037357600080fd5b5035610809565b610169610831565b61024d6004803603602081101561039857600080fd5b50356001600160a01b0316610892565b6101696108fa565b610243600480360360408110156103c657600080fd5b506001600160a01b038135169060200135151561095b565b610243600480360360808110156103f457600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561042f57600080fd5b82018360208201111561044157600080fd5b8035906020019184600183028401116401000000008311171561046357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610a60945050505050565b610169600480360360208110156104ba57600080fd5b5035610abe565b61014d600480360360408110156104d757600080fd5b506001600160a01b0381358116916020013516610d65565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b60068054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561059e5780601f106105735761010080835404028352916020019161059e565b820191906000526020600020905b81548152906001019060200180831161058157829003601f168201915b5050505050905090565b60006105b382610d93565b6105ee5760405162461bcd60e51b815260040180806020018281038252602c815260200180611cbc602c913960400191505060405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061061582610809565b9050806001600160a01b0316836001600160a01b031614156106685760405162461bcd60e51b8152600401808060200182810382526021815260200180611d406021913960400191505060405180910390fd5b806001600160a01b031661067a610da0565b6001600160a01b0316148061069b575061069b81610696610da0565b610d65565b6106d65760405162461bcd60e51b8152600401808060200182810382526038815260200180611c0f6038913960400191505060405180910390fd5b6106e08383610da4565b505050565b60006106f16002610e12565b905090565b610707610701610da0565b82610e1d565b6107425760405162461bcd60e51b8152600401808060200182810382526031815260200180611d616031913960400191505060405180910390fd5b6106e0838383610ec1565b6001600160a01b038216600090815260016020526040812061076f908361100d565b90505b92915050565b6107828282611019565b5050565b6106e083838360405180602001604052806000815250610a60565b6107ac610701610da0565b6107e75760405162461bcd60e51b8152600401808060200182810382526030815260200180611d926030913960400191505060405180910390fd5b6107f081611147565b50565b600080610801600284611214565b509392505050565b600061077282604051806060016040528060298152602001611c716029913960029190611230565b60098054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561059e5780601f106105735761010080835404028352916020019161059e565b60006001600160a01b0382166108d95760405162461bcd60e51b815260040180806020018281038252602a815260200180611c47602a913960400191505060405180910390fd5b6001600160a01b038216600090815260016020526040902061077290610e12565b60078054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561059e5780601f106105735761010080835404028352916020019161059e565b610963610da0565b6001600160a01b0316826001600160a01b031614156109c9576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b80600560006109d6610da0565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610a1a610da0565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b610a71610a6b610da0565b83610e1d565b610aac5760405162461bcd60e51b8152600401808060200182810382526031815260200180611d616031913960400191505060405180910390fd5b610ab884848484611247565b50505050565b6060610ac982610d93565b610b045760405162461bcd60e51b815260040180806020018281038252602f815260200180611d11602f913960400191505060405180910390fd5b60008281526008602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610b995780601f10610b6e57610100808354040283529160200191610b99565b820191906000526020600020905b815481529060010190602001808311610b7c57829003601f168201915b505060095493945050505060026000196101006001841615020190911604610bc257905061050d565b805115610c93576009816040516020018083805460018160011615610100020316600290048015610c2a5780601f10610c08576101008083540402835291820191610c2a565b820191906000526020600020905b815481529060010190602001808311610c16575b5050825160208401908083835b60208310610c565780518252601f199092019160209182019101610c37565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405291505061050d565b6009610c9e84611299565b6040516020018083805460018160011615610100020316600290048015610cfc5780601f10610cda576101008083540402835291820191610cfc565b820191906000526020600020905b815481529060010190602001808311610ce8575b5050825160208401908083835b60208310610d285780518252601f199092019160209182019101610d09565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000610772600283611374565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610dd982610809565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061077282611380565b6000610e2882610d93565b610e635760405162461bcd60e51b815260040180806020018281038252602c815260200180611be3602c913960400191505060405180910390fd5b6000610e6e83610809565b9050806001600160a01b0316846001600160a01b03161480610ea95750836001600160a01b0316610e9e846105a8565b6001600160a01b0316145b80610eb95750610eb98185610d65565b949350505050565b826001600160a01b0316610ed482610809565b6001600160a01b031614610f195760405162461bcd60e51b8152600401808060200182810382526029815260200180611ce86029913960400191505060405180910390fd5b6001600160a01b038216610f5e5760405162461bcd60e51b8152600401808060200182810382526024815260200180611bbf6024913960400191505060405180910390fd5b610f698383836106e0565b610f74600082610da4565b6001600160a01b0383166000908152600160205260409020610f969082611384565b506001600160a01b0382166000908152600160205260409020610fb99082611390565b50610fc66002828461139c565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600061076f83836113b2565b6001600160a01b038216611074576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b61107d81610d93565b156110cf576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b6110db600083836106e0565b6001600160a01b03821660009081526001602052604090206110fd9082611390565b5061110a6002828461139c565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600061115282610809565b9050611160816000846106e0565b61116b600083610da4565b60008281526008602052604090205460026000196101006001841615020190911604156111a95760008281526008602052604081206111a991611b12565b6001600160a01b03811660009081526001602052604090206111cb9083611384565b506111d7600283611416565b5060405182906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60008080806112238686611422565b9097909650945050505050565b600061123d84848461149d565b90505b9392505050565b611252848484610ec1565b61125e84848484611567565b610ab85760405162461bcd60e51b8152600401808060200182810382526032815260200180611b8d6032913960400191505060405180910390fd5b6060816112be57506040805180820190915260018152600360fc1b602082015261050d565b8160005b81156112d657600101600a820491506112c2565b60608167ffffffffffffffff811180156112ef57600080fd5b506040519080825280601f01601f19166020018201604052801561131a576020820181803683370190505b50859350905060001982015b831561136b57600a840660300160f81b8282806001900393508151811061134957fe5b60200101906001600160f81b031916908160001a905350600a84049350611326565b50949350505050565b600061076f83836116cf565b5490565b600061076f83836116e7565b600061076f83836117ad565b600061123d84846001600160a01b0385166117f7565b815460009082106113f45760405162461bcd60e51b8152600401808060200182810382526022815260200180611b6b6022913960400191505060405180910390fd5b82600001828154811061140357fe5b9060005260206000200154905092915050565b600061076f838361188e565b8154600090819083106114665760405162461bcd60e51b8152600401808060200182810382526022815260200180611c9a6022913960400191505060405180910390fd5b600084600001848154811061147757fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816115385760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156114fd5781810151838201526020016114e5565b50505050905090810190601f16801561152a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061154b57fe5b9060005260206000209060020201600101549150509392505050565b600061157b846001600160a01b0316611962565b61158757506001610eb9565b6060611695630a85bd0160e11b61159c610da0565b88878760405160240180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156116035781810151838201526020016115eb565b50505050905090810190601f1680156116305780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001611b8d603291396001600160a01b038816919061199b565b905060008180602001905160208110156116ae57600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b60009081526001919091016020526040902054151590565b600081815260018301602052604081205480156117a3578354600019808301919081019060009087908390811061171a57fe5b906000526020600020015490508087600001848154811061173757fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061176757fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610772565b6000915050610772565b60006117b983836116cf565b6117ef57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610772565b506000610772565b60008281526001840160205260408120548061185c575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055611240565b8285600001600183038154811061186f57fe5b9060005260206000209060020201600101819055506000915050611240565b600081815260018301602052604081205480156117a357835460001980830191908101906000908790839081106118c157fe5b90600052602060002090600202019050808760000184815481106118e157fe5b60009182526020808320845460029093020191825560019384015491840191909155835482528983019052604090209084019055865487908061192057fe5b60008281526020808220600260001990940193840201828155600190810183905592909355888152898201909252604082209190915594506107729350505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610eb9575050151592915050565b606061123d848460008560606119b085611962565b611a01576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611a405780518252601f199092019160209182019101611a21565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611aa2576040519150601f19603f3d011682016040523d82523d6000602084013e611aa7565b606091505b50915091508115611abb579150610eb99050565b805115611acb5780518082602001fd5b60405162461bcd60e51b81526020600482018181528651602484015286518793919283926044019190850190808383600083156114fd5781810151838201526020016114e5565b50805460018160011615610100020316600290046000825580601f10611b3857506107f0565b601f0160209004906000526020600020908101906107f091905b80821115611b665760008155600101611b52565b509056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a2646970667358221220194457e09e1989efd5598b04a77e4cfa9cd6e04c7412476ba43f1c98ed2591a964736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "baseURI", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "tokenByIndex", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenOfOwnerByIndex", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenURI", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"approve(address,uint256)": {"details": "See {IERC721-approve}."}, "balanceOf(address)": {"details": "See {IERC721-balanceOf}."}, "baseURI()": {"details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."}, "burn(uint256)": {"details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."}, "getApproved(uint256)": {"details": "See {IERC721-getApproved}."}, "isApprovedForAll(address,address)": {"details": "See {IERC721-isApprovedForAll}."}, "name()": {"details": "See {IERC721Metadata-name}."}, "ownerOf(uint256)": {"details": "See {IERC721-ownerOf}."}, "safeTransferFrom(address,address,uint256)": {"details": "See {IERC721-safeTransferFrom}."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "See {IERC721-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC721-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."}, "symbol()": {"details": "See {IERC721Metadata-symbol}."}, "tokenByIndex(uint256)": {"details": "See {IERC721Enumerable-tokenByIndex}."}, "tokenOfOwnerByIndex(address,uint256)": {"details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."}, "tokenURI(uint256)": {"details": "See {IERC721Metadata-tokenURI}."}, "totalSupply()": {"details": "See {IERC721Enumerable-totalSupply}."}, "transferFrom(address,address,uint256)": {"details": "See {IERC721-transferFrom}."}}, "version": 1}}, "ERC721GSNRecipientMock": {"contractName": "ERC721GSNRecipientMock", "sourceId": "mocks/ERC721GSNRecipientMock.sol", "deploymentBytecode": {"bytecode": "6080604052600a80546001600160a01b03191673d216153c06e857cd7f72665e0af1d7d82172f4941790553480156200003757600080fd5b506040516200287138038062002871833981810160405260608110156200005d57600080fd5b81019080805160405193929190846401000000008211156200007e57600080fd5b9083019060208201858111156200009457600080fd5b8251640100000000811182820188101715620000af57600080fd5b82525081516020918201929091019080838360005b83811015620000de578181015183820152602001620000c4565b50505050905090810190601f1680156200010c5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200013057600080fd5b9083019060208201858111156200014657600080fd5b82516401000000008111828201881017156200016157600080fd5b82525081516020918201929091019080838360005b838110156200019057818101518382015260200162000176565b50505050905090810190601f168015620001be5780820380516001836020036101000a031916815260200191505b506040526020015191508190508383620001df6301ffc9a760e01b620002b4565b8151620001f490600690602085019062000339565b5080516200020a90600790602084019062000339565b506200021d6380ac58cd60e01b620002b4565b6200022f635b5e139f60e01b620002b4565b6200024163780e9d6360e01b620002b4565b50506001600160a01b0381166200028a5760405162461bcd60e51b8152600401808060200182810382526039815260200180620028386039913960400191505060405180910390fd5b600b80546001600160a01b0319166001600160a01b039290921691909117905550620003d5915050565b6001600160e01b0319808216141562000314576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200037c57805160ff1916838001178555620003ac565b82800160010185558215620003ac579182015b82811115620003ac5782518255916020019190600101906200038f565b50620003ba929150620003be565b5090565b5b80821115620003ba5760008155600101620003bf565b61245380620003e56000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806370a08231116100c3578063a22cb4651161007c578063a22cb46514610638578063ad61ccd514610666578063b88d4fde1461066e578063c87b56dd14610732578063e06e0e221461074f578063e985e9c5146108005761014d565b806370a082311461036557806374e861d61461038b57806380274db71461039357806383947ea01461043757806395d89b4114610613578063a0712d681461061b5761014d565b806323b872dd1161011557806323b872dd1461028b5780632f745c59146102c157806342842e0e146102ed5780634f6ccce7146103235780636352211e146103405780636c0360eb1461035d5761014d565b806301ffc9a71461015257806306fdde031461018d578063081812fc1461020a578063095ea7b31461024357806318160ddd14610271575b600080fd5b6101796004803603602081101561016857600080fd5b50356001600160e01b03191661082e565b604080519115158252519081900360200190f35b610195610851565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101cf5781810151838201526020016101b7565b50505050905090810190601f1680156101fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102276004803603602081101561022057600080fd5b50356108e8565b604080516001600160a01b039092168252519081900360200190f35b61026f6004803603604081101561025957600080fd5b506001600160a01b03813516906020013561094a565b005b610279610a25565b60408051918252519081900360200190f35b61026f600480360360608110156102a157600080fd5b506001600160a01b03813581169160208101359091169060400135610a36565b610279600480360360408110156102d757600080fd5b506001600160a01b038135169060200135610a8d565b61026f6004803603606081101561030357600080fd5b506001600160a01b03813581169160208101359091169060400135610ab8565b6102796004803603602081101561033957600080fd5b5035610ad3565b6102276004803603602081101561035657600080fd5b5035610ae9565b610195610b11565b6102796004803603602081101561037b57600080fd5b50356001600160a01b0316610b72565b610227610bda565b610279600480360360208110156103a957600080fd5b810190602081018135600160201b8111156103c357600080fd5b8201836020820111156103d557600080fd5b803590602001918460018302840111600160201b831117156103f657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610be9945050505050565b610594600480360361012081101561044e57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561048157600080fd5b82018360208201111561049357600080fd5b803590602001918460018302840111600160201b831117156104b457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929584359560208601359560408101359550606081013594509192509060a081019060800135600160201b81111561051e57600080fd5b82018360208201111561053057600080fd5b803590602001918460018302840111600160201b8311171561055157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250610c4b915050565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156105d75781810151838201526020016105bf565b50505050905090810190601f1680156106045780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b610195610d8c565b61026f6004803603602081101561063157600080fd5b5035610ded565b61026f6004803603604081101561064e57600080fd5b506001600160a01b0381351690602001351515610e01565b610195610f06565b61026f6004803603608081101561068457600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b8111156106be57600080fd5b8201836020820111156106d057600080fd5b803590602001918460018302840111600160201b831117156106f157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610f25945050505050565b6101956004803603602081101561074857600080fd5b5035610f83565b61026f6004803603608081101561076557600080fd5b810190602081018135600160201b81111561077f57600080fd5b82018360208201111561079157600080fd5b803590602001918460018302840111600160201b831117156107b257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050508035151591506020810135906040013561122a565b6101796004803603604081101561081657600080fd5b506001600160a01b038135811691602001351661128d565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108dd5780601f106108b2576101008083540402835291602001916108dd565b820191906000526020600020905b8154815290600101906020018083116108c057829003601f168201915b505050505090505b90565b60006108f3826112bb565b61092e5760405162461bcd60e51b815260040180806020018281038252602c815260200180612324602c913960400191505060405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061095582610ae9565b9050806001600160a01b0316836001600160a01b031614156109a85760405162461bcd60e51b81526004018080602001828103825260218152602001806123a86021913960400191505060405180910390fd5b806001600160a01b03166109ba6112c8565b6001600160a01b031614806109db57506109db816109d66112c8565b61128d565b610a165760405162461bcd60e51b81526004018080602001828103825260388152602001806122556038913960400191505060405180910390fd5b610a2083836112d2565b505050565b6000610a316002611340565b905090565b610a47610a416112c8565b8261134b565b610a825760405162461bcd60e51b81526004018080602001828103825260318152602001806123ed6031913960400191505060405180910390fd5b610a208383836113ef565b6001600160a01b0382166000908152600160205260408120610aaf908361153b565b90505b92915050565b610a2083838360405180602001604052806000815250610f25565b600080610ae1600284611547565b509392505050565b6000610ab2826040518060600160405280602981526020016122b76029913960029190611563565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108dd5780601f106108b2576101008083540402835291602001916108dd565b60006001600160a01b038216610bb95760405162461bcd60e51b815260040180806020018281038252602a81526020018061228d602a913960400191505060405180910390fd5b6001600160a01b0382166000908152600160205260409020610ab290611340565b600a546001600160a01b031690565b6000610bf3610bda565b6001600160a01b0316336001600160a01b031614610c425760405162461bcd60e51b81526004018080602001828103825260248152602001806123c96024913960400191505060405180910390fd5b610ab28261157a565b60006060808b8b8b8b8b8b8b610c5f610bda565b30604051602001808a6001600160a01b031660601b8152601401896001600160a01b031660601b815260140188805190602001908083835b60208310610cb65780518252601f199092019160209182019101610c97565b51815160209384036101000a6000190180199092169116179052920198895250878101969096525060408087019490945260608087019390935290821b6bffffffffffffffffffffffff199081166080870152911b1660948401528051808403608801815260a89093019052600b548251918301919091209195506001600160a01b03169350610d539250889150610d4d90611580565b906115d1565b6001600160a01b03161415610d7457610d6a6117bc565b9250925050610d7e565b610d6a60006117e0565b995099975050505050505050565b60078054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108dd5780601f106108b2576101008083540402835291602001916108dd565b610dfe610df86112c8565b826117f8565b50565b610e096112c8565b6001600160a01b0316826001600160a01b03161415610e6f576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b8060056000610e7c6112c8565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610ec06112c8565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b6040805180820190915260058152640312e302e360dc1b602082015290565b610f36610f306112c8565b8361134b565b610f715760405162461bcd60e51b81526004018080602001828103825260318152602001806123ed6031913960400191505060405180910390fd5b610f7d84848484611926565b50505050565b6060610f8e826112bb565b610fc95760405162461bcd60e51b815260040180806020018281038252602f815260200180612379602f913960400191505060405180910390fd5b60008281526008602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084526060939283018282801561105e5780601f106110335761010080835404028352916020019161105e565b820191906000526020600020905b81548152906001019060200180831161104157829003601f168201915b50506009549394505050506002600019610100600184161502019091160461108757905061084c565b8051156111585760098160405160200180838054600181600116156101000203166002900480156110ef5780601f106110cd5761010080835404028352918201916110ef565b820191906000526020600020905b8154815290600101906020018083116110db575b5050825160208401908083835b6020831061111b5780518252601f1990920191602091820191016110fc565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405291505061084c565b600961116384611978565b60405160200180838054600181600116156101000203166002900480156111c15780601f1061119f5761010080835404028352918201916111c1565b820191906000526020600020905b8154815290600101906020018083116111ad575b5050825160208401908083835b602083106111ed5780518252601f1990920191602091820191016111ce565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050919050565b611232610bda565b6001600160a01b0316336001600160a01b0316146112815760405162461bcd60e51b81526004018080602001828103825260248152602001806123c96024913960400191505060405180910390fd5b610f7d84848484610f7d565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000610ab2600283611a53565b6000610a31611a5f565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061130782610ae9565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610ab282611a8a565b6000611356826112bb565b6113915760405162461bcd60e51b815260040180806020018281038252602c815260200180612229602c913960400191505060405180910390fd5b600061139c83610ae9565b9050806001600160a01b0316846001600160a01b031614806113d75750836001600160a01b03166113cc846108e8565b6001600160a01b0316145b806113e757506113e7818561128d565b949350505050565b826001600160a01b031661140282610ae9565b6001600160a01b0316146114475760405162461bcd60e51b81526004018080602001828103825260298152602001806123506029913960400191505060405180910390fd5b6001600160a01b03821661148c5760405162461bcd60e51b81526004018080602001828103825260248152602001806121e36024913960400191505060405180910390fd5b611497838383610a20565b6114a26000826112d2565b6001600160a01b03831660009081526001602052604090206114c49082611a8e565b506001600160a01b03821660009081526001602052604090206114e79082611a9a565b506114f460028284611aa6565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000610aaf8383611abc565b60008080806115568686611b20565b9097909650945050505050565b6000611570848484611b9b565b90505b9392505050565b50600090565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b60008151604114611629576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561169a5760405162461bcd60e51b81526004018080602001828103825260228152602001806122076022913960400191505060405180910390fd5b8060ff16601b141580156116b257508060ff16601c14155b156116ee5760405162461bcd60e51b81526004018080602001828103825260228152602001806122e06022913960400191505060405180910390fd5b600060018783868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561174a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166117b2576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b9695505050505050565b600060606117d860405180602001604052806000815250611c65565b915091509091565b604080516020810190915260008152600b9190910191565b6001600160a01b038216611853576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b61185c816112bb565b156118ae576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b6118ba60008383610a20565b6001600160a01b03821660009081526001602052604090206118dc9082611a9a565b506118e960028284611aa6565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6119318484846113ef565b61193d84848484611c6a565b610f7d5760405162461bcd60e51b81526004018080602001828103825260328152602001806121b16032913960400191505060405180910390fd5b60608161199d57506040805180820190915260018152600360fc1b602082015261084c565b8160005b81156119b557600101600a820491506119a1565b60608167ffffffffffffffff811180156119ce57600080fd5b506040519080825280601f01601f1916602001820160405280156119f9576020820181803683370190505b50859350905060001982015b8315611a4a57600a840660300160f81b82828060019003935081518110611a2857fe5b60200101906001600160f81b031916908160001a905350600a84049350611a05565b50949350505050565b6000610aaf8383611dd2565b600a546000906001600160a01b03163314611a7b5750336108e5565b611a83611dea565b90506108e5565b5490565b6000610aaf8383611e37565b6000610aaf8383611efd565b600061157084846001600160a01b038516611f47565b81546000908210611afe5760405162461bcd60e51b815260040180806020018281038252602281526020018061218f6022913960400191505060405180910390fd5b826000018281548110611b0d57fe5b9060005260206000200154905092915050565b815460009081908310611b645760405162461bcd60e51b81526004018080602001828103825260228152602001806123026022913960400191505060405180910390fd5b6000846000018481548110611b7557fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b60008281526001840160205260408120548281611c365760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611bfb578181015183820152602001611be3565b50505050905090810190601f168015611c285780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50846000016001820381548110611c4957fe5b9060005260206000209060020201600101549150509392505050565b600091565b6000611c7e846001600160a01b0316611fde565b611c8a575060016113e7565b6060611d98630a85bd0160e11b611c9f6112c8565b88878760405160240180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611d06578181015183820152602001611cee565b50505050905090810190601f168015611d335780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050506040518060600160405280603281526020016121b1603291396001600160a01b0388169190612017565b90506000818060200190516020811015611db157600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b60009081526001919091016020526040902054151590565b600060606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031692915050565b60008181526001830160205260408120548015611ef35783546000198083019190810190600090879083908110611e6a57fe5b9060005260206000200154905080876000018481548110611e8757fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080611eb757fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610ab2565b6000915050610ab2565b6000611f098383611dd2565b611f3f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ab2565b506000610ab2565b600082815260018401602052604081205480611fac575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055611573565b82856000016001830381548110611fbf57fe5b9060005260206000209060020201600101819055506000915050611573565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906113e7575050151592915050565b60606115708484600085606061202c85611fde565b61207d576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106120bc5780518252601f19909201916020918201910161209d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461211e576040519150601f19603f3d011682016040523d82523d6000602084013e612123565b606091505b509150915081156121375791506113e79050565b8051156121475780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315611bfb578181015183820152602001611be356fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f206164647265737345434453413a20696e76616c6964207369676e6174757265202773272076616c75654552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e45434453413a20696e76616c6964207369676e6174757265202776272076616c7565456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e657247534e526563697069656e743a2063616c6c6572206973206e6f742052656c61794875624552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a2646970667358221220e01bac23eb56289c83adad1feb6a99ceb91bb25abc573d9389c00217d99ceaf164736f6c634300060c003347534e526563697069656e745369676e61747572653a2074727573746564207369676e657220697320746865207a65726f2061646472657373"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b506004361061014d5760003560e01c806370a08231116100c3578063a22cb4651161007c578063a22cb46514610638578063ad61ccd514610666578063b88d4fde1461066e578063c87b56dd14610732578063e06e0e221461074f578063e985e9c5146108005761014d565b806370a082311461036557806374e861d61461038b57806380274db71461039357806383947ea01461043757806395d89b4114610613578063a0712d681461061b5761014d565b806323b872dd1161011557806323b872dd1461028b5780632f745c59146102c157806342842e0e146102ed5780634f6ccce7146103235780636352211e146103405780636c0360eb1461035d5761014d565b806301ffc9a71461015257806306fdde031461018d578063081812fc1461020a578063095ea7b31461024357806318160ddd14610271575b600080fd5b6101796004803603602081101561016857600080fd5b50356001600160e01b03191661082e565b604080519115158252519081900360200190f35b610195610851565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101cf5781810151838201526020016101b7565b50505050905090810190601f1680156101fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102276004803603602081101561022057600080fd5b50356108e8565b604080516001600160a01b039092168252519081900360200190f35b61026f6004803603604081101561025957600080fd5b506001600160a01b03813516906020013561094a565b005b610279610a25565b60408051918252519081900360200190f35b61026f600480360360608110156102a157600080fd5b506001600160a01b03813581169160208101359091169060400135610a36565b610279600480360360408110156102d757600080fd5b506001600160a01b038135169060200135610a8d565b61026f6004803603606081101561030357600080fd5b506001600160a01b03813581169160208101359091169060400135610ab8565b6102796004803603602081101561033957600080fd5b5035610ad3565b6102276004803603602081101561035657600080fd5b5035610ae9565b610195610b11565b6102796004803603602081101561037b57600080fd5b50356001600160a01b0316610b72565b610227610bda565b610279600480360360208110156103a957600080fd5b810190602081018135600160201b8111156103c357600080fd5b8201836020820111156103d557600080fd5b803590602001918460018302840111600160201b831117156103f657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610be9945050505050565b610594600480360361012081101561044e57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561048157600080fd5b82018360208201111561049357600080fd5b803590602001918460018302840111600160201b831117156104b457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929584359560208601359560408101359550606081013594509192509060a081019060800135600160201b81111561051e57600080fd5b82018360208201111561053057600080fd5b803590602001918460018302840111600160201b8311171561055157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250610c4b915050565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156105d75781810151838201526020016105bf565b50505050905090810190601f1680156106045780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b610195610d8c565b61026f6004803603602081101561063157600080fd5b5035610ded565b61026f6004803603604081101561064e57600080fd5b506001600160a01b0381351690602001351515610e01565b610195610f06565b61026f6004803603608081101561068457600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b8111156106be57600080fd5b8201836020820111156106d057600080fd5b803590602001918460018302840111600160201b831117156106f157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610f25945050505050565b6101956004803603602081101561074857600080fd5b5035610f83565b61026f6004803603608081101561076557600080fd5b810190602081018135600160201b81111561077f57600080fd5b82018360208201111561079157600080fd5b803590602001918460018302840111600160201b831117156107b257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050508035151591506020810135906040013561122a565b6101796004803603604081101561081657600080fd5b506001600160a01b038135811691602001351661128d565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108dd5780601f106108b2576101008083540402835291602001916108dd565b820191906000526020600020905b8154815290600101906020018083116108c057829003601f168201915b505050505090505b90565b60006108f3826112bb565b61092e5760405162461bcd60e51b815260040180806020018281038252602c815260200180612324602c913960400191505060405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061095582610ae9565b9050806001600160a01b0316836001600160a01b031614156109a85760405162461bcd60e51b81526004018080602001828103825260218152602001806123a86021913960400191505060405180910390fd5b806001600160a01b03166109ba6112c8565b6001600160a01b031614806109db57506109db816109d66112c8565b61128d565b610a165760405162461bcd60e51b81526004018080602001828103825260388152602001806122556038913960400191505060405180910390fd5b610a2083836112d2565b505050565b6000610a316002611340565b905090565b610a47610a416112c8565b8261134b565b610a825760405162461bcd60e51b81526004018080602001828103825260318152602001806123ed6031913960400191505060405180910390fd5b610a208383836113ef565b6001600160a01b0382166000908152600160205260408120610aaf908361153b565b90505b92915050565b610a2083838360405180602001604052806000815250610f25565b600080610ae1600284611547565b509392505050565b6000610ab2826040518060600160405280602981526020016122b76029913960029190611563565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108dd5780601f106108b2576101008083540402835291602001916108dd565b60006001600160a01b038216610bb95760405162461bcd60e51b815260040180806020018281038252602a81526020018061228d602a913960400191505060405180910390fd5b6001600160a01b0382166000908152600160205260409020610ab290611340565b600a546001600160a01b031690565b6000610bf3610bda565b6001600160a01b0316336001600160a01b031614610c425760405162461bcd60e51b81526004018080602001828103825260248152602001806123c96024913960400191505060405180910390fd5b610ab28261157a565b60006060808b8b8b8b8b8b8b610c5f610bda565b30604051602001808a6001600160a01b031660601b8152601401896001600160a01b031660601b815260140188805190602001908083835b60208310610cb65780518252601f199092019160209182019101610c97565b51815160209384036101000a6000190180199092169116179052920198895250878101969096525060408087019490945260608087019390935290821b6bffffffffffffffffffffffff199081166080870152911b1660948401528051808403608801815260a89093019052600b548251918301919091209195506001600160a01b03169350610d539250889150610d4d90611580565b906115d1565b6001600160a01b03161415610d7457610d6a6117bc565b9250925050610d7e565b610d6a60006117e0565b995099975050505050505050565b60078054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108dd5780601f106108b2576101008083540402835291602001916108dd565b610dfe610df86112c8565b826117f8565b50565b610e096112c8565b6001600160a01b0316826001600160a01b03161415610e6f576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b8060056000610e7c6112c8565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610ec06112c8565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b6040805180820190915260058152640312e302e360dc1b602082015290565b610f36610f306112c8565b8361134b565b610f715760405162461bcd60e51b81526004018080602001828103825260318152602001806123ed6031913960400191505060405180910390fd5b610f7d84848484611926565b50505050565b6060610f8e826112bb565b610fc95760405162461bcd60e51b815260040180806020018281038252602f815260200180612379602f913960400191505060405180910390fd5b60008281526008602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084526060939283018282801561105e5780601f106110335761010080835404028352916020019161105e565b820191906000526020600020905b81548152906001019060200180831161104157829003601f168201915b50506009549394505050506002600019610100600184161502019091160461108757905061084c565b8051156111585760098160405160200180838054600181600116156101000203166002900480156110ef5780601f106110cd5761010080835404028352918201916110ef565b820191906000526020600020905b8154815290600101906020018083116110db575b5050825160208401908083835b6020831061111b5780518252601f1990920191602091820191016110fc565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405291505061084c565b600961116384611978565b60405160200180838054600181600116156101000203166002900480156111c15780601f1061119f5761010080835404028352918201916111c1565b820191906000526020600020905b8154815290600101906020018083116111ad575b5050825160208401908083835b602083106111ed5780518252601f1990920191602091820191016111ce565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050919050565b611232610bda565b6001600160a01b0316336001600160a01b0316146112815760405162461bcd60e51b81526004018080602001828103825260248152602001806123c96024913960400191505060405180910390fd5b610f7d84848484610f7d565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000610ab2600283611a53565b6000610a31611a5f565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061130782610ae9565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610ab282611a8a565b6000611356826112bb565b6113915760405162461bcd60e51b815260040180806020018281038252602c815260200180612229602c913960400191505060405180910390fd5b600061139c83610ae9565b9050806001600160a01b0316846001600160a01b031614806113d75750836001600160a01b03166113cc846108e8565b6001600160a01b0316145b806113e757506113e7818561128d565b949350505050565b826001600160a01b031661140282610ae9565b6001600160a01b0316146114475760405162461bcd60e51b81526004018080602001828103825260298152602001806123506029913960400191505060405180910390fd5b6001600160a01b03821661148c5760405162461bcd60e51b81526004018080602001828103825260248152602001806121e36024913960400191505060405180910390fd5b611497838383610a20565b6114a26000826112d2565b6001600160a01b03831660009081526001602052604090206114c49082611a8e565b506001600160a01b03821660009081526001602052604090206114e79082611a9a565b506114f460028284611aa6565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000610aaf8383611abc565b60008080806115568686611b20565b9097909650945050505050565b6000611570848484611b9b565b90505b9392505050565b50600090565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b60008151604114611629576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561169a5760405162461bcd60e51b81526004018080602001828103825260228152602001806122076022913960400191505060405180910390fd5b8060ff16601b141580156116b257508060ff16601c14155b156116ee5760405162461bcd60e51b81526004018080602001828103825260228152602001806122e06022913960400191505060405180910390fd5b600060018783868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561174a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166117b2576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b9695505050505050565b600060606117d860405180602001604052806000815250611c65565b915091509091565b604080516020810190915260008152600b9190910191565b6001600160a01b038216611853576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b61185c816112bb565b156118ae576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b6118ba60008383610a20565b6001600160a01b03821660009081526001602052604090206118dc9082611a9a565b506118e960028284611aa6565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6119318484846113ef565b61193d84848484611c6a565b610f7d5760405162461bcd60e51b81526004018080602001828103825260328152602001806121b16032913960400191505060405180910390fd5b60608161199d57506040805180820190915260018152600360fc1b602082015261084c565b8160005b81156119b557600101600a820491506119a1565b60608167ffffffffffffffff811180156119ce57600080fd5b506040519080825280601f01601f1916602001820160405280156119f9576020820181803683370190505b50859350905060001982015b8315611a4a57600a840660300160f81b82828060019003935081518110611a2857fe5b60200101906001600160f81b031916908160001a905350600a84049350611a05565b50949350505050565b6000610aaf8383611dd2565b600a546000906001600160a01b03163314611a7b5750336108e5565b611a83611dea565b90506108e5565b5490565b6000610aaf8383611e37565b6000610aaf8383611efd565b600061157084846001600160a01b038516611f47565b81546000908210611afe5760405162461bcd60e51b815260040180806020018281038252602281526020018061218f6022913960400191505060405180910390fd5b826000018281548110611b0d57fe5b9060005260206000200154905092915050565b815460009081908310611b645760405162461bcd60e51b81526004018080602001828103825260228152602001806123026022913960400191505060405180910390fd5b6000846000018481548110611b7557fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b60008281526001840160205260408120548281611c365760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611bfb578181015183820152602001611be3565b50505050905090810190601f168015611c285780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50846000016001820381548110611c4957fe5b9060005260206000209060020201600101549150509392505050565b600091565b6000611c7e846001600160a01b0316611fde565b611c8a575060016113e7565b6060611d98630a85bd0160e11b611c9f6112c8565b88878760405160240180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611d06578181015183820152602001611cee565b50505050905090810190601f168015611d335780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050506040518060600160405280603281526020016121b1603291396001600160a01b0388169190612017565b90506000818060200190516020811015611db157600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b60009081526001919091016020526040902054151590565b600060606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031692915050565b60008181526001830160205260408120548015611ef35783546000198083019190810190600090879083908110611e6a57fe5b9060005260206000200154905080876000018481548110611e8757fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080611eb757fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610ab2565b6000915050610ab2565b6000611f098383611dd2565b611f3f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ab2565b506000610ab2565b600082815260018401602052604081205480611fac575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055611573565b82856000016001830381548110611fbf57fe5b9060005260206000209060020201600101819055506000915050611573565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906113e7575050151592915050565b60606115708484600085606061202c85611fde565b61207d576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106120bc5780518252601f19909201916020918201910161209d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461211e576040519150601f19603f3d011682016040523d82523d6000602084013e612123565b606091505b509150915081156121375791506113e79050565b8051156121475780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315611bfb578181015183820152602001611be356fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f206164647265737345434453413a20696e76616c6964207369676e6174757265202773272076616c75654552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e45434453413a20696e76616c6964207369676e6174757265202776272076616c7565456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e657247534e526563697069656e743a2063616c6c6572206973206e6f742052656c61794875624552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a2646970667358221220e01bac23eb56289c83adad1feb6a99ceb91bb25abc573d9389c00217d99ceaf164736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}, {"name": "trustedSigner", "type": "address", "internalType": "address"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "event", "name": "RelayHubChanged", "inputs": [{"name": "oldRelayHub", "type": "address", "indexed": true, "internalType": "address"}, {"name": "newRelayHub", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "acceptRelayedCall", "stateMutability": "view", "inputs": [{"name": "relay", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "encodedFunction", "type": "bytes", "internalType": "bytes"}, {"name": "transactionFee", "type": "uint256", "internalType": "uint256"}, {"name": "gasPrice", "type": "uint256", "internalType": "uint256"}, {"name": "gasLimit", "type": "uint256", "internalType": "uint256"}, {"name": "nonce", "type": "uint256", "internalType": "uint256"}, {"name": "approvalData", "type": "bytes", "internalType": "bytes"}, {"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "bytes", "internalType": "bytes"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "baseURI", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getHubAddr", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "postRelayedCall", "stateMutability": "nonpayable", "inputs": [{"name": "context", "type": "bytes", "internalType": "bytes"}, {"name": "success", "type": "bool", "internalType": "bool"}, {"name": "actualCharge", "type": "uint256", "internalType": "uint256"}, {"name": "preRetVal", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "preRelayedCall", "stateMutability": "nonpayable", "inputs": [{"name": "context", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "relayHubVersion", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "tokenByIndex", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenOfOwnerByIndex", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenURI", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)": {"details": "Ensures that only transactions with a trusted signature can be relayed through the GSN."}, "approve(address,uint256)": {"details": "See {IERC721-approve}."}, "balanceOf(address)": {"details": "See {IERC721-balanceOf}."}, "baseURI()": {"details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."}, "getApproved(uint256)": {"details": "See {IERC721-getApproved}."}, "getHubAddr()": {"details": "Returns the address of the {IRelayHub} contract for this recipient."}, "isApprovedForAll(address,address)": {"details": "See {IERC721-isApprovedForAll}."}, "name()": {"details": "See {IERC721Metadata-name}."}, "ownerOf(uint256)": {"details": "See {IERC721-ownerOf}."}, "postRelayedCall(bytes,bool,uint256,bytes32)": {"details": "See `IRelayRecipient.postRelayedCall`. This function should not be overriden directly, use `_postRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract."}, "preRelayedCall(bytes)": {"details": "See `IRelayRecipient.preRelayedCall`. This function should not be overriden directly, use `_preRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract."}, "relayHubVersion()": {"details": "Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version."}, "safeTransferFrom(address,address,uint256)": {"details": "See {IERC721-safeTransferFrom}."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "See {IERC721-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC721-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."}, "symbol()": {"details": "See {IERC721Metadata-symbol}."}, "tokenByIndex(uint256)": {"details": "See {IERC721Enumerable-tokenByIndex}."}, "tokenOfOwnerByIndex(address,uint256)": {"details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."}, "tokenURI(uint256)": {"details": "See {IERC721Metadata-tokenURI}."}, "totalSupply()": {"details": "See {IERC721Enumerable-totalSupply}."}, "transferFrom(address,address,uint256)": {"details": "See {IERC721-transferFrom}."}}, "title": "ERC721GSNRecipientMock A simple ERC721 mock that has GSN support enabled", "version": 1}}, "ERC721Mock": {"contractName": "ERC721Mock", "sourceId": "mocks/ERC721Mock.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106101585760003560e01c80634f6ccce7116100c357806395d89b411161007c57806395d89b4114610604578063a14481941461060c578063a22cb46514610638578063b88d4fde14610666578063c87b56dd1461072a578063e985e9c51461074757610158565b80634f6ccce71461043f57806355f804b31461045c5780636352211e146105005780636c0360eb1461051d57806370a08231146105255780638832e6e31461054b57610158565b806323b872dd1161011557806323b872dd146103415780632f745c591461037757806340c10f19146103a357806342842e0e146103cf57806342966c68146104055780634f558e791461042257610158565b806301ffc9a71461015d57806306fdde0314610198578063081812fc14610215578063095ea7b31461024e578063162094c41461027c57806318160ddd14610327575b600080fd5b6101846004803603602081101561017357600080fd5b50356001600160e01b031916610775565b604080519115158252519081900360200190f35b6101a0610798565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101da5781810151838201526020016101c2565b50505050905090810190601f1680156102075780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102326004803603602081101561022b57600080fd5b503561082e565b604080516001600160a01b039092168252519081900360200190f35b61027a6004803603604081101561026457600080fd5b506001600160a01b038135169060200135610890565b005b61027a6004803603604081101561029257600080fd5b81359190810190604081016020820135600160201b8111156102b357600080fd5b8201836020820111156102c557600080fd5b803590602001918460018302840111600160201b831117156102e657600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061096b945050505050565b61032f610979565b60408051918252519081900360200190f35b61027a6004803603606081101561035757600080fd5b506001600160a01b0381358116916020810135909116906040013561098a565b61032f6004803603604081101561038d57600080fd5b506001600160a01b0381351690602001356109e1565b61027a600480360360408110156103b957600080fd5b506001600160a01b038135169060200135610a0c565b61027a600480360360608110156103e557600080fd5b506001600160a01b03813581169160208101359091169060400135610a16565b61027a6004803603602081101561041b57600080fd5b5035610a31565b6101846004803603602081101561043857600080fd5b5035610a3d565b61032f6004803603602081101561045557600080fd5b5035610a48565b61027a6004803603602081101561047257600080fd5b810190602081018135600160201b81111561048c57600080fd5b82018360208201111561049e57600080fd5b803590602001918460018302840111600160201b831117156104bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610a5e945050505050565b6102326004803603602081101561051657600080fd5b5035610a67565b6101a0610a8f565b61032f6004803603602081101561053b57600080fd5b50356001600160a01b0316610af0565b61027a6004803603606081101561056157600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561059057600080fd5b8201836020820111156105a257600080fd5b803590602001918460018302840111600160201b831117156105c357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610b58945050505050565b6101a0610b63565b61027a6004803603604081101561062257600080fd5b506001600160a01b038135169060200135610bc4565b61027a6004803603604081101561064e57600080fd5b506001600160a01b0381351690602001351515610bce565b61027a6004803603608081101561067c57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b8111156106b657600080fd5b8201836020820111156106c857600080fd5b803590602001918460018302840111600160201b831117156106e957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610cd3945050505050565b6101a06004803603602081101561074057600080fd5b5035610d31565b6101846004803603604081101561075d57600080fd5b506001600160a01b0381358116916020013516610fd8565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108245780601f106107f957610100808354040283529160200191610824565b820191906000526020600020905b81548152906001019060200180831161080757829003601f168201915b5050505050905090565b600061083982611006565b6108745760405162461bcd60e51b815260040180806020018281038252602c81526020018061208c602c913960400191505060405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061089b82610a67565b9050806001600160a01b0316836001600160a01b031614156108ee5760405162461bcd60e51b815260040180806020018281038252602181526020018061213c6021913960400191505060405180910390fd5b806001600160a01b0316610900611013565b6001600160a01b0316148061092157506109218161091c611013565b610fd8565b61095c5760405162461bcd60e51b8152600401808060200182810382526038815260200180611fdf6038913960400191505060405180910390fd5b6109668383611017565b505050565b6109758282611085565b5050565b600061098560026110e8565b905090565b61099b610995611013565b826110f3565b6109d65760405162461bcd60e51b815260040180806020018281038252603181526020018061215d6031913960400191505060405180910390fd5b610966838383611197565b6001600160a01b0382166000908152600160205260408120610a0390836112e3565b90505b92915050565b61097582826112ef565b61096683838360405180602001604052806000815250610cd3565b610a3a8161141d565b50565b6000610a0682611006565b600080610a566002846114ea565b509392505050565b610a3a81611506565b6000610a06826040518060600160405280602981526020016120416029913960029190611519565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108245780601f106107f957610100808354040283529160200191610824565b60006001600160a01b038216610b375760405162461bcd60e51b815260040180806020018281038252602a815260200180612017602a913960400191505060405180910390fd5b6001600160a01b0382166000908152600160205260409020610a06906110e8565b610966838383611530565b60078054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108245780601f106107f957610100808354040283529160200191610824565b6109758282611582565b610bd6611013565b6001600160a01b0316826001600160a01b03161415610c3c576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b8060056000610c49611013565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610c8d611013565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b610ce4610cde611013565b836110f3565b610d1f5760405162461bcd60e51b815260040180806020018281038252603181526020018061215d6031913960400191505060405180910390fd5b610d2b8484848461159c565b50505050565b6060610d3c82611006565b610d775760405162461bcd60e51b815260040180806020018281038252602f81526020018061210d602f913960400191505060405180910390fd5b60008281526008602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610e0c5780601f10610de157610100808354040283529160200191610e0c565b820191906000526020600020905b815481529060010190602001808311610def57829003601f168201915b505060095493945050505060026000196101006001841615020190911604610e35579050610793565b805115610f06576009816040516020018083805460018160011615610100020316600290048015610e9d5780601f10610e7b576101008083540402835291820191610e9d565b820191906000526020600020905b815481529060010190602001808311610e89575b5050825160208401908083835b60208310610ec95780518252601f199092019160209182019101610eaa565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050610793565b6009610f11846115ee565b6040516020018083805460018160011615610100020316600290048015610f6f5780601f10610f4d576101008083540402835291820191610f6f565b820191906000526020600020905b815481529060010190602001808311610f5b575b5050825160208401908083835b60208310610f9b5780518252601f199092019160209182019101610f7c565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000610a066002836116c9565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061104c82610a67565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61108e82611006565b6110c95760405162461bcd60e51b815260040180806020018281038252602c8152602001806120b8602c913960400191505060405180910390fd5b6000828152600860209081526040909120825161096692840190611e67565b6000610a06826116d5565b60006110fe82611006565b6111395760405162461bcd60e51b815260040180806020018281038252602c815260200180611fb3602c913960400191505060405180910390fd5b600061114483610a67565b9050806001600160a01b0316846001600160a01b0316148061117f5750836001600160a01b03166111748461082e565b6001600160a01b0316145b8061118f575061118f8185610fd8565b949350505050565b826001600160a01b03166111aa82610a67565b6001600160a01b0316146111ef5760405162461bcd60e51b81526004018080602001828103825260298152602001806120e46029913960400191505060405180910390fd5b6001600160a01b0382166112345760405162461bcd60e51b8152600401808060200182810382526024815260200180611f8f6024913960400191505060405180910390fd5b61123f838383610966565b61124a600082611017565b6001600160a01b038316600090815260016020526040902061126c90826116d9565b506001600160a01b038216600090815260016020526040902061128f90826116e5565b5061129c600282846116f1565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000610a038383611707565b6001600160a01b03821661134a576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b61135381611006565b156113a5576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b6113b160008383610966565b6001600160a01b03821660009081526001602052604090206113d390826116e5565b506113e0600282846116f1565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600061142882610a67565b905061143681600084610966565b611441600083611017565b600082815260086020526040902054600260001961010060018416150201909116041561147f57600082815260086020526040812061147f91611ee5565b6001600160a01b03811660009081526001602052604090206114a190836116d9565b506114ad60028361176b565b5060405182906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60008080806114f98686611777565b9097909650945050505050565b8051610975906009906020840190611e67565b60006115268484846117f2565b90505b9392505050565b61153a83836112ef565b61154760008484846118bc565b6109665760405162461bcd60e51b8152600401808060200182810382526032815260200180611f5d6032913960400191505060405180910390fd5b610975828260405180602001604052806000815250611530565b6115a7848484611197565b6115b3848484846118bc565b610d2b5760405162461bcd60e51b8152600401808060200182810382526032815260200180611f5d6032913960400191505060405180910390fd5b60608161161357506040805180820190915260018152600360fc1b6020820152610793565b8160005b811561162b57600101600a82049150611617565b60608167ffffffffffffffff8111801561164457600080fd5b506040519080825280601f01601f19166020018201604052801561166f576020820181803683370190505b50859350905060001982015b83156116c057600a840660300160f81b8282806001900393508151811061169e57fe5b60200101906001600160f81b031916908160001a905350600a8404935061167b565b50949350505050565b6000610a038383611a24565b5490565b6000610a038383611a3c565b6000610a038383611b02565b600061152684846001600160a01b038516611b4c565b815460009082106117495760405162461bcd60e51b8152600401808060200182810382526022815260200180611f3b6022913960400191505060405180910390fd5b82600001828154811061175857fe5b9060005260206000200154905092915050565b6000610a038383611be3565b8154600090819083106117bb5760405162461bcd60e51b815260040180806020018281038252602281526020018061206a6022913960400191505060405180910390fd5b60008460000184815481106117cc57fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b6000828152600184016020526040812054828161188d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561185257818101518382015260200161183a565b50505050905090810190601f16801561187f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508460000160018203815481106118a057fe5b9060005260206000209060020201600101549150509392505050565b60006118d0846001600160a01b0316611cb7565b6118dc5750600161118f565b60606119ea630a85bd0160e11b6118f1611013565b88878760405160240180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611958578181015183820152602001611940565b50505050905090810190601f1680156119855780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001611f5d603291396001600160a01b0388169190611cf0565b90506000818060200190516020811015611a0357600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b60009081526001919091016020526040902054151590565b60008181526001830160205260408120548015611af85783546000198083019190810190600090879083908110611a6f57fe5b9060005260206000200154905080876000018481548110611a8c57fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080611abc57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610a06565b6000915050610a06565b6000611b0e8383611a24565b611b4457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a06565b506000610a06565b600082815260018401602052604081205480611bb1575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055611529565b82856000016001830381548110611bc457fe5b9060005260206000209060020201600101819055506000915050611529565b60008181526001830160205260408120548015611af85783546000198083019190810190600090879083908110611c1657fe5b9060005260206000209060020201905080876000018481548110611c3657fe5b600091825260208083208454600290930201918255600193840154918401919091558354825289830190526040902090840190558654879080611c7557fe5b6000828152602080822060026000199094019384020182815560019081018390559290935588815289820190925260408220919091559450610a069350505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061118f575050151592915050565b606061152684846000856060611d0585611cb7565b611d56576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611d955780518252601f199092019160209182019101611d76565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611df7576040519150601f19603f3d011682016040523d82523d6000602084013e611dfc565b606091505b50915091508115611e1057915061118f9050565b805115611e205780518082602001fd5b60405162461bcd60e51b815260206004820181815286516024840152865187939192839260440191908501908083836000831561185257818101518382015260200161183a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611ea857805160ff1916838001178555611ed5565b82800160010185558215611ed5579182015b82811115611ed5578251825591602001919060010190611eba565b50611ee1929150611f25565b5090565b50805460018160011615610100020316600290046000825580601f10611f0b5750610a3a565b601f016020900490600052602060002090810190610a3a91905b5b80821115611ee15760008155600101611f2656fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732314d657461646174613a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a26469706673582212207aac8a146cf3ca53bc78b5aeadae2171cab40bb241540e2ddfc2c23b0930752964736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "baseURI", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "exists", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "safeMint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeMint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "setBaseURI", "stateMutability": "nonpayable", "inputs": [{"name": "baseURI", "type": "string", "internalType": "string"}], "outputs": []}, {"type": "function", "name": "setTokenURI", "stateMutability": "nonpayable", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "uri", "type": "string", "internalType": "string"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "tokenByIndex", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenOfOwnerByIndex", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenURI", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"approve(address,uint256)": {"details": "See {IERC721-approve}."}, "balanceOf(address)": {"details": "See {IERC721-balanceOf}."}, "baseURI()": {"details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."}, "getApproved(uint256)": {"details": "See {IERC721-getApproved}."}, "isApprovedForAll(address,address)": {"details": "See {IERC721-isApprovedForAll}."}, "name()": {"details": "See {IERC721Metadata-name}."}, "ownerOf(uint256)": {"details": "See {IERC721-ownerOf}."}, "safeTransferFrom(address,address,uint256)": {"details": "See {IERC721-safeTransferFrom}."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "See {IERC721-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC721-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."}, "symbol()": {"details": "See {IERC721Metadata-symbol}."}, "tokenByIndex(uint256)": {"details": "See {IERC721Enumerable-tokenByIndex}."}, "tokenOfOwnerByIndex(address,uint256)": {"details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."}, "tokenURI(uint256)": {"details": "See {IERC721Metadata-tokenURI}."}, "totalSupply()": {"details": "See {IERC721Enumerable-totalSupply}."}, "transferFrom(address,address,uint256)": {"details": "See {IERC721-transferFrom}."}}, "title": "ERC721Mock This mock just provides a public safeMint, mint, and burn functions for testing purposes", "version": 1}}, "ERC721PausableMock": {"contractName": "ERC721PausableMock", "sourceId": "mocks/ERC721PausableMock.sol", "deploymentBytecode": {"bytecode": "60806040523480156200001157600080fd5b50604051620022fe380380620022fe833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b5060405250839150829050620001b56301ffc9a760e01b6200022c565b8151620001ca906006906020850190620002b1565b508051620001e0906007906020840190620002b1565b50620001f36380ac58cd60e01b6200022c565b62000205635b5e139f60e01b6200022c565b6200021763780e9d6360e01b6200022c565b5050600a805460ff19169055506200034d9050565b6001600160e01b031980821614156200028c576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002f457805160ff191683800117855562000324565b8280016001018555821562000324579182015b828111156200032457825182559160200191906001019062000307565b506200033292915062000336565b5090565b5b8082111562000332576000815560010162000337565b611fa1806200035d6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80634f558e79116100c35780638456cb591161007c5780638456cb591461040157806395d89b4114610409578063a22cb46514610411578063b88d4fde1461043f578063c87b56dd14610505578063e985e9c5146105225761014d565b80634f558e79146103745780634f6ccce7146103915780635c975abb146103ae5780636352211e146103b65780636c0360eb146103d357806370a08231146103db5761014d565b806323b872dd1161011557806323b872dd1461028b5780632f745c59146102c15780633f4ba83a146102ed57806340c10f19146102f557806342842e0e1461032157806342966c68146103575761014d565b806301ffc9a71461015257806306fdde031461018d578063081812fc1461020a578063095ea7b31461024357806318160ddd14610271575b600080fd5b6101796004803603602081101561016857600080fd5b50356001600160e01b031916610550565b604080519115158252519081900360200190f35b610195610573565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101cf5781810151838201526020016101b7565b50505050905090810190601f1680156101fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102276004803603602081101561022057600080fd5b5035610609565b604080516001600160a01b039092168252519081900360200190f35b61026f6004803603604081101561025957600080fd5b506001600160a01b03813516906020013561066b565b005b610279610746565b60408051918252519081900360200190f35b61026f600480360360608110156102a157600080fd5b506001600160a01b03813581169160208101359091169060400135610757565b610279600480360360408110156102d757600080fd5b506001600160a01b0381351690602001356107ae565b61026f6107d9565b61026f6004803603604081101561030b57600080fd5b506001600160a01b0381351690602001356107e3565b61026f6004803603606081101561033757600080fd5b506001600160a01b038135811691602081013590911690604001356107f1565b61026f6004803603602081101561036d57600080fd5b503561080c565b6101796004803603602081101561038a57600080fd5b5035610818565b610279600480360360208110156103a757600080fd5b5035610823565b610179610839565b610227600480360360208110156103cc57600080fd5b5035610842565b61019561086a565b610279600480360360208110156103f157600080fd5b50356001600160a01b03166108cb565b61026f610933565b61019561093b565b61026f6004803603604081101561042757600080fd5b506001600160a01b038135169060200135151561099c565b61026f6004803603608081101561045557600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561049057600080fd5b8201836020820111156104a257600080fd5b803590602001918460018302840111640100000000831117156104c457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610aa1945050505050565b6101956004803603602081101561051b57600080fd5b5035610aff565b6101796004803603604081101561053857600080fd5b506001600160a01b0381358116916020013516610da6565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105ff5780601f106105d4576101008083540402835291602001916105ff565b820191906000526020600020905b8154815290600101906020018083116105e257829003601f168201915b5050505050905090565b600061061482610dd4565b61064f5760405162461bcd60e51b815260040180806020018281038252602c815260200180611e96602c913960400191505060405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061067682610842565b9050806001600160a01b0316836001600160a01b031614156106c95760405162461bcd60e51b8152600401808060200182810382526021815260200180611f1a6021913960400191505060405180910390fd5b806001600160a01b03166106db610de1565b6001600160a01b031614806106fc57506106fc816106f7610de1565b610da6565b6107375760405162461bcd60e51b8152600401808060200182810382526038815260200180611de96038913960400191505060405180910390fd5b6107418383610de5565b505050565b60006107526002610e53565b905090565b610768610762610de1565b82610e5e565b6107a35760405162461bcd60e51b8152600401808060200182810382526031815260200180611f3b6031913960400191505060405180910390fd5b610741838383610f02565b6001600160a01b03821660009081526001602052604081206107d0908361104e565b90505b92915050565b6107e161105a565b565b6107ed82826110f8565b5050565b61074183838360405180602001604052806000815250610aa1565b61081581611226565b50565b60006107d382610dd4565b6000806108316002846112f3565b509392505050565b600a5460ff1690565b60006107d382604051806060016040528060298152602001611e4b602991396002919061130f565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105ff5780601f106105d4576101008083540402835291602001916105ff565b60006001600160a01b0382166109125760405162461bcd60e51b815260040180806020018281038252602a815260200180611e21602a913960400191505060405180910390fd5b6001600160a01b03821660009081526001602052604090206107d390610e53565b6107e1611326565b60078054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105ff5780601f106105d4576101008083540402835291602001916105ff565b6109a4610de1565b6001600160a01b0316826001600160a01b03161415610a0a576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b8060056000610a17610de1565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610a5b610de1565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b610ab2610aac610de1565b83610e5e565b610aed5760405162461bcd60e51b8152600401808060200182810382526031815260200180611f3b6031913960400191505060405180910390fd5b610af9848484846113a7565b50505050565b6060610b0a82610dd4565b610b455760405162461bcd60e51b815260040180806020018281038252602f815260200180611eeb602f913960400191505060405180910390fd5b60008281526008602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610bda5780601f10610baf57610100808354040283529160200191610bda565b820191906000526020600020905b815481529060010190602001808311610bbd57829003601f168201915b505060095493945050505060026000196101006001841615020190911604610c0357905061056e565b805115610cd4576009816040516020018083805460018160011615610100020316600290048015610c6b5780601f10610c49576101008083540402835291820191610c6b565b820191906000526020600020905b815481529060010190602001808311610c57575b5050825160208401908083835b60208310610c975780518252601f199092019160209182019101610c78565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405291505061056e565b6009610cdf846113f9565b6040516020018083805460018160011615610100020316600290048015610d3d5780601f10610d1b576101008083540402835291820191610d3d565b820191906000526020600020905b815481529060010190602001808311610d29575b5050825160208401908083835b60208310610d695780518252601f199092019160209182019101610d4a565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006107d36002836114d4565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610e1a82610842565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006107d3826114e0565b6000610e6982610dd4565b610ea45760405162461bcd60e51b815260040180806020018281038252602c815260200180611dbd602c913960400191505060405180910390fd5b6000610eaf83610842565b9050806001600160a01b0316846001600160a01b03161480610eea5750836001600160a01b0316610edf84610609565b6001600160a01b0316145b80610efa5750610efa8185610da6565b949350505050565b826001600160a01b0316610f1582610842565b6001600160a01b031614610f5a5760405162461bcd60e51b8152600401808060200182810382526029815260200180611ec26029913960400191505060405180910390fd5b6001600160a01b038216610f9f5760405162461bcd60e51b8152600401808060200182810382526024815260200180611d996024913960400191505060405180910390fd5b610faa8383836114e4565b610fb5600082610de5565b6001600160a01b0383166000908152600160205260409020610fd79082611533565b506001600160a01b0382166000908152600160205260409020610ffa908261153f565b506110076002828461154b565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60006107d08383611561565b600a5460ff166110a8576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b600a805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6110db610de1565b604080516001600160a01b039092168252519081900360200190a1565b6001600160a01b038216611153576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b61115c81610dd4565b156111ae576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b6111ba600083836114e4565b6001600160a01b03821660009081526001602052604090206111dc908261153f565b506111e96002828461154b565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600061123182610842565b905061123f816000846114e4565b61124a600083610de5565b600082815260086020526040902054600260001961010060018416150201909116041561128857600082815260086020526040812061128891611cc1565b6001600160a01b03811660009081526001602052604090206112aa9083611533565b506112b66002836115c5565b5060405182906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600080808061130286866115d1565b9097909650945050505050565b600061131c84848461164c565b90505b9392505050565b600a5460ff1615611371576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b600a805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110db610de1565b6113b2848484610f02565b6113be84848484611716565b610af95760405162461bcd60e51b8152600401808060200182810382526032815260200180611d676032913960400191505060405180910390fd5b60608161141e57506040805180820190915260018152600360fc1b602082015261056e565b8160005b811561143657600101600a82049150611422565b60608167ffffffffffffffff8111801561144f57600080fd5b506040519080825280601f01601f19166020018201604052801561147a576020820181803683370190505b50859350905060001982015b83156114cb57600a840660300160f81b828280600190039350815181106114a957fe5b60200101906001600160f81b031916908160001a905350600a84049350611486565b50949350505050565b60006107d0838361187e565b5490565b6114ef838383610741565b6114f7610839565b156107415760405162461bcd60e51b815260040180806020018281038252602b815260200180611d3c602b913960400191505060405180910390fd5b60006107d08383611896565b60006107d0838361195c565b600061131c84846001600160a01b0385166119a6565b815460009082106115a35760405162461bcd60e51b8152600401808060200182810382526022815260200180611d1a6022913960400191505060405180910390fd5b8260000182815481106115b257fe5b9060005260206000200154905092915050565b60006107d08383611a3d565b8154600090819083106116155760405162461bcd60e51b8152600401808060200182810382526022815260200180611e746022913960400191505060405180910390fd5b600084600001848154811061162657fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816116e75760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156116ac578181015183820152602001611694565b50505050905090810190601f1680156116d95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508460000160018203815481106116fa57fe5b9060005260206000209060020201600101549150509392505050565b600061172a846001600160a01b0316611b11565b61173657506001610efa565b6060611844630a85bd0160e11b61174b610de1565b88878760405160240180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156117b257818101518382015260200161179a565b50505050905090810190601f1680156117df5780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001611d67603291396001600160a01b0388169190611b4a565b9050600081806020019051602081101561185d57600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b60009081526001919091016020526040902054151590565b6000818152600183016020526040812054801561195257835460001980830191908101906000908790839081106118c957fe5b90600052602060002001549050808760000184815481106118e657fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061191657fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506107d3565b60009150506107d3565b6000611968838361187e565b61199e575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107d3565b5060006107d3565b600082815260018401602052604081205480611a0b57505060408051808201825283815260208082018481528654600181810189556000898152848120955160029093029095019182559151908201558654868452818801909252929091205561131f565b82856000016001830381548110611a1e57fe5b906000526020600020906002020160010181905550600091505061131f565b600081815260018301602052604081205480156119525783546000198083019190810190600090879083908110611a7057fe5b9060005260206000209060020201905080876000018481548110611a9057fe5b600091825260208083208454600290930201918255600193840154918401919091558354825289830190526040902090840190558654879080611acf57fe5b60008281526020808220600260001990940193840201828155600190810183905592909355888152898201909252604082209190915594506107d39350505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610efa575050151592915050565b606061131c84846000856060611b5f85611b11565b611bb0576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611bef5780518252601f199092019160209182019101611bd0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611c51576040519150601f19603f3d011682016040523d82523d6000602084013e611c56565b606091505b50915091508115611c6a579150610efa9050565b805115611c7a5780518082602001fd5b60405162461bcd60e51b81526020600482018181528651602484015286518793919283926044019190850190808383600083156116ac578181015183820152602001611694565b50805460018160011615610100020316600290046000825580601f10611ce75750610815565b601f01602090049060005260206000209081019061081591905b80821115611d155760008155600101611d01565b509056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732315061757361626c653a20746f6b656e207472616e73666572207768696c65207061757365644552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a264697066735822122024c6bbb9fe37c90a5e20814600ab10c46db2c14096dc1e4583178bb6255d5ab864736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b506004361061014d5760003560e01c80634f558e79116100c35780638456cb591161007c5780638456cb591461040157806395d89b4114610409578063a22cb46514610411578063b88d4fde1461043f578063c87b56dd14610505578063e985e9c5146105225761014d565b80634f558e79146103745780634f6ccce7146103915780635c975abb146103ae5780636352211e146103b65780636c0360eb146103d357806370a08231146103db5761014d565b806323b872dd1161011557806323b872dd1461028b5780632f745c59146102c15780633f4ba83a146102ed57806340c10f19146102f557806342842e0e1461032157806342966c68146103575761014d565b806301ffc9a71461015257806306fdde031461018d578063081812fc1461020a578063095ea7b31461024357806318160ddd14610271575b600080fd5b6101796004803603602081101561016857600080fd5b50356001600160e01b031916610550565b604080519115158252519081900360200190f35b610195610573565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101cf5781810151838201526020016101b7565b50505050905090810190601f1680156101fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102276004803603602081101561022057600080fd5b5035610609565b604080516001600160a01b039092168252519081900360200190f35b61026f6004803603604081101561025957600080fd5b506001600160a01b03813516906020013561066b565b005b610279610746565b60408051918252519081900360200190f35b61026f600480360360608110156102a157600080fd5b506001600160a01b03813581169160208101359091169060400135610757565b610279600480360360408110156102d757600080fd5b506001600160a01b0381351690602001356107ae565b61026f6107d9565b61026f6004803603604081101561030b57600080fd5b506001600160a01b0381351690602001356107e3565b61026f6004803603606081101561033757600080fd5b506001600160a01b038135811691602081013590911690604001356107f1565b61026f6004803603602081101561036d57600080fd5b503561080c565b6101796004803603602081101561038a57600080fd5b5035610818565b610279600480360360208110156103a757600080fd5b5035610823565b610179610839565b610227600480360360208110156103cc57600080fd5b5035610842565b61019561086a565b610279600480360360208110156103f157600080fd5b50356001600160a01b03166108cb565b61026f610933565b61019561093b565b61026f6004803603604081101561042757600080fd5b506001600160a01b038135169060200135151561099c565b61026f6004803603608081101561045557600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561049057600080fd5b8201836020820111156104a257600080fd5b803590602001918460018302840111640100000000831117156104c457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610aa1945050505050565b6101956004803603602081101561051b57600080fd5b5035610aff565b6101796004803603604081101561053857600080fd5b506001600160a01b0381358116916020013516610da6565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105ff5780601f106105d4576101008083540402835291602001916105ff565b820191906000526020600020905b8154815290600101906020018083116105e257829003601f168201915b5050505050905090565b600061061482610dd4565b61064f5760405162461bcd60e51b815260040180806020018281038252602c815260200180611e96602c913960400191505060405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061067682610842565b9050806001600160a01b0316836001600160a01b031614156106c95760405162461bcd60e51b8152600401808060200182810382526021815260200180611f1a6021913960400191505060405180910390fd5b806001600160a01b03166106db610de1565b6001600160a01b031614806106fc57506106fc816106f7610de1565b610da6565b6107375760405162461bcd60e51b8152600401808060200182810382526038815260200180611de96038913960400191505060405180910390fd5b6107418383610de5565b505050565b60006107526002610e53565b905090565b610768610762610de1565b82610e5e565b6107a35760405162461bcd60e51b8152600401808060200182810382526031815260200180611f3b6031913960400191505060405180910390fd5b610741838383610f02565b6001600160a01b03821660009081526001602052604081206107d0908361104e565b90505b92915050565b6107e161105a565b565b6107ed82826110f8565b5050565b61074183838360405180602001604052806000815250610aa1565b61081581611226565b50565b60006107d382610dd4565b6000806108316002846112f3565b509392505050565b600a5460ff1690565b60006107d382604051806060016040528060298152602001611e4b602991396002919061130f565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105ff5780601f106105d4576101008083540402835291602001916105ff565b60006001600160a01b0382166109125760405162461bcd60e51b815260040180806020018281038252602a815260200180611e21602a913960400191505060405180910390fd5b6001600160a01b03821660009081526001602052604090206107d390610e53565b6107e1611326565b60078054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105ff5780601f106105d4576101008083540402835291602001916105ff565b6109a4610de1565b6001600160a01b0316826001600160a01b03161415610a0a576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b8060056000610a17610de1565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610a5b610de1565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b610ab2610aac610de1565b83610e5e565b610aed5760405162461bcd60e51b8152600401808060200182810382526031815260200180611f3b6031913960400191505060405180910390fd5b610af9848484846113a7565b50505050565b6060610b0a82610dd4565b610b455760405162461bcd60e51b815260040180806020018281038252602f815260200180611eeb602f913960400191505060405180910390fd5b60008281526008602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610bda5780601f10610baf57610100808354040283529160200191610bda565b820191906000526020600020905b815481529060010190602001808311610bbd57829003601f168201915b505060095493945050505060026000196101006001841615020190911604610c0357905061056e565b805115610cd4576009816040516020018083805460018160011615610100020316600290048015610c6b5780601f10610c49576101008083540402835291820191610c6b565b820191906000526020600020905b815481529060010190602001808311610c57575b5050825160208401908083835b60208310610c975780518252601f199092019160209182019101610c78565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405291505061056e565b6009610cdf846113f9565b6040516020018083805460018160011615610100020316600290048015610d3d5780601f10610d1b576101008083540402835291820191610d3d565b820191906000526020600020905b815481529060010190602001808311610d29575b5050825160208401908083835b60208310610d695780518252601f199092019160209182019101610d4a565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006107d36002836114d4565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610e1a82610842565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006107d3826114e0565b6000610e6982610dd4565b610ea45760405162461bcd60e51b815260040180806020018281038252602c815260200180611dbd602c913960400191505060405180910390fd5b6000610eaf83610842565b9050806001600160a01b0316846001600160a01b03161480610eea5750836001600160a01b0316610edf84610609565b6001600160a01b0316145b80610efa5750610efa8185610da6565b949350505050565b826001600160a01b0316610f1582610842565b6001600160a01b031614610f5a5760405162461bcd60e51b8152600401808060200182810382526029815260200180611ec26029913960400191505060405180910390fd5b6001600160a01b038216610f9f5760405162461bcd60e51b8152600401808060200182810382526024815260200180611d996024913960400191505060405180910390fd5b610faa8383836114e4565b610fb5600082610de5565b6001600160a01b0383166000908152600160205260409020610fd79082611533565b506001600160a01b0382166000908152600160205260409020610ffa908261153f565b506110076002828461154b565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60006107d08383611561565b600a5460ff166110a8576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b600a805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6110db610de1565b604080516001600160a01b039092168252519081900360200190a1565b6001600160a01b038216611153576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b61115c81610dd4565b156111ae576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b6111ba600083836114e4565b6001600160a01b03821660009081526001602052604090206111dc908261153f565b506111e96002828461154b565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600061123182610842565b905061123f816000846114e4565b61124a600083610de5565b600082815260086020526040902054600260001961010060018416150201909116041561128857600082815260086020526040812061128891611cc1565b6001600160a01b03811660009081526001602052604090206112aa9083611533565b506112b66002836115c5565b5060405182906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600080808061130286866115d1565b9097909650945050505050565b600061131c84848461164c565b90505b9392505050565b600a5460ff1615611371576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b600a805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110db610de1565b6113b2848484610f02565b6113be84848484611716565b610af95760405162461bcd60e51b8152600401808060200182810382526032815260200180611d676032913960400191505060405180910390fd5b60608161141e57506040805180820190915260018152600360fc1b602082015261056e565b8160005b811561143657600101600a82049150611422565b60608167ffffffffffffffff8111801561144f57600080fd5b506040519080825280601f01601f19166020018201604052801561147a576020820181803683370190505b50859350905060001982015b83156114cb57600a840660300160f81b828280600190039350815181106114a957fe5b60200101906001600160f81b031916908160001a905350600a84049350611486565b50949350505050565b60006107d0838361187e565b5490565b6114ef838383610741565b6114f7610839565b156107415760405162461bcd60e51b815260040180806020018281038252602b815260200180611d3c602b913960400191505060405180910390fd5b60006107d08383611896565b60006107d0838361195c565b600061131c84846001600160a01b0385166119a6565b815460009082106115a35760405162461bcd60e51b8152600401808060200182810382526022815260200180611d1a6022913960400191505060405180910390fd5b8260000182815481106115b257fe5b9060005260206000200154905092915050565b60006107d08383611a3d565b8154600090819083106116155760405162461bcd60e51b8152600401808060200182810382526022815260200180611e746022913960400191505060405180910390fd5b600084600001848154811061162657fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816116e75760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156116ac578181015183820152602001611694565b50505050905090810190601f1680156116d95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508460000160018203815481106116fa57fe5b9060005260206000209060020201600101549150509392505050565b600061172a846001600160a01b0316611b11565b61173657506001610efa565b6060611844630a85bd0160e11b61174b610de1565b88878760405160240180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156117b257818101518382015260200161179a565b50505050905090810190601f1680156117df5780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001611d67603291396001600160a01b0388169190611b4a565b9050600081806020019051602081101561185d57600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b60009081526001919091016020526040902054151590565b6000818152600183016020526040812054801561195257835460001980830191908101906000908790839081106118c957fe5b90600052602060002001549050808760000184815481106118e657fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061191657fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506107d3565b60009150506107d3565b6000611968838361187e565b61199e575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107d3565b5060006107d3565b600082815260018401602052604081205480611a0b57505060408051808201825283815260208082018481528654600181810189556000898152848120955160029093029095019182559151908201558654868452818801909252929091205561131f565b82856000016001830381548110611a1e57fe5b906000526020600020906002020160010181905550600091505061131f565b600081815260018301602052604081205480156119525783546000198083019190810190600090879083908110611a7057fe5b9060005260206000209060020201905080876000018481548110611a9057fe5b600091825260208083208454600290930201918255600193840154918401919091558354825289830190526040902090840190558654879080611acf57fe5b60008281526020808220600260001990940193840201828155600190810183905592909355888152898201909252604082209190915594506107d39350505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610efa575050151592915050565b606061131c84846000856060611b5f85611b11565b611bb0576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611bef5780518252601f199092019160209182019101611bd0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611c51576040519150601f19603f3d011682016040523d82523d6000602084013e611c56565b606091505b50915091508115611c6a579150610efa9050565b805115611c7a5780518082602001fd5b60405162461bcd60e51b81526020600482018181528651602484015286518793919283926044019190850190808383600083156116ac578181015183820152602001611694565b50805460018160011615610100020316600290046000825580601f10611ce75750610815565b601f01602090049060005260206000209081019061081591905b80821115611d155760008155600101611d01565b509056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732315061757361626c653a20746f6b656e207472616e73666572207768696c65207061757365644552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a264697066735822122024c6bbb9fe37c90a5e20814600ab10c46db2c14096dc1e4583178bb6255d5ab864736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "event", "name": "Paused", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Unpaused", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "baseURI", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "exists", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "pause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "paused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "tokenByIndex", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenOfOwnerByIndex", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenURI", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "unpause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"approve(address,uint256)": {"details": "See {IERC721-approve}."}, "balanceOf(address)": {"details": "See {IERC721-balanceOf}."}, "baseURI()": {"details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."}, "getApproved(uint256)": {"details": "See {IERC721-getApproved}."}, "isApprovedForAll(address,address)": {"details": "See {IERC721-isApprovedForAll}."}, "name()": {"details": "See {IERC721Metadata-name}."}, "ownerOf(uint256)": {"details": "See {IERC721-ownerOf}."}, "paused()": {"details": "Returns true if the contract is paused, and false otherwise."}, "safeTransferFrom(address,address,uint256)": {"details": "See {IERC721-safeTransferFrom}."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "See {IERC721-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC721-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."}, "symbol()": {"details": "See {IERC721Metadata-symbol}."}, "tokenByIndex(uint256)": {"details": "See {IERC721Enumerable-tokenByIndex}."}, "tokenOfOwnerByIndex(address,uint256)": {"details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."}, "tokenURI(uint256)": {"details": "See {IERC721Metadata-tokenURI}."}, "totalSupply()": {"details": "See {IERC721Enumerable-totalSupply}."}, "transferFrom(address,address,uint256)": {"details": "See {IERC721-transferFrom}."}}, "title": "ERC721PausableMock This mock just provides a public mint, burn and exists functions for testing purposes", "version": 1}}, "ERC721ReceiverMock": {"contractName": "ERC721ReceiverMock", "sourceId": "mocks/ERC721ReceiverMock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b506040516102fd3803806102fd8339818101604052604081101561003357600080fd5b508051602090910151600080549115156401000000000260ff60201b1960e09490941c63ffffffff199093169290921792909216179055610284806100796000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b6100f66004803603608081101561004657600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561008157600080fd5b82018360208201111561009357600080fd5b803590602001918460018302840111640100000000831117156100b557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610113945050505050565b604080516001600160e01b03199092168252519081900360200190f35b60008054640100000000900460ff1615610174576040805162461bcd60e51b815260206004820152601d60248201527f45524337323152656365697665724d6f636b3a20726576657274696e67000000604482015290519081900360640190fd5b7f28fa6e16458f9c24aa59ddd4085264573006dbe30304837873c7deafc702b038858585855a60405180866001600160a01b03168152602001856001600160a01b0316815260200184815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156102015781810151838201526020016101e9565b50505050905090810190601f16801561022e5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a15060005460e01b94935050505056fea26469706673582212206435b4dafd386b9bac2b961474fe89cdc1b00f302f05ed1aac35f7b141d4cbbc64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b6100f66004803603608081101561004657600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561008157600080fd5b82018360208201111561009357600080fd5b803590602001918460018302840111640100000000831117156100b557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610113945050505050565b604080516001600160e01b03199092168252519081900360200190f35b60008054640100000000900460ff1615610174576040805162461bcd60e51b815260206004820152601d60248201527f45524337323152656365697665724d6f636b3a20726576657274696e67000000604482015290519081900360640190fd5b7f28fa6e16458f9c24aa59ddd4085264573006dbe30304837873c7deafc702b038858585855a60405180866001600160a01b03168152602001856001600160a01b0316815260200184815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156102015781810151838201526020016101e9565b50505050905090810190601f16801561022e5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a15060005460e01b94935050505056fea26469706673582212206435b4dafd386b9bac2b961474fe89cdc1b00f302f05ed1aac35f7b141d4cbbc64736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "retval", "type": "bytes4", "internalType": "bytes4"}, {"name": "reverts", "type": "bool", "internalType": "bool"}]}, {"type": "event", "name": "Received", "inputs": [{"name": "operator", "type": "address", "indexed": false, "internalType": "address"}, {"name": "from", "type": "address", "indexed": false, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "data", "type": "bytes", "indexed": false, "internalType": "bytes"}, {"name": "gas", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "onERC721Received", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"onERC721Received(address,address,uint256,bytes)": {"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`."}}, "version": 1}}, "ERC777Mock": {"contractName": "ERC777Mock", "sourceId": "mocks/ERC777Mock.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b506004361061012c5760003560e01c8063959b8c3f116100ad578063d95b637111610071578063d95b6371146106b4578063dd62ed3e146106e2578063fad8b32a14610710578063fc673c4f14610736578063fe9d9303146108745761012c565b8063959b8c3f1461046357806395d89b41146104895780639bd9bbc614610491578063a9059cbb1461054a578063b1f0b5be146105765761012c565b8063313ce567116100f4578063313ce56714610296578063556f0dc7146102b457806356189cb4146102bc57806362ad1b83146102f457806370a082311461043d5761012c565b806306e485381461013157806306fdde0314610189578063095ea7b31461020657806318160ddd1461024657806323b872dd14610260575b600080fd5b61013961091f565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561017557818101518382015260200161015d565b505050509050019250505060405180910390f35b610191610981565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101cb5781810151838201526020016101b3565b50505050905090810190601f1680156101f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102326004803603604081101561021c57600080fd5b506001600160a01b038135169060200135610a0b565b604080519115158252519081900360200190f35b61024e610a2d565b60408051918252519081900360200190f35b6102326004803603606081101561027657600080fd5b506001600160a01b03813581169160208101359091169060400135610a33565b61029e610bb0565b6040805160ff9092168252519081900360200190f35b61024e610bb5565b6102f2600480360360608110156102d257600080fd5b506001600160a01b03813581169160208101359091169060400135610bba565b005b6102f2600480360360a081101561030a57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561034457600080fd5b82018360208201111561035657600080fd5b803590602001918460018302840111600160201b8311171561037757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156103c957600080fd5b8201836020820111156103db57600080fd5b803590602001918460018302840111600160201b831117156103fc57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610bca945050505050565b61024e6004803603602081101561045357600080fd5b50356001600160a01b0316610c2c565b6102f26004803603602081101561047957600080fd5b50356001600160a01b0316610c47565b610191610d93565b6102f2600480360360608110156104a757600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156104d657600080fd5b8201836020820111156104e857600080fd5b803590602001918460018302840111600160201b8311171561050957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610df4945050505050565b6102326004803603604081101561056057600080fd5b506001600160a01b038135169060200135610e19565b6102f26004803603608081101561058c57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156105bb57600080fd5b8201836020820111156105cd57600080fd5b803590602001918460018302840111600160201b831117156105ee57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561064057600080fd5b82018360208201111561065257600080fd5b803590602001918460018302840111600160201b8311171561067357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610ef2945050505050565b610232600480360360408110156106ca57600080fd5b506001600160a01b0381358116916020013516610f04565b61024e600480360360408110156106f857600080fd5b506001600160a01b0381358116916020013516610fa6565b6102f26004803603602081101561072657600080fd5b50356001600160a01b0316610fd1565b6102f26004803603608081101561074c57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561077b57600080fd5b82018360208201111561078d57600080fd5b803590602001918460018302840111600160201b831117156107ae57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561080057600080fd5b82018360208201111561081257600080fd5b803590602001918460018302840111600160201b8311171561083357600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061111d945050505050565b6102f26004803603604081101561088a57600080fd5b81359190810190604081016020820135600160201b8111156108ab57600080fd5b8201836020820111156108bd57600080fd5b803590602001918460018302840111600160201b831117156108de57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611175945050505050565b6060600480548060200260200160405190810160405280929190818152602001828054801561097757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610959575b5050505050905090565b60028054604080516020601f60001961010060018716150201909416859004938401819004810282018101909252828152606093909290918301828280156109775780601f106109df57610100808354040283529160200191610977565b820191906000526020600020905b8154815290600101906020018083116109ed57509395945050505050565b600080610a16611231565b9050610a23818585611235565b5060019392505050565b60015490565b60006001600160a01b038316610a7a5760405162461bcd60e51b81526004018080602001828103825260248152602001806121316024913960400191505060405180910390fd5b6001600160a01b038416610abf5760405162461bcd60e51b81526004018080602001828103825260268152602001806121aa6026913960400191505060405180910390fd5b6000610ac9611231565b9050610af7818686866040518060200160405280600081525060405180602001604052806000815250611321565b610b2381868686604051806020016040528060008152506040518060200160405280600081525061154e565b610b778582610b7286604051806060016040528060298152602001612181602991396001600160a01b03808c166000908152600860209081526040808320938b16835292905220549190611767565b611235565b610ba581868686604051806020016040528060008152506040518060200160405280600081525060006117fe565b506001949350505050565b601290565b600190565b610bc5838383611235565b505050565b610bdb610bd5611231565b86610f04565b610c165760405162461bcd60e51b815260040180806020018281038252602c815260200180612155602c913960400191505060405180910390fd5b610c2585858585856001611a83565b5050505050565b6001600160a01b031660009081526020819052604090205490565b806001600160a01b0316610c59611231565b6001600160a01b03161415610c9f5760405162461bcd60e51b815260040180806020018281038252602481526020018061209f6024913960400191505060405180910390fd5b6001600160a01b03811660009081526005602052604090205460ff1615610d025760076000610ccc611231565b6001600160a01b03908116825260208083019390935260409182016000908120918516815292529020805460ff19169055610d49565b600160066000610d10611231565b6001600160a01b03908116825260208083019390935260409182016000908120918616815292529020805460ff19169115159190911790555b610d51611231565b6001600160a01b0316816001600160a01b03167ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f960405160405180910390a350565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109775780601f106109df57610100808354040283529160200191610977565b610bc5610dff611231565b848484604051806020016040528060008152506001611a83565b60006001600160a01b038316610e605760405162461bcd60e51b81526004018080602001828103825260248152602001806121316024913960400191505060405180910390fd5b6000610e6a611231565b9050610e98818286866040518060200160405280600081525060405180602001604052806000815250611321565b610ec481828686604051806020016040528060008152506040518060200160405280600081525061154e565b610a2381828686604051806020016040528060008152506040518060200160405280600081525060006117fe565b610efe84848484611b5a565b50505050565b6000816001600160a01b0316836001600160a01b03161480610f6f57506001600160a01b03831660009081526005602052604090205460ff168015610f6f57506001600160a01b0380831660009081526007602090815260408083209387168352929052205460ff16155b80610f9f57506001600160a01b0380831660009081526006602090815260408083209387168352929052205460ff165b9392505050565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b610fd9611231565b6001600160a01b0316816001600160a01b031614156110295760405162461bcd60e51b81526004018080602001828103825260218152602001806120c36021913960400191505060405180910390fd5b6001600160a01b03811660009081526005602052604090205460ff161561109557600160076000611058611231565b6001600160a01b03908116825260208083019390935260409182016000908120918616815292529020805460ff19169115159190911790556110d3565b600660006110a1611231565b6001600160a01b03908116825260208083019390935260409182016000908120918516815292529020805460ff191690555b6110db611231565b6001600160a01b0316816001600160a01b03167f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa160405160405180910390a350565b61112e611128611231565b85610f04565b6111695760405162461bcd60e51b815260040180806020018281038252602c815260200180612155602c913960400191505060405180910390fd5b610efe84848484611d92565b611197611180611231565b838360405180602001604052806000815250611d92565b5050565b600082820183811015610f9f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061122957508115155b949350505050565b3390565b6001600160a01b03831661127a5760405162461bcd60e51b815260040180806020018281038252602581526020018061200f6025913960400191505060405180910390fd5b6001600160a01b0382166112bf5760405162461bcd60e51b81526004018080602001828103825260238152602001806121f36023913960400191505060405180910390fd5b6001600160a01b03808416600081815260086020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6040805163555ddc6560e11b81526001600160a01b03871660048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe89560248201529051600091731820a4b7618bde71dce8cdc73aab6c95905fad249163aabbb8ca91604480820192602092909190829003018186803b1580156113a557600080fd5b505afa1580156113b9573d6000803e3d6000fd5b505050506040513d60208110156113cf57600080fd5b505190506001600160a01b0381161561154557806001600160a01b03166375ab97828888888888886040518763ffffffff1660e01b815260040180876001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b031681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561147a578181015183820152602001611462565b50505050905090810190601f1680156114a75780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156114da5781810151838201526020016114c2565b50505050905090810190601f1680156115075780820380516001836020036101000a031916815260200191505b5098505050505050505050600060405180830381600087803b15801561152c57600080fd5b505af1158015611540573d6000803e3d6000fd5b505050505b50505050505050565b61155a86868686610efe565b61159783604051806060016040528060278152602001612056602791396001600160a01b0388166000908152602081905260409020549190611767565b6001600160a01b0380871660009081526020819052604080822093909355908616815220546115c6908461119b565b600080866001600160a01b03166001600160a01b0316815260200190815260200160002081905550836001600160a01b0316856001600160a01b0316876001600160a01b03167f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc82614677987868686604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561167757818101518382015260200161165f565b50505050905090810190601f1680156116a45780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156116d75781810151838201526020016116bf565b50505050905090810190601f1680156117045780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a4836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3505050505050565b600081848411156117f65760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156117bb5781810151838201526020016117a3565b50505050905090810190601f1680156117e85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6040805163555ddc6560e11b81526001600160a01b03871660048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248201529051600091731820a4b7618bde71dce8cdc73aab6c95905fad249163aabbb8ca91604480820192602092909190829003018186803b15801561188257600080fd5b505afa158015611896573d6000803e3d6000fd5b505050506040513d60208110156118ac57600080fd5b505190506001600160a01b03811615611a2557806001600160a01b03166223de298989898989896040518763ffffffff1660e01b815260040180876001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b031681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561195657818101518382015260200161193e565b50505050905090810190601f1680156119835780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156119b657818101518382015260200161199e565b50505050905090810190601f1680156119e35780820380516001836020036101000a031916815260200191505b5098505050505050505050600060405180830381600087803b158015611a0857600080fd5b505af1158015611a1c573d6000803e3d6000fd5b50505050611a79565b8115611a7957611a3d866001600160a01b03166111f5565b15611a795760405162461bcd60e51b815260040180806020018281038252604d8152602001806120e4604d913960600191505060405180910390fd5b5050505050505050565b6001600160a01b038616611ac85760405162461bcd60e51b81526004018080602001828103825260228152602001806120346022913960400191505060405180910390fd5b6001600160a01b038516611b23576040805162461bcd60e51b815260206004820181905260248201527f4552433737373a2073656e6420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b6000611b2d611231565b9050611b3d818888888888611321565b611b4b81888888888861154e565b611545818888888888886117fe565b6001600160a01b038416611bb5576040805162461bcd60e51b815260206004820181905260248201527f4552433737373a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b6000611bbf611231565b9050611bce8160008787610efe565b600154611bdb908561119b565b6001556001600160a01b038516600090815260208190526040902054611c01908561119b565b6001600160a01b038616600090815260208190526040812091909155611c2e9082908787878760016117fe565b846001600160a01b0316816001600160a01b03167f2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d868686604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015611cad578181015183820152602001611c95565b50505050905090810190601f168015611cda5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611d0d578181015183820152602001611cf5565b50505050905090810190601f168015611d3a5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a36040805185815290516001600160a01b038716916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050505050565b6001600160a01b038416611dd75760405162461bcd60e51b815260040180806020018281038252602281526020018061207d6022913960400191505060405180910390fd5b6000611de1611231565b9050611df08186600087610efe565b611dff81866000878787611321565b611e3c846040518060600160405280602381526020016121d0602391396001600160a01b0388166000908152602081905260409020549190611767565b6001600160a01b038616600090815260208190526040902055600154611e629085611fcc565b600181905550846001600160a01b0316816001600160a01b03167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a4098868686604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015611ee7578181015183820152602001611ecf565b50505050905090810190601f168015611f145780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611f47578181015183820152602001611f2f565b50505050905090810190601f168015611f745780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a36040805185815290516000916001600160a01b038816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050505050565b6000610f9f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061176756fe4552433737373a20617070726f76652066726f6d20746865207a65726f20616464726573734552433737373a2073656e642066726f6d20746865207a65726f20616464726573734552433737373a207472616e7366657220616d6f756e7420657863656564732062616c616e63654552433737373a206275726e2066726f6d20746865207a65726f20616464726573734552433737373a20617574686f72697a696e672073656c66206173206f70657261746f724552433737373a207265766f6b696e672073656c66206173206f70657261746f724552433737373a20746f6b656e20726563697069656e7420636f6e747261637420686173206e6f20696d706c656d656e74657220666f7220455243373737546f6b656e73526563697069656e744552433737373a207472616e7366657220746f20746865207a65726f20616464726573734552433737373a2063616c6c6572206973206e6f7420616e206f70657261746f7220666f7220686f6c6465724552433737373a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654552433737373a207472616e736665722066726f6d20746865207a65726f20616464726573734552433737373a206275726e20616d6f756e7420657863656564732062616c616e63654552433737373a20617070726f766520746f20746865207a65726f2061646472657373a2646970667358221220c602c858dce8cb3beb583e3035d05f8cecd3a88c18be5e7f70040acaa27f41bb64736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "initialHolder", "type": "address", "internalType": "address"}, {"name": "initialBalance", "type": "uint256", "internalType": "uint256"}, {"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}, {"name": "defaultOperators", "type": "address[]", "internalType": "address[]"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "spender", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "AuthorizedOperator", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenHolder", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "Burned", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "amount", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "data", "type": "bytes", "indexed": false, "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "indexed": false, "internalType": "bytes"}], "anonymous": false}, {"type": "event", "name": "Minted", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "amount", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "data", "type": "bytes", "indexed": false, "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "indexed": false, "internalType": "bytes"}], "anonymous": false}, {"type": "event", "name": "RevokedOperator", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenHolder", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "Sent", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "amount", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "data", "type": "bytes", "indexed": false, "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "indexed": false, "internalType": "bytes"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "holder", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "approveInternal", "stateMutability": "nonpayable", "inputs": [{"name": "holder", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "authorizeOperator", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "tokenHolder", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "decimals", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "defaultOperators", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address[]", "internalType": "address[]"}]}, {"type": "function", "name": "granularity", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "isOperatorFor", "stateMutability": "view", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "tokenHolder", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mintInternal", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "userData", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "operatorBurn", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "operatorSend", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "revokeOperator", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "send", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "holder", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}. Note that operator and allowance concepts are orthogonal: operators may not have allowance, and accounts with allowance may not be operators themselves."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Note that accounts cannot have allowance issued by their operators."}, "authorizeOperator(address)": {"details": "See {IERC777-authorizeOperator}."}, "balanceOf(address)": {"details": "Returns the amount of tokens owned by an account (`tokenHolder`)."}, "burn(uint256,bytes)": {"details": "See {IERC777-burn}. Also emits a {IERC20-Transfer} event for ERC20 compatibility."}, "decimals()": {"details": "See {ERC20-decimals}. Always returns 18, as per the [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility)."}, "defaultOperators()": {"details": "See {IERC777-defaultOperators}."}, "granularity()": {"details": "See {IERC777-granularity}. This implementation always returns `1`."}, "isOperatorFor(address,address)": {"details": "See {IERC777-isOperatorFor}."}, "name()": {"details": "See {IERC777-name}."}, "operatorBurn(address,uint256,bytes,bytes)": {"details": "See {IERC777-operatorBurn}. Emits {Burned} and {IERC20-Transfer} events."}, "operatorSend(address,address,uint256,bytes,bytes)": {"details": "See {IERC777-operatorSend}. Emits {Sent} and {IERC20-Transfer} events."}, "revokeOperator(address)": {"details": "See {IERC777-revokeOperator}."}, "send(address,uint256,bytes)": {"details": "See {IERC777-send}. Also emits a {IERC20-Transfer} event for ERC20 compatibility."}, "symbol()": {"details": "See {IERC777-symbol}."}, "totalSupply()": {"details": "See {IERC777-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient} interface if it is a contract. Also emits a {Sent} event."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Note that operator and allowance concepts are orthogonal: operators cannot call `transferFrom` (unless they have allowance), and accounts with allowance cannot call `operatorSend` (unless they are operators). Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events."}}, "version": 1}}, "ERC777SenderRecipientMock": {"contractName": "ERC777SenderRecipientMock", "sourceId": "mocks/ERC777SenderRecipientMock.sol", "deploymentBytecode": {"bytecode": "60806040526001805462010000600160b01b031916751820a4b7618bde71dce8cdc73aab6c95905fad24000017905534801561003a57600080fd5b50610da58061004a6000396000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c806375ab97821161007157806375ab97821461036f578063a8badaa514610455578063c97e18fc1461047b578063d2de64741461049a578063e0eb2180146104c0578063e1ecbd30146104e6576100a8565b806223de29146100ad578063249cb3fa146101955780633836ef89146101d357806344d17187146102975780634e4ae5a514610350575b600080fd5b610193600480360360c08110156100c357600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a081016080820135600160201b81111561010557600080fd5b82018360208201111561011757600080fd5b803590602001918460018302840111600160201b8311171561013857600080fd5b919390929091602081019035600160201b81111561015557600080fd5b82018360208201111561016757600080fd5b803590602001918460018302840111600160201b8311171561018857600080fd5b50909250905061050c565b005b6101c1600480360360408110156101ab57600080fd5b50803590602001356001600160a01b031661072a565b60408051918252519081900360200190f35b610193600480360360808110156101e957600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561022357600080fd5b82018360208201111561023557600080fd5b803590602001918460018302840111600160201b8311171561025657600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061079f945050505050565b610193600480360360608110156102ad57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156102dc57600080fd5b8201836020820111156102ee57600080fd5b803590602001918460018302840111600160201b8311171561030f57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061087e945050505050565b6101936004803603602081101561036657600080fd5b5035151561094c565b610193600480360360c081101561038557600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a081016080820135600160201b8111156103c757600080fd5b8201836020820111156103d957600080fd5b803590602001918460018302840111600160201b831117156103fa57600080fd5b919390929091602081019035600160201b81111561041757600080fd5b82018360208201111561042957600080fd5b803590602001918460018302840111600160201b8311171561044a57600080fd5b50909250905061095f565b6101936004803603602081101561046b57600080fd5b50356001600160a01b0316610b78565b6101936004803603602081101561049157600080fd5b50351515610c14565b610193600480360360208110156104b057600080fd5b50356001600160a01b0316610c2e565b610193600480360360208110156104d657600080fd5b50356001600160a01b0316610c77565b610193600480360360208110156104fc57600080fd5b50356001600160a01b0316610cbc565b600154610100900460ff161561052157600080fd5b600061052b610d3d565b90506000816001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561057c57600080fd5b505afa158015610590573d6000803e3d6000fd5b505050506040513d60208110156105a657600080fd5b5051604080516370a0823160e01b81526001600160a01b038b811660048301529151929350600092918516916370a0823191602480820192602092909190829003018186803b1580156105f857600080fd5b505afa15801561060c573d6000803e3d6000fd5b505050506040513d602081101561062257600080fd5b810190808051906020019092919050505090507f47e915878c47f3ec4d7ff646a2becb229f64fd2abe4d2b5e2bb4275b0cf50d4e8b8b8b8b8b8b8b8b8b8b8b604051808c6001600160a01b031681526020018b6001600160a01b031681526020018a6001600160a01b031681526020018981526020018060200180602001866001600160a01b0316815260200185815260200184815260200183810383528a8a82818152602001925080828437600083820152601f01601f191690910184810383528881526020019050888880828437600083820152604051601f909101601f19169092018290039f50909d5050505050505050505050505050a15050505050505050505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff16610759576000610798565b604051602001808073455243313832305f4143434550545f4d4147494360601b8152506014019050604051602081830303815290604052805190602001205b9392505050565b836001600160a01b0316639bd9bbc68484846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156108125781810151838201526020016107fa565b50505050905090810190601f16801561083f5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561086057600080fd5b505af1158015610874573d6000803e3d6000fd5b5050505050505050565b6040805163fe9d930360e01b815260048101848152602482019283528351604483015283516001600160a01b0387169363fe9d9303938793879390929160640190602085019080838360005b838110156108e25781810151838201526020016108ca565b50505050905090810190601f16801561090f5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561092f57600080fd5b505af1158015610943573d6000803e3d6000fd5b50505050505050565b6001805460ff1916911515919091179055565b60015460ff161561096f57600080fd5b6000610979610d3d565b90506000816001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156109ca57600080fd5b505afa1580156109de573d6000803e3d6000fd5b505050506040513d60208110156109f457600080fd5b5051604080516370a0823160e01b81526001600160a01b038b811660048301529151929350600092918516916370a0823191602480820192602092909190829003018186803b158015610a4657600080fd5b505afa158015610a5a573d6000803e3d6000fd5b505050506040513d6020811015610a7057600080fd5b810190808051906020019092919050505090507faa3e88aca472e90221daf7d3d601abafb62b120319089d7a2c2f63588da855298b8b8b8b8b8b8b8b8b8b8b604051808c6001600160a01b031681526020018b6001600160a01b031681526020018a6001600160a01b031681526020018981526020018060200180602001866001600160a01b0316815260200185815260200184815260200183810383528a8a82818152602001925080828437600083820152601f01601f191690910184810383528881526020019050888880828437600083820152604051601f909101601f19169092018290039f50909d5050505050505050505050505050a15050505050505050505050565b600154604080516329965a1d60e01b81523060048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248201526001600160a01b038481166044830152915162010000909304909116916329965a1d9160648082019260009290919082900301818387803b158015610bf957600080fd5b505af1158015610c0d573d6000803e3d6000fd5b5050505050565b600180549115156101000261ff0019909216919091179055565b610c587f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe89582610d41565b306001600160a01b038216811415610c7357610c7381610cbc565b5050565b610ca17fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b82610d41565b306001600160a01b038216811415610c7357610c7381610b78565b600154604080516329965a1d60e01b81523060048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe89560248201526001600160a01b038481166044830152915162010000909304909116916329965a1d9160648082019260009290919082900301818387803b158015610bf957600080fd5b3390565b6000918252602082815260408084206001600160a01b0390931684529190529020805460ff1916600117905556fea2646970667358221220c5cf08d2ae4d2cbeb338f0f5dccfe255fcf11b98f1d2e5a9a2116d9fa8784c0264736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100a85760003560e01c806375ab97821161007157806375ab97821461036f578063a8badaa514610455578063c97e18fc1461047b578063d2de64741461049a578063e0eb2180146104c0578063e1ecbd30146104e6576100a8565b806223de29146100ad578063249cb3fa146101955780633836ef89146101d357806344d17187146102975780634e4ae5a514610350575b600080fd5b610193600480360360c08110156100c357600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a081016080820135600160201b81111561010557600080fd5b82018360208201111561011757600080fd5b803590602001918460018302840111600160201b8311171561013857600080fd5b919390929091602081019035600160201b81111561015557600080fd5b82018360208201111561016757600080fd5b803590602001918460018302840111600160201b8311171561018857600080fd5b50909250905061050c565b005b6101c1600480360360408110156101ab57600080fd5b50803590602001356001600160a01b031661072a565b60408051918252519081900360200190f35b610193600480360360808110156101e957600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561022357600080fd5b82018360208201111561023557600080fd5b803590602001918460018302840111600160201b8311171561025657600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061079f945050505050565b610193600480360360608110156102ad57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156102dc57600080fd5b8201836020820111156102ee57600080fd5b803590602001918460018302840111600160201b8311171561030f57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061087e945050505050565b6101936004803603602081101561036657600080fd5b5035151561094c565b610193600480360360c081101561038557600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a081016080820135600160201b8111156103c757600080fd5b8201836020820111156103d957600080fd5b803590602001918460018302840111600160201b831117156103fa57600080fd5b919390929091602081019035600160201b81111561041757600080fd5b82018360208201111561042957600080fd5b803590602001918460018302840111600160201b8311171561044a57600080fd5b50909250905061095f565b6101936004803603602081101561046b57600080fd5b50356001600160a01b0316610b78565b6101936004803603602081101561049157600080fd5b50351515610c14565b610193600480360360208110156104b057600080fd5b50356001600160a01b0316610c2e565b610193600480360360208110156104d657600080fd5b50356001600160a01b0316610c77565b610193600480360360208110156104fc57600080fd5b50356001600160a01b0316610cbc565b600154610100900460ff161561052157600080fd5b600061052b610d3d565b90506000816001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561057c57600080fd5b505afa158015610590573d6000803e3d6000fd5b505050506040513d60208110156105a657600080fd5b5051604080516370a0823160e01b81526001600160a01b038b811660048301529151929350600092918516916370a0823191602480820192602092909190829003018186803b1580156105f857600080fd5b505afa15801561060c573d6000803e3d6000fd5b505050506040513d602081101561062257600080fd5b810190808051906020019092919050505090507f47e915878c47f3ec4d7ff646a2becb229f64fd2abe4d2b5e2bb4275b0cf50d4e8b8b8b8b8b8b8b8b8b8b8b604051808c6001600160a01b031681526020018b6001600160a01b031681526020018a6001600160a01b031681526020018981526020018060200180602001866001600160a01b0316815260200185815260200184815260200183810383528a8a82818152602001925080828437600083820152601f01601f191690910184810383528881526020019050888880828437600083820152604051601f909101601f19169092018290039f50909d5050505050505050505050505050a15050505050505050505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff16610759576000610798565b604051602001808073455243313832305f4143434550545f4d4147494360601b8152506014019050604051602081830303815290604052805190602001205b9392505050565b836001600160a01b0316639bd9bbc68484846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156108125781810151838201526020016107fa565b50505050905090810190601f16801561083f5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561086057600080fd5b505af1158015610874573d6000803e3d6000fd5b5050505050505050565b6040805163fe9d930360e01b815260048101848152602482019283528351604483015283516001600160a01b0387169363fe9d9303938793879390929160640190602085019080838360005b838110156108e25781810151838201526020016108ca565b50505050905090810190601f16801561090f5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561092f57600080fd5b505af1158015610943573d6000803e3d6000fd5b50505050505050565b6001805460ff1916911515919091179055565b60015460ff161561096f57600080fd5b6000610979610d3d565b90506000816001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156109ca57600080fd5b505afa1580156109de573d6000803e3d6000fd5b505050506040513d60208110156109f457600080fd5b5051604080516370a0823160e01b81526001600160a01b038b811660048301529151929350600092918516916370a0823191602480820192602092909190829003018186803b158015610a4657600080fd5b505afa158015610a5a573d6000803e3d6000fd5b505050506040513d6020811015610a7057600080fd5b810190808051906020019092919050505090507faa3e88aca472e90221daf7d3d601abafb62b120319089d7a2c2f63588da855298b8b8b8b8b8b8b8b8b8b8b604051808c6001600160a01b031681526020018b6001600160a01b031681526020018a6001600160a01b031681526020018981526020018060200180602001866001600160a01b0316815260200185815260200184815260200183810383528a8a82818152602001925080828437600083820152601f01601f191690910184810383528881526020019050888880828437600083820152604051601f909101601f19169092018290039f50909d5050505050505050505050505050a15050505050505050505050565b600154604080516329965a1d60e01b81523060048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248201526001600160a01b038481166044830152915162010000909304909116916329965a1d9160648082019260009290919082900301818387803b158015610bf957600080fd5b505af1158015610c0d573d6000803e3d6000fd5b5050505050565b600180549115156101000261ff0019909216919091179055565b610c587f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe89582610d41565b306001600160a01b038216811415610c7357610c7381610cbc565b5050565b610ca17fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b82610d41565b306001600160a01b038216811415610c7357610c7381610b78565b600154604080516329965a1d60e01b81523060048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe89560248201526001600160a01b038481166044830152915162010000909304909116916329965a1d9160648082019260009290919082900301818387803b158015610bf957600080fd5b3390565b6000918252602082815260408084206001600160a01b0390931684529190529020805460ff1916600117905556fea2646970667358221220c5cf08d2ae4d2cbeb338f0f5dccfe255fcf11b98f1d2e5a9a2116d9fa8784c0264736f6c634300060c0033"}, "abi": [{"type": "event", "name": "TokensReceivedCalled", "inputs": [{"name": "operator", "type": "address", "indexed": false, "internalType": "address"}, {"name": "from", "type": "address", "indexed": false, "internalType": "address"}, {"name": "to", "type": "address", "indexed": false, "internalType": "address"}, {"name": "amount", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "data", "type": "bytes", "indexed": false, "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "indexed": false, "internalType": "bytes"}, {"name": "token", "type": "address", "indexed": false, "internalType": "address"}, {"name": "fromBalance", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "toBalance", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "TokensToSendCalled", "inputs": [{"name": "operator", "type": "address", "indexed": false, "internalType": "address"}, {"name": "from", "type": "address", "indexed": false, "internalType": "address"}, {"name": "to", "type": "address", "indexed": false, "internalType": "address"}, {"name": "amount", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "data", "type": "bytes", "indexed": false, "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "indexed": false, "internalType": "bytes"}, {"name": "token", "type": "address", "indexed": false, "internalType": "address"}, {"name": "fromBalance", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "toBalance", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "token", "type": "address", "internalType": "contract IERC777"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "canImplementInterfaceForAddress", "stateMutability": "view", "inputs": [{"name": "interfaceHash", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "recipientFor", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "registerRecipient", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "registerSender", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "send", "stateMutability": "nonpayable", "inputs": [{"name": "token", "type": "address", "internalType": "contract IERC777"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "senderFor", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "setShouldRevertReceive", "stateMutability": "nonpayable", "inputs": [{"name": "shouldRevert", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "setShouldRevertSend", "stateMutability": "nonpayable", "inputs": [{"name": "shouldRevert", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "tokensReceived", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "userData", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "tokensToSend", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "userData", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {"canImplementInterfaceForAddress(bytes32,address)": {"notice": "See {IERC1820Implementer-canImplementInterfaceForAddress}."}}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"tokensReceived(address,address,address,uint256,bytes,bytes)": {"details": "Called by an {IERC777} token contract whenever tokens are being moved or created into a registered account (`to`). The type of operation is conveyed by `from` being the zero address or not. This call occurs _after_ the token contract's state is updated, so {IERC777-balanceOf}, etc., can be used to query the post-operation state. This function may revert to prevent the operation from being executed."}, "tokensToSend(address,address,address,uint256,bytes,bytes)": {"details": "Called by an {IERC777} token contract whenever a registered holder's (`from`) tokens are about to be moved or destroyed. The type of operation is conveyed by `to` being the zero address or not. This call occurs _before_ the token contract's state is updated, so {IERC777-balanceOf}, etc., can be used to query the pre-operation state. This function may revert to prevent the operation from being executed."}}, "version": 1}}, "EnumerableMapMock": {"contractName": "EnumerableMapMock", "sourceId": "mocks/EnumerableMapMock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b50610628806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631f7b6d32146100675780632f30c6f6146100815780634cc82215146100af5780639507d39a146100cc578063c34052e014610105578063e0886f9014610136575b600080fd5b61006f610174565b60408051918252519081900360200190f35b6100ad6004803603604081101561009757600080fd5b50803590602001356001600160a01b0316610185565b005b6100ad600480360360208110156100c557600080fd5b50356101d0565b6100e9600480360360208110156100e257600080fd5b5035610219565b604080516001600160a01b039092168252519081900360200190f35b6101226004803603602081101561011b57600080fd5b503561022b565b604080519115158252519081900360200190f35b6101536004803603602081101561014c57600080fd5b5035610237565b604080519283526001600160a01b0390911660208301528051918290030190f35b6000610180600061024d565b905090565b6000610192818484610258565b60408051821515815290519192507fed9840e0775590557ad736875d96c95cf1458b766335f74339951a32c82a9e33919081900360200190a1505050565b60006101dc8183610278565b60408051821515815290519192507fed9840e0775590557ad736875d96c95cf1458b766335f74339951a32c82a9e33919081900360200190a15050565b60006102258183610284565b92915050565b60006102258183610290565b600080610244818461029c565b91509150915091565b6000610225826102b8565b600061026e84846001600160a01b0385166102bc565b90505b9392505050565b60006102718383610353565b60006102718383610431565b60006102718383610473565b60008080806102ab868661048b565b9097909650945050505050565b5490565b600082815260018401602052604081205480610321575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055610271565b8285600001600183038154811061033457fe5b9060005260206000209060020201600101819055506000915050610271565b60008181526001830160205260408120548015610427578354600019808301919081019060009087908390811061038657fe5b90600052602060002090600202019050808760000184815481106103a657fe5b6000918252602080832084546002909302019182556001938401549184019190915583548252898301905260409020908401905586548790806103e557fe5b60008281526020808220600260001990940193840201828155600190810183905592909355888152898201909252604082209190915594506102259350505050565b6000915050610225565b600061027183836040518060400160405280601e81526020017f456e756d657261626c654d61703a206e6f6e6578697374656e74206b65790000815250610506565b60009081526001919091016020526040902054151590565b8154600090819083106104cf5760405162461bcd60e51b81526004018080602001828103825260228152602001806105d16022913960400191505060405180910390fd5b60008460000184815481106104e057fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816105a15760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561056657818101518382015260200161054e565b50505050905090810190601f1680156105935780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508460000160018203815481106105b457fe5b906000526020600020906002020160010154915050939250505056fe456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e6473a2646970667358221220fa970ee3b1362d3f9277d54eea34136228613a0727e92c93bcf04fba2904bd0264736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100625760003560e01c80631f7b6d32146100675780632f30c6f6146100815780634cc82215146100af5780639507d39a146100cc578063c34052e014610105578063e0886f9014610136575b600080fd5b61006f610174565b60408051918252519081900360200190f35b6100ad6004803603604081101561009757600080fd5b50803590602001356001600160a01b0316610185565b005b6100ad600480360360208110156100c557600080fd5b50356101d0565b6100e9600480360360208110156100e257600080fd5b5035610219565b604080516001600160a01b039092168252519081900360200190f35b6101226004803603602081101561011b57600080fd5b503561022b565b604080519115158252519081900360200190f35b6101536004803603602081101561014c57600080fd5b5035610237565b604080519283526001600160a01b0390911660208301528051918290030190f35b6000610180600061024d565b905090565b6000610192818484610258565b60408051821515815290519192507fed9840e0775590557ad736875d96c95cf1458b766335f74339951a32c82a9e33919081900360200190a1505050565b60006101dc8183610278565b60408051821515815290519192507fed9840e0775590557ad736875d96c95cf1458b766335f74339951a32c82a9e33919081900360200190a15050565b60006102258183610284565b92915050565b60006102258183610290565b600080610244818461029c565b91509150915091565b6000610225826102b8565b600061026e84846001600160a01b0385166102bc565b90505b9392505050565b60006102718383610353565b60006102718383610431565b60006102718383610473565b60008080806102ab868661048b565b9097909650945050505050565b5490565b600082815260018401602052604081205480610321575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055610271565b8285600001600183038154811061033457fe5b9060005260206000209060020201600101819055506000915050610271565b60008181526001830160205260408120548015610427578354600019808301919081019060009087908390811061038657fe5b90600052602060002090600202019050808760000184815481106103a657fe5b6000918252602080832084546002909302019182556001938401549184019190915583548252898301905260409020908401905586548790806103e557fe5b60008281526020808220600260001990940193840201828155600190810183905592909355888152898201909252604082209190915594506102259350505050565b6000915050610225565b600061027183836040518060400160405280601e81526020017f456e756d657261626c654d61703a206e6f6e6578697374656e74206b65790000815250610506565b60009081526001919091016020526040902054151590565b8154600090819083106104cf5760405162461bcd60e51b81526004018080602001828103825260228152602001806105d16022913960400191505060405180910390fd5b60008460000184815481106104e057fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816105a15760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561056657818101518382015260200161054e565b50505050905090810190601f1680156105935780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508460000160018203815481106105b457fe5b906000526020600020906002020160010154915050939250505056fe456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e6473a2646970667358221220fa970ee3b1362d3f9277d54eea34136228613a0727e92c93bcf04fba2904bd0264736f6c634300060c0033"}, "abi": [{"type": "event", "name": "OperationResult", "inputs": [{"name": "result", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "function", "name": "at", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "key", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "contains", "stateMutability": "view", "inputs": [{"name": "key", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "get", "stateMutability": "view", "inputs": [{"name": "key", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "length", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "remove", "stateMutability": "nonpayable", "inputs": [{"name": "key", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "set", "stateMutability": "nonpayable", "inputs": [{"name": "key", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "address", "internalType": "address"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "EnumerableAddressSetMock": {"contractName": "EnumerableAddressSetMock", "sourceId": "mocks/EnumerableSetMock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b50610400806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630a3b0a4f1461005c5780631f7b6d321461008457806329092d0e1461009e5780635dbe47e8146100c4578063e0886f90146100fe575b600080fd5b6100826004803603602081101561007257600080fd5b50356001600160a01b0316610137565b005b61008c610180565b60408051918252519081900360200190f35b610082600480360360208110156100b457600080fd5b50356001600160a01b0316610191565b6100ea600480360360208110156100da57600080fd5b50356001600160a01b031661019d565b604080519115158252519081900360200190f35b61011b6004803603602081101561011457600080fd5b50356101af565b604080516001600160a01b039092168252519081900360200190f35b600061014381836101bb565b60408051821515815290519192507fed9840e0775590557ad736875d96c95cf1458b766335f74339951a32c82a9e33919081900360200190a15050565b600061018c60006101d7565b905090565b600061014381836101e2565b60006101a981836101f7565b92915050565b60006101a9818361020c565b60006101d0836001600160a01b038416610218565b9392505050565b60006101a982610262565b60006101d0836001600160a01b038416610266565b60006101d0836001600160a01b03841661032c565b60006101d08383610344565b6000610224838361032c565b61025a575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556101a9565b5060006101a9565b5490565b60008181526001830160205260408120548015610322578354600019808301919081019060009087908390811061029957fe5b90600052602060002001549050808760000184815481106102b657fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806102e657fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506101a9565b60009150506101a9565b60009081526001919091016020526040902054151590565b815460009082106103865760405162461bcd60e51b81526004018080602001828103825260228152602001806103a96022913960400191505060405180910390fd5b82600001828154811061039557fe5b906000526020600020015490509291505056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473a2646970667358221220536ae51f3ab2f422ca85d4b679f275f6ad3894ad4b23082bac534a5f16187da064736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100575760003560e01c80630a3b0a4f1461005c5780631f7b6d321461008457806329092d0e1461009e5780635dbe47e8146100c4578063e0886f90146100fe575b600080fd5b6100826004803603602081101561007257600080fd5b50356001600160a01b0316610137565b005b61008c610180565b60408051918252519081900360200190f35b610082600480360360208110156100b457600080fd5b50356001600160a01b0316610191565b6100ea600480360360208110156100da57600080fd5b50356001600160a01b031661019d565b604080519115158252519081900360200190f35b61011b6004803603602081101561011457600080fd5b50356101af565b604080516001600160a01b039092168252519081900360200190f35b600061014381836101bb565b60408051821515815290519192507fed9840e0775590557ad736875d96c95cf1458b766335f74339951a32c82a9e33919081900360200190a15050565b600061018c60006101d7565b905090565b600061014381836101e2565b60006101a981836101f7565b92915050565b60006101a9818361020c565b60006101d0836001600160a01b038416610218565b9392505050565b60006101a982610262565b60006101d0836001600160a01b038416610266565b60006101d0836001600160a01b03841661032c565b60006101d08383610344565b6000610224838361032c565b61025a575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556101a9565b5060006101a9565b5490565b60008181526001830160205260408120548015610322578354600019808301919081019060009087908390811061029957fe5b90600052602060002001549050808760000184815481106102b657fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806102e657fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506101a9565b60009150506101a9565b60009081526001919091016020526040902054151590565b815460009082106103865760405162461bcd60e51b81526004018080602001828103825260228152602001806103a96022913960400191505060405180910390fd5b82600001828154811061039557fe5b906000526020600020015490509291505056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473a2646970667358221220536ae51f3ab2f422ca85d4b679f275f6ad3894ad4b23082bac534a5f16187da064736f6c634300060c0033"}, "abi": [{"type": "event", "name": "OperationResult", "inputs": [{"name": "result", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "function", "name": "add", "stateMutability": "nonpayable", "inputs": [{"name": "value", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "at", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "contains", "stateMutability": "view", "inputs": [{"name": "value", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "length", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "remove", "stateMutability": "nonpayable", "inputs": [{"name": "value", "type": "address", "internalType": "address"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "EnumerableUintSetMock": {"contractName": "EnumerableUintSetMock", "sourceId": "mocks/EnumerableSetMock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b506103ae806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631003e2d21461005c5780631f7b6d321461007b5780634cc8221514610095578063c34052e0146100b2578063e0886f90146100e3575b600080fd5b6100796004803603602081101561007257600080fd5b5035610100565b005b610083610149565b60408051918252519081900360200190f35b610079600480360360208110156100ab57600080fd5b503561015a565b6100cf600480360360208110156100c857600080fd5b5035610166565b604080519115158252519081900360200190f35b610083600480360360208110156100f957600080fd5b5035610178565b600061010c8183610184565b60408051821515815290519192507fed9840e0775590557ad736875d96c95cf1458b766335f74339951a32c82a9e33919081900360200190a15050565b60006101556000610197565b905090565b600061010c81836101a2565b600061017281836101ae565b92915050565b600061017281836101ba565b600061019083836101c6565b9392505050565b600061017282610210565b60006101908383610214565b600061019083836102da565b600061019083836102f2565b60006101d283836102da565b61020857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610172565b506000610172565b5490565b600081815260018301602052604081205480156102d0578354600019808301919081019060009087908390811061024757fe5b906000526020600020015490508087600001848154811061026457fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061029457fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610172565b6000915050610172565b60009081526001919091016020526040902054151590565b815460009082106103345760405162461bcd60e51b81526004018080602001828103825260228152602001806103576022913960400191505060405180910390fd5b82600001828154811061034357fe5b906000526020600020015490509291505056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473a2646970667358221220044c08571b5af377e7c5e043834a4cd491aae6148bb97f3a3c4ab67d1665a28e64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100575760003560e01c80631003e2d21461005c5780631f7b6d321461007b5780634cc8221514610095578063c34052e0146100b2578063e0886f90146100e3575b600080fd5b6100796004803603602081101561007257600080fd5b5035610100565b005b610083610149565b60408051918252519081900360200190f35b610079600480360360208110156100ab57600080fd5b503561015a565b6100cf600480360360208110156100c857600080fd5b5035610166565b604080519115158252519081900360200190f35b610083600480360360208110156100f957600080fd5b5035610178565b600061010c8183610184565b60408051821515815290519192507fed9840e0775590557ad736875d96c95cf1458b766335f74339951a32c82a9e33919081900360200190a15050565b60006101556000610197565b905090565b600061010c81836101a2565b600061017281836101ae565b92915050565b600061017281836101ba565b600061019083836101c6565b9392505050565b600061017282610210565b60006101908383610214565b600061019083836102da565b600061019083836102f2565b60006101d283836102da565b61020857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610172565b506000610172565b5490565b600081815260018301602052604081205480156102d0578354600019808301919081019060009087908390811061024757fe5b906000526020600020015490508087600001848154811061026457fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061029457fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610172565b6000915050610172565b60009081526001919091016020526040902054151590565b815460009082106103345760405162461bcd60e51b81526004018080602001828103825260228152602001806103576022913960400191505060405180910390fd5b82600001828154811061034357fe5b906000526020600020015490509291505056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473a2646970667358221220044c08571b5af377e7c5e043834a4cd491aae6148bb97f3a3c4ab67d1665a28e64736f6c634300060c0033"}, "abi": [{"type": "event", "name": "OperationResult", "inputs": [{"name": "result", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "function", "name": "add", "stateMutability": "nonpayable", "inputs": [{"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "at", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "contains", "stateMutability": "view", "inputs": [{"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "length", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "remove", "stateMutability": "nonpayable", "inputs": [{"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "EtherReceiverMock": {"contractName": "EtherReceiverMock", "sourceId": "mocks/EtherReceiverMock.sol", "deploymentBytecode": {"bytecode": "6080604052348015600f57600080fd5b5060a38061001e6000396000f3fe608060405260043610601f5760003560e01c80634fea120c146038576033565b3660335760005460ff16603157600080fd5b005b600080fd5b348015604357600080fd5b50603160048036036020811015605857600080fd5b506000805460ff19169135151591909117905556fea264697066735822122080262c3b9e076671d9e0ff447090d0cc3582a0f7026fda5fe45a9130122c9cf464736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405260043610601f5760003560e01c80634fea120c146038576033565b3660335760005460ff16603157600080fd5b005b600080fd5b348015604357600080fd5b50603160048036036020811015605857600080fd5b506000805460ff19169135151591909117905556fea264697066735822122080262c3b9e076671d9e0ff447090d0cc3582a0f7026fda5fe45a9130122c9cf464736f6c634300060c0033"}, "abi": [{"type": "function", "name": "setAcceptEther", "stateMutability": "nonpayable", "inputs": [{"name": "acceptEther", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "GSNRecipientERC20FeeMock": {"contractName": "GSNRecipientERC20FeeMock", "sourceId": "mocks/GSNRecipientERC20FeeMock.sol", "deploymentBytecode": {"bytecode": "6080604052600080546001600160a01b03191673d216153c06e857cd7f72665e0af1d7d82172f4941790553480156200003757600080fd5b50604051620022dc380380620022dc833981810160405260408110156200005d57600080fd5b81019080805160405193929190846401000000008211156200007e57600080fd5b9083019060208201858111156200009457600080fd5b8251640100000000811182820188101715620000af57600080fd5b82525081516020918201929091019080838360005b83811015620000de578181015183820152602001620000c4565b50505050905090810190601f1680156200010c5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200013057600080fd5b9083019060208201858111156200014657600080fd5b82516401000000008111828201881017156200016157600080fd5b82525081516020918201929091019080838360005b838110156200019057818101518382015260200162000176565b50505050905090810190601f168015620001be5780820380516001836020036101000a031916815260200191505b5060405250505081818181604051620001d790620002f5565b604080825283519082015282518190602080830191606084019187019080838360005b8381101562000214578181015183820152602001620001fa565b50505050905090810190601f168015620002425780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015620002775781810151838201526020016200025d565b50505050905090810190601f168015620002a55780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f080158015620002c9573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055506200030392505050565b6111ea80620010f283390190565b610ddf80620003136000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806383947ea01161005b57806383947ea01461019d578063ad61ccd514610379578063e06e0e22146103f6578063fc0c546a146104a757610088565b80633e6fec041461008d57806340c10f191461009757806374e861d6146100c357806380274db7146100e7575b600080fd5b6100956104af565b005b610095600480360360408110156100ad57600080fd5b506001600160a01b03813516906020013561056a565b6100cb610578565b604080516001600160a01b039092168252519081900360200190f35b61018b600480360360208110156100fd57600080fd5b810190602081018135600160201b81111561011757600080fd5b82018360208201111561012957600080fd5b803590602001918460018302840111600160201b8311171561014a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610588945050505050565b60408051918252519081900360200190f35b6102fa60048036036101208110156101b457600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156101e757600080fd5b8201836020820111156101f957600080fd5b803590602001918460018302840111600160201b8311171561021a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929584359560208601359560408101359550606081013594509192509060a081019060800135600160201b81111561028457600080fd5b82018360208201111561029657600080fd5b803590602001918460018302840111600160201b831117156102b757600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050913592506105f0915050565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561033d578181015183820152602001610325565b50505050905090810190601f16801561036a5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6103816106df565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103bb5781810151838201526020016103a3565b50505050905090810190601f1680156103e85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100956004803603608081101561040c57600080fd5b810190602081018135600160201b81111561042657600080fd5b82018360208201111561043857600080fd5b803590602001918460018302840111600160201b8311171561045957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550505050803515159150602081013590604001356106fe565b6100cb610767565b7fde4813f7525e49908b98ef6c9c80c5bc8c7d0842981a49420eb45ef36a60e0c06104d8610767565b6001600160a01b03166370a082316104ee610776565b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561052b57600080fd5b505afa15801561053f573d6000803e3d6000fd5b505050506040513d602081101561055557600080fd5b505160408051918252519081900360200190a1565b610574828261079f565b5050565b6000546001600160a01b03165b90565b6000610592610578565b6001600160a01b0316336001600160a01b0316146105e15760405162461bcd60e51b8152600401808060200182810382526024815260200180610d5c6024913960400191505060405180910390fd5b6105ea82610810565b92915050565b600154604080516370a0823160e01b81526001600160a01b038b81166004830152915160009360609386939116916370a0823191602480820192602092909190829003018186803b15801561064457600080fd5b505afa158015610658573d6000803e3d6000fd5b505050506040513d602081101561066e57600080fd5b50511015610689576106806000610857565b915091506106d1565b604080516001600160a01b038c166020820152808201859052606081018a905260808082018a90528251808303909101815260a09091019091526106cc9061086f565b915091505b995099975050505050505050565b6040805180820190915260058152640312e302e360dc1b602082015290565b610706610578565b6001600160a01b0316336001600160a01b0316146107555760405162461bcd60e51b8152600401808060200182810382526024815260200180610d5c6024913960400191505060405180910390fd5b61076184848484610874565b50505050565b6001546001600160a01b031690565b600080546001600160a01b03163314610790575033610585565b610798610901565b9050610585565b600154604080516340c10f1960e01b81526001600160a01b03858116600483015260248201859052915191909216916340c10f1991604480830192600092919082900301818387803b1580156107f457600080fd5b505af1158015610808573d6000803e3d6000fd5b505050505050565b600080600083806020019051604081101561082a57600080fd5b5080516020909101516001549193509150610850906001600160a01b031683308461094e565b5050919050565b604080516020810190915260008152600b9190910191565b600091565b60008060008087806020019051608081101561088f57600080fd5b508051602082015160408301516060909301519196509450909250905060006108c76108c0620186a06127106109a8565b83856109f1565b90506108d387826109a8565b96506108f6856108e3868a6109a8565b6001546001600160a01b031691906109ff565b505050505050505050565b600060606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031692915050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610761908590610a56565b60006109ea83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610b07565b9392505050565b606490810191909202020490565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a51908490610a56565b505050565b6060610aab826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b9e9092919063ffffffff16565b805190915015610a5157808060200190516020811015610aca57600080fd5b5051610a515760405162461bcd60e51b815260040180806020018281038252602a815260200180610d80602a913960400191505060405180910390fd5b60008184841115610b965760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b5b578181015183820152602001610b43565b50505050905090810190601f168015610b885780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6060610bad8484600085610bb5565b949350505050565b6060610bc085610d22565b610c11576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310610c505780518252601f199092019160209182019101610c31565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610cb2576040519150601f19603f3d011682016040523d82523d6000602084013e610cb7565b606091505b50915091508115610ccb579150610bad9050565b805115610cdb5780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315610b5b578181015183820152602001610b43565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610bad57505015159291505056fe47534e526563697069656e743a2063616c6c6572206973206e6f742052656c61794875625361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220467d4bb0b2f34ff93a3a1a6582da2f481219f30f34d617b2092369d65e29448864736f6c634300060c003360806040523480156200001157600080fd5b50604051620011ea380380620011ea833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b50604052505082518391508290620001b89060039060208501906200024c565b508051620001ce9060049060208401906200024c565b50506005805460ff19166012179055506000620001ea62000248565b60058054610100600160a81b0319166101006001600160a01b03841690810291909117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3505050620002e8565b3390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028f57805160ff1916838001178555620002bf565b82800160010185558215620002bf579182015b82811115620002bf578251825591602001919060010190620002a2565b50620002cd929150620002d1565b5090565b5b80821115620002cd5760008155600101620002d2565b610ef280620002f86000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d7146102d9578063a9059cbb14610305578063dd62ed3e14610331578063f2fde38b1461035f576100f5565b806370a082311461027f578063715018a6146102a55780638da5cb5b146102ad57806395d89b41146102d1576100f5565b806323b872dd116100d357806323b872dd146101d1578063313ce56714610207578063395093511461022557806340c10f1914610251576100f5565b806306fdde03146100fa578063095ea7b31461017757806318160ddd146101b7575b600080fd5b610102610385565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561013c578181015183820152602001610124565b50505050905090810190601f1680156101695780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101a36004803603604081101561018d57600080fd5b506001600160a01b03813516906020013561041b565b604080519115158252519081900360200190f35b6101bf610439565b60408051918252519081900360200190f35b6101a3600480360360608110156101e757600080fd5b506001600160a01b0381358116916020810135909116906040013561043f565b61020f61048a565b6040805160ff9092168252519081900360200190f35b6101a36004803603604081101561023b57600080fd5b506001600160a01b038135169060200135610493565b61027d6004803603604081101561026757600080fd5b506001600160a01b0381351690602001356104e6565b005b6101bf6004803603602081101561029557600080fd5b50356001600160a01b0316610563565b61027d61057e565b6102b561063d565b604080516001600160a01b039092168252519081900360200190f35b610102610651565b6101a3600480360360408110156102ef57600080fd5b506001600160a01b0381351690602001356106b2565b6101a36004803603604081101561031b57600080fd5b506001600160a01b03813516906020013561071a565b6101bf6004803603604081101561034757600080fd5b506001600160a01b038135811691602001351661072e565b61027d6004803603602081101561037557600080fd5b50356001600160a01b031661076b565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104115780601f106103e657610100808354040283529160200191610411565b820191906000526020600020905b8154815290600101906020018083116103f457829003601f168201915b5050505050905090565b600061042f610428610886565b848461088a565b5060015b92915050565b60025490565b600061044961063d565b6001600160a01b0316836001600160a01b031614156104755761046d8484846108c0565b506001610483565b610480848484610a1b565b90505b9392505050565b60055460ff1690565b600061042f6104a0610886565b846104e185600160006104b1610886565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610a9d565b61088a565b6104ee610886565b60055461010090046001600160a01b03908116911614610555576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61055f8282610af7565b5050565b6001600160a01b031660009081526020819052604090205490565b610586610886565b60055461010090046001600160a01b039081169116146105ed576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b60055461010090046001600160a01b031690565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104115780601f106103e657610100808354040283529160200191610411565b600061042f6106bf610886565b846104e185604051806060016040528060258152602001610e9860259139600160006106e9610886565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610be7565b600061042f610727610886565b84846108c0565b600061073861063d565b6001600160a01b0316826001600160a01b0316141561075a5750600019610433565b6107648383610c7e565b9050610433565b610773610886565b60055461010090046001600160a01b039081169116146107da576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661081f5760405162461bcd60e51b8152600401808060200182810382526026815260200180610db96026913960400191505060405180910390fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b3390565b61089261063d565b6001600160a01b0316826001600160a01b031614156108b0576108bb565b6108bb838383610ca9565b505050565b6001600160a01b0383166109055760405162461bcd60e51b8152600401808060200182810382526025815260200180610e4f6025913960400191505060405180910390fd5b6001600160a01b03821661094a5760405162461bcd60e51b8152600401808060200182810382526023815260200180610d966023913960400191505060405180910390fd5b6109558383836108bb565b61099281604051806060016040528060268152602001610e01602691396001600160a01b0386166000908152602081905260409020549190610be7565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546109c19082610a9d565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000610a288484846108c0565b610a9384610a34610886565b6104e185604051806060016040528060288152602001610e27602891396001600160a01b038a16600090815260016020526040812090610a72610886565b6001600160a01b031681526020810191909152604001600020549190610be7565b5060019392505050565b600082820183811015610483576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b038216610b52576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610b5e600083836108bb565b600254610b6b9082610a9d565b6002556001600160a01b038216600090815260208190526040902054610b919082610a9d565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008184841115610c765760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c3b578181015183820152602001610c23565b50505050905090810190601f168015610c685780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b038316610cee5760405162461bcd60e51b8152600401808060200182810382526024815260200180610e746024913960400191505060405180910390fd5b6001600160a01b038216610d335760405162461bcd60e51b8152600401808060200182810382526022815260200180610ddf6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350505056fe45524332303a207472616e7366657220746f20746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220bbf790299035d06cb63826bea87e2cc4be5adf7ebe0fa37850c8920954f2a58d64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100885760003560e01c806383947ea01161005b57806383947ea01461019d578063ad61ccd514610379578063e06e0e22146103f6578063fc0c546a146104a757610088565b80633e6fec041461008d57806340c10f191461009757806374e861d6146100c357806380274db7146100e7575b600080fd5b6100956104af565b005b610095600480360360408110156100ad57600080fd5b506001600160a01b03813516906020013561056a565b6100cb610578565b604080516001600160a01b039092168252519081900360200190f35b61018b600480360360208110156100fd57600080fd5b810190602081018135600160201b81111561011757600080fd5b82018360208201111561012957600080fd5b803590602001918460018302840111600160201b8311171561014a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610588945050505050565b60408051918252519081900360200190f35b6102fa60048036036101208110156101b457600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156101e757600080fd5b8201836020820111156101f957600080fd5b803590602001918460018302840111600160201b8311171561021a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929584359560208601359560408101359550606081013594509192509060a081019060800135600160201b81111561028457600080fd5b82018360208201111561029657600080fd5b803590602001918460018302840111600160201b831117156102b757600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050913592506105f0915050565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561033d578181015183820152602001610325565b50505050905090810190601f16801561036a5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6103816106df565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103bb5781810151838201526020016103a3565b50505050905090810190601f1680156103e85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100956004803603608081101561040c57600080fd5b810190602081018135600160201b81111561042657600080fd5b82018360208201111561043857600080fd5b803590602001918460018302840111600160201b8311171561045957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550505050803515159150602081013590604001356106fe565b6100cb610767565b7fde4813f7525e49908b98ef6c9c80c5bc8c7d0842981a49420eb45ef36a60e0c06104d8610767565b6001600160a01b03166370a082316104ee610776565b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561052b57600080fd5b505afa15801561053f573d6000803e3d6000fd5b505050506040513d602081101561055557600080fd5b505160408051918252519081900360200190a1565b610574828261079f565b5050565b6000546001600160a01b03165b90565b6000610592610578565b6001600160a01b0316336001600160a01b0316146105e15760405162461bcd60e51b8152600401808060200182810382526024815260200180610d5c6024913960400191505060405180910390fd5b6105ea82610810565b92915050565b600154604080516370a0823160e01b81526001600160a01b038b81166004830152915160009360609386939116916370a0823191602480820192602092909190829003018186803b15801561064457600080fd5b505afa158015610658573d6000803e3d6000fd5b505050506040513d602081101561066e57600080fd5b50511015610689576106806000610857565b915091506106d1565b604080516001600160a01b038c166020820152808201859052606081018a905260808082018a90528251808303909101815260a09091019091526106cc9061086f565b915091505b995099975050505050505050565b6040805180820190915260058152640312e302e360dc1b602082015290565b610706610578565b6001600160a01b0316336001600160a01b0316146107555760405162461bcd60e51b8152600401808060200182810382526024815260200180610d5c6024913960400191505060405180910390fd5b61076184848484610874565b50505050565b6001546001600160a01b031690565b600080546001600160a01b03163314610790575033610585565b610798610901565b9050610585565b600154604080516340c10f1960e01b81526001600160a01b03858116600483015260248201859052915191909216916340c10f1991604480830192600092919082900301818387803b1580156107f457600080fd5b505af1158015610808573d6000803e3d6000fd5b505050505050565b600080600083806020019051604081101561082a57600080fd5b5080516020909101516001549193509150610850906001600160a01b031683308461094e565b5050919050565b604080516020810190915260008152600b9190910191565b600091565b60008060008087806020019051608081101561088f57600080fd5b508051602082015160408301516060909301519196509450909250905060006108c76108c0620186a06127106109a8565b83856109f1565b90506108d387826109a8565b96506108f6856108e3868a6109a8565b6001546001600160a01b031691906109ff565b505050505050505050565b600060606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031692915050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610761908590610a56565b60006109ea83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610b07565b9392505050565b606490810191909202020490565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a51908490610a56565b505050565b6060610aab826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b9e9092919063ffffffff16565b805190915015610a5157808060200190516020811015610aca57600080fd5b5051610a515760405162461bcd60e51b815260040180806020018281038252602a815260200180610d80602a913960400191505060405180910390fd5b60008184841115610b965760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b5b578181015183820152602001610b43565b50505050905090810190601f168015610b885780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6060610bad8484600085610bb5565b949350505050565b6060610bc085610d22565b610c11576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310610c505780518252601f199092019160209182019101610c31565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610cb2576040519150601f19603f3d011682016040523d82523d6000602084013e610cb7565b606091505b50915091508115610ccb579150610bad9050565b805115610cdb5780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315610b5b578181015183820152602001610b43565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610bad57505015159291505056fe47534e526563697069656e743a2063616c6c6572206973206e6f742052656c61794875625361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220467d4bb0b2f34ff93a3a1a6582da2f481219f30f34d617b2092369d65e29448864736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "MockFunctionCalled", "inputs": [{"name": "senderBalance", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "RelayHubChanged", "inputs": [{"name": "oldRelayHub", "type": "address", "indexed": true, "internalType": "address"}, {"name": "newRelayHub", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "acceptRelayedCall", "stateMutability": "view", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "", "type": "bytes", "internalType": "bytes"}, {"name": "transactionFee", "type": "uint256", "internalType": "uint256"}, {"name": "gasPrice", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "bytes", "internalType": "bytes"}, {"name": "maxPossibleCharge", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "bytes", "internalType": "bytes"}]}, {"type": "function", "name": "getHubAddr", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "mockFunction", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "postRelayedCall", "stateMutability": "nonpayable", "inputs": [{"name": "context", "type": "bytes", "internalType": "bytes"}, {"name": "success", "type": "bool", "internalType": "bool"}, {"name": "actualCharge", "type": "uint256", "internalType": "uint256"}, {"name": "preRetVal", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "preRelayedCall", "stateMutability": "nonpayable", "inputs": [{"name": "context", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "relayHubVersion", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "token", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "contract IERC20"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)": {"details": "Ensures that only users with enough gas payment token balance can have transactions relayed through the GSN."}, "getHubAddr()": {"details": "Returns the address of the {IRelayHub} contract for this recipient."}, "postRelayedCall(bytes,bool,uint256,bytes32)": {"details": "See `IRelayRecipient.postRelayedCall`. This function should not be overriden directly, use `_postRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract."}, "preRelayedCall(bytes)": {"details": "See `IRelayRecipient.preRelayedCall`. This function should not be overriden directly, use `_preRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract."}, "relayHubVersion()": {"details": "Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version."}, "token()": {"details": "Returns the gas payment token."}}, "version": 1}}, "GSNRecipientMock": {"contractName": "GSNRecipientMock", "sourceId": "mocks/GSNRecipientMock.sol", "deploymentBytecode": {"bytecode": "6080604052600080546001600160a01b03191673d216153c06e857cd7f72665e0af1d7d82172f49417905534801561003657600080fd5b50610b58806100466000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80639e30a590116100665780639e30a5901461038c578063ad61ccd5146103b2578063c2db1abe1461042f578063d737d0c71461045b578063e06e0e221461046357610093565b8063376bf2621461009857806374e861d61461014557806380274db71461016957806383947ea01461021f575b600080fd5b610143600480360360408110156100ae57600080fd5b81359190810190604081016020820135600160201b8111156100cf57600080fd5b8201836020820111156100e157600080fd5b803590602001918460018302840111600160201b8311171561010257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610514945050505050565b005b61014d610627565b604080516001600160a01b039092168252519081900360200190f35b61020d6004803603602081101561017f57600080fd5b810190602081018135600160201b81111561019957600080fd5b8201836020820111156101ab57600080fd5b803590602001918460018302840111600160201b831117156101cc57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610637945050505050565b60408051918252519081900360200190f35b61030d600480360361012081101561023657600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561026957600080fd5b82018360208201111561027b57600080fd5b803590602001918460018302840111600160201b8311171561029c57600080fd5b9193909282359260208101359260408201359260608301359260a081019060800135600160201b8111156102cf57600080fd5b8201836020820111156102e157600080fd5b803590602001918460018302840111600160201b8311171561030257600080fd5b91935091503561069f565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610350578181015183820152602001610338565b50505050905090810190601f16801561037d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b610143600480360360208110156103a257600080fd5b50356001600160a01b03166106c0565b6103ba6106cc565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103f45781810151838201526020016103dc565b50505050905090810190601f1680156104215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101436004803603604081101561044557600080fd5b50803590602001356001600160a01b03166106eb565b6101436106f9565b6101436004803603608081101561047957600080fd5b810190602081018135600160201b81111561049357600080fd5b8201836020820111156104a557600080fd5b803590602001918460018302840111600160201b831117156104c657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050508035151591506020810135906040013561073f565b7faf235354a0a47c91ee171961326335cb2d1a8e55b8a89859b0e61eb049e50ea061053d6107a4565b8383604051808060200184815260200180602001838103835286818151815260200191508051906020019080838360005b8381101561058657818101518382015260200161056e565b50505050905090810190601f1680156105b35780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156105e65781810151838201526020016105ce565b50505050905090810190601f1680156106135780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15050565b6000546001600160a01b03165b90565b6000610641610627565b6001600160a01b0316336001600160a01b0316146106905760405162461bcd60e51b8152600401808060200182810382526024815260200180610aff6024913960400191505060405180910390fd5b610699826107b3565b92915050565b60408051602081019091526000808252909b509b9950505050505050505050565b6106c9816107b9565b50565b6040805180820190915260058152640312e302e360dc1b602082015290565b6106f582826108b9565b5050565b7fd6558c3ed910d959271054471fd1c326679d9fece99c5091b00ed89627cf2bfc610722610925565b604080516001600160a01b039092168252519081900360200190a1565b610747610627565b6001600160a01b0316336001600160a01b0316146107965760405162461bcd60e51b8152600401808060200182810382526024815260200180610aff6024913960400191505060405180910390fd5b61079e848484845b50505050565b60606107ae61092f565b905090565b50600090565b6000546001600160a01b039081169082166108055760405162461bcd60e51b815260040180806020018281038252602e815260200180610aa4602e913960400191505060405180910390fd5b806001600160a01b0316826001600160a01b031614156108565760405162461bcd60e51b815260040180806020018281038252602d815260200180610ad2602d913960400191505060405180910390fd5b816001600160a01b0316816001600160a01b03167fb9f84b8e65164b14439ae3620df0a4d8786d896996c0282b683f9d8c08f046e860405160405180910390a350600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000805460408051627b8a6760e11b8152600481018690526001600160a01b0385811660248301529151919092169262f714ce926044808201939182900301818387803b15801561090957600080fd5b505af115801561091d573d6000803e3d6000fd5b505050505050565b60006107ae610993565b6000546060906001600160a01b03163314610984576000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092935061063492505050565b61098c6109b5565b9050610634565b600080546001600160a01b031633146109ad575033610634565b61098c610a56565b60606013193601818167ffffffffffffffff811180156109d457600080fd5b506040519080825280601f01601f1916602001820160405280156109ff576020820181803683370190505b50905060005b82811015610a4f5760003682818110610a1a57fe5b9050013560f81c60f81b828281518110610a3057fe5b60200101906001600160f81b031916908160001a905350600101610a05565b5091505090565b600060606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169291505056fe47534e526563697069656e743a206e65772052656c617948756220697320746865207a65726f206164647265737347534e526563697069656e743a206e65772052656c6179487562206973207468652063757272656e74206f6e6547534e526563697069656e743a2063616c6c6572206973206e6f742052656c6179487562a264697066735822122027b491f0bdef092cfb5869cd6a6f8c797a370fb411d1717c2117abce1349528464736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100935760003560e01c80639e30a590116100665780639e30a5901461038c578063ad61ccd5146103b2578063c2db1abe1461042f578063d737d0c71461045b578063e06e0e221461046357610093565b8063376bf2621461009857806374e861d61461014557806380274db71461016957806383947ea01461021f575b600080fd5b610143600480360360408110156100ae57600080fd5b81359190810190604081016020820135600160201b8111156100cf57600080fd5b8201836020820111156100e157600080fd5b803590602001918460018302840111600160201b8311171561010257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610514945050505050565b005b61014d610627565b604080516001600160a01b039092168252519081900360200190f35b61020d6004803603602081101561017f57600080fd5b810190602081018135600160201b81111561019957600080fd5b8201836020820111156101ab57600080fd5b803590602001918460018302840111600160201b831117156101cc57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610637945050505050565b60408051918252519081900360200190f35b61030d600480360361012081101561023657600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561026957600080fd5b82018360208201111561027b57600080fd5b803590602001918460018302840111600160201b8311171561029c57600080fd5b9193909282359260208101359260408201359260608301359260a081019060800135600160201b8111156102cf57600080fd5b8201836020820111156102e157600080fd5b803590602001918460018302840111600160201b8311171561030257600080fd5b91935091503561069f565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610350578181015183820152602001610338565b50505050905090810190601f16801561037d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b610143600480360360208110156103a257600080fd5b50356001600160a01b03166106c0565b6103ba6106cc565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103f45781810151838201526020016103dc565b50505050905090810190601f1680156104215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101436004803603604081101561044557600080fd5b50803590602001356001600160a01b03166106eb565b6101436106f9565b6101436004803603608081101561047957600080fd5b810190602081018135600160201b81111561049357600080fd5b8201836020820111156104a557600080fd5b803590602001918460018302840111600160201b831117156104c657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050508035151591506020810135906040013561073f565b7faf235354a0a47c91ee171961326335cb2d1a8e55b8a89859b0e61eb049e50ea061053d6107a4565b8383604051808060200184815260200180602001838103835286818151815260200191508051906020019080838360005b8381101561058657818101518382015260200161056e565b50505050905090810190601f1680156105b35780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156105e65781810151838201526020016105ce565b50505050905090810190601f1680156106135780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15050565b6000546001600160a01b03165b90565b6000610641610627565b6001600160a01b0316336001600160a01b0316146106905760405162461bcd60e51b8152600401808060200182810382526024815260200180610aff6024913960400191505060405180910390fd5b610699826107b3565b92915050565b60408051602081019091526000808252909b509b9950505050505050505050565b6106c9816107b9565b50565b6040805180820190915260058152640312e302e360dc1b602082015290565b6106f582826108b9565b5050565b7fd6558c3ed910d959271054471fd1c326679d9fece99c5091b00ed89627cf2bfc610722610925565b604080516001600160a01b039092168252519081900360200190a1565b610747610627565b6001600160a01b0316336001600160a01b0316146107965760405162461bcd60e51b8152600401808060200182810382526024815260200180610aff6024913960400191505060405180910390fd5b61079e848484845b50505050565b60606107ae61092f565b905090565b50600090565b6000546001600160a01b039081169082166108055760405162461bcd60e51b815260040180806020018281038252602e815260200180610aa4602e913960400191505060405180910390fd5b806001600160a01b0316826001600160a01b031614156108565760405162461bcd60e51b815260040180806020018281038252602d815260200180610ad2602d913960400191505060405180910390fd5b816001600160a01b0316816001600160a01b03167fb9f84b8e65164b14439ae3620df0a4d8786d896996c0282b683f9d8c08f046e860405160405180910390a350600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000805460408051627b8a6760e11b8152600481018690526001600160a01b0385811660248301529151919092169262f714ce926044808201939182900301818387803b15801561090957600080fd5b505af115801561091d573d6000803e3d6000fd5b505050505050565b60006107ae610993565b6000546060906001600160a01b03163314610984576000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092935061063492505050565b61098c6109b5565b9050610634565b600080546001600160a01b031633146109ad575033610634565b61098c610a56565b60606013193601818167ffffffffffffffff811180156109d457600080fd5b506040519080825280601f01601f1916602001820160405280156109ff576020820181803683370190505b50905060005b82811015610a4f5760003682818110610a1a57fe5b9050013560f81c60f81b828281518110610a3057fe5b60200101906001600160f81b031916908160001a905350600101610a05565b5091505090565b600060606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169291505056fe47534e526563697069656e743a206e65772052656c617948756220697320746865207a65726f206164647265737347534e526563697069656e743a206e65772052656c6179487562206973207468652063757272656e74206f6e6547534e526563697069656e743a2063616c6c6572206973206e6f742052656c6179487562a264697066735822122027b491f0bdef092cfb5869cd6a6f8c797a370fb411d1717c2117abce1349528464736f6c634300060c0033"}, "abi": [{"type": "event", "name": "Data", "inputs": [{"name": "data", "type": "bytes", "indexed": false, "internalType": "bytes"}, {"name": "integerValue", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "stringValue", "type": "string", "indexed": false, "internalType": "string"}], "anonymous": false}, {"type": "event", "name": "RelayHubChanged", "inputs": [{"name": "oldRelayHub", "type": "address", "indexed": true, "internalType": "address"}, {"name": "newRelayHub", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "Sender", "inputs": [{"name": "sender", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "acceptRelayedCall", "stateMutability": "view", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "bytes", "internalType": "bytes"}, {"name": "", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "bytes", "internalType": "bytes"}, {"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "bytes", "internalType": "bytes"}]}, {"type": "function", "name": "getHubAddr", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "msgData", "stateMutability": "nonpayable", "inputs": [{"name": "integerValue", "type": "uint256", "internalType": "uint256"}, {"name": "stringValue", "type": "string", "internalType": "string"}], "outputs": []}, {"type": "function", "name": "msgSender", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "postRelayedCall", "stateMutability": "nonpayable", "inputs": [{"name": "context", "type": "bytes", "internalType": "bytes"}, {"name": "success", "type": "bool", "internalType": "bool"}, {"name": "actualCharge", "type": "uint256", "internalType": "uint256"}, {"name": "preRetVal", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "preRelayedCall", "stateMutability": "nonpayable", "inputs": [{"name": "context", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "relayHubVersion", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "upgradeRelayHub", "stateMutability": "nonpayable", "inputs": [{"name": "newRelayHub", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "withdrawDeposits", "stateMutability": "nonpayable", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "payee", "type": "address", "internalType": "address payable"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"getHubAddr()": {"details": "Returns the address of the {IRelayHub} contract for this recipient."}, "postRelayedCall(bytes,bool,uint256,bytes32)": {"details": "See `IRelayRecipient.postRelayedCall`. This function should not be overriden directly, use `_postRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract."}, "preRelayedCall(bytes)": {"details": "See `IRelayRecipient.preRelayedCall`. This function should not be overriden directly, use `_preRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract."}, "relayHubVersion()": {"details": "Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version."}}, "version": 1}}, "GSNRecipientSignatureMock": {"contractName": "GSNRecipientSignatureMock", "sourceId": "mocks/GSNRecipientSignatureMock.sol", "deploymentBytecode": {"bytecode": "6080604052600080546001600160a01b03191673d216153c06e857cd7f72665e0af1d7d82172f49417905534801561003657600080fd5b50604051610ae7380380610ae78339818101604052602081101561005957600080fd5b5051806001600160a01b0381166100a15760405162461bcd60e51b8152600401808060200182810382526039815260200180610aae6039913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055506109dd806100d16000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80633e6fec041461006757806374e861d61461007157806380274db71461009557806383947ea01461014b578063ad61ccd514610327578063e06e0e22146103a4575b600080fd5b61006f610455565b005b610079610480565b604080516001600160a01b039092168252519081900360200190f35b610139600480360360208110156100ab57600080fd5b810190602081018135600160201b8111156100c557600080fd5b8201836020820111156100d757600080fd5b803590602001918460018302840111600160201b831117156100f857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061048f945050505050565b60408051918252519081900360200190f35b6102a8600480360361012081101561016257600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561019557600080fd5b8201836020820111156101a757600080fd5b803590602001918460018302840111600160201b831117156101c857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929584359560208601359560408101359550606081013594509192509060a081019060800135600160201b81111561023257600080fd5b82018360208201111561024457600080fd5b803590602001918460018302840111600160201b8311171561026557600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050913592506104f7915050565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102eb5781810151838201526020016102d3565b50505050905090810190601f1680156103185780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b61032f610638565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610369578181015183820152602001610351565b50505050905090810190601f1680156103965780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61006f600480360360808110156103ba57600080fd5b810190602081018135600160201b8111156103d457600080fd5b8201836020820111156103e657600080fd5b803590602001918460018302840111600160201b8311171561040757600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050505080351515915060208101359060400135610657565b6040517f52c66ed6ec9ca819cba26fe2b2650059270d8981b295af300187a964f54a8c2390600090a1565b6000546001600160a01b031690565b6000610499610480565b6001600160a01b0316336001600160a01b0316146104e85760405162461bcd60e51b81526004018080602001828103825260248152602001806109846024913960400191505060405180910390fd5b6104f1826106bc565b92915050565b60006060808b8b8b8b8b8b8b61050b610480565b30604051602001808a6001600160a01b031660601b8152601401896001600160a01b031660601b815260140188805190602001908083835b602083106105625780518252601f199092019160209182019101610543565b51815160209384036101000a6000190180199092169116179052920198895250878101969096525060408087019490945260608087019390935290821b6bffffffffffffffffffffffff199081166080870152911b1660948401528051808403608801815260a890930190526001548251918301919091209195506001600160a01b031693506105ff92508891506105f9906106c2565b90610713565b6001600160a01b03161415610620576106166108fe565b925092505061062a565b6106166000610922565b995099975050505050505050565b6040805180820190915260058152640312e302e360dc1b602082015290565b61065f610480565b6001600160a01b0316336001600160a01b0316146106ae5760405162461bcd60e51b81526004018080602001828103825260248152602001806109846024913960400191505060405180910390fd5b6106b6848484845b50505050565b50600090565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b6000815160411461076b576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156107dc5760405162461bcd60e51b81526004018080602001828103825260228152602001806109406022913960400191505060405180910390fd5b8060ff16601b141580156107f457508060ff16601c14155b156108305760405162461bcd60e51b81526004018080602001828103825260228152602001806109626022913960400191505060405180910390fd5b600060018783868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561088c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166108f4576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b9695505050505050565b6000606061091a6040518060200160405280600081525061093a565b915091509091565b604080516020810190915260008152600b9190910191565b60009156fe45434453413a20696e76616c6964207369676e6174757265202773272076616c756545434453413a20696e76616c6964207369676e6174757265202776272076616c756547534e526563697069656e743a2063616c6c6572206973206e6f742052656c6179487562a26469706673582212206a29636c58ec15e538267bfc6d84fd16a64439e722db0dda16910d37d8b38bb564736f6c634300060c003347534e526563697069656e745369676e61747572653a2074727573746564207369676e657220697320746865207a65726f2061646472657373"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100625760003560e01c80633e6fec041461006757806374e861d61461007157806380274db71461009557806383947ea01461014b578063ad61ccd514610327578063e06e0e22146103a4575b600080fd5b61006f610455565b005b610079610480565b604080516001600160a01b039092168252519081900360200190f35b610139600480360360208110156100ab57600080fd5b810190602081018135600160201b8111156100c557600080fd5b8201836020820111156100d757600080fd5b803590602001918460018302840111600160201b831117156100f857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061048f945050505050565b60408051918252519081900360200190f35b6102a8600480360361012081101561016257600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561019557600080fd5b8201836020820111156101a757600080fd5b803590602001918460018302840111600160201b831117156101c857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929584359560208601359560408101359550606081013594509192509060a081019060800135600160201b81111561023257600080fd5b82018360208201111561024457600080fd5b803590602001918460018302840111600160201b8311171561026557600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050913592506104f7915050565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102eb5781810151838201526020016102d3565b50505050905090810190601f1680156103185780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b61032f610638565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610369578181015183820152602001610351565b50505050905090810190601f1680156103965780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61006f600480360360808110156103ba57600080fd5b810190602081018135600160201b8111156103d457600080fd5b8201836020820111156103e657600080fd5b803590602001918460018302840111600160201b8311171561040757600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050505080351515915060208101359060400135610657565b6040517f52c66ed6ec9ca819cba26fe2b2650059270d8981b295af300187a964f54a8c2390600090a1565b6000546001600160a01b031690565b6000610499610480565b6001600160a01b0316336001600160a01b0316146104e85760405162461bcd60e51b81526004018080602001828103825260248152602001806109846024913960400191505060405180910390fd5b6104f1826106bc565b92915050565b60006060808b8b8b8b8b8b8b61050b610480565b30604051602001808a6001600160a01b031660601b8152601401896001600160a01b031660601b815260140188805190602001908083835b602083106105625780518252601f199092019160209182019101610543565b51815160209384036101000a6000190180199092169116179052920198895250878101969096525060408087019490945260608087019390935290821b6bffffffffffffffffffffffff199081166080870152911b1660948401528051808403608801815260a890930190526001548251918301919091209195506001600160a01b031693506105ff92508891506105f9906106c2565b90610713565b6001600160a01b03161415610620576106166108fe565b925092505061062a565b6106166000610922565b995099975050505050505050565b6040805180820190915260058152640312e302e360dc1b602082015290565b61065f610480565b6001600160a01b0316336001600160a01b0316146106ae5760405162461bcd60e51b81526004018080602001828103825260248152602001806109846024913960400191505060405180910390fd5b6106b6848484845b50505050565b50600090565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b6000815160411461076b576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156107dc5760405162461bcd60e51b81526004018080602001828103825260228152602001806109406022913960400191505060405180910390fd5b8060ff16601b141580156107f457508060ff16601c14155b156108305760405162461bcd60e51b81526004018080602001828103825260228152602001806109626022913960400191505060405180910390fd5b600060018783868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561088c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166108f4576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b9695505050505050565b6000606061091a6040518060200160405280600081525061093a565b915091509091565b604080516020810190915260008152600b9190910191565b60009156fe45434453413a20696e76616c6964207369676e6174757265202773272076616c756545434453413a20696e76616c6964207369676e6174757265202776272076616c756547534e526563697069656e743a2063616c6c6572206973206e6f742052656c6179487562a26469706673582212206a29636c58ec15e538267bfc6d84fd16a64439e722db0dda16910d37d8b38bb564736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "trustedSigner", "type": "address", "internalType": "address"}]}, {"type": "event", "name": "MockFunctionCalled", "inputs": [], "anonymous": false}, {"type": "event", "name": "RelayHubChanged", "inputs": [{"name": "oldRelayHub", "type": "address", "indexed": true, "internalType": "address"}, {"name": "newRelayHub", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "acceptRelayedCall", "stateMutability": "view", "inputs": [{"name": "relay", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "encodedFunction", "type": "bytes", "internalType": "bytes"}, {"name": "transactionFee", "type": "uint256", "internalType": "uint256"}, {"name": "gasPrice", "type": "uint256", "internalType": "uint256"}, {"name": "gasLimit", "type": "uint256", "internalType": "uint256"}, {"name": "nonce", "type": "uint256", "internalType": "uint256"}, {"name": "approvalData", "type": "bytes", "internalType": "bytes"}, {"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "bytes", "internalType": "bytes"}]}, {"type": "function", "name": "getHubAddr", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "mockFunction", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "postRelayedCall", "stateMutability": "nonpayable", "inputs": [{"name": "context", "type": "bytes", "internalType": "bytes"}, {"name": "success", "type": "bool", "internalType": "bool"}, {"name": "actualCharge", "type": "uint256", "internalType": "uint256"}, {"name": "preRetVal", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "preRelayedCall", "stateMutability": "nonpayable", "inputs": [{"name": "context", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "relayHubVersion", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)": {"details": "Ensures that only transactions with a trusted signature can be relayed through the GSN."}, "getHubAddr()": {"details": "Returns the address of the {IRelayHub} contract for this recipient."}, "postRelayedCall(bytes,bool,uint256,bytes32)": {"details": "See `IRelayRecipient.postRelayedCall`. This function should not be overriden directly, use `_postRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract."}, "preRelayedCall(bytes)": {"details": "See `IRelayRecipient.preRelayedCall`. This function should not be overriden directly, use `_preRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract."}, "relayHubVersion()": {"details": "Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version."}}, "version": 1}}, "MathMock": {"contractName": "MathMock", "sourceId": "mocks/MathMock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b5061016d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632b7423ab146100465780636d5433e61461007b5780637ae2b5c71461009e575b600080fd5b6100696004803603604081101561005c57600080fd5b50803590602001356100c1565b60408051918252519081900360200190f35b6100696004803603604081101561009157600080fd5b50803590602001356100d4565b610069600480360360408110156100b457600080fd5b50803590602001356100e0565b60006100cd83836100ec565b9392505050565b60006100cd8383610111565b60006100cd8383610128565b600060028083066002850601816100ff57fe5b04600283046002850401019392505050565b60008183101561012157816100cd565b5090919050565b600081831061012157816100cd56fea26469706673582212205bc6d90282d78dcdccbeccc7d653f7eb6103c04a8e58460c9687d7dd4651bf6564736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100415760003560e01c80632b7423ab146100465780636d5433e61461007b5780637ae2b5c71461009e575b600080fd5b6100696004803603604081101561005c57600080fd5b50803590602001356100c1565b60408051918252519081900360200190f35b6100696004803603604081101561009157600080fd5b50803590602001356100d4565b610069600480360360408110156100b457600080fd5b50803590602001356100e0565b60006100cd83836100ec565b9392505050565b60006100cd8383610111565b60006100cd8383610128565b600060028083066002850601816100ff57fe5b04600283046002850401019392505050565b60008183101561012157816100cd565b5090919050565b600081831061012157816100cd56fea26469706673582212205bc6d90282d78dcdccbeccc7d653f7eb6103c04a8e58460c9687d7dd4651bf6564736f6c634300060c0033"}, "abi": [{"type": "function", "name": "average", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "max", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "min", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "MerkleProofWrapper": {"contractName": "MerkleProofWrapper", "sourceId": "mocks/MerkleProofWrapper.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b506101e0806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635a9a49c714610030575b600080fd5b6100d86004803603606081101561004657600080fd5b81019060208101813564010000000081111561006157600080fd5b82018360208201111561007357600080fd5b8035906020019184602083028401116401000000008311171561009557600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050823593505050602001356100ec565b604080519115158252519081900360200190f35b60006100f9848484610101565b949350505050565b600081815b855181101561019f57600086828151811061011d57fe5b602002602001015190508083116101645782816040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209250610196565b808360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b50600101610106565b50909214939250505056fea26469706673582212204acd30b09dcf41aab1fdb419228da6629b0b8d56c565f5670d18fabadb77c75d64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b506004361061002b5760003560e01c80635a9a49c714610030575b600080fd5b6100d86004803603606081101561004657600080fd5b81019060208101813564010000000081111561006157600080fd5b82018360208201111561007357600080fd5b8035906020019184602083028401116401000000008311171561009557600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050823593505050602001356100ec565b604080519115158252519081900360200190f35b60006100f9848484610101565b949350505050565b600081815b855181101561019f57600086828151811061011d57fe5b602002602001015190508083116101645782816040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209250610196565b808360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b50600101610106565b50909214939250505056fea26469706673582212204acd30b09dcf41aab1fdb419228da6629b0b8d56c565f5670d18fabadb77c75d64736f6c634300060c0033"}, "abi": [{"type": "function", "name": "verify", "stateMutability": "pure", "inputs": [{"name": "proof", "type": "bytes32[]", "internalType": "bytes32[]"}, {"name": "root", "type": "bytes32", "internalType": "bytes32"}, {"name": "leaf", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "OwnableMock": {"contractName": "OwnableMock", "sourceId": "mocks/OwnableMock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b50600061001b61006a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006e565b3390565b6102c78061007d6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063715018a6146100465780638da5cb5b14610050578063f2fde38b14610074575b600080fd5b61004e61009a565b005b61005861014e565b604080516001600160a01b039092168252519081900360200190f35b61004e6004803603602081101561008a57600080fd5b50356001600160a01b031661015d565b6100a2610267565b6000546001600160a01b03908116911614610104576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b610165610267565b6000546001600160a01b039081169116146101c7576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661020c5760405162461bcd60e51b815260040180806020018281038252602681526020018061026c6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a26469706673582212205398859fcc6468e9702262597d03c73eb96d319e44ae0ae73a70ad70cfbfb5ce64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100415760003560e01c8063715018a6146100465780638da5cb5b14610050578063f2fde38b14610074575b600080fd5b61004e61009a565b005b61005861014e565b604080516001600160a01b039092168252519081900360200190f35b61004e6004803603602081101561008a57600080fd5b50356001600160a01b031661015d565b6100a2610267565b6000546001600160a01b03908116911614610104576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b610165610267565b6000546001600160a01b039081169116146101c7576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661020c5760405162461bcd60e51b815260040180806020018281038252602681526020018061026c6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a26469706673582212205398859fcc6468e9702262597d03c73eb96d319e44ae0ae73a70ad70cfbfb5ce64736f6c634300060c0033"}, "abi": [{"type": "event", "name": "OwnershipTransferred", "inputs": [{"name": "previousOwner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "newOwner", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "owner", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "renounceOwnership", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "transferOwnership", "stateMutability": "nonpayable", "inputs": [{"name": "newOwner", "type": "address", "internalType": "address"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"owner()": {"details": "Returns the address of the current owner."}, "renounceOwnership()": {"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."}, "transferOwnership(address)": {"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}, "version": 1}}, "PausableMock": {"contractName": "PausableMock", "sourceId": "mocks/PausableMock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b506000805461ffff1916815560015561031a8061002e6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806376657b8e1161005b57806376657b8e146100c25780638456cb59146100ca5780639958f045146100d2578063e7651d7a146100da5761007d565b806306661abd146100825780633f4ba83a1461009c5780635c975abb146100a6575b600080fd5b61008a6100e2565b60408051918252519081900360200190f35b6100a46100e8565b005b6100ae6100f2565b604080519115158252519081900360200190f35b6100ae6100fb565b6100a4610109565b6100a4610111565b6100a4610170565b60015481565b6100f06101c5565b565b60005460ff1690565b600054610100900460ff1681565b6100f0610263565b60005460ff1661015f576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805461ff001916610100179055565b60005460ff16156101bb576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6001805481019055565b60005460ff16610213576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6102466102e0565b604080516001600160a01b039092168252519081900360200190a1565b60005460ff16156102ae576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586102465b339056fea2646970667358221220693c87516bfd44e3140255e991e45f5780f118759893c92e4b8964367ceb939764736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b506004361061007d5760003560e01c806376657b8e1161005b57806376657b8e146100c25780638456cb59146100ca5780639958f045146100d2578063e7651d7a146100da5761007d565b806306661abd146100825780633f4ba83a1461009c5780635c975abb146100a6575b600080fd5b61008a6100e2565b60408051918252519081900360200190f35b6100a46100e8565b005b6100ae6100f2565b604080519115158252519081900360200190f35b6100ae6100fb565b6100a4610109565b6100a4610111565b6100a4610170565b60015481565b6100f06101c5565b565b60005460ff1690565b600054610100900460ff1681565b6100f0610263565b60005460ff1661015f576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805461ff001916610100179055565b60005460ff16156101bb576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6001805481019055565b60005460ff16610213576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6102466102e0565b604080516001600160a01b039092168252519081900360200190a1565b60005460ff16156102ae576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586102465b339056fea2646970667358221220693c87516bfd44e3140255e991e45f5780f118759893c92e4b8964367ceb939764736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": []}, {"type": "event", "name": "Paused", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "Unpaused", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "count", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "drasticMeasure", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "drasticMeasureTaken", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "normalProcess", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "pause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "paused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "unpause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"paused()": {"details": "Returns true if the contract is paused, and false otherwise."}}, "version": 1}}, "PullPaymentMock": {"contractName": "PullPaymentMock", "sourceId": "mocks/PullPaymentMock.sol", "deploymentBytecode": {"bytecode": "608060405260405161001090610052565b604051809103906000f08015801561002c573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905561005f565b61074f806102d483390190565b6102668061006e6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806331b3eb9414610046578063d44409911461006e578063e2982c211461009a575b600080fd5b61006c6004803603602081101561005c57600080fd5b50356001600160a01b03166100d2565b005b61006c6004803603604081101561008457600080fd5b506001600160a01b038135169060200135610138565b6100c0600480360360208110156100b057600080fd5b50356001600160a01b0316610146565b60408051918252519081900360200190f35b60008054604080516351cff8d960e01b81526001600160a01b038581166004830152915191909216926351cff8d9926024808201939182900301818387803b15801561011d57600080fd5b505af1158015610131573d6000803e3d6000fd5b5050505050565b61014282826101c6565b5050565b60008054604080516371d4ed8d60e11b81526001600160a01b0385811660048301529151919092169163e3a9db1a916024808301926020929190829003018186803b15801561019457600080fd5b505afa1580156101a8573d6000803e3d6000fd5b505050506040513d60208110156101be57600080fd5b505192915050565b600080546040805163f340fa0160e01b81526001600160a01b0386811660048301529151919092169263f340fa019285926024808301939282900301818588803b15801561021357600080fd5b505af1158015610227573d6000803e3d6000fd5b5050505050505056fea2646970667358221220430217ca8be5cafefc9f8bb3286d74119c7b29b19a64f4536f0229c13a7c66bb64736f6c634300060c0033608060405234801561001057600080fd5b50600061001b61006a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006e565b3390565b6106d28061007d6000396000f3fe6080604052600436106100555760003560e01c806351cff8d91461005a578063715018a61461008f5780638da5cb5b146100a4578063e3a9db1a146100d5578063f2fde38b1461011a578063f340fa011461014d575b600080fd5b34801561006657600080fd5b5061008d6004803603602081101561007d57600080fd5b50356001600160a01b0316610173565b005b34801561009b57600080fd5b5061008d610236565b3480156100b057600080fd5b506100b96102d8565b604080516001600160a01b039092168252519081900360200190f35b3480156100e157600080fd5b50610108600480360360208110156100f857600080fd5b50356001600160a01b03166102e7565b60408051918252519081900360200190f35b34801561012657600080fd5b5061008d6004803603602081101561013d57600080fd5b50356001600160a01b0316610302565b61008d6004803603602081101561016357600080fd5b50356001600160a01b03166103fa565b61017b6104cd565b6000546001600160a01b039081169116146101cb576040805162461bcd60e51b8152602060048201819052602482015260008051602061067d833981519152604482015290519081900360640190fd5b6001600160a01b03811660008181526001602052604081208054919055906101f390826104d1565b6040805182815290516001600160a01b038416917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a25050565b61023e6104cd565b6000546001600160a01b0390811691161461028e576040805162461bcd60e51b8152602060048201819052602482015260008051602061067d833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6001600160a01b031660009081526001602052604090205490565b61030a6104cd565b6000546001600160a01b0390811691161461035a576040805162461bcd60e51b8152602060048201819052602482015260008051602061067d833981519152604482015290519081900360640190fd5b6001600160a01b03811661039f5760405162461bcd60e51b815260040180806020018281038252602681526020018061061d6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6104026104cd565b6000546001600160a01b03908116911614610452576040805162461bcd60e51b8152602060048201819052602482015260008051602061067d833981519152604482015290519081900360640190fd5b6001600160a01b038116600090815260016020526040902054349061047790826105bb565b6001600160a01b038316600081815260016020908152604091829020939093558051848152905191927f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c492918290030190a25050565b3390565b80471015610526576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114610571576040519150601f19603f3d011682016040523d82523d6000602084013e610576565b606091505b50509050806105b65760405162461bcd60e51b815260040180806020018281038252603a815260200180610643603a913960400191505060405180910390fd5b505050565b600082820183811015610615576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d617920686176652072657665727465644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220b570fd6f36e65b927206a3d1319192cd61158233783cbe788d6a2826fa7c374264736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100415760003560e01c806331b3eb9414610046578063d44409911461006e578063e2982c211461009a575b600080fd5b61006c6004803603602081101561005c57600080fd5b50356001600160a01b03166100d2565b005b61006c6004803603604081101561008457600080fd5b506001600160a01b038135169060200135610138565b6100c0600480360360208110156100b057600080fd5b50356001600160a01b0316610146565b60408051918252519081900360200190f35b60008054604080516351cff8d960e01b81526001600160a01b038581166004830152915191909216926351cff8d9926024808201939182900301818387803b15801561011d57600080fd5b505af1158015610131573d6000803e3d6000fd5b5050505050565b61014282826101c6565b5050565b60008054604080516371d4ed8d60e11b81526001600160a01b0385811660048301529151919092169163e3a9db1a916024808301926020929190829003018186803b15801561019457600080fd5b505afa1580156101a8573d6000803e3d6000fd5b505050506040513d60208110156101be57600080fd5b505192915050565b600080546040805163f340fa0160e01b81526001600160a01b0386811660048301529151919092169263f340fa019285926024808301939282900301818588803b15801561021357600080fd5b505af1158015610227573d6000803e3d6000fd5b5050505050505056fea2646970667358221220430217ca8be5cafefc9f8bb3286d74119c7b29b19a64f4536f0229c13a7c66bb64736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "payable", "inputs": []}, {"type": "function", "name": "callTransfer", "stateMutability": "nonpayable", "inputs": [{"name": "dest", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "payments", "stateMutability": "view", "inputs": [{"name": "dest", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "withdrawPayments", "stateMutability": "nonpayable", "inputs": [{"name": "payee", "type": "address", "internalType": "address payable"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"payments(address)": {"details": "Returns the payments owed to an address.", "params": {"dest": "The creditor's address."}}, "withdrawPayments(address)": {"details": "Withdraw accumulated payments, forwarding all gas to the recipient. Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.", "params": {"payee": "Whose payments will be withdrawn."}}}, "version": 1}}, "ReentrancyAttack": {"contractName": "ReentrancyAttack", "sourceId": "mocks/ReentrancyAttack.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b506101c4806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630a2df1ed14610030575b600080fd5b6100576004803603602081101561004657600080fd5b50356001600160e01b031916610059565b005b600061006361018a565b60408051600481526024810182526020810180516001600160e01b03166001600160e01b03198716178152915181516001600160a01b039490941693919290918291908083835b602083106100c95780518252601f1990920191602091820191016100aa565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461012b576040519150601f19603f3d011682016040523d82523d6000602084013e610130565b606091505b5050905080610186576040805162461bcd60e51b815260206004820152601d60248201527f5265656e7472616e637941747461636b3a206661696c65642063616c6c000000604482015290519081900360640190fd5b5050565b339056fea26469706673582212207d41ac44fff832a9120ff015e14809cf2f3b9d3e37680e6e8c999a83552c831164736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b506004361061002b5760003560e01c80630a2df1ed14610030575b600080fd5b6100576004803603602081101561004657600080fd5b50356001600160e01b031916610059565b005b600061006361018a565b60408051600481526024810182526020810180516001600160e01b03166001600160e01b03198716178152915181516001600160a01b039490941693919290918291908083835b602083106100c95780518252601f1990920191602091820191016100aa565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461012b576040519150601f19603f3d011682016040523d82523d6000602084013e610130565b606091505b5050905080610186576040805162461bcd60e51b815260206004820152601d60248201527f5265656e7472616e637941747461636b3a206661696c65642063616c6c000000604482015290519081900360640190fd5b5050565b339056fea26469706673582212207d41ac44fff832a9120ff015e14809cf2f3b9d3e37680e6e8c999a83552c831164736f6c634300060c0033"}, "abi": [{"type": "function", "name": "callSender", "stateMutability": "nonpayable", "inputs": [{"name": "data", "type": "bytes4", "internalType": "bytes4"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ReentrancyMock": {"contractName": "ReentrancyMock", "sourceId": "mocks/ReentrancyMock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b50600160008181559055610478806100296000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063083b27321461005c57806361bc221a146100665780638c5344fa1461008057806396ffa6901461009d578063b672ad8b146100ba575b600080fd5b6100646100e0565b005b61006e61013a565b60408051918252519081900360200190f35b6100646004803603602081101561009657600080fd5b5035610140565b610064600480360360208110156100b357600080fd5b50356102ce565b610064600480360360208110156100d057600080fd5b50356001600160a01b0316610333565b60026000541415610126576040805162461bcd60e51b815260206004820152601f6024820152600080516020610423833981519152604482015290519081900360640190fd5b6002600055610133610418565b6001600055565b60015481565b60026000541415610186576040805162461bcd60e51b815260206004820152601f6024820152600080516020610423833981519152604482015290519081900360640190fd5b600260005580156102c657610199610418565b60408051600019830160248083019190915282518083039091018152604490910182526020810180516001600160e01b0316634629a27d60e11b17815291518151600093309392918291908083835b602083106102075780518252601f1990920191602091820191016101e8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610269576040519150601f19603f3d011682016040523d82523d6000602084013e61026e565b606091505b50509050806102c4576040805162461bcd60e51b815260206004820152601b60248201527f5265656e7472616e63794d6f636b3a206661696c65642063616c6c0000000000604482015290519081900360640190fd5b505b506001600055565b60026000541415610314576040805162461bcd60e51b815260206004820152601f6024820152600080516020610423833981519152604482015290519081900360640190fd5b600260005580156102c657610327610418565b6102c6600182036102ce565b60026000541415610379576040805162461bcd60e51b815260206004820152601f6024820152600080516020610423833981519152604482015290519081900360640190fd5b6002600055610386610418565b60408051630a2df1ed60e01b815263041d939960e11b600482015290517f083b2732f78169bfaad6b407fa338cc97d697ed69d3915a18239cc111d51a402916001600160a01b03841691630a2df1ed9160248082019260009290919082900301818387803b1580156103f757600080fd5b505af115801561040b573d6000803e3d6000fd5b5050600160005550505050565b600180548101905556fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00a26469706673582212208d1724d61b34cb533949e1532702f12165713e800a5a4f27665d32ef4d9bd47564736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100575760003560e01c8063083b27321461005c57806361bc221a146100665780638c5344fa1461008057806396ffa6901461009d578063b672ad8b146100ba575b600080fd5b6100646100e0565b005b61006e61013a565b60408051918252519081900360200190f35b6100646004803603602081101561009657600080fd5b5035610140565b610064600480360360208110156100b357600080fd5b50356102ce565b610064600480360360208110156100d057600080fd5b50356001600160a01b0316610333565b60026000541415610126576040805162461bcd60e51b815260206004820152601f6024820152600080516020610423833981519152604482015290519081900360640190fd5b6002600055610133610418565b6001600055565b60015481565b60026000541415610186576040805162461bcd60e51b815260206004820152601f6024820152600080516020610423833981519152604482015290519081900360640190fd5b600260005580156102c657610199610418565b60408051600019830160248083019190915282518083039091018152604490910182526020810180516001600160e01b0316634629a27d60e11b17815291518151600093309392918291908083835b602083106102075780518252601f1990920191602091820191016101e8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610269576040519150601f19603f3d011682016040523d82523d6000602084013e61026e565b606091505b50509050806102c4576040805162461bcd60e51b815260206004820152601b60248201527f5265656e7472616e63794d6f636b3a206661696c65642063616c6c0000000000604482015290519081900360640190fd5b505b506001600055565b60026000541415610314576040805162461bcd60e51b815260206004820152601f6024820152600080516020610423833981519152604482015290519081900360640190fd5b600260005580156102c657610327610418565b6102c6600182036102ce565b60026000541415610379576040805162461bcd60e51b815260206004820152601f6024820152600080516020610423833981519152604482015290519081900360640190fd5b6002600055610386610418565b60408051630a2df1ed60e01b815263041d939960e11b600482015290517f083b2732f78169bfaad6b407fa338cc97d697ed69d3915a18239cc111d51a402916001600160a01b03841691630a2df1ed9160248082019260009290919082900301818387803b1580156103f757600080fd5b505af115801561040b573d6000803e3d6000fd5b5050600160005550505050565b600180548101905556fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00a26469706673582212208d1724d61b34cb533949e1532702f12165713e800a5a4f27665d32ef4d9bd47564736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": []}, {"type": "function", "name": "callback", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "countAndCall", "stateMutability": "nonpayable", "inputs": [{"name": "attacker", "type": "address", "internalType": "contract ReentrancyAttack"}], "outputs": []}, {"type": "function", "name": "countLocalRecursive", "stateMutability": "nonpayable", "inputs": [{"name": "n", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "countThisRecursive", "stateMutability": "nonpayable", "inputs": [{"name": "n", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "counter", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "SafeCastMock": {"contractName": "SafeCastMock", "sourceId": "mocks/SafeCastMock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b50610871806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063cf65b4d311610071578063cf65b4d314610206578063d6bd32aa1461023a578063dd2a03161461026e578063dfbe873b146102a2578063f136dc02146102d1578063fdcf791b14610305576100b4565b80630cc4681e146100b95780632665fad0146100ec578063809fdd33146101265780639374068f146101685780639c6f59be1461019c578063c8193255146101d0575b600080fd5b6100d6600480360360208110156100cf57600080fd5b5035610322565b6040805160ff9092168252519081900360200190f35b6101096004803603602081101561010257600080fd5b5035610333565b6040805167ffffffffffffffff9092168252519081900360200190f35b6101436004803603602081101561013c57600080fd5b503561033e565b604080516fffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101856004803603602081101561017e57600080fd5b5035610349565b6040805161ffff9092168252519081900360200190f35b6101b9600480360360208110156101b257600080fd5b5035610354565b6040805160039290920b8252519081900360200190f35b6101ed600480360360208110156101e657600080fd5b503561035f565b6040805163ffffffff9092168252519081900360200190f35b6102236004803603602081101561021c57600080fd5b503561036a565b6040805160019290920b8252519081900360200190f35b6102576004803603602081101561025057600080fd5b5035610375565b6040805160079290920b8252519081900360200190f35b61028b6004803603602081101561028457600080fd5b5035610380565b60408051600f9290920b8252519081900360200190f35b6102bf600480360360208110156102b857600080fd5b503561038b565b60408051918252519081900360200190f35b6102ee600480360360208110156102e757600080fd5b5035610396565b6040805160009290920b8252519081900360200190f35b6102bf6004803603602081101561031b57600080fd5b50356103a1565b600061032d826103ac565b92915050565b600061032d826103f2565b600061032d8261043b565b600061032d8261047f565b600061032d826104c2565b600061032d82610517565b600061032d8261055c565b600061032d826105ad565b600061032d8261060a565b600061032d8261066b565b600061032d826106af565b600061032d826106fe565b600061010082106103ee5760405162461bcd60e51b815260040180806020018281038252602581526020018061077c6025913960400191505060405180910390fd5b5090565b60006801000000000000000082106103ee5760405162461bcd60e51b81526004018080602001828103825260268152602001806107c86026913960400191505060405180910390fd5b6000600160801b82106103ee5760405162461bcd60e51b81526004018080602001828103825260278152602001806107a16027913960400191505060405180910390fd5b60006201000082106103ee5760405162461bcd60e51b81526004018080602001828103825260268152602001806107566026913960400191505060405180910390fd5b6000637fffffff1982121580156104dc5750638000000082125b6103ee5760405162461bcd60e51b81526004018080602001828103825260268152602001806107ee6026913960400191505060405180910390fd5b600064010000000082106103ee5760405162461bcd60e51b81526004018080602001828103825260268152602001806107ee6026913960400191505060405180910390fd5b6000617fff198212158015610572575061800082125b6103ee5760405162461bcd60e51b81526004018080602001828103825260268152602001806107566026913960400191505060405180910390fd5b6000677fffffffffffffff1982121580156105cf575067800000000000000082125b6103ee5760405162461bcd60e51b81526004018080602001828103825260268152602001806107c86026913960400191505060405180910390fd5b60006f7fffffffffffffffffffffffffffffff19821215801561063057506001607f1b82125b6103ee5760405162461bcd60e51b81526004018080602001828103825260278152602001806107a16027913960400191505060405180910390fd5b6000600160ff1b82106103ee5760405162461bcd60e51b81526004018080602001828103825260288152602001806108146028913960400191505060405180910390fd5b6000607f1982121580156106c35750608082125b6103ee5760405162461bcd60e51b815260040180806020018281038252602581526020018061077c6025913960400191505060405180910390fd5b6000808212156103ee576040805162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015290519081900360640190fdfe53616665436173743a2076616c756520646f65736e27742066697420696e203136206269747353616665436173743a2076616c756520646f65736e27742066697420696e2038206269747353616665436173743a2076616c756520646f65736e27742066697420696e20313238206269747353616665436173743a2076616c756520646f65736e27742066697420696e203634206269747353616665436173743a2076616c756520646f65736e27742066697420696e203332206269747353616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e74323536a264697066735822122045fe965a4a022a62cc42d4c8e2cde4e541797c1917c0927024a9c9e9ea5107a164736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100b45760003560e01c8063cf65b4d311610071578063cf65b4d314610206578063d6bd32aa1461023a578063dd2a03161461026e578063dfbe873b146102a2578063f136dc02146102d1578063fdcf791b14610305576100b4565b80630cc4681e146100b95780632665fad0146100ec578063809fdd33146101265780639374068f146101685780639c6f59be1461019c578063c8193255146101d0575b600080fd5b6100d6600480360360208110156100cf57600080fd5b5035610322565b6040805160ff9092168252519081900360200190f35b6101096004803603602081101561010257600080fd5b5035610333565b6040805167ffffffffffffffff9092168252519081900360200190f35b6101436004803603602081101561013c57600080fd5b503561033e565b604080516fffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101856004803603602081101561017e57600080fd5b5035610349565b6040805161ffff9092168252519081900360200190f35b6101b9600480360360208110156101b257600080fd5b5035610354565b6040805160039290920b8252519081900360200190f35b6101ed600480360360208110156101e657600080fd5b503561035f565b6040805163ffffffff9092168252519081900360200190f35b6102236004803603602081101561021c57600080fd5b503561036a565b6040805160019290920b8252519081900360200190f35b6102576004803603602081101561025057600080fd5b5035610375565b6040805160079290920b8252519081900360200190f35b61028b6004803603602081101561028457600080fd5b5035610380565b60408051600f9290920b8252519081900360200190f35b6102bf600480360360208110156102b857600080fd5b503561038b565b60408051918252519081900360200190f35b6102ee600480360360208110156102e757600080fd5b5035610396565b6040805160009290920b8252519081900360200190f35b6102bf6004803603602081101561031b57600080fd5b50356103a1565b600061032d826103ac565b92915050565b600061032d826103f2565b600061032d8261043b565b600061032d8261047f565b600061032d826104c2565b600061032d82610517565b600061032d8261055c565b600061032d826105ad565b600061032d8261060a565b600061032d8261066b565b600061032d826106af565b600061032d826106fe565b600061010082106103ee5760405162461bcd60e51b815260040180806020018281038252602581526020018061077c6025913960400191505060405180910390fd5b5090565b60006801000000000000000082106103ee5760405162461bcd60e51b81526004018080602001828103825260268152602001806107c86026913960400191505060405180910390fd5b6000600160801b82106103ee5760405162461bcd60e51b81526004018080602001828103825260278152602001806107a16027913960400191505060405180910390fd5b60006201000082106103ee5760405162461bcd60e51b81526004018080602001828103825260268152602001806107566026913960400191505060405180910390fd5b6000637fffffff1982121580156104dc5750638000000082125b6103ee5760405162461bcd60e51b81526004018080602001828103825260268152602001806107ee6026913960400191505060405180910390fd5b600064010000000082106103ee5760405162461bcd60e51b81526004018080602001828103825260268152602001806107ee6026913960400191505060405180910390fd5b6000617fff198212158015610572575061800082125b6103ee5760405162461bcd60e51b81526004018080602001828103825260268152602001806107566026913960400191505060405180910390fd5b6000677fffffffffffffff1982121580156105cf575067800000000000000082125b6103ee5760405162461bcd60e51b81526004018080602001828103825260268152602001806107c86026913960400191505060405180910390fd5b60006f7fffffffffffffffffffffffffffffff19821215801561063057506001607f1b82125b6103ee5760405162461bcd60e51b81526004018080602001828103825260278152602001806107a16027913960400191505060405180910390fd5b6000600160ff1b82106103ee5760405162461bcd60e51b81526004018080602001828103825260288152602001806108146028913960400191505060405180910390fd5b6000607f1982121580156106c35750608082125b6103ee5760405162461bcd60e51b815260040180806020018281038252602581526020018061077c6025913960400191505060405180910390fd5b6000808212156103ee576040805162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015290519081900360640190fdfe53616665436173743a2076616c756520646f65736e27742066697420696e203136206269747353616665436173743a2076616c756520646f65736e27742066697420696e2038206269747353616665436173743a2076616c756520646f65736e27742066697420696e20313238206269747353616665436173743a2076616c756520646f65736e27742066697420696e203634206269747353616665436173743a2076616c756520646f65736e27742066697420696e203332206269747353616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e74323536a264697066735822122045fe965a4a022a62cc42d4c8e2cde4e541797c1917c0927024a9c9e9ea5107a164736f6c634300060c0033"}, "abi": [{"type": "function", "name": "toInt128", "stateMutability": "pure", "inputs": [{"name": "a", "type": "int256", "internalType": "int256"}], "outputs": [{"name": "", "type": "int128", "internalType": "int128"}]}, {"type": "function", "name": "toInt16", "stateMutability": "pure", "inputs": [{"name": "a", "type": "int256", "internalType": "int256"}], "outputs": [{"name": "", "type": "int16", "internalType": "int16"}]}, {"type": "function", "name": "toInt256", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "int256", "internalType": "int256"}]}, {"type": "function", "name": "toInt32", "stateMutability": "pure", "inputs": [{"name": "a", "type": "int256", "internalType": "int256"}], "outputs": [{"name": "", "type": "int32", "internalType": "int32"}]}, {"type": "function", "name": "toInt64", "stateMutability": "pure", "inputs": [{"name": "a", "type": "int256", "internalType": "int256"}], "outputs": [{"name": "", "type": "int64", "internalType": "int64"}]}, {"type": "function", "name": "toInt8", "stateMutability": "pure", "inputs": [{"name": "a", "type": "int256", "internalType": "int256"}], "outputs": [{"name": "", "type": "int8", "internalType": "int8"}]}, {"type": "function", "name": "toUint128", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint128", "internalType": "uint128"}]}, {"type": "function", "name": "toUint16", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint16", "internalType": "uint16"}]}, {"type": "function", "name": "toUint256", "stateMutability": "pure", "inputs": [{"name": "a", "type": "int256", "internalType": "int256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "toUint32", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint32", "internalType": "uint32"}]}, {"type": "function", "name": "toUint64", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint64", "internalType": "uint64"}]}, {"type": "function", "name": "toUint8", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ERC20NoReturnMock": {"contractName": "ERC20NoReturnMock", "sourceId": "mocks/SafeERC20Helper.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b506101af806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063095ea7b31461005c57806323b872dd1461008a5780633ba93f26146100c0578063a9059cbb1461005c578063dd62ed3e146100dd575b600080fd5b6100886004803603604081101561007257600080fd5b506001600160a01b03813516906020013561011d565b005b610088600480360360608110156100a057600080fd5b506001600160a01b03813581169160208101359091169060400135610126565b610088600480360360208110156100d657600080fd5b5035610130565b61010b600480360360408110156100f357600080fd5b506001600160a01b0381358116916020013516610159565b60408051918252519081900360200190f35b50506000600155565b5050600060015550565b8060008061013c610175565b6001600160a01b0316815260208101919091526040016000205550565b506001600160a01b031660009081526020819052604090205490565b339056fea2646970667358221220e67861022f9eda96631d25411c65d1442ab1d7e6889a7659070bff5583b3297964736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100575760003560e01c8063095ea7b31461005c57806323b872dd1461008a5780633ba93f26146100c0578063a9059cbb1461005c578063dd62ed3e146100dd575b600080fd5b6100886004803603604081101561007257600080fd5b506001600160a01b03813516906020013561011d565b005b610088600480360360608110156100a057600080fd5b506001600160a01b03813581169160208101359091169060400135610126565b610088600480360360208110156100d657600080fd5b5035610130565b61010b600480360360408110156100f357600080fd5b506001600160a01b0381358116916020013516610159565b60408051918252519081900360200190f35b50506000600155565b5050600060015550565b8060008061013c610175565b6001600160a01b0316815260208101919091526040016000205550565b506001600160a01b031660009081526020819052604090205490565b339056fea2646970667358221220e67861022f9eda96631d25411c65d1442ab1d7e6889a7659070bff5583b3297964736f6c634300060c0033"}, "abi": [{"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "setAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "allowance_", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ERC20ReturnFalseMock": {"contractName": "ERC20ReturnFalseMock", "sourceId": "mocks/SafeERC20Helper.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b50610171806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063095ea7b31461005157806323b872dd14610091578063a9059cbb14610051578063dd62ed3e146100c7575b600080fd5b61007d6004803603604081101561006757600080fd5b506001600160a01b038135169060200135610107565b604080519115158252519081900360200190f35b61007d600480360360608110156100a757600080fd5b506001600160a01b03813581169160208101359091169060400135610113565b6100f5600480360360408110156100dd57600080fd5b506001600160a01b0381358116916020013516610121565b60408051918252519081900360200190f35b50506000600181905590565b600060018190559392505050565b600060015460001461013257600080fd5b5060009291505056fea26469706673582212204d9981714a6b199a218f864a8aac194c49ed326031a26c460da5cab17174dd5964736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b506004361061004c5760003560e01c8063095ea7b31461005157806323b872dd14610091578063a9059cbb14610051578063dd62ed3e146100c7575b600080fd5b61007d6004803603604081101561006757600080fd5b506001600160a01b038135169060200135610107565b604080519115158252519081900360200190f35b61007d600480360360608110156100a757600080fd5b506001600160a01b03813581169160208101359091169060400135610113565b6100f5600480360360408110156100dd57600080fd5b506001600160a01b0381358116916020013516610121565b60408051918252519081900360200190f35b50506000600181905590565b600060018190559392505050565b600060015460001461013257600080fd5b5060009291505056fea26469706673582212204d9981714a6b199a218f864a8aac194c49ed326031a26c460da5cab17174dd5964736f6c634300060c0033"}, "abi": [{"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ERC20ReturnTrueMock": {"contractName": "ERC20ReturnTrueMock", "sourceId": "mocks/SafeERC20Helper.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b506101ca806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063095ea7b31461005c57806323b872dd1461009c5780633ba93f26146100d2578063a9059cbb1461005c578063dd62ed3e146100f1575b600080fd5b6100886004803603604081101561007257600080fd5b506001600160a01b038135169060200135610131565b604080519115158252519081900360200190f35b610088600480360360608110156100b257600080fd5b506001600160a01b0381358116916020810135909116906040013561013d565b6100ef600480360360208110156100e857600080fd5b503561014b565b005b61011f6004803603604081101561010757600080fd5b506001600160a01b0381358116916020013516610174565b60408051918252519081900360200190f35b50506000600190815590565b600060019081559392505050565b80600080610157610190565b6001600160a01b0316815260208101919091526040016000205550565b506001600160a01b031660009081526020819052604090205490565b339056fea2646970667358221220a6b03dca0caabb7764bdd9cf2282f91f2dc9b4e4bf706af696f2b4f90fd85a1a64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100575760003560e01c8063095ea7b31461005c57806323b872dd1461009c5780633ba93f26146100d2578063a9059cbb1461005c578063dd62ed3e146100f1575b600080fd5b6100886004803603604081101561007257600080fd5b506001600160a01b038135169060200135610131565b604080519115158252519081900360200190f35b610088600480360360608110156100b257600080fd5b506001600160a01b0381358116916020810135909116906040013561013d565b6100ef600480360360208110156100e857600080fd5b503561014b565b005b61011f6004803603604081101561010757600080fd5b506001600160a01b0381358116916020013516610174565b60408051918252519081900360200190f35b50506000600190815590565b600060019081559392505050565b80600080610157610190565b6001600160a01b0316815260208101919091526040016000205550565b506001600160a01b031660009081526020819052604090205490565b339056fea2646970667358221220a6b03dca0caabb7764bdd9cf2282f91f2dc9b4e4bf706af696f2b4f90fd85a1a64736f6c634300060c0033"}, "abi": [{"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "setAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "allowance_", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "SafeERC20Wrapper": {"contractName": "SafeERC20Wrapper", "sourceId": "mocks/SafeERC20Helper.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b50604051610a73380380610a738339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055610a0e806100656000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063811c34d31161005b578063811c34d3146100db5780638a4068dd146100e3578063b759f954146100eb578063de242ff4146101085761007d565b806310bad4cf1461008257806311e330b2146100a15780633ba93f26146100be575b600080fd5b61009f6004803603602081101561009857600080fd5b5035610122565b005b61009f600480360360208110156100b757600080fd5b503561013f565b61009f600480360360208110156100d457600080fd5b5035610159565b61009f6101bc565b61009f6101d9565b61009f6004803603602081101561010157600080fd5b50356101f3565b61011061020d565b60408051918252519081900360200190f35b6000805461013c916001600160a01b039091169083610292565b50565b6000805461013c916001600160a01b03909116908361038f565b6000805460408051631dd49f9360e11b81526004810185905290516001600160a01b0390921692633ba93f269260248084019382900301818387803b1580156101a157600080fd5b505af11580156101b5573d6000803e3d6000fd5b5050505050565b600080546101d7916001600160a01b03909116908080610425565b565b600080546101d7916001600160a01b03909116908061047f565b6000805461013c916001600160a01b0390911690836104d6565b6000805460408051636eb1769f60e11b8152600481018490526024810184905290516001600160a01b039092169163dd62ed3e91604480820192602092909190829003018186803b15801561026157600080fd5b505afa158015610275573d6000803e3d6000fd5b505050506040513d602081101561028b57600080fd5b5051905090565b6000610334826040518060600160405280602981526020016109506029913960408051636eb1769f60e11b81523060048201526001600160a01b03888116602483015291519189169163dd62ed3e91604480820192602092909190829003018186803b15801561030157600080fd5b505afa158015610315573d6000803e3d6000fd5b505050506040513d602081101561032b57600080fd5b505191906105e9565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052909150610389908590610680565b50505050565b600061033482856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b1580156103f357600080fd5b505afa158015610407573d6000803e3d6000fd5b505050506040513d602081101561041d57600080fd5b505190610731565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610389908590610680565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526104d1908490610680565b505050565b80158061055c575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561052e57600080fd5b505afa158015610542573d6000803e3d6000fd5b505050506040513d602081101561055857600080fd5b5051155b6105975760405162461bcd60e51b81526004018080602001828103825260368152602001806109a36036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526104d1908490610680565b600081848411156106785760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561063d578181015183820152602001610625565b50505050905090810190601f16801561066a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60606106d5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107929092919063ffffffff16565b8051909150156104d1578080602001905160208110156106f457600080fd5b50516104d15760405162461bcd60e51b815260040180806020018281038252602a815260200180610979602a913960400191505060405180910390fd5b60008282018381101561078b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60606107a184846000856107a9565b949350505050565b60606107b485610916565b610805576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106108445780518252601f199092019160209182019101610825565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146108a6576040519150601f19603f3d011682016040523d82523d6000602084013e6108ab565b606091505b509150915081156108bf5791506107a19050565b8051156108cf5780518082602001fd5b60405162461bcd60e51b815260206004820181815286516024840152865187939192839260440191908501908083836000831561063d578181015183820152602001610625565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906107a157505015159291505056fe5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a264697066735822122040682d896969efcd8de08566b8fe8f291e96bcdce5c738d0229dfb68f266282764736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b506004361061007d5760003560e01c8063811c34d31161005b578063811c34d3146100db5780638a4068dd146100e3578063b759f954146100eb578063de242ff4146101085761007d565b806310bad4cf1461008257806311e330b2146100a15780633ba93f26146100be575b600080fd5b61009f6004803603602081101561009857600080fd5b5035610122565b005b61009f600480360360208110156100b757600080fd5b503561013f565b61009f600480360360208110156100d457600080fd5b5035610159565b61009f6101bc565b61009f6101d9565b61009f6004803603602081101561010157600080fd5b50356101f3565b61011061020d565b60408051918252519081900360200190f35b6000805461013c916001600160a01b039091169083610292565b50565b6000805461013c916001600160a01b03909116908361038f565b6000805460408051631dd49f9360e11b81526004810185905290516001600160a01b0390921692633ba93f269260248084019382900301818387803b1580156101a157600080fd5b505af11580156101b5573d6000803e3d6000fd5b5050505050565b600080546101d7916001600160a01b03909116908080610425565b565b600080546101d7916001600160a01b03909116908061047f565b6000805461013c916001600160a01b0390911690836104d6565b6000805460408051636eb1769f60e11b8152600481018490526024810184905290516001600160a01b039092169163dd62ed3e91604480820192602092909190829003018186803b15801561026157600080fd5b505afa158015610275573d6000803e3d6000fd5b505050506040513d602081101561028b57600080fd5b5051905090565b6000610334826040518060600160405280602981526020016109506029913960408051636eb1769f60e11b81523060048201526001600160a01b03888116602483015291519189169163dd62ed3e91604480820192602092909190829003018186803b15801561030157600080fd5b505afa158015610315573d6000803e3d6000fd5b505050506040513d602081101561032b57600080fd5b505191906105e9565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052909150610389908590610680565b50505050565b600061033482856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b1580156103f357600080fd5b505afa158015610407573d6000803e3d6000fd5b505050506040513d602081101561041d57600080fd5b505190610731565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610389908590610680565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526104d1908490610680565b505050565b80158061055c575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561052e57600080fd5b505afa158015610542573d6000803e3d6000fd5b505050506040513d602081101561055857600080fd5b5051155b6105975760405162461bcd60e51b81526004018080602001828103825260368152602001806109a36036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526104d1908490610680565b600081848411156106785760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561063d578181015183820152602001610625565b50505050905090810190601f16801561066a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60606106d5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107929092919063ffffffff16565b8051909150156104d1578080602001905160208110156106f457600080fd5b50516104d15760405162461bcd60e51b815260040180806020018281038252602a815260200180610979602a913960400191505060405180910390fd5b60008282018381101561078b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60606107a184846000856107a9565b949350505050565b60606107b485610916565b610805576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106108445780518252601f199092019160209182019101610825565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146108a6576040519150601f19603f3d011682016040523d82523d6000602084013e6108ab565b606091505b509150915081156108bf5791506107a19050565b8051156108cf5780518082602001fd5b60405162461bcd60e51b815260206004820181815286516024840152865187939192839260440191908501908083836000831561063d578181015183820152602001610625565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906107a157505015159291505056fe5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a264697066735822122040682d896969efcd8de08566b8fe8f291e96bcdce5c738d0229dfb68f266282764736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "token", "type": "address", "internalType": "contract IERC20"}]}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "setAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "allowance_", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "SafeMathMock": {"contractName": "SafeMathMock", "sourceId": "mocks/SafeMathMock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b50610490806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063771602f71461005c578063a391c15b14610091578063b67d77c5146100b4578063c8a4ac9c146100d7578063f43f523a146100fa575b600080fd5b61007f6004803603604081101561007257600080fd5b508035906020013561011d565b60408051918252519081900360200190f35b61007f600480360360408110156100a757600080fd5b5080359060200135610132565b61007f600480360360408110156100ca57600080fd5b508035906020013561013e565b61007f600480360360408110156100ed57600080fd5b508035906020013561014a565b61007f6004803603604081101561011057600080fd5b5080359060200135610156565b60006101298383610162565b90505b92915050565b600061012983836101bc565b600061012983836101fe565b60006101298383610240565b60006101298383610299565b600082820183811015610129576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061012983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506102db565b600061012983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061037d565b60008261024f5750600061012c565b8282028284828161025c57fe5b04146101295760405162461bcd60e51b815260040180806020018281038252602181526020018061043a6021913960400191505060405180910390fd5b600061012983836040518060400160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f00000000000000008152506103d7565b600081836103675760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561032c578181015183820152602001610314565b50505050905090810190601f1680156103595780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161037357fe5b0495945050505050565b600081848411156103cf5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561032c578181015183820152602001610314565b505050900390565b600081836104265760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561032c578181015183820152602001610314565b5082848161043057fe5b0694935050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212208acc8dcd90586075c7db32ae4f75cac7f80d070aef31ec5818048026e909d5b864736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100575760003560e01c8063771602f71461005c578063a391c15b14610091578063b67d77c5146100b4578063c8a4ac9c146100d7578063f43f523a146100fa575b600080fd5b61007f6004803603604081101561007257600080fd5b508035906020013561011d565b60408051918252519081900360200190f35b61007f600480360360408110156100a757600080fd5b5080359060200135610132565b61007f600480360360408110156100ca57600080fd5b508035906020013561013e565b61007f600480360360408110156100ed57600080fd5b508035906020013561014a565b61007f6004803603604081101561011057600080fd5b5080359060200135610156565b60006101298383610162565b90505b92915050565b600061012983836101bc565b600061012983836101fe565b60006101298383610240565b60006101298383610299565b600082820183811015610129576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061012983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506102db565b600061012983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061037d565b60008261024f5750600061012c565b8282028284828161025c57fe5b04146101295760405162461bcd60e51b815260040180806020018281038252602181526020018061043a6021913960400191505060405180910390fd5b600061012983836040518060400160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f00000000000000008152506103d7565b600081836103675760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561032c578181015183820152602001610314565b50505050905090810190601f1680156103595780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161037357fe5b0495945050505050565b600081848411156103cf5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561032c578181015183820152602001610314565b505050900390565b600081836104265760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561032c578181015183820152602001610314565b5082848161043057fe5b0694935050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212208acc8dcd90586075c7db32ae4f75cac7f80d070aef31ec5818048026e909d5b864736f6c634300060c0033"}, "abi": [{"type": "function", "name": "add", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "div", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "mod", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "mul", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "sub", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "SignedSafeMathMock": {"contractName": "SignedSafeMathMock", "sourceId": "mocks/SignedSafeMathMock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b50610416806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634350913814610051578063a5f3c23b14610086578063adefc37b146100a9578063bbe93d91146100cc575b600080fd5b6100746004803603604081101561006757600080fd5b50803590602001356100ef565b60408051918252519081900360200190f35b6100746004803603604081101561009c57600080fd5b5080359060200135610104565b610074600480360360408110156100bf57600080fd5b5080359060200135610110565b610074600480360360408110156100e257600080fd5b508035906020013561011c565b60006100fb8383610128565b90505b92915050565b60006100fb83836101e0565b60006100fb8383610245565b60006100fb83836102aa565b60008161017c576040805162461bcd60e51b815260206004820181905260248201527f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f604482015290519081900360640190fd5b816000191480156101905750600160ff1b83145b156101cc5760405162461bcd60e51b81526004018080602001828103825260218152602001806103756021913960400191505060405180910390fd5b60008284816101d757fe5b05949350505050565b60008282018183128015906101f55750838112155b8061020a575060008312801561020a57508381125b6100fb5760405162461bcd60e51b81526004018080602001828103825260218152602001806103546021913960400191505060405180910390fd5b600081830381831280159061025a5750838113155b8061026f575060008312801561026f57508381135b6100fb5760405162461bcd60e51b81526004018080602001828103825260248152602001806103bd6024913960400191505060405180910390fd5b6000826102b9575060006100fe565b826000191480156102cd5750600160ff1b82145b156103095760405162461bcd60e51b81526004018080602001828103825260278152602001806103966027913960400191505060405180910390fd5b8282028284828161031657fe5b05146100fb5760405162461bcd60e51b81526004018080602001828103825260278152602001806103966027913960400191505060405180910390fdfe5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f775369676e6564536166654d6174683a206469766973696f6e206f766572666c6f775369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f77a2646970667358221220de4c0b22553b2bac96ce7bc5633d2b01e79bd936337fc7a9a92e8d2066ba591d64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b506004361061004c5760003560e01c80634350913814610051578063a5f3c23b14610086578063adefc37b146100a9578063bbe93d91146100cc575b600080fd5b6100746004803603604081101561006757600080fd5b50803590602001356100ef565b60408051918252519081900360200190f35b6100746004803603604081101561009c57600080fd5b5080359060200135610104565b610074600480360360408110156100bf57600080fd5b5080359060200135610110565b610074600480360360408110156100e257600080fd5b508035906020013561011c565b60006100fb8383610128565b90505b92915050565b60006100fb83836101e0565b60006100fb8383610245565b60006100fb83836102aa565b60008161017c576040805162461bcd60e51b815260206004820181905260248201527f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f604482015290519081900360640190fd5b816000191480156101905750600160ff1b83145b156101cc5760405162461bcd60e51b81526004018080602001828103825260218152602001806103756021913960400191505060405180910390fd5b60008284816101d757fe5b05949350505050565b60008282018183128015906101f55750838112155b8061020a575060008312801561020a57508381125b6100fb5760405162461bcd60e51b81526004018080602001828103825260218152602001806103546021913960400191505060405180910390fd5b600081830381831280159061025a5750838113155b8061026f575060008312801561026f57508381135b6100fb5760405162461bcd60e51b81526004018080602001828103825260248152602001806103bd6024913960400191505060405180910390fd5b6000826102b9575060006100fe565b826000191480156102cd5750600160ff1b82145b156103095760405162461bcd60e51b81526004018080602001828103825260278152602001806103966027913960400191505060405180910390fd5b8282028284828161031657fe5b05146100fb5760405162461bcd60e51b81526004018080602001828103825260278152602001806103966027913960400191505060405180910390fdfe5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f775369676e6564536166654d6174683a206469766973696f6e206f766572666c6f775369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f77a2646970667358221220de4c0b22553b2bac96ce7bc5633d2b01e79bd936337fc7a9a92e8d2066ba591d64736f6c634300060c0033"}, "abi": [{"type": "function", "name": "add", "stateMutability": "pure", "inputs": [{"name": "a", "type": "int256", "internalType": "int256"}, {"name": "b", "type": "int256", "internalType": "int256"}], "outputs": [{"name": "", "type": "int256", "internalType": "int256"}]}, {"type": "function", "name": "div", "stateMutability": "pure", "inputs": [{"name": "a", "type": "int256", "internalType": "int256"}, {"name": "b", "type": "int256", "internalType": "int256"}], "outputs": [{"name": "", "type": "int256", "internalType": "int256"}]}, {"type": "function", "name": "mul", "stateMutability": "pure", "inputs": [{"name": "a", "type": "int256", "internalType": "int256"}, {"name": "b", "type": "int256", "internalType": "int256"}], "outputs": [{"name": "", "type": "int256", "internalType": "int256"}]}, {"type": "function", "name": "sub", "stateMutability": "pure", "inputs": [{"name": "a", "type": "int256", "internalType": "int256"}, {"name": "b", "type": "int256", "internalType": "int256"}], "outputs": [{"name": "", "type": "int256", "internalType": "int256"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "StringsMock": {"contractName": "StringsMock", "sourceId": "mocks/StringsMock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b506101e6806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a2bd364414610030575b600080fd5b61004d6004803603602081101561004657600080fd5b50356100c2565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561008757818101518382015260200161006f565b50505050905090810190601f1680156100b45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60606100cd826100d5565b90505b919050565b6060816100fa57506040805180820190915260018152600360fc1b60208201526100d0565b8160005b811561011257600101600a820491506100fe565b60608167ffffffffffffffff8111801561012b57600080fd5b506040519080825280601f01601f191660200182016040528015610156576020820181803683370190505b50859350905060001982015b83156101a757600a840660300160f81b8282806001900393508151811061018557fe5b60200101906001600160f81b031916908160001a905350600a84049350610162565b5094935050505056fea2646970667358221220babc7aa4b75349e20f1348db8c4a15db780fee8ae1c358ab2015628189203b9064736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a2bd364414610030575b600080fd5b61004d6004803603602081101561004657600080fd5b50356100c2565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561008757818101518382015260200161006f565b50505050905090810190601f1680156100b45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60606100cd826100d5565b90505b919050565b6060816100fa57506040805180820190915260018152600360fc1b60208201526100d0565b8160005b811561011257600101600a820491506100fe565b60608167ffffffffffffffff8111801561012b57600080fd5b506040519080825280601f01601f191660200182016040528015610156576020820181803683370190505b50859350905060001982015b83156101a757600a840660300160f81b8282806001900393508151811061018557fe5b60200101906001600160f81b031916908160001a905350600a84049350610162565b5094935050505056fea2646970667358221220babc7aa4b75349e20f1348db8c4a15db780fee8ae1c358ab2015628189203b9064736f6c634300060c0033"}, "abi": [{"type": "function", "name": "fromUint256", "stateMutability": "pure", "inputs": [{"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "PaymentSplitter": {"contractName": "PaymentSplitter", "sourceId": "payment/PaymentSplitter.sol", "deploymentBytecode": {"bytecode": "6080604052604051610ba6380380610ba68339818101604052604081101561002657600080fd5b810190808051604051939291908464010000000082111561004657600080fd5b90830190602082018581111561005b57600080fd5b825186602082028301116401000000008211171561007857600080fd5b82525081516020918201928201910280838360005b838110156100a557818101518382015260200161008d565b50505050905001604052602001805160405193929190846401000000008211156100ce57600080fd5b9083019060208201858111156100e357600080fd5b825186602082028301116401000000008211171561010057600080fd5b82525081516020918201928201910280838360005b8381101561012d578181015183820152602001610115565b50505050905001604052505050805182511461017a5760405162461bcd60e51b8152600401808060200182810382526032815260200180610b496032913960400191505060405180910390fd5b60008251116101d0576040805162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f20706179656573000000000000604482015290519081900360640190fd5b60005b825181101561021a576102128382815181106101eb57fe5b60200260200101518383815181106101ff57fe5b602002602001015161022260201b60201c565b6001016101d3565b50505061042e565b6001600160a01b0382166102675760405162461bcd60e51b815260040180806020018281038252602c815260200180610b1d602c913960400191505060405180910390fd5b600081116102bc576040805162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a20736861726573206172652030000000604482015290519081900360640190fd5b6001600160a01b038216600090815260026020526040902054156103115760405162461bcd60e51b815260040180806020018281038252602b815260200180610b7b602b913960400191505060405180910390fd5b60048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b0384169081179091556000908152600260209081526040822083905590546103829183906103cd811b6103fc17901c565b600055604080516001600160a01b03841681526020810183905281517f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac929181900390910190a15050565b600082820183811015610427576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6106e08061043d6000396000f3fe6080604052600436106100595760003560e01c806319165587146100ae5780633a98ef39146100e35780638b83209b1461010a5780639852595c14610150578063ce7c2ac214610183578063e33b7de3146101b6576100a9565b366100a9577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be7706100876101cb565b604080516001600160a01b0390921682523460208301528051918290030190a1005b600080fd5b3480156100ba57600080fd5b506100e1600480360360208110156100d157600080fd5b50356001600160a01b03166101cf565b005b3480156100ef57600080fd5b506100f8610390565b60408051918252519081900360200190f35b34801561011657600080fd5b506101346004803603602081101561012d57600080fd5b5035610396565b604080516001600160a01b039092168252519081900360200190f35b34801561015c57600080fd5b506100f86004803603602081101561017357600080fd5b50356001600160a01b03166103c0565b34801561018f57600080fd5b506100f8600480360360208110156101a657600080fd5b50356001600160a01b03166103db565b3480156101c257600080fd5b506100f86103f6565b3390565b6001600160a01b0381166000908152600260205260409020546102235760405162461bcd60e51b81526004018080602001828103825260268152602001806106396026913960400191505060405180910390fd5b600061023a600154476103fc90919063ffffffff16565b6001600160a01b0383166000908152600360209081526040808320548354600290935290832054939450919261028692916102809161027a90879061045f565b906104b8565b906104fa565b9050806102c45760405162461bcd60e51b815260040180806020018281038252602b81526020018061065f602b913960400191505060405180910390fd5b6001600160a01b0383166000908152600360205260409020546102e790826103fc565b6001600160a01b03841660009081526003602052604090205560015461030d90826103fc565b6001556040516001600160a01b0384169082156108fc029083906000818181858888f19350505050158015610346573d6000803e3d6000fd5b50604080516001600160a01b03851681526020810183905281517fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056929181900390910190a1505050565b60005490565b6000600482815481106103a557fe5b6000918252602090912001546001600160a01b031692915050565b6001600160a01b031660009081526003602052604090205490565b6001600160a01b031660009081526002602052604090205490565b60015490565b600082820183811015610456576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b60008261046e57506000610459565b8282028284828161047b57fe5b04146104565760405162461bcd60e51b815260040180806020018281038252602181526020018061068a6021913960400191505060405180910390fd5b600061045683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061053c565b600061045683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506105de565b600081836105c85760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561058d578181015183820152602001610575565b50505050905090810190601f1680156105ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816105d457fe5b0495945050505050565b600081848411156106305760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561058d578181015183820152602001610575565b50505090039056fe5061796d656e7453706c69747465723a206163636f756e7420686173206e6f207368617265735061796d656e7453706c69747465723a206163636f756e74206973206e6f7420647565207061796d656e74536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a264697066735822122011f494e075f36bc3f9a6c6a7c905c4046355392ac3a8c1b35866610fa660463764736f6c634300060c00335061796d656e7453706c69747465723a206163636f756e7420697320746865207a65726f20616464726573735061796d656e7453706c69747465723a2070617965657320616e6420736861726573206c656e677468206d69736d617463685061796d656e7453706c69747465723a206163636f756e7420616c72656164792068617320736861726573"}, "runtimeBytecode": {"bytecode": "6080604052600436106100595760003560e01c806319165587146100ae5780633a98ef39146100e35780638b83209b1461010a5780639852595c14610150578063ce7c2ac214610183578063e33b7de3146101b6576100a9565b366100a9577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be7706100876101cb565b604080516001600160a01b0390921682523460208301528051918290030190a1005b600080fd5b3480156100ba57600080fd5b506100e1600480360360208110156100d157600080fd5b50356001600160a01b03166101cf565b005b3480156100ef57600080fd5b506100f8610390565b60408051918252519081900360200190f35b34801561011657600080fd5b506101346004803603602081101561012d57600080fd5b5035610396565b604080516001600160a01b039092168252519081900360200190f35b34801561015c57600080fd5b506100f86004803603602081101561017357600080fd5b50356001600160a01b03166103c0565b34801561018f57600080fd5b506100f8600480360360208110156101a657600080fd5b50356001600160a01b03166103db565b3480156101c257600080fd5b506100f86103f6565b3390565b6001600160a01b0381166000908152600260205260409020546102235760405162461bcd60e51b81526004018080602001828103825260268152602001806106396026913960400191505060405180910390fd5b600061023a600154476103fc90919063ffffffff16565b6001600160a01b0383166000908152600360209081526040808320548354600290935290832054939450919261028692916102809161027a90879061045f565b906104b8565b906104fa565b9050806102c45760405162461bcd60e51b815260040180806020018281038252602b81526020018061065f602b913960400191505060405180910390fd5b6001600160a01b0383166000908152600360205260409020546102e790826103fc565b6001600160a01b03841660009081526003602052604090205560015461030d90826103fc565b6001556040516001600160a01b0384169082156108fc029083906000818181858888f19350505050158015610346573d6000803e3d6000fd5b50604080516001600160a01b03851681526020810183905281517fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056929181900390910190a1505050565b60005490565b6000600482815481106103a557fe5b6000918252602090912001546001600160a01b031692915050565b6001600160a01b031660009081526003602052604090205490565b6001600160a01b031660009081526002602052604090205490565b60015490565b600082820183811015610456576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b60008261046e57506000610459565b8282028284828161047b57fe5b04146104565760405162461bcd60e51b815260040180806020018281038252602181526020018061068a6021913960400191505060405180910390fd5b600061045683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061053c565b600061045683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506105de565b600081836105c85760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561058d578181015183820152602001610575565b50505050905090810190601f1680156105ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816105d457fe5b0495945050505050565b600081848411156106305760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561058d578181015183820152602001610575565b50505090039056fe5061796d656e7453706c69747465723a206163636f756e7420686173206e6f207368617265735061796d656e7453706c69747465723a206163636f756e74206973206e6f7420647565207061796d656e74536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a264697066735822122011f494e075f36bc3f9a6c6a7c905c4046355392ac3a8c1b35866610fa660463764736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "payable", "inputs": [{"name": "payees", "type": "address[]", "internalType": "address[]"}, {"name": "shares", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "event", "name": "PayeeAdded", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}, {"name": "shares", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "PaymentReceived", "inputs": [{"name": "from", "type": "address", "indexed": false, "internalType": "address"}, {"name": "amount", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "PaymentReleased", "inputs": [{"name": "to", "type": "address", "indexed": false, "internalType": "address"}, {"name": "amount", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "payee", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "release", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address payable"}], "outputs": []}, {"type": "function", "name": "released", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "shares", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "totalReleased", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "totalShares", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware that the Ether will be split in this way, since it is handled transparently by the contract. The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim an amount proportional to the percentage of total shares they were assigned. `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release} function.", "kind": "dev", "methods": {"constructor": {"details": "Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at the matching position in the `shares` array. All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no duplicates in `payees`."}, "payee(uint256)": {"details": "Getter for the address of the payee number `index`."}, "release(address)": {"details": "Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals."}, "released(address)": {"details": "Getter for the amount of Ether already released to a payee."}, "shares(address)": {"details": "Getter for the amount of shares held by an account."}, "totalReleased()": {"details": "Getter for the total amount of Ether already released."}, "totalShares()": {"details": "Getter for the total shares held by payees."}}, "title": "PaymentSplitter", "version": 1}}, "PullPayment": {"contractName": "PullPayment", "sourceId": "payment/PullPayment.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "function", "name": "payments", "stateMutability": "view", "inputs": [{"name": "dest", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "withdrawPayments", "stateMutability": "nonpayable", "inputs": [{"name": "payee", "type": "address", "internalType": "address payable"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Simple implementation of a https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment] strategy, where the paying contract doesn't interact directly with the receiver account, which must withdraw its payments itself. Pull-payments are often considered the best practice when it comes to sending Ether, security-wise. It prevents recipients from blocking execution, and eliminates reentrancy concerns. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]. To use, derive from the `PullPayment` contract, and use {_asyncTransfer} instead of Solidity's `transfer` function. Payees can query their due payments with {payments}, and retrieve them with {withdrawPayments}.", "kind": "dev", "methods": {"payments(address)": {"details": "Returns the payments owed to an address.", "params": {"dest": "The creditor's address."}}, "withdrawPayments(address)": {"details": "Withdraw accumulated payments, forwarding all gas to the recipient. Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.", "params": {"payee": "Whose payments will be withdrawn."}}}, "version": 1}}, "ConditionalEscrow": {"contractName": "ConditionalEscrow", "sourceId": "payment/escrow/ConditionalEscrow.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "event", "name": "Deposited", "inputs": [{"name": "payee", "type": "address", "indexed": true, "internalType": "address"}, {"name": "weiAmount", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "OwnershipTransferred", "inputs": [{"name": "previousOwner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "newOwner", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "Withdrawn", "inputs": [{"name": "payee", "type": "address", "indexed": true, "internalType": "address"}, {"name": "weiAmount", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "deposit", "stateMutability": "payable", "inputs": [{"name": "payee", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "depositsOf", "stateMutability": "view", "inputs": [{"name": "payee", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "owner", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "renounceOwnership", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "transferOwnership", "stateMutability": "nonpayable", "inputs": [{"name": "newOwner", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "withdraw", "stateMutability": "nonpayable", "inputs": [{"name": "payee", "type": "address", "internalType": "address payable"}], "outputs": []}, {"type": "function", "name": "withdrawalAllowed", "stateMutability": "view", "inputs": [{"name": "payee", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Base abstract escrow to only allow withdrawal if a condition is met.Intended usage: See {Escrow}. Same usage guidelines apply here.", "kind": "dev", "methods": {"deposit(address)": {"details": "Stores the sent amount as credit to be withdrawn.", "params": {"payee": "The destination address of the funds."}}, "owner()": {"details": "Returns the address of the current owner."}, "renounceOwnership()": {"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."}, "transferOwnership(address)": {"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}, "withdraw(address)": {"details": "Withdraw accumulated balance for a payee, forwarding all gas to the recipient. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.", "params": {"payee": "The address whose funds will be withdrawn and transferred to."}}, "withdrawalAllowed(address)": {"details": "Returns whether an address is allowed to withdraw their funds. To be implemented by derived contracts.", "params": {"payee": "The destination address of the funds."}}}, "title": "ConditionalEscrow", "version": 1}}, "Escrow": {"contractName": "Escrow", "sourceId": "payment/escrow/Escrow.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b50600061001b61006a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006e565b3390565b6106d28061007d6000396000f3fe6080604052600436106100555760003560e01c806351cff8d91461005a578063715018a61461008f5780638da5cb5b146100a4578063e3a9db1a146100d5578063f2fde38b1461011a578063f340fa011461014d575b600080fd5b34801561006657600080fd5b5061008d6004803603602081101561007d57600080fd5b50356001600160a01b0316610173565b005b34801561009b57600080fd5b5061008d610236565b3480156100b057600080fd5b506100b96102d8565b604080516001600160a01b039092168252519081900360200190f35b3480156100e157600080fd5b50610108600480360360208110156100f857600080fd5b50356001600160a01b03166102e7565b60408051918252519081900360200190f35b34801561012657600080fd5b5061008d6004803603602081101561013d57600080fd5b50356001600160a01b0316610302565b61008d6004803603602081101561016357600080fd5b50356001600160a01b03166103fa565b61017b6104cd565b6000546001600160a01b039081169116146101cb576040805162461bcd60e51b8152602060048201819052602482015260008051602061067d833981519152604482015290519081900360640190fd5b6001600160a01b03811660008181526001602052604081208054919055906101f390826104d1565b6040805182815290516001600160a01b038416917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a25050565b61023e6104cd565b6000546001600160a01b0390811691161461028e576040805162461bcd60e51b8152602060048201819052602482015260008051602061067d833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6001600160a01b031660009081526001602052604090205490565b61030a6104cd565b6000546001600160a01b0390811691161461035a576040805162461bcd60e51b8152602060048201819052602482015260008051602061067d833981519152604482015290519081900360640190fd5b6001600160a01b03811661039f5760405162461bcd60e51b815260040180806020018281038252602681526020018061061d6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6104026104cd565b6000546001600160a01b03908116911614610452576040805162461bcd60e51b8152602060048201819052602482015260008051602061067d833981519152604482015290519081900360640190fd5b6001600160a01b038116600090815260016020526040902054349061047790826105bb565b6001600160a01b038316600081815260016020908152604091829020939093558051848152905191927f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c492918290030190a25050565b3390565b80471015610526576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114610571576040519150601f19603f3d011682016040523d82523d6000602084013e610576565b606091505b50509050806105b65760405162461bcd60e51b815260040180806020018281038252603a815260200180610643603a913960400191505060405180910390fd5b505050565b600082820183811015610615576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d617920686176652072657665727465644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220b570fd6f36e65b927206a3d1319192cd61158233783cbe788d6a2826fa7c374264736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "6080604052600436106100555760003560e01c806351cff8d91461005a578063715018a61461008f5780638da5cb5b146100a4578063e3a9db1a146100d5578063f2fde38b1461011a578063f340fa011461014d575b600080fd5b34801561006657600080fd5b5061008d6004803603602081101561007d57600080fd5b50356001600160a01b0316610173565b005b34801561009b57600080fd5b5061008d610236565b3480156100b057600080fd5b506100b96102d8565b604080516001600160a01b039092168252519081900360200190f35b3480156100e157600080fd5b50610108600480360360208110156100f857600080fd5b50356001600160a01b03166102e7565b60408051918252519081900360200190f35b34801561012657600080fd5b5061008d6004803603602081101561013d57600080fd5b50356001600160a01b0316610302565b61008d6004803603602081101561016357600080fd5b50356001600160a01b03166103fa565b61017b6104cd565b6000546001600160a01b039081169116146101cb576040805162461bcd60e51b8152602060048201819052602482015260008051602061067d833981519152604482015290519081900360640190fd5b6001600160a01b03811660008181526001602052604081208054919055906101f390826104d1565b6040805182815290516001600160a01b038416917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a25050565b61023e6104cd565b6000546001600160a01b0390811691161461028e576040805162461bcd60e51b8152602060048201819052602482015260008051602061067d833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6001600160a01b031660009081526001602052604090205490565b61030a6104cd565b6000546001600160a01b0390811691161461035a576040805162461bcd60e51b8152602060048201819052602482015260008051602061067d833981519152604482015290519081900360640190fd5b6001600160a01b03811661039f5760405162461bcd60e51b815260040180806020018281038252602681526020018061061d6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6104026104cd565b6000546001600160a01b03908116911614610452576040805162461bcd60e51b8152602060048201819052602482015260008051602061067d833981519152604482015290519081900360640190fd5b6001600160a01b038116600090815260016020526040902054349061047790826105bb565b6001600160a01b038316600081815260016020908152604091829020939093558051848152905191927f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c492918290030190a25050565b3390565b80471015610526576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114610571576040519150601f19603f3d011682016040523d82523d6000602084013e610576565b606091505b50509050806105b65760405162461bcd60e51b815260040180806020018281038252603a815260200180610643603a913960400191505060405180910390fd5b505050565b600082820183811015610615576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d617920686176652072657665727465644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220b570fd6f36e65b927206a3d1319192cd61158233783cbe788d6a2826fa7c374264736f6c634300060c0033"}, "abi": [{"type": "event", "name": "Deposited", "inputs": [{"name": "payee", "type": "address", "indexed": true, "internalType": "address"}, {"name": "weiAmount", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "OwnershipTransferred", "inputs": [{"name": "previousOwner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "newOwner", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "Withdrawn", "inputs": [{"name": "payee", "type": "address", "indexed": true, "internalType": "address"}, {"name": "weiAmount", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "deposit", "stateMutability": "payable", "inputs": [{"name": "payee", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "depositsOf", "stateMutability": "view", "inputs": [{"name": "payee", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "owner", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "renounceOwnership", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "transferOwnership", "stateMutability": "nonpayable", "inputs": [{"name": "newOwner", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "withdraw", "stateMutability": "nonpayable", "inputs": [{"name": "payee", "type": "address", "internalType": "address payable"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Base escrow contract, holds funds designated for a payee until they withdraw them. Intended usage: This contract (and derived escrow contracts) should be a standalone contract, that only interacts with the contract that instantiated it. That way, it is guaranteed that all Ether will be handled according to the `Escrow` rules, and there is no need to check for payable functions or transfers in the inheritance tree. The contract that uses the escrow as its payment method should be its owner, and provide public methods redirecting to the escrow's deposit and withdraw.", "kind": "dev", "methods": {"deposit(address)": {"details": "Stores the sent amount as credit to be withdrawn.", "params": {"payee": "The destination address of the funds."}}, "owner()": {"details": "Returns the address of the current owner."}, "renounceOwnership()": {"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."}, "transferOwnership(address)": {"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}, "withdraw(address)": {"details": "Withdraw accumulated balance for a payee, forwarding all gas to the recipient. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.", "params": {"payee": "The address whose funds will be withdrawn and transferred to."}}}, "title": "Escrow", "version": 1}}, "RefundEscrow": {"contractName": "RefundEscrow", "sourceId": "payment/escrow/RefundEscrow.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b50604051610d4f380380610d4f8339818101604052602081101561003357600080fd5b5051600061003f6100fe565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b0381166100ce5760405162461bcd60e51b815260040180806020018281038252602d815260200180610d22602d913960400191505060405180910390fd5b6002805460ff196001600160a01b039390931661010002610100600160a81b031990911617919091169055610102565b3390565b610c11806101116000396000f3fe6080604052600436106100a75760003560e01c80638da5cb5b116100645780638da5cb5b146101985780639af6549a146101ad578063c19d93fb146101c2578063e3a9db1a146101f8578063f2fde38b1461023d578063f340fa0114610270576100a7565b806338af3eed146100ac57806343d726d6146100dd57806351cff8d9146100f4578063685ca19414610127578063715018a61461016e5780638c52dc4114610183575b600080fd5b3480156100b857600080fd5b506100c1610296565b604080516001600160a01b039092168252519081900360200190f35b3480156100e957600080fd5b506100f26102aa565b005b34801561010057600080fd5b506100f26004803603602081101561011757600080fd5b50356001600160a01b0316610388565b34801561013357600080fd5b5061015a6004803603602081101561014a57600080fd5b50356001600160a01b03166103d8565b604080519115158252519081900360200190f35b34801561017a57600080fd5b506100f26103f4565b34801561018f57600080fd5b506100f2610496565b3480156101a457600080fd5b506100c1610575565b3480156101b957600080fd5b506100f2610584565b3480156101ce57600080fd5b506101d7610611565b604051808260028111156101e757fe5b815260200191505060405180910390f35b34801561020457600080fd5b5061022b6004803603602081101561021b57600080fd5b50356001600160a01b031661061a565b60408051918252519081900360200190f35b34801561024957600080fd5b506100f26004803603602081101561026057600080fd5b50356001600160a01b0316610635565b6100f26004803603602081101561028657600080fd5b50356001600160a01b031661072d565b60025461010090046001600160a01b031690565b6102b2610785565b6000546001600160a01b03908116911614610302576040805162461bcd60e51b81526020600482018190526024820152600080516020610b8a833981519152604482015290519081900360640190fd5b60006002805460ff169081111561031557fe5b146103515760405162461bcd60e51b8152600401808060200182810382526029815260200180610b616029913960400191505060405180910390fd5b6002805460ff1916811790556040517f088672c3a6e342f7cd94a65ba63b79df24a8973927b4d05d803c44bbf787d12f90600090a1565b610391816103d8565b6103cc5760405162461bcd60e51b8152600401808060200182810382526033815260200180610b2e6033913960400191505060405180910390fd5b6103d581610789565b50565b600060016002805460ff16908111156103ed57fe5b1492915050565b6103fc610785565b6000546001600160a01b0390811691161461044c576040805162461bcd60e51b81526020600482018190526024820152600080516020610b8a833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b61049e610785565b6000546001600160a01b039081169116146104ee576040805162461bcd60e51b81526020600482018190526024820152600080516020610b8a833981519152604482015290519081900360640190fd5b60006002805460ff169081111561050157fe5b1461053d5760405162461bcd60e51b8152600401808060200182810382526032815260200180610baa6032913960400191505060405180910390fd5b6002805460ff191660011790556040517f599d8e5a83cffb867d051598c4d70e805d59802d8081c1c7d6dffc5b6aca2b8990600090a1565b6000546001600160a01b031690565b6002805460ff168181111561059557fe5b146105d15760405162461bcd60e51b8152600401808060200182810382526038815260200180610a6b6038913960400191505060405180910390fd5b6002546040516001600160a01b0361010090920491909116904780156108fc02916000818181858888f193505050501580156103d5573d6000803e3d6000fd5b60025460ff1690565b6001600160a01b031660009081526001602052604090205490565b61063d610785565b6000546001600160a01b0390811691161461068d576040805162461bcd60e51b81526020600482018190526024820152600080516020610b8a833981519152604482015290519081900360640190fd5b6001600160a01b0381166106d25760405162461bcd60e51b8152600401808060200182810382526026815260200180610aa36026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006002805460ff169081111561074057fe5b1461077c5760405162461bcd60e51b815260040180806020018281038252602b815260200180610b03602b913960400191505060405180910390fd5b6103d58161084c565b3390565b610791610785565b6000546001600160a01b039081169116146107e1576040805162461bcd60e51b81526020600482018190526024820152600080516020610b8a833981519152604482015290519081900360640190fd5b6001600160a01b0381166000818152600160205260408120805491905590610809908261091f565b6040805182815290516001600160a01b038416917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a25050565b610854610785565b6000546001600160a01b039081169116146108a4576040805162461bcd60e51b81526020600482018190526024820152600080516020610b8a833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526001602052604090205434906108c99082610a09565b6001600160a01b038316600081815260016020908152604091829020939093558051848152905191927f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c492918290030190a25050565b80471015610974576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d80600081146109bf576040519150601f19603f3d011682016040523d82523d6000602084013e6109c4565b606091505b5050905080610a045760405162461bcd60e51b815260040180806020018281038252603a815260200180610ac9603a913960400191505060405180910390fd5b505050565b600082820183811015610a63576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fe526566756e64457363726f773a2062656e65666963696172792063616e206f6e6c79207769746864726177207768696c6520636c6f7365644f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564526566756e64457363726f773a2063616e206f6e6c79206465706f736974207768696c6520616374697665436f6e646974696f6e616c457363726f773a207061796565206973206e6f7420616c6c6f77656420746f207769746864726177526566756e64457363726f773a2063616e206f6e6c7920636c6f7365207768696c65206163746976654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572526566756e64457363726f773a2063616e206f6e6c7920656e61626c6520726566756e6473207768696c6520616374697665a26469706673582212202779aedd0edfda20ba2d4398e521b51a71d7d567b8ab0029603b69ab432841cb64736f6c634300060c0033526566756e64457363726f773a2062656e656669636961727920697320746865207a65726f2061646472657373"}, "runtimeBytecode": {"bytecode": "6080604052600436106100a75760003560e01c80638da5cb5b116100645780638da5cb5b146101985780639af6549a146101ad578063c19d93fb146101c2578063e3a9db1a146101f8578063f2fde38b1461023d578063f340fa0114610270576100a7565b806338af3eed146100ac57806343d726d6146100dd57806351cff8d9146100f4578063685ca19414610127578063715018a61461016e5780638c52dc4114610183575b600080fd5b3480156100b857600080fd5b506100c1610296565b604080516001600160a01b039092168252519081900360200190f35b3480156100e957600080fd5b506100f26102aa565b005b34801561010057600080fd5b506100f26004803603602081101561011757600080fd5b50356001600160a01b0316610388565b34801561013357600080fd5b5061015a6004803603602081101561014a57600080fd5b50356001600160a01b03166103d8565b604080519115158252519081900360200190f35b34801561017a57600080fd5b506100f26103f4565b34801561018f57600080fd5b506100f2610496565b3480156101a457600080fd5b506100c1610575565b3480156101b957600080fd5b506100f2610584565b3480156101ce57600080fd5b506101d7610611565b604051808260028111156101e757fe5b815260200191505060405180910390f35b34801561020457600080fd5b5061022b6004803603602081101561021b57600080fd5b50356001600160a01b031661061a565b60408051918252519081900360200190f35b34801561024957600080fd5b506100f26004803603602081101561026057600080fd5b50356001600160a01b0316610635565b6100f26004803603602081101561028657600080fd5b50356001600160a01b031661072d565b60025461010090046001600160a01b031690565b6102b2610785565b6000546001600160a01b03908116911614610302576040805162461bcd60e51b81526020600482018190526024820152600080516020610b8a833981519152604482015290519081900360640190fd5b60006002805460ff169081111561031557fe5b146103515760405162461bcd60e51b8152600401808060200182810382526029815260200180610b616029913960400191505060405180910390fd5b6002805460ff1916811790556040517f088672c3a6e342f7cd94a65ba63b79df24a8973927b4d05d803c44bbf787d12f90600090a1565b610391816103d8565b6103cc5760405162461bcd60e51b8152600401808060200182810382526033815260200180610b2e6033913960400191505060405180910390fd5b6103d581610789565b50565b600060016002805460ff16908111156103ed57fe5b1492915050565b6103fc610785565b6000546001600160a01b0390811691161461044c576040805162461bcd60e51b81526020600482018190526024820152600080516020610b8a833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b61049e610785565b6000546001600160a01b039081169116146104ee576040805162461bcd60e51b81526020600482018190526024820152600080516020610b8a833981519152604482015290519081900360640190fd5b60006002805460ff169081111561050157fe5b1461053d5760405162461bcd60e51b8152600401808060200182810382526032815260200180610baa6032913960400191505060405180910390fd5b6002805460ff191660011790556040517f599d8e5a83cffb867d051598c4d70e805d59802d8081c1c7d6dffc5b6aca2b8990600090a1565b6000546001600160a01b031690565b6002805460ff168181111561059557fe5b146105d15760405162461bcd60e51b8152600401808060200182810382526038815260200180610a6b6038913960400191505060405180910390fd5b6002546040516001600160a01b0361010090920491909116904780156108fc02916000818181858888f193505050501580156103d5573d6000803e3d6000fd5b60025460ff1690565b6001600160a01b031660009081526001602052604090205490565b61063d610785565b6000546001600160a01b0390811691161461068d576040805162461bcd60e51b81526020600482018190526024820152600080516020610b8a833981519152604482015290519081900360640190fd5b6001600160a01b0381166106d25760405162461bcd60e51b8152600401808060200182810382526026815260200180610aa36026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006002805460ff169081111561074057fe5b1461077c5760405162461bcd60e51b815260040180806020018281038252602b815260200180610b03602b913960400191505060405180910390fd5b6103d58161084c565b3390565b610791610785565b6000546001600160a01b039081169116146107e1576040805162461bcd60e51b81526020600482018190526024820152600080516020610b8a833981519152604482015290519081900360640190fd5b6001600160a01b0381166000818152600160205260408120805491905590610809908261091f565b6040805182815290516001600160a01b038416917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a25050565b610854610785565b6000546001600160a01b039081169116146108a4576040805162461bcd60e51b81526020600482018190526024820152600080516020610b8a833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526001602052604090205434906108c99082610a09565b6001600160a01b038316600081815260016020908152604091829020939093558051848152905191927f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c492918290030190a25050565b80471015610974576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d80600081146109bf576040519150601f19603f3d011682016040523d82523d6000602084013e6109c4565b606091505b5050905080610a045760405162461bcd60e51b815260040180806020018281038252603a815260200180610ac9603a913960400191505060405180910390fd5b505050565b600082820183811015610a63576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fe526566756e64457363726f773a2062656e65666963696172792063616e206f6e6c79207769746864726177207768696c6520636c6f7365644f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564526566756e64457363726f773a2063616e206f6e6c79206465706f736974207768696c6520616374697665436f6e646974696f6e616c457363726f773a207061796565206973206e6f7420616c6c6f77656420746f207769746864726177526566756e64457363726f773a2063616e206f6e6c7920636c6f7365207768696c65206163746976654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572526566756e64457363726f773a2063616e206f6e6c7920656e61626c6520726566756e6473207768696c6520616374697665a26469706673582212202779aedd0edfda20ba2d4398e521b51a71d7d567b8ab0029603b69ab432841cb64736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "beneficiary", "type": "address", "internalType": "address payable"}]}, {"type": "event", "name": "Deposited", "inputs": [{"name": "payee", "type": "address", "indexed": true, "internalType": "address"}, {"name": "weiAmount", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "OwnershipTransferred", "inputs": [{"name": "previousOwner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "newOwner", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "RefundsClosed", "inputs": [], "anonymous": false}, {"type": "event", "name": "RefundsEnabled", "inputs": [], "anonymous": false}, {"type": "event", "name": "Withdrawn", "inputs": [{"name": "payee", "type": "address", "indexed": true, "internalType": "address"}, {"name": "weiAmount", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "beneficiary", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "beneficiaryWithdraw", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "close", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "deposit", "stateMutability": "payable", "inputs": [{"name": "refundee", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "depositsOf", "stateMutability": "view", "inputs": [{"name": "payee", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "enableRefunds", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "owner", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "renounceOwnership", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "enum RefundEscrow.State"}]}, {"type": "function", "name": "transferOwnership", "stateMutability": "nonpayable", "inputs": [{"name": "newOwner", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "withdraw", "stateMutability": "nonpayable", "inputs": [{"name": "payee", "type": "address", "internalType": "address payable"}], "outputs": []}, {"type": "function", "name": "withdrawalAllowed", "stateMutability": "view", "inputs": [{"name": "", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Escrow that holds funds for a beneficiary, deposited from multiple parties.Intended usage: See {Escrow}. Same usage guidelines apply here.The owner account (that is, the contract that instantiates this contract) may deposit, close the deposit period, and allow for either withdrawal by the beneficiary, or refunds to the depositors. All interactions with `RefundEscrow` will be made through the owner contract.", "kind": "dev", "methods": {"beneficiary()": {"returns": {"_0": "The beneficiary of the escrow."}}, "beneficiaryWithdraw()": {"details": "Withdraws the beneficiary's funds."}, "close()": {"details": "Allows for the beneficiary to withdraw their funds, rejecting further deposits."}, "constructor": {"details": "Constructor.", "params": {"beneficiary": "The beneficiary of the deposits."}}, "deposit(address)": {"details": "Stores funds that may later be refunded.", "params": {"refundee": "The address funds will be sent to if a refund occurs."}}, "enableRefunds()": {"details": "Allows for refunds to take place, rejecting further deposits."}, "owner()": {"details": "Returns the address of the current owner."}, "renounceOwnership()": {"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."}, "state()": {"returns": {"_0": "The current state of the escrow."}}, "transferOwnership(address)": {"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}, "withdraw(address)": {"details": "Withdraw accumulated balance for a payee, forwarding all gas to the recipient. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.", "params": {"payee": "The address whose funds will be withdrawn and transferred to."}}, "withdrawalAllowed(address)": {"details": "Returns whether refundees can withdraw their deposits (be refunded). The overridden function receives a 'payee' argument, but we ignore it here since the condition is global, not per-payee."}}, "title": "RefundEscrow", "version": 1}}, "ERC1155PresetMinterPauser": {"contractName": "ERC1155PresetMinterPauser", "sourceId": "presets/ERC1155PresetMinterPauser.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "uri", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "account", "type": "address", "indexed": true, "internalType": "address"}, {"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "event", "name": "Paused", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "RoleAdminChanged", "inputs": [{"name": "role", "type": "bytes32", "indexed": true, "internalType": "bytes32"}, {"name": "previousAdminRole", "type": "bytes32", "indexed": true, "internalType": "bytes32"}, {"name": "newAdminRole", "type": "bytes32", "indexed": true, "internalType": "bytes32"}], "anonymous": false}, {"type": "event", "name": "RoleGranted", "inputs": [{"name": "role", "type": "bytes32", "indexed": true, "internalType": "bytes32"}, {"name": "account", "type": "address", "indexed": true, "internalType": "address"}, {"name": "sender", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "RoleRevoked", "inputs": [{"name": "role", "type": "bytes32", "indexed": true, "internalType": "bytes32"}, {"name": "account", "type": "address", "indexed": true, "internalType": "address"}, {"name": "sender", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "TransferBatch", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "ids", "type": "uint256[]", "indexed": false, "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "indexed": false, "internalType": "uint256[]"}], "anonymous": false}, {"type": "event", "name": "TransferSingle", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "id", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "URI", "inputs": [{"name": "value", "type": "string", "indexed": false, "internalType": "string"}, {"name": "id", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Unpaused", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "DEFAULT_ADMIN_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "MINTER_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "PAUSER_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfBatch", "stateMutability": "view", "inputs": [{"name": "accounts", "type": "address[]", "internalType": "address[]"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": [{"name": "", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "burnBatch", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": []}, {"type": "function", "name": "getRoleAdmin", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "getRoleMember", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getRoleMemberCount", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "grantRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "hasRole", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "mintBatch", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "pause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "paused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "renounceRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "revokeRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "safeBatchTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "unpause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "uri", "stateMutability": "view", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "{ERC1155} token, including:  - ability for holders to burn (destroy) their tokens  - a minter role that allows for token minting (creation)  - a pauser role that allows to stop all token transfers This contract uses {AccessControl} to lock permissioned functions using the different roles - head to its documentation for details. The account that deploys the contract will be granted the minter and pauser roles, as well as the default admin role, which will let it grant both minter and pauser roles to other accounts.", "kind": "dev", "methods": {"balanceOf(address,uint256)": {"details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."}, "balanceOfBatch(address[],uint256[])": {"details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."}, "constructor": {"details": "Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE`, and `PAUSER_ROLE` to the account that deploys the contract."}, "getRoleAdmin(bytes32)": {"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."}, "getRoleMember(bytes32,uint256)": {"details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."}, "getRoleMemberCount(bytes32)": {"details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."}, "grantRole(bytes32,address)": {"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."}, "hasRole(bytes32,address)": {"details": "Returns `true` if `account` has been granted `role`."}, "isApprovedForAll(address,address)": {"details": "See {IERC1155-isApprovedForAll}."}, "mint(address,uint256,uint256,bytes)": {"details": "Creates `amount` new tokens for `to`, of token type `id`. See {ERC1155-_mint}. Requirements: - the caller must have the `MINTER_ROLE`."}, "mintBatch(address,uint256[],uint256[],bytes)": {"details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}."}, "pause()": {"details": "Pauses all token transfers. See {ERC1155Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`."}, "paused()": {"details": "Returns true if the contract is paused, and false otherwise."}, "renounceRole(bytes32,address)": {"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."}, "revokeRole(bytes32,address)": {"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}, "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {"details": "See {IERC1155-safeBatchTransferFrom}."}, "safeTransferFrom(address,address,uint256,uint256,bytes)": {"details": "See {IERC1155-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC1155-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."}, "unpause()": {"details": "Unpauses all token transfers. See {ERC1155Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`."}, "uri(uint256)": {"details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substituion mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}}, "version": 1}}, "ERC20PresetMinterPauser": {"contractName": "ERC20PresetMinterPauser", "sourceId": "presets/ERC20PresetMinterPauser.sol", "deploymentBytecode": {"bytecode": "60806040523480156200001157600080fd5b5060405162001cd238038062001cd2833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b50604052505082518391508290620001b890600490602085019062000375565b508051620001ce90600590602084019062000375565b50506006805461ff001960ff1990911660121716905550620001fb6000620001f562000261565b62000265565b6200022a7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6620001f562000261565b620002597f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a620001f562000261565b505062000411565b3390565b62000271828262000275565b5050565b6000828152602081815260409091206200029a91839062000be7620002ee821b17901c565b156200027157620002aa62000261565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000305836001600160a01b0384166200030e565b90505b92915050565b60006200031c83836200035d565b620003545750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000308565b50600062000308565b60009081526001919091016020526040902054151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003b857805160ff1916838001178555620003e8565b82800160010185558215620003e8579182015b82811115620003e8578251825591602001919060010190620003cb565b50620003f6929150620003fa565b5090565b5b80821115620003f65760008155600101620003fb565b6118b180620004216000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806370a08231116100f9578063a457c2d711610097578063d539139311610071578063d53913931461051f578063d547741f14610527578063dd62ed3e14610553578063e63ab1e914610581576101a9565b8063a457c2d7146104aa578063a9059cbb146104d6578063ca15c87314610502576101a9565b80639010d07c116100d35780639010d07c1461042f57806391d148541461046e57806395d89b411461049a578063a217fddf146104a2576101a9565b806370a08231146103d557806379cc6790146103fb5780638456cb5914610427576101a9565b8063313ce567116101665780633f4ba83a116101405780633f4ba83a1461037c57806340c10f191461038457806342966c68146103b05780635c975abb146103cd576101a9565b8063313ce5671461030657806336568abe146103245780633950935114610350576101a9565b806306fdde03146101ae578063095ea7b31461022b57806318160ddd1461026b57806323b872dd14610285578063248a9ca3146102bb5780632f2ff15d146102d8575b600080fd5b6101b6610589565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101f05781810151838201526020016101d8565b50505050905090810190601f16801561021d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102576004803603604081101561024157600080fd5b506001600160a01b03813516906020013561061f565b604080519115158252519081900360200190f35b61027361063d565b60408051918252519081900360200190f35b6102576004803603606081101561029b57600080fd5b506001600160a01b03813581169160208101359091169060400135610643565b610273600480360360208110156102d157600080fd5b50356106ca565b610304600480360360408110156102ee57600080fd5b50803590602001356001600160a01b03166106df565b005b61030e61074b565b6040805160ff9092168252519081900360200190f35b6103046004803603604081101561033a57600080fd5b50803590602001356001600160a01b0316610754565b6102576004803603604081101561036657600080fd5b506001600160a01b0381351690602001356107b5565b610304610803565b6103046004803603604081101561039a57600080fd5b506001600160a01b038135169060200135610874565b610304600480360360208110156103c657600080fd5b50356108e5565b6102576108f9565b610273600480360360208110156103eb57600080fd5b50356001600160a01b0316610907565b6103046004803603604081101561041157600080fd5b506001600160a01b038135169060200135610922565b61030461097c565b6104526004803603604081101561044557600080fd5b50803590602001356109eb565b604080516001600160a01b039092168252519081900360200190f35b6102576004803603604081101561048457600080fd5b50803590602001356001600160a01b0316610a0a565b6101b6610a22565b610273610a83565b610257600480360360408110156104c057600080fd5b506001600160a01b038135169060200135610a88565b610257600480360360408110156104ec57600080fd5b506001600160a01b038135169060200135610af0565b6102736004803603602081101561051857600080fd5b5035610b04565b610273610b1b565b6103046004803603604081101561053d57600080fd5b50803590602001356001600160a01b0316610b3f565b6102736004803603604081101561056957600080fd5b506001600160a01b0381358116916020013516610b98565b610273610bc3565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106155780601f106105ea57610100808354040283529160200191610615565b820191906000526020600020905b8154815290600101906020018083116105f857829003601f168201915b5050505050905090565b600061063361062c610bfc565b8484610c00565b5060015b92915050565b60035490565b6000610650848484610cec565b6106c08461065c610bfc565b6106bb856040518060600160405280602881526020016116db602891396001600160a01b038a1660009081526002602052604081209061069a610bfc565b6001600160a01b031681526020810191909152604001600020549190610e49565b610c00565b5060019392505050565b60009081526020819052604090206002015490565b600082815260208190526040902060020154610702906106fd610bfc565b610a0a565b61073d5760405162461bcd60e51b815260040180806020018281038252602f8152602001806115d9602f913960400191505060405180910390fd5b6107478282610ee0565b5050565b60065460ff1690565b61075c610bfc565b6001600160a01b0316816001600160a01b0316146107ab5760405162461bcd60e51b815260040180806020018281038252602f815260200180611823602f913960400191505060405180910390fd5b6107478282610f49565b60006106336107c2610bfc565b846106bb85600260006107d3610bfc565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610fb2565b61082f7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6106fd610bfc565b61086a5760405162461bcd60e51b815260040180806020018281038252603981526020018061162a6039913960400191505060405180910390fd5b61087261100c565b565b6108a07f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66106fd610bfc565b6108db5760405162461bcd60e51b81526004018080602001828103825260368152602001806117036036913960400191505060405180910390fd5b61074782826110b0565b6108f66108f0610bfc565b826111a2565b50565b600654610100900460ff1690565b6001600160a01b031660009081526001602052604090205490565b600061095982604051806060016040528060248152602001611739602491396109528661094d610bfc565b610b98565b9190610e49565b905061096d83610967610bfc565b83610c00565b61097783836111a2565b505050565b6109a87f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6106fd610bfc565b6109e35760405162461bcd60e51b81526004018080602001828103825260378152602001806117c76037913960400191505060405180910390fd5b61087261129e565b6000828152602081905260408120610a039083611326565b9392505050565b6000828152602081905260408120610a039083611332565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106155780601f106105ea57610100808354040283529160200191610615565b600081565b6000610633610a95610bfc565b846106bb856040518060600160405280602581526020016117fe6025913960026000610abf610bfc565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610e49565b6000610633610afd610bfc565b8484610cec565b600081815260208190526040812061063790611347565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b600082815260208190526040902060020154610b5d906106fd610bfc565b6107ab5760405162461bcd60e51b81526004018080602001828103825260308152602001806116ab6030913960400191505060405180910390fd5b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6000610a03836001600160a01b038416611352565b3390565b6001600160a01b038316610c455760405162461bcd60e51b81526004018080602001828103825260248152602001806117a36024913960400191505060405180910390fd5b6001600160a01b038216610c8a5760405162461bcd60e51b81526004018080602001828103825260228152602001806116636022913960400191505060405180910390fd5b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316610d315760405162461bcd60e51b815260040180806020018281038252602581526020018061177e6025913960400191505060405180910390fd5b6001600160a01b038216610d765760405162461bcd60e51b81526004018080602001828103825260238152602001806115b66023913960400191505060405180910390fd5b610d8183838361139c565b610dbe81604051806060016040528060268152602001611685602691396001600160a01b0386166000908152600160205260409020549190610e49565b6001600160a01b038085166000908152600160205260408082209390935590841681522054610ded9082610fb2565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115610ed85760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610e9d578181015183820152602001610e85565b50505050905090810190601f168015610eca5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828152602081905260409020610ef89082610be7565b1561074757610f05610bfc565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081905260409020610f6190826113a7565b1561074757610f6e610bfc565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600082820183811015610a03576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600654610100900460ff1661105f576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6006805461ff00191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611093610bfc565b604080516001600160a01b039092168252519081900360200190a1565b6001600160a01b03821661110b576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6111176000838361139c565b6003546111249082610fb2565b6003556001600160a01b03821660009081526001602052604090205461114a9082610fb2565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0382166111e75760405162461bcd60e51b815260040180806020018281038252602181526020018061175d6021913960400191505060405180910390fd5b6111f38260008361139c565b61123081604051806060016040528060228152602001611608602291396001600160a01b0385166000908152600160205260409020549190610e49565b6001600160a01b03831660009081526001602052604090205560035461125690826113bc565b6003556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600654610100900460ff16156112ee576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6006805461ff0019166101001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611093610bfc565b6000610a0383836113fe565b6000610a03836001600160a01b038416611462565b60006106378261147a565b600061135e8383611462565b61139457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610637565b506000610637565b61097783838361147e565b6000610a03836001600160a01b0384166114cd565b6000610a0383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610e49565b815460009082106114405760405162461bcd60e51b81526004018080602001828103825260228152602001806115946022913960400191505060405180910390fd5b82600001828154811061144f57fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b611489838383610977565b6114916108f9565b156109775760405162461bcd60e51b815260040180806020018281038252602a815260200180611852602a913960400191505060405180910390fd5b60008181526001830160205260408120548015611589578354600019808301919081019060009087908390811061150057fe5b906000526020600020015490508087600001848154811061151d57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061154d57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610637565b600091505061063756fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e647345524332303a207472616e7366657220746f20746865207a65726f2061646472657373416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e7445524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332305072657365744d696e7465725061757365723a206d75737420686176652070617573657220726f6c6520746f20756e706175736545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332305072657365744d696e7465725061757365723a206d7573742068617665206d696e74657220726f6c6520746f206d696e7445524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332305072657365744d696e7465725061757365723a206d75737420686176652070617573657220726f6c6520746f20706175736545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c6645524332305061757361626c653a20746f6b656e207472616e73666572207768696c6520706175736564a26469706673582212202bd2295ad8d80285256f6f4710405684352ff1d3daff7afd3bcfd3579991bbe464736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "spender", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Paused", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "RoleAdminChanged", "inputs": [{"name": "role", "type": "bytes32", "indexed": true, "internalType": "bytes32"}, {"name": "previousAdminRole", "type": "bytes32", "indexed": true, "internalType": "bytes32"}, {"name": "newAdminRole", "type": "bytes32", "indexed": true, "internalType": "bytes32"}], "anonymous": false}, {"type": "event", "name": "RoleGranted", "inputs": [{"name": "role", "type": "bytes32", "indexed": true, "internalType": "bytes32"}, {"name": "account", "type": "address", "indexed": true, "internalType": "address"}, {"name": "sender", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "RoleRevoked", "inputs": [{"name": "role", "type": "bytes32", "indexed": true, "internalType": "bytes32"}, {"name": "account", "type": "address", "indexed": true, "internalType": "address"}, {"name": "sender", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Unpaused", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "DEFAULT_ADMIN_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "MINTER_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "PAUSER_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "burnFrom", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "getRoleAdmin", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "getRoleMember", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getRoleMemberCount", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "grantRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "hasRole", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "pause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "paused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "renounceRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "revokeRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "unpause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "{ERC20} token, including:  - ability for holders to burn (destroy) their tokens  - a minter role that allows for token minting (creation)  - a pauser role that allows to stop all token transfers This contract uses {AccessControl} to lock permissioned functions using the different roles - head to its documentation for details. The account that deploys the contract will be granted the minter and pauser roles, as well as the default admin role, which will let it grant both minter and pauser roles to other accounts.", "kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "burn(uint256)": {"details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."}, "burnFrom(address,uint256)": {"details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."}, "constructor": {"details": "Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the account that deploys the contract. See {ERC20-constructor}."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "getRoleAdmin(bytes32)": {"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."}, "getRoleMember(bytes32,uint256)": {"details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."}, "getRoleMemberCount(bytes32)": {"details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."}, "grantRole(bytes32,address)": {"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."}, "hasRole(bytes32,address)": {"details": "Returns `true` if `account` has been granted `role`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "mint(address,uint256)": {"details": "Creates `amount` new tokens for `to`. See {ERC20-_mint}. Requirements: - the caller must have the `MINTER_ROLE`."}, "name()": {"details": "Returns the name of the token."}, "pause()": {"details": "Pauses all token transfers. See {ERC20Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`."}, "paused()": {"details": "Returns true if the contract is paused, and false otherwise."}, "renounceRole(bytes32,address)": {"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."}, "revokeRole(bytes32,address)": {"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}, "unpause()": {"details": "Unpauses all token transfers. See {ERC20Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`."}}, "version": 1}}, "ERC721PresetMinterPauserAutoId": {"contractName": "ERC721PresetMinterPauserAutoId", "sourceId": "presets/ERC721PresetMinterPauserAutoId.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}, {"name": "baseURI", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "event", "name": "Paused", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "RoleAdminChanged", "inputs": [{"name": "role", "type": "bytes32", "indexed": true, "internalType": "bytes32"}, {"name": "previousAdminRole", "type": "bytes32", "indexed": true, "internalType": "bytes32"}, {"name": "newAdminRole", "type": "bytes32", "indexed": true, "internalType": "bytes32"}], "anonymous": false}, {"type": "event", "name": "RoleGranted", "inputs": [{"name": "role", "type": "bytes32", "indexed": true, "internalType": "bytes32"}, {"name": "account", "type": "address", "indexed": true, "internalType": "address"}, {"name": "sender", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "RoleRevoked", "inputs": [{"name": "role", "type": "bytes32", "indexed": true, "internalType": "bytes32"}, {"name": "account", "type": "address", "indexed": true, "internalType": "address"}, {"name": "sender", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Unpaused", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "DEFAULT_ADMIN_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "MINTER_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "PAUSER_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "baseURI", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getRoleAdmin", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "getRoleMember", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getRoleMemberCount", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "grantRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "hasRole", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "pause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "paused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "renounceRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "revokeRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "tokenByIndex", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenOfOwnerByIndex", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenURI", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "unpause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "{ERC721} token, including:  - ability for holders to burn (destroy) their tokens  - a minter role that allows for token minting (creation)  - a pauser role that allows to stop all token transfers  - token ID and URI autogeneration This contract uses {AccessControl} to lock permissioned functions using the different roles - head to its documentation for details. The account that deploys the contract will be granted the minter and pauser roles, as well as the default admin role, which will let it grant both minter and pauser roles to other accounts.", "kind": "dev", "methods": {"approve(address,uint256)": {"details": "See {IERC721-approve}."}, "balanceOf(address)": {"details": "See {IERC721-balanceOf}."}, "baseURI()": {"details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."}, "burn(uint256)": {"details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."}, "constructor": {"details": "Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the account that deploys the contract. Token URIs will be autogenerated based on `baseURI` and their token IDs. See {ERC721-tokenURI}."}, "getApproved(uint256)": {"details": "See {IERC721-getApproved}."}, "getRoleAdmin(bytes32)": {"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."}, "getRoleMember(bytes32,uint256)": {"details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."}, "getRoleMemberCount(bytes32)": {"details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."}, "grantRole(bytes32,address)": {"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."}, "hasRole(bytes32,address)": {"details": "Returns `true` if `account` has been granted `role`."}, "isApprovedForAll(address,address)": {"details": "See {IERC721-isApprovedForAll}."}, "mint(address)": {"details": "Creates a new token for `to`. Its token ID will be automatically assigned (and available on the emitted {IERC721-Transfer} event), and the token URI autogenerated based on the base URI passed at construction. See {ERC721-_mint}. Requirements: - the caller must have the `MINTER_ROLE`."}, "name()": {"details": "See {IERC721Metadata-name}."}, "ownerOf(uint256)": {"details": "See {IERC721-ownerOf}."}, "pause()": {"details": "Pauses all token transfers. See {ERC721Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`."}, "paused()": {"details": "Returns true if the contract is paused, and false otherwise."}, "renounceRole(bytes32,address)": {"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."}, "revokeRole(bytes32,address)": {"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}, "safeTransferFrom(address,address,uint256)": {"details": "See {IERC721-safeTransferFrom}."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "See {IERC721-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC721-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."}, "symbol()": {"details": "See {IERC721Metadata-symbol}."}, "tokenByIndex(uint256)": {"details": "See {IERC721Enumerable-tokenByIndex}."}, "tokenOfOwnerByIndex(address,uint256)": {"details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."}, "tokenURI(uint256)": {"details": "See {IERC721Metadata-tokenURI}."}, "totalSupply()": {"details": "See {IERC721Enumerable-totalSupply}."}, "transferFrom(address,address,uint256)": {"details": "See {IERC721-transferFrom}."}, "unpause()": {"details": "Unpauses all token transfers. See {ERC721Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`."}}, "version": 1}}, "ERC1155": {"contractName": "ERC1155", "sourceId": "token/ERC1155/ERC1155.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100875760003560e01c80634e1273f41161005b5780634e1273f41461035a578063a22cb465146104cd578063e985e9c5146104fb578063f242432a1461052957610087565b8062fdd58e1461008c57806301ffc9a7146100ca5780630e89341c146101055780632eb2c2d614610197575b600080fd5b6100b8600480360360408110156100a257600080fd5b506001600160a01b0381351690602001356105f2565b60408051918252519081900360200190f35b6100f1600480360360208110156100e057600080fd5b50356001600160e01b031916610661565b604080519115158252519081900360200190f35b6101226004803603602081101561011b57600080fd5b5035610680565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015c578181015183820152602001610144565b50505050905090810190601f1680156101895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610358600480360360a08110156101ad57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156101e057600080fd5b8201836020820111156101f257600080fd5b803590602001918460208302840111600160201b8311171561021357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561026257600080fd5b82018360208201111561027457600080fd5b803590602001918460208302840111600160201b8311171561029557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156102e457600080fd5b8201836020820111156102f657600080fd5b803590602001918460018302840111600160201b8311171561031757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610718945050505050565b005b61047d6004803603604081101561037057600080fd5b810190602081018135600160201b81111561038a57600080fd5b82018360208201111561039c57600080fd5b803590602001918460208302840111600160201b831117156103bd57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561040c57600080fd5b82018360208201111561041e57600080fd5b803590602001918460208302840111600160201b8311171561043f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610a16945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104b95781810151838201526020016104a1565b505050509050019250505060405180910390f35b610358600480360360408110156104e357600080fd5b506001600160a01b0381351690602001351515610b94565b6100f16004803603604081101561051157600080fd5b506001600160a01b0381358116916020013516610c83565b610358600480360360a081101561053f57600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b81111561057e57600080fd5b82018360208201111561059057600080fd5b803590602001918460018302840111600160201b831117156105b157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610cb1945050505050565b60006001600160a01b0383166106395760405162461bcd60e51b815260040180806020018281038252602b8152602001806114f1602b913960400191505060405180910390fd5b5060009081526001602090815260408083206001600160a01b03949094168352929052205490565b6001600160e01b03191660009081526020819052604090205460ff1690565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561070c5780601f106106e15761010080835404028352916020019161070c565b820191906000526020600020905b8154815290600101906020018083116106ef57829003601f168201915b50505050509050919050565b81518351146107585760405162461bcd60e51b81526004018080602001828103825260288152602001806116496028913960400191505060405180910390fd5b6001600160a01b03841661079d5760405162461bcd60e51b81526004018080602001828103825260258152602001806115766025913960400191505060405180910390fd5b6107a5610e7c565b6001600160a01b0316856001600160a01b031614806107d057506107d0856107cb610e7c565b610c83565b61080b5760405162461bcd60e51b815260040180806020018281038252603281526020018061159b6032913960400191505060405180910390fd5b6000610815610e7c565b9050610825818787878787610a0e565b60005b845181101561092657600085828151811061083f57fe5b60200260200101519050600085838151811061085757fe5b602002602001015190506108c4816040518060600160405280602a81526020016115cd602a91396001600086815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002054610e819092919063ffffffff16565b60008381526001602090815260408083206001600160a01b038e811685529252808320939093558a16815220546108fb9082610f18565b60009283526001602081815260408086206001600160a01b038d168752909152909320555001610828565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156109ac578181015183820152602001610994565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156109eb5781810151838201526020016109d3565b5050505090500194505050505060405180910390a4610a0e818787878787610f79565b505050505050565b60608151835114610a585760405162461bcd60e51b81526004018080602001828103825260298152602001806116206029913960400191505060405180910390fd5b6060835167ffffffffffffffff81118015610a7257600080fd5b50604051908082528060200260200182016040528015610a9c578160200160208202803683370190505b50905060005b8451811015610b8c5760006001600160a01b0316858281518110610ac257fe5b60200260200101516001600160a01b03161415610b105760405162461bcd60e51b815260040180806020018281038252603181526020018061151c6031913960400191505060405180910390fd5b60016000858381518110610b2057fe5b602002602001015181526020019081526020016000206000868381518110610b4457fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110610b7957fe5b6020908102919091010152600101610aa2565b509392505050565b816001600160a01b0316610ba6610e7c565b6001600160a01b03161415610bec5760405162461bcd60e51b81526004018080602001828103825260298152602001806115f76029913960400191505060405180910390fd5b8060026000610bf9610e7c565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610c3d610e7c565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b6001600160a01b038416610cf65760405162461bcd60e51b81526004018080602001828103825260258152602001806115766025913960400191505060405180910390fd5b610cfe610e7c565b6001600160a01b0316856001600160a01b03161480610d245750610d24856107cb610e7c565b610d5f5760405162461bcd60e51b815260040180806020018281038252602981526020018061154d6029913960400191505060405180910390fd5b6000610d69610e7c565b9050610d89818787610d7a886111f8565b610d83886111f8565b87610a0e565b610dd0836040518060600160405280602a81526020016115cd602a913960008781526001602090815260408083206001600160a01b038d1684529091529020549190610e81565b60008581526001602090815260408083206001600160a01b038b81168552925280832093909355871681522054610e079084610f18565b60008581526001602090815260408083206001600160a01b03808b168086529184529382902094909455805188815291820187905280518a8416938616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a4610a0e81878787878761123c565b335b90565b60008184841115610f105760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ed5578181015183820152602001610ebd565b50505050905090810190601f168015610f025780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610f72576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b610f8b846001600160a01b03166113ad565b15610a0e57836001600160a01b031663bc197c8187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b03168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b83811015611019578181015183820152602001611001565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015611058578181015183820152602001611040565b50505050905001848103825285818151815260200191508051906020019080838360005b8381101561109457818101518382015260200161107c565b50505050905090810190601f1680156110c15780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b1580156110e657600080fd5b505af192505050801561110b57506040513d602081101561110657600080fd5b505160015b6111a0576111176113ef565b806111225750611169565b60405162461bcd60e51b8152602060048201818152835160248401528351849391928392604401919085019080838360008315610ed5578181015183820152602001610ebd565b60405162461bcd60e51b81526004018080602001828103825260348152602001806114956034913960400191505060405180910390fd5b6001600160e01b0319811663bc197c8160e01b146111ef5760405162461bcd60e51b81526004018080602001828103825260288152602001806114c96028913960400191505060405180910390fd5b50505050505050565b60408051600180825281830190925260609182919060208083019080368337019050509050828160008151811061122b57fe5b602090810291909101015292915050565b61124e846001600160a01b03166113ad565b15610a0e57836001600160a01b031663f23a6e6187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156112dd5781810151838201526020016112c5565b50505050905090810190601f16801561130a5780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b15801561132d57600080fd5b505af192505050801561135257506040513d602081101561134d57600080fd5b505160015b61135e576111176113ef565b6001600160e01b0319811663f23a6e6160e01b146111ef5760405162461bcd60e51b81526004018080602001828103825260288152602001806114c96028913960400191505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906113e157508115155b949350505050565b60e01c90565b600060443d10156113ff57610e7e565b600481823e6308c379a061141382516113e9565b1461141d57610e7e565b6040513d600319016004823e80513d67ffffffffffffffff816024840111818411171561144d5750505050610e7e565b828401925082519150808211156114675750505050610e7e565b503d8301602082840101111561147f57505050610e7e565b601f01601f191681016020016040529150509056fe455243313135353a207472616e7366657220746f206e6f6e2045524331313535526563656976657220696d706c656d656e746572455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73455243313135353a2062616c616e636520717565727920666f7220746865207a65726f2061646472657373455243313135353a2062617463682062616c616e636520717565727920666f7220746865207a65726f2061646472657373455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373455243313135353a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572455243313135353a2073657474696e6720617070726f76616c2073746174757320666f722073656c66455243313135353a206163636f756e747320616e6420696473206c656e677468206d69736d61746368455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368a26469706673582212203ea3c6f06e5d70341ffb4a598d4d92da1ed6a62afa1482a5cd14491b4e893ddd64736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "uri", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "account", "type": "address", "indexed": true, "internalType": "address"}, {"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "event", "name": "TransferBatch", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "ids", "type": "uint256[]", "indexed": false, "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "indexed": false, "internalType": "uint256[]"}], "anonymous": false}, {"type": "event", "name": "TransferSingle", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "id", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "URI", "inputs": [{"name": "value", "type": "string", "indexed": false, "internalType": "string"}, {"name": "id", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfBatch", "stateMutability": "view", "inputs": [{"name": "accounts", "type": "address[]", "internalType": "address[]"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": [{"name": "", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "safeBatchTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "uri", "stateMutability": "view", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Implementation of the basic standard multi-token. See https://eips.ethereum.org/EIPS/eip-1155 Originally based on code by Enjin: https://github.com/enjin/erc-1155 _Available since v3.1._", "kind": "dev", "methods": {"balanceOf(address,uint256)": {"details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."}, "balanceOfBatch(address[],uint256[])": {"details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."}, "constructor": {"details": "See {_setURI}."}, "isApprovedForAll(address,address)": {"details": "See {IERC1155-isApprovedForAll}."}, "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {"details": "See {IERC1155-safeBatchTransferFrom}."}, "safeTransferFrom(address,address,uint256,uint256,bytes)": {"details": "See {IERC1155-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC1155-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."}, "uri(uint256)": {"details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substituion mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}}, "version": 1}}, "ERC1155Burnable": {"contractName": "ERC1155Burnable", "sourceId": "token/ERC1155/ERC1155Burnable.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "account", "type": "address", "indexed": true, "internalType": "address"}, {"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "event", "name": "TransferBatch", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "ids", "type": "uint256[]", "indexed": false, "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "indexed": false, "internalType": "uint256[]"}], "anonymous": false}, {"type": "event", "name": "TransferSingle", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "id", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "URI", "inputs": [{"name": "value", "type": "string", "indexed": false, "internalType": "string"}, {"name": "id", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfBatch", "stateMutability": "view", "inputs": [{"name": "accounts", "type": "address[]", "internalType": "address[]"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": [{"name": "", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "burnBatch", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": []}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "safeBatchTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "uri", "stateMutability": "view", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Extension of {ERC1155} that allows token holders to destroy both their own tokens and those that they have been approved to use. _Available since v3.1._", "kind": "dev", "methods": {"balanceOf(address,uint256)": {"details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."}, "balanceOfBatch(address[],uint256[])": {"details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."}, "isApprovedForAll(address,address)": {"details": "See {IERC1155-isApprovedForAll}."}, "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {"details": "See {IERC1155-safeBatchTransferFrom}."}, "safeTransferFrom(address,address,uint256,uint256,bytes)": {"details": "See {IERC1155-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC1155-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."}, "uri(uint256)": {"details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substituion mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}}, "version": 1}}, "ERC1155Holder": {"contractName": "ERC1155Holder", "sourceId": "token/ERC1155/ERC1155Holder.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b506100216301ffc9a760e01b610036565b610031630271189760e51b610036565b6100ba565b6001600160e01b03198082161415610095576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b61039f806100c96000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806301ffc9a714610046578063bc197c8114610081578063f23a6e611461025f575b600080fd5b61006d6004803603602081101561005c57600080fd5b50356001600160e01b031916610328565b604080519115158252519081900360200190f35b610242600480360360a081101561009757600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156100ca57600080fd5b8201836020820111156100dc57600080fd5b803590602001918460208302840111600160201b831117156100fd57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561014c57600080fd5b82018360208201111561015e57600080fd5b803590602001918460208302840111600160201b8311171561017f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156101ce57600080fd5b8201836020820111156101e057600080fd5b803590602001918460018302840111600160201b8311171561020157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610347945050505050565b604080516001600160e01b03199092168252519081900360200190f35b610242600480360360a081101561027557600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b8111156102b457600080fd5b8201836020820111156102c657600080fd5b803590602001918460018302840111600160201b831117156102e757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610358945050505050565b6001600160e01b03191660009081526020819052604090205460ff1690565b63bc197c8160e01b95945050505050565b63f23a6e6160e01b9594505050505056fea264697066735822122034741f77df1d4b90e649d68e9d6034cf84211b4314b73af75e76ac5de350563b64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100415760003560e01c806301ffc9a714610046578063bc197c8114610081578063f23a6e611461025f575b600080fd5b61006d6004803603602081101561005c57600080fd5b50356001600160e01b031916610328565b604080519115158252519081900360200190f35b610242600480360360a081101561009757600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156100ca57600080fd5b8201836020820111156100dc57600080fd5b803590602001918460208302840111600160201b831117156100fd57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561014c57600080fd5b82018360208201111561015e57600080fd5b803590602001918460208302840111600160201b8311171561017f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156101ce57600080fd5b8201836020820111156101e057600080fd5b803590602001918460018302840111600160201b8311171561020157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610347945050505050565b604080516001600160e01b03199092168252519081900360200190f35b610242600480360360a081101561027557600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b8111156102b457600080fd5b8201836020820111156102c657600080fd5b803590602001918460018302840111600160201b831117156102e757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610358945050505050565b6001600160e01b03191660009081526020819052604090205460ff1690565b63bc197c8160e01b95945050505050565b63f23a6e6160e01b9594505050505056fea264697066735822122034741f77df1d4b90e649d68e9d6034cf84211b4314b73af75e76ac5de350563b64736f6c634300060c0033"}, "abi": [{"type": "function", "name": "onERC1155BatchReceived", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}, {"type": "function", "name": "onERC1155Received", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "_Available since v3.1._", "kind": "dev", "methods": {"supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."}}, "version": 1}}, "ERC1155Pausable": {"contractName": "ERC1155Pausable", "sourceId": "token/ERC1155/ERC1155Pausable.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "account", "type": "address", "indexed": true, "internalType": "address"}, {"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "event", "name": "Paused", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "TransferBatch", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "ids", "type": "uint256[]", "indexed": false, "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "indexed": false, "internalType": "uint256[]"}], "anonymous": false}, {"type": "event", "name": "TransferSingle", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "id", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "URI", "inputs": [{"name": "value", "type": "string", "indexed": false, "internalType": "string"}, {"name": "id", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Unpaused", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfBatch", "stateMutability": "view", "inputs": [{"name": "accounts", "type": "address[]", "internalType": "address[]"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": [{"name": "", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "paused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "safeBatchTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "uri", "stateMutability": "view", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "ERC1155 token with pausable token transfers, minting and burning. Useful for scenarios such as preventing trades until the end of an evaluation period, or having an emergency switch for freezing all token transfers in the event of a large bug. _Available since v3.1._", "kind": "dev", "methods": {"balanceOf(address,uint256)": {"details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."}, "balanceOfBatch(address[],uint256[])": {"details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."}, "isApprovedForAll(address,address)": {"details": "See {IERC1155-isApprovedForAll}."}, "paused()": {"details": "Returns true if the contract is paused, and false otherwise."}, "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {"details": "See {IERC1155-safeBatchTransferFrom}."}, "safeTransferFrom(address,address,uint256,uint256,bytes)": {"details": "See {IERC1155-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC1155-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."}, "uri(uint256)": {"details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substituion mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}}, "version": 1}}, "ERC1155Receiver": {"contractName": "ERC1155Receiver", "sourceId": "token/ERC1155/ERC1155Receiver.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": []}, {"type": "function", "name": "onERC1155BatchReceived", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}, {"type": "function", "name": "onERC1155Received", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "_Available since v3.1._", "kind": "dev", "methods": {"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {"details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).", "params": {"data": "Additional data with no specified format", "from": "The address which previously owned the token", "ids": "An array containing ids of each token being transferred (order and length must match values array)", "operator": "The address which initiated the batch transfer (i.e. msg.sender)", "values": "An array containing amounts of each token being transferred (order and length must match ids array)"}, "returns": {"_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"}}, "onERC1155Received(address,address,uint256,uint256,bytes)": {"details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).", "params": {"data": "Additional data with no specified format", "from": "The address which previously owned the token", "id": "The ID of the token being transferred", "operator": "The address which initiated the transfer (i.e. msg.sender)", "value": "The amount of tokens being transferred"}, "returns": {"_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"}}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."}}, "version": 1}}, "IERC1155": {"contractName": "IERC1155", "sourceId": "token/ERC1155/IERC1155.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "account", "type": "address", "indexed": true, "internalType": "address"}, {"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "event", "name": "TransferBatch", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "ids", "type": "uint256[]", "indexed": false, "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "indexed": false, "internalType": "uint256[]"}], "anonymous": false}, {"type": "event", "name": "TransferSingle", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "id", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "URI", "inputs": [{"name": "value", "type": "string", "indexed": false, "internalType": "string"}, {"name": "id", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfBatch", "stateMutability": "view", "inputs": [{"name": "accounts", "type": "address[]", "internalType": "address[]"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": [{"name": "", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "safeBatchTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP]. _Available since v3.1._", "events": {"ApprovalForAll(address,address,bool)": {"details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."}, "TransferBatch(address,address,address,uint256[],uint256[])": {"details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."}, "TransferSingle(address,address,address,uint256,uint256)": {"details": "Emitted when `value` tokens of token type `id` are transfered from `from` to `to` by `operator`."}, "URI(string,uint256)": {"details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}}, "kind": "dev", "methods": {"balanceOf(address,uint256)": {"details": "Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."}, "balanceOfBatch(address[],uint256[])": {"details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."}, "isApprovedForAll(address,address)": {"details": "Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."}, "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {"details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."}, "safeTransferFrom(address,address,uint256,uint256,bytes)": {"details": "Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."}, "setApprovalForAll(address,bool)": {"details": "Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."}, "supportsInterface(bytes4)": {"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}}, "version": 1}}, "IERC1155MetadataURI": {"contractName": "IERC1155MetadataURI", "sourceId": "token/ERC1155/IERC1155MetadataURI.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "account", "type": "address", "indexed": true, "internalType": "address"}, {"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "event", "name": "TransferBatch", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "ids", "type": "uint256[]", "indexed": false, "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "indexed": false, "internalType": "uint256[]"}], "anonymous": false}, {"type": "event", "name": "TransferSingle", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "id", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "URI", "inputs": [{"name": "value", "type": "string", "indexed": false, "internalType": "string"}, {"name": "id", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfBatch", "stateMutability": "view", "inputs": [{"name": "accounts", "type": "address[]", "internalType": "address[]"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": [{"name": "", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "safeBatchTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "uri", "stateMutability": "view", "inputs": [{"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Interface of the optional ERC1155MetadataExtension interface, as defined in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP]. _Available since v3.1._", "kind": "dev", "methods": {"balanceOf(address,uint256)": {"details": "Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."}, "balanceOfBatch(address[],uint256[])": {"details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."}, "isApprovedForAll(address,address)": {"details": "Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."}, "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {"details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."}, "safeTransferFrom(address,address,uint256,uint256,bytes)": {"details": "Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."}, "setApprovalForAll(address,bool)": {"details": "Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."}, "supportsInterface(bytes4)": {"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}, "uri(uint256)": {"details": "Returns the URI for token type `id`. If the `\\{id\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID."}}, "version": 1}}, "IERC1155Receiver": {"contractName": "IERC1155Receiver", "sourceId": "token/ERC1155/IERC1155Receiver.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "function", "name": "onERC1155BatchReceived", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}, {"type": "function", "name": "onERC1155Received", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "notice": "_Available since v3.1._", "version": 1}, "devdoc": {"kind": "dev", "methods": {"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {"details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).", "params": {"data": "Additional data with no specified format", "from": "The address which previously owned the token", "ids": "An array containing ids of each token being transferred (order and length must match values array)", "operator": "The address which initiated the batch transfer (i.e. msg.sender)", "values": "An array containing amounts of each token being transferred (order and length must match ids array)"}, "returns": {"_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"}}, "onERC1155Received(address,address,uint256,uint256,bytes)": {"details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).", "params": {"data": "Additional data with no specified format", "from": "The address which previously owned the token", "id": "The ID of the token being transferred", "operator": "The address which initiated the transfer (i.e. msg.sender)", "value": "The amount of tokens being transferred"}, "returns": {"_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"}}, "supportsInterface(bytes4)": {"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}}, "version": 1}}, "ERC20": {"contractName": "ERC20", "sourceId": "token/ERC20/ERC20.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b5060405162000c6238038062000c628339818101604052604081101561003557600080fd5b810190808051604051939291908464010000000082111561005557600080fd5b90830190602082018581111561006a57600080fd5b825164010000000081118282018810171561008457600080fd5b82525081516020918201929091019080838360005b838110156100b1578181015183820152602001610099565b50505050905090810190601f1680156100de5780820380516001836020036101000a031916815260200191505b506040526020018051604051939291908464010000000082111561010157600080fd5b90830190602082018581111561011657600080fd5b825164010000000081118282018810171561013057600080fd5b82525081516020918201929091019080838360005b8381101561015d578181015183820152602001610145565b50505050905090810190601f16801561018a5780820380516001836020036101000a031916815260200191505b50604052505082516101a4915060039060208501906101cd565b5080516101b89060049060208401906101cd565b50506005805460ff1916601217905550610260565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061020e57805160ff191683800117855561023b565b8280016001018555821561023b579182015b8281111561023b578251825591602001919060010190610220565b5061024792915061024b565b5090565b5b80821115610247576000815560010161024c565b6109f280620002706000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063395093511161007157806339509351146101d957806370a082311461020557806395d89b411461022b578063a457c2d714610233578063a9059cbb1461025f578063dd62ed3e1461028b576100a9565b806306fdde03146100ae578063095ea7b31461012b57806318160ddd1461016b57806323b872dd14610185578063313ce567146101bb575b600080fd5b6100b66102b9565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f05781810151838201526020016100d8565b50505050905090810190601f16801561011d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101576004803603604081101561014157600080fd5b506001600160a01b03813516906020013561034f565b604080519115158252519081900360200190f35b61017361036c565b60408051918252519081900360200190f35b6101576004803603606081101561019b57600080fd5b506001600160a01b03813581169160208101359091169060400135610372565b6101c36103f9565b6040805160ff9092168252519081900360200190f35b610157600480360360408110156101ef57600080fd5b506001600160a01b038135169060200135610402565b6101736004803603602081101561021b57600080fd5b50356001600160a01b0316610450565b6100b661046b565b6101576004803603604081101561024957600080fd5b506001600160a01b0381351690602001356104cc565b6101576004803603604081101561027557600080fd5b506001600160a01b038135169060200135610534565b610173600480360360408110156102a157600080fd5b506001600160a01b0381358116916020013516610548565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103455780601f1061031a57610100808354040283529160200191610345565b820191906000526020600020905b81548152906001019060200180831161032857829003601f168201915b5050505050905090565b600061036361035c610573565b8484610577565b50600192915050565b60025490565b600061037f848484610663565b6103ef8461038b610573565b6103ea85604051806060016040528060288152602001610927602891396001600160a01b038a166000908152600160205260408120906103c9610573565b6001600160a01b0316815260208101919091526040016000205491906107be565b610577565b5060019392505050565b60055460ff1690565b600061036361040f610573565b846103ea8560016000610420610573565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610855565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103455780601f1061031a57610100808354040283529160200191610345565b60006103636104d9610573565b846103ea856040518060600160405280602581526020016109986025913960016000610503610573565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906107be565b6000610363610541610573565b8484610663565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166105bc5760405162461bcd60e51b81526004018080602001828103825260248152602001806109746024913960400191505060405180910390fd5b6001600160a01b0382166106015760405162461bcd60e51b81526004018080602001828103825260228152602001806108df6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166106a85760405162461bcd60e51b815260040180806020018281038252602581526020018061094f6025913960400191505060405180910390fd5b6001600160a01b0382166106ed5760405162461bcd60e51b81526004018080602001828103825260238152602001806108bc6023913960400191505060405180910390fd5b6106f88383836108b6565b61073581604051806060016040528060268152602001610901602691396001600160a01b03861660009081526020819052604090205491906107be565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546107649082610855565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561084d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156108125781810151838201526020016107fa565b50505050905090810190601f16801561083f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828201838110156108af576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220ec7753e9c4a3b952decba64fe3dd2545e886e32af8a594c6aebae5204041916b64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b50600436106100a95760003560e01c8063395093511161007157806339509351146101d957806370a082311461020557806395d89b411461022b578063a457c2d714610233578063a9059cbb1461025f578063dd62ed3e1461028b576100a9565b806306fdde03146100ae578063095ea7b31461012b57806318160ddd1461016b57806323b872dd14610185578063313ce567146101bb575b600080fd5b6100b66102b9565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f05781810151838201526020016100d8565b50505050905090810190601f16801561011d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101576004803603604081101561014157600080fd5b506001600160a01b03813516906020013561034f565b604080519115158252519081900360200190f35b61017361036c565b60408051918252519081900360200190f35b6101576004803603606081101561019b57600080fd5b506001600160a01b03813581169160208101359091169060400135610372565b6101c36103f9565b6040805160ff9092168252519081900360200190f35b610157600480360360408110156101ef57600080fd5b506001600160a01b038135169060200135610402565b6101736004803603602081101561021b57600080fd5b50356001600160a01b0316610450565b6100b661046b565b6101576004803603604081101561024957600080fd5b506001600160a01b0381351690602001356104cc565b6101576004803603604081101561027557600080fd5b506001600160a01b038135169060200135610534565b610173600480360360408110156102a157600080fd5b506001600160a01b0381358116916020013516610548565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103455780601f1061031a57610100808354040283529160200191610345565b820191906000526020600020905b81548152906001019060200180831161032857829003601f168201915b5050505050905090565b600061036361035c610573565b8484610577565b50600192915050565b60025490565b600061037f848484610663565b6103ef8461038b610573565b6103ea85604051806060016040528060288152602001610927602891396001600160a01b038a166000908152600160205260408120906103c9610573565b6001600160a01b0316815260208101919091526040016000205491906107be565b610577565b5060019392505050565b60055460ff1690565b600061036361040f610573565b846103ea8560016000610420610573565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610855565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103455780601f1061031a57610100808354040283529160200191610345565b60006103636104d9610573565b846103ea856040518060600160405280602581526020016109986025913960016000610503610573565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906107be565b6000610363610541610573565b8484610663565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166105bc5760405162461bcd60e51b81526004018080602001828103825260248152602001806109746024913960400191505060405180910390fd5b6001600160a01b0382166106015760405162461bcd60e51b81526004018080602001828103825260228152602001806108df6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166106a85760405162461bcd60e51b815260040180806020018281038252602581526020018061094f6025913960400191505060405180910390fd5b6001600160a01b0382166106ed5760405162461bcd60e51b81526004018080602001828103825260238152602001806108bc6023913960400191505060405180910390fd5b6106f88383836108b6565b61073581604051806060016040528060268152602001610901602691396001600160a01b03861660009081526020819052604090205491906107be565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546107649082610855565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561084d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156108125781810151838201526020016107fa565b50505050905090810190601f16801561083f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828201838110156108af576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220ec7753e9c4a3b952decba64fe3dd2545e886e32af8a594c6aebae5204041916b64736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "spender", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.", "kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "constructor": {"details": "Sets the values for {name} and {symbol}, initializes {decimals} with a default value of 18. To select a different value for {decimals}, use {_setupDecimals}. All three of these values are immutable: they can only be set once during construction."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20Burnable": {"contractName": "ERC20Burnable", "sourceId": "token/ERC20/ERC20Burnable.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "spender", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "burnFrom", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).", "kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "burn(uint256)": {"details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."}, "burnFrom(address,uint256)": {"details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20Capped": {"contractName": "ERC20Capped", "sourceId": "token/ERC20/ERC20Capped.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "cap", "type": "uint256", "internalType": "uint256"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "spender", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "cap", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Extension of {ERC20} that adds a cap to the supply of tokens.", "kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "cap()": {"details": "Returns the cap on the token's total supply."}, "constructor": {"details": "Sets the value of the `cap`. This value is immutable, it can only be set once during construction."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20Pausable": {"contractName": "ERC20Pausable", "sourceId": "token/ERC20/ERC20Pausable.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "spender", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Paused", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Unpaused", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "paused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "ERC20 token with pausable token transfers, minting and burning. Useful for scenarios such as preventing trades until the end of an evaluation period, or having an emergency switch for freezing all token transfers in the event of a large bug.", "kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "paused()": {"details": "Returns true if the contract is paused, and false otherwise."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20Snapshot": {"contractName": "ERC20Snapshot", "sourceId": "token/ERC20/ERC20Snapshot.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "spender", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Snapshot", "inputs": [{"name": "id", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfAt", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "snapshotId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "totalSupplyAt", "stateMutability": "view", "inputs": [{"name": "snapshotId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and total supply at the time are recorded for later access. This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting. In naive implementations it's possible to perform a \"double spend\" attack by reusing the same balance from different accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be used to create an efficient ERC20 forking mechanism. Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id and the account address. ==== Gas Costs Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much smaller since identical balances in subsequent snapshots are stored as a single entry. There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent transfers will have normal cost until the next snapshot, and so on.", "events": {"Snapshot(uint256)": {"details": "Emitted by {_snapshot} when a snapshot identified by `id` is created."}}, "kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "balanceOfAt(address,uint256)": {"details": "Retrieves the balance of `account` at the time `snapshotId` was created."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "totalSupplyAt(uint256)": {"details": "Retrieves the total supply at the time `snapshotId` was created."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "IERC20": {"contractName": "IERC20", "sourceId": "token/ERC20/IERC20.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "spender", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Interface of the ERC20 standard as defined in the EIP.", "events": {"Approval(address,address,uint256)": {"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."}, "Transfer(address,address,uint256)": {"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}}, "kind": "dev", "methods": {"allowance(address,address)": {"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."}, "approve(address,uint256)": {"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."}, "balanceOf(address)": {"details": "Returns the amount of tokens owned by `account`."}, "totalSupply()": {"details": "Returns the amount of tokens in existence."}, "transfer(address,uint256)": {"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}, "transferFrom(address,address,uint256)": {"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}}, "version": 1}}, "SafeERC20": {"contractName": "SafeERC20", "sourceId": "token/ERC20/SafeERC20.sol", "deploymentBytecode": {"bytecode": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207f369e1207bf6f08c43db866a5152e10acf4d424c3a39dedc836b7035bf31f0464736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207f369e1207bf6f08c43db866a5152e10acf4d424c3a39dedc836b7035bf31f0464736f6c634300060c0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.", "kind": "dev", "methods": {}, "title": "SafeERC20", "version": 1}}, "TokenTimelock": {"contractName": "TokenTimelock", "sourceId": "token/ERC20/TokenTimelock.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b5060405161068a38038061068a8339818101604052606081101561003357600080fd5b50805160208201516040909201519091904281116100825760405162461bcd60e51b81526004018080602001828103825260328152602001806106586032913960400191505060405180910390fd5b600080546001600160a01b039485166001600160a01b0319918216179091556001805493909416921691909117909155600255610594806100c46000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806338af3eed1461005157806386d1a69f14610075578063b91d40011461007f578063fc0c546a14610099575b600080fd5b6100596100a1565b604080516001600160a01b039092168252519081900360200190f35b61007d6100b0565b005b6100876101c7565b60408051918252519081900360200190f35b6100596101cd565b6001546001600160a01b031690565b6002544210156100f15760405162461bcd60e51b81526004018080602001828103825260328152602001806104e06032913960400191505060405180910390fd5b60008054604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561013d57600080fd5b505afa158015610151573d6000803e3d6000fd5b505050506040513d602081101561016757600080fd5b50519050806101a75760405162461bcd60e51b815260040180806020018281038252602381526020018061053c6023913960400191505060405180910390fd5b6001546000546101c4916001600160a01b039182169116836101dc565b50565b60025490565b6000546001600160a01b031690565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261022e908490610233565b505050565b6060610288826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166102e49092919063ffffffff16565b80519091501561022e578080602001905160208110156102a757600080fd5b505161022e5760405162461bcd60e51b815260040180806020018281038252602a815260200180610512602a913960400191505060405180910390fd5b60606102f384846000856102fb565b949350505050565b6060610306856104a6565b610357576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106103965780518252601f199092019160209182019101610377565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146103f8576040519150601f19603f3d011682016040523d82523d6000602084013e6103fd565b606091505b509150915081156104115791506102f39050565b8051156104215780518082602001fd5b8360405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561046b578181015183820152602001610453565b50505050905090810190601f1680156104985780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906102f357505015159291505056fe546f6b656e54696d656c6f636b3a2063757272656e742074696d65206973206265666f72652072656c656173652074696d655361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564546f6b656e54696d656c6f636b3a206e6f20746f6b656e7320746f2072656c65617365a26469706673582212202520216fc4816a0a07b46145c1740012d6b5068b8f031cf49bc2f86f8dc556ec64736f6c634300060c0033546f6b656e54696d656c6f636b3a2072656c656173652074696d65206973206265666f72652063757272656e742074696d65"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b506004361061004c5760003560e01c806338af3eed1461005157806386d1a69f14610075578063b91d40011461007f578063fc0c546a14610099575b600080fd5b6100596100a1565b604080516001600160a01b039092168252519081900360200190f35b61007d6100b0565b005b6100876101c7565b60408051918252519081900360200190f35b6100596101cd565b6001546001600160a01b031690565b6002544210156100f15760405162461bcd60e51b81526004018080602001828103825260328152602001806104e06032913960400191505060405180910390fd5b60008054604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561013d57600080fd5b505afa158015610151573d6000803e3d6000fd5b505050506040513d602081101561016757600080fd5b50519050806101a75760405162461bcd60e51b815260040180806020018281038252602381526020018061053c6023913960400191505060405180910390fd5b6001546000546101c4916001600160a01b039182169116836101dc565b50565b60025490565b6000546001600160a01b031690565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261022e908490610233565b505050565b6060610288826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166102e49092919063ffffffff16565b80519091501561022e578080602001905160208110156102a757600080fd5b505161022e5760405162461bcd60e51b815260040180806020018281038252602a815260200180610512602a913960400191505060405180910390fd5b60606102f384846000856102fb565b949350505050565b6060610306856104a6565b610357576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106103965780518252601f199092019160209182019101610377565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146103f8576040519150601f19603f3d011682016040523d82523d6000602084013e6103fd565b606091505b509150915081156104115791506102f39050565b8051156104215780518082602001fd5b8360405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561046b578181015183820152602001610453565b50505050905090810190601f1680156104985780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906102f357505015159291505056fe546f6b656e54696d656c6f636b3a2063757272656e742074696d65206973206265666f72652072656c656173652074696d655361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564546f6b656e54696d656c6f636b3a206e6f20746f6b656e7320746f2072656c65617365a26469706673582212202520216fc4816a0a07b46145c1740012d6b5068b8f031cf49bc2f86f8dc556ec64736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "token", "type": "address", "internalType": "contract IERC20"}, {"name": "beneficiary", "type": "address", "internalType": "address"}, {"name": "releaseTime", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "beneficiary", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "release", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "releaseTime", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "token", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "contract IERC20"}]}], "userdoc": {"kind": "user", "methods": {"release()": {"notice": "Transfers tokens held by timelock to beneficiary."}}, "version": 1}, "devdoc": {"details": "A token holder contract that will allow a beneficiary to extract the tokens after a given release time. Useful for simple vesting schedules like \"advisors get all of their tokens after 1 year\".", "kind": "dev", "methods": {"beneficiary()": {"returns": {"_0": "the beneficiary of the tokens."}}, "releaseTime()": {"returns": {"_0": "the time when the tokens are released."}}, "token()": {"returns": {"_0": "the token being held."}}}, "version": 1}}, "ERC721": {"contractName": "ERC721", "sourceId": "token/ERC721/ERC721.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b506004361061010b5760003560e01c80634f6ccce7116100a257806395d89b411161007157806395d89b4114610349578063a22cb46514610351578063b88d4fde1461037f578063c87b56dd14610445578063e985e9c5146104625761010b565b80634f6ccce7146102e15780636352211e146102fe5780636c0360eb1461031b57806370a08231146103235761010b565b806318160ddd116100de57806318160ddd1461022f57806323b872dd146102495780632f745c591461027f57806342842e0e146102ab5761010b565b806301ffc9a71461011057806306fdde031461014b578063081812fc146101c8578063095ea7b314610201575b600080fd5b6101376004803603602081101561012657600080fd5b50356001600160e01b031916610490565b604080519115158252519081900360200190f35b6101536104b3565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018d578181015183820152602001610175565b50505050905090810190601f1680156101ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101e5600480360360208110156101de57600080fd5b5035610549565b604080516001600160a01b039092168252519081900360200190f35b61022d6004803603604081101561021757600080fd5b506001600160a01b0381351690602001356105ab565b005b610237610686565b60408051918252519081900360200190f35b61022d6004803603606081101561025f57600080fd5b506001600160a01b03813581169160208101359091169060400135610697565b6102376004803603604081101561029557600080fd5b506001600160a01b0381351690602001356106ee565b61022d600480360360608110156102c157600080fd5b506001600160a01b03813581169160208101359091169060400135610719565b610237600480360360208110156102f757600080fd5b5035610734565b6101e56004803603602081101561031457600080fd5b503561074a565b610153610772565b6102376004803603602081101561033957600080fd5b50356001600160a01b03166107d3565b61015361083b565b61022d6004803603604081101561036757600080fd5b506001600160a01b038135169060200135151561089c565b61022d6004803603608081101561039557600080fd5b6001600160a01b038235811692602081013590911691604082013591908101906080810160608201356401000000008111156103d057600080fd5b8201836020820111156103e257600080fd5b8035906020019184600183028401116401000000008311171561040457600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506109a1945050505050565b6101536004803603602081101561045b57600080fd5b50356109ff565b6101376004803603604081101561047857600080fd5b506001600160a01b0381358116916020013516610ca6565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b60068054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561053f5780601f106105145761010080835404028352916020019161053f565b820191906000526020600020905b81548152906001019060200180831161052257829003601f168201915b5050505050905090565b600061055482610cd4565b61058f5760405162461bcd60e51b815260040180806020018281038252602c8152602001806118ca602c913960400191505060405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006105b68261074a565b9050806001600160a01b0316836001600160a01b031614156106095760405162461bcd60e51b815260040180806020018281038252602181526020018061194e6021913960400191505060405180910390fd5b806001600160a01b031661061b610ce1565b6001600160a01b0316148061063c575061063c81610637610ce1565b610ca6565b6106775760405162461bcd60e51b815260040180806020018281038252603881526020018061181d6038913960400191505060405180910390fd5b6106818383610ce5565b505050565b60006106926002610d53565b905090565b6106a86106a2610ce1565b82610d5e565b6106e35760405162461bcd60e51b815260040180806020018281038252603181526020018061196f6031913960400191505060405180910390fd5b610681838383610e02565b6001600160a01b03821660009081526001602052604081206107109083610f4e565b90505b92915050565b610681838383604051806020016040528060008152506109a1565b600080610742600284610f5a565b509392505050565b60006107138260405180606001604052806029815260200161187f6029913960029190610f76565b60098054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561053f5780601f106105145761010080835404028352916020019161053f565b60006001600160a01b03821661081a5760405162461bcd60e51b815260040180806020018281038252602a815260200180611855602a913960400191505060405180910390fd5b6001600160a01b038216600090815260016020526040902061071390610d53565b60078054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561053f5780601f106105145761010080835404028352916020019161053f565b6108a4610ce1565b6001600160a01b0316826001600160a01b0316141561090a576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b8060056000610917610ce1565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff19169215159290921790915561095b610ce1565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b6109b26109ac610ce1565b83610d5e565b6109ed5760405162461bcd60e51b815260040180806020018281038252603181526020018061196f6031913960400191505060405180910390fd5b6109f984848484610f8d565b50505050565b6060610a0a82610cd4565b610a455760405162461bcd60e51b815260040180806020018281038252602f81526020018061191f602f913960400191505060405180910390fd5b60008281526008602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610ada5780601f10610aaf57610100808354040283529160200191610ada565b820191906000526020600020905b815481529060010190602001808311610abd57829003601f168201915b505060095493945050505060026000196101006001841615020190911604610b035790506104ae565b805115610bd4576009816040516020018083805460018160011615610100020316600290048015610b6b5780601f10610b49576101008083540402835291820191610b6b565b820191906000526020600020905b815481529060010190602001808311610b57575b5050825160208401908083835b60208310610b975780518252601f199092019160209182019101610b78565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529150506104ae565b6009610bdf84610fdf565b6040516020018083805460018160011615610100020316600290048015610c3d5780601f10610c1b576101008083540402835291820191610c3d565b820191906000526020600020905b815481529060010190602001808311610c29575b5050825160208401908083835b60208310610c695780518252601f199092019160209182019101610c4a565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006107136002836110ba565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610d1a8261074a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610713826110c6565b6000610d6982610cd4565b610da45760405162461bcd60e51b815260040180806020018281038252602c8152602001806117f1602c913960400191505060405180910390fd5b6000610daf8361074a565b9050806001600160a01b0316846001600160a01b03161480610dea5750836001600160a01b0316610ddf84610549565b6001600160a01b0316145b80610dfa5750610dfa8185610ca6565b949350505050565b826001600160a01b0316610e158261074a565b6001600160a01b031614610e5a5760405162461bcd60e51b81526004018080602001828103825260298152602001806118f66029913960400191505060405180910390fd5b6001600160a01b038216610e9f5760405162461bcd60e51b81526004018080602001828103825260248152602001806117cd6024913960400191505060405180910390fd5b610eaa838383610681565b610eb5600082610ce5565b6001600160a01b0383166000908152600160205260409020610ed790826110ca565b506001600160a01b0382166000908152600160205260409020610efa90826110d6565b50610f07600282846110e2565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600061071083836110f8565b6000808080610f69868661115c565b9097909650945050505050565b6000610f838484846111d7565b90505b9392505050565b610f98848484610e02565b610fa4848484846112a1565b6109f95760405162461bcd60e51b815260040180806020018281038252603281526020018061179b6032913960400191505060405180910390fd5b60608161100457506040805180820190915260018152600360fc1b60208201526104ae565b8160005b811561101c57600101600a82049150611008565b60608167ffffffffffffffff8111801561103557600080fd5b506040519080825280601f01601f191660200182016040528015611060576020820181803683370190505b50859350905060001982015b83156110b157600a840660300160f81b8282806001900393508151811061108f57fe5b60200101906001600160f81b031916908160001a905350600a8404935061106c565b50949350505050565b60006107108383611409565b5490565b60006107108383611421565b600061071083836114e7565b6000610f8384846001600160a01b038516611531565b8154600090821061113a5760405162461bcd60e51b81526004018080602001828103825260228152602001806117796022913960400191505060405180910390fd5b82600001828154811061114957fe5b9060005260206000200154905092915050565b8154600090819083106111a05760405162461bcd60e51b81526004018080602001828103825260228152602001806118a86022913960400191505060405180910390fd5b60008460000184815481106111b157fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816112725760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561123757818101518382015260200161121f565b50505050905090810190601f1680156112645780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061128557fe5b9060005260206000209060020201600101549150509392505050565b60006112b5846001600160a01b03166115c8565b6112c157506001610dfa565b60606113cf630a85bd0160e11b6112d6610ce1565b88878760405160240180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561133d578181015183820152602001611325565b50505050905090810190601f16801561136a5780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505060405180606001604052806032815260200161179b603291396001600160a01b0388169190611601565b905060008180602001905160208110156113e857600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b60009081526001919091016020526040902054151590565b600081815260018301602052604081205480156114dd578354600019808301919081019060009087908390811061145457fe5b906000526020600020015490508087600001848154811061147157fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806114a157fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610713565b6000915050610713565b60006114f38383611409565b61152957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610713565b506000610713565b600082815260018401602052604081205480611596575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055610f86565b828560000160018303815481106115a957fe5b9060005260206000209060020201600101819055506000915050610f86565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610dfa575050151592915050565b6060610f8384846000856060611616856115c8565b611667576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106116a65780518252601f199092019160209182019101611687565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611708576040519150601f19603f3d011682016040523d82523d6000602084013e61170d565b606091505b50915091508115611721579150610dfa9050565b8051156117315780518082602001fd5b60405162461bcd60e51b815260206004820181815286516024840152865187939192839260440191908501908083836000831561123757818101518382015260200161121f56fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a2646970667358221220c14b8b5a7e251b82ab129b0e8899afd871228ef846df19931314735c7e0b311d64736f6c634300060c0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "baseURI", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "tokenByIndex", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenOfOwnerByIndex", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenURI", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "see https://eips.ethereum.org/EIPS/eip-721", "kind": "dev", "methods": {"approve(address,uint256)": {"details": "See {IERC721-approve}."}, "balanceOf(address)": {"details": "See {IERC721-balanceOf}."}, "baseURI()": {"details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."}, "constructor": {"details": "Initializes the contract by setting a `name` and a `symbol` to the token collection."}, "getApproved(uint256)": {"details": "See {IERC721-getApproved}."}, "isApprovedForAll(address,address)": {"details": "See {IERC721-isApprovedForAll}."}, "name()": {"details": "See {IERC721Metadata-name}."}, "ownerOf(uint256)": {"details": "See {IERC721-ownerOf}."}, "safeTransferFrom(address,address,uint256)": {"details": "See {IERC721-safeTransferFrom}."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "See {IERC721-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC721-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."}, "symbol()": {"details": "See {IERC721Metadata-symbol}."}, "tokenByIndex(uint256)": {"details": "See {IERC721Enumerable-tokenByIndex}."}, "tokenOfOwnerByIndex(address,uint256)": {"details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."}, "tokenURI(uint256)": {"details": "See {IERC721Metadata-tokenURI}."}, "totalSupply()": {"details": "See {IERC721Enumerable-totalSupply}."}, "transferFrom(address,address,uint256)": {"details": "See {IERC721-transferFrom}."}}, "title": "ERC721 Non-Fungible Token Standard basic implementation", "version": 1}}, "ERC721Burnable": {"contractName": "ERC721Burnable", "sourceId": "token/ERC721/ERC721Burnable.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "baseURI", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "tokenByIndex", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenOfOwnerByIndex", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenURI", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "ERC721 Token that can be irreversibly burned (destroyed).", "kind": "dev", "methods": {"approve(address,uint256)": {"details": "See {IERC721-approve}."}, "balanceOf(address)": {"details": "See {IERC721-balanceOf}."}, "baseURI()": {"details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."}, "burn(uint256)": {"details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."}, "getApproved(uint256)": {"details": "See {IERC721-getApproved}."}, "isApprovedForAll(address,address)": {"details": "See {IERC721-isApprovedForAll}."}, "name()": {"details": "See {IERC721Metadata-name}."}, "ownerOf(uint256)": {"details": "See {IERC721-ownerOf}."}, "safeTransferFrom(address,address,uint256)": {"details": "See {IERC721-safeTransferFrom}."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "See {IERC721-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC721-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."}, "symbol()": {"details": "See {IERC721Metadata-symbol}."}, "tokenByIndex(uint256)": {"details": "See {IERC721Enumerable-tokenByIndex}."}, "tokenOfOwnerByIndex(address,uint256)": {"details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."}, "tokenURI(uint256)": {"details": "See {IERC721Metadata-tokenURI}."}, "totalSupply()": {"details": "See {IERC721Enumerable-totalSupply}."}, "transferFrom(address,address,uint256)": {"details": "See {IERC721-transferFrom}."}}, "title": "ERC721 Burnable Token", "version": 1}}, "ERC721Holder": {"contractName": "ERC721Holder", "sourceId": "token/ERC721/ERC721Holder.sol", "deploymentBytecode": {"bytecode": "608060405234801561001057600080fd5b50610159806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b6100f66004803603608081101561004657600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561008157600080fd5b82018360208201111561009357600080fd5b803590602001918460018302840111640100000000831117156100b557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610113945050505050565b604080516001600160e01b03199092168252519081900360200190f35b630a85bd0160e11b94935050505056fea2646970667358221220c03f140bf928f665e1b5633d9a88127788ebe6f0e1152d8dcea6398a59fa4bed64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b6100f66004803603608081101561004657600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561008157600080fd5b82018360208201111561009357600080fd5b803590602001918460018302840111640100000000831117156100b557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610113945050505050565b604080516001600160e01b03199092168252519081900360200190f35b630a85bd0160e11b94935050505056fea2646970667358221220c03f140bf928f665e1b5633d9a88127788ebe6f0e1152d8dcea6398a59fa4bed64736f6c634300060c0033"}, "abi": [{"type": "function", "name": "onERC721Received", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Implementation of the {IERC721Receiver} interface. Accepts all token transfers.  Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.", "kind": "dev", "methods": {"onERC721Received(address,address,uint256,bytes)": {"details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."}}, "version": 1}}, "ERC721Pausable": {"contractName": "ERC721Pausable", "sourceId": "token/ERC721/ERC721Pausable.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "event", "name": "Paused", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "Unpaused", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "baseURI", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "paused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "tokenByIndex", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenOfOwnerByIndex", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenURI", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "ERC721 token with pausable token transfers, minting and burning. Useful for scenarios such as preventing trades until the end of an evaluation period, or having an emergency switch for freezing all token transfers in the event of a large bug.", "kind": "dev", "methods": {"approve(address,uint256)": {"details": "See {IERC721-approve}."}, "balanceOf(address)": {"details": "See {IERC721-balanceOf}."}, "baseURI()": {"details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."}, "getApproved(uint256)": {"details": "See {IERC721-getApproved}."}, "isApprovedForAll(address,address)": {"details": "See {IERC721-isApprovedForAll}."}, "name()": {"details": "See {IERC721Metadata-name}."}, "ownerOf(uint256)": {"details": "See {IERC721-ownerOf}."}, "paused()": {"details": "Returns true if the contract is paused, and false otherwise."}, "safeTransferFrom(address,address,uint256)": {"details": "See {IERC721-safeTransferFrom}."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "See {IERC721-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC721-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."}, "symbol()": {"details": "See {IERC721Metadata-symbol}."}, "tokenByIndex(uint256)": {"details": "See {IERC721Enumerable-tokenByIndex}."}, "tokenOfOwnerByIndex(address,uint256)": {"details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."}, "tokenURI(uint256)": {"details": "See {IERC721Metadata-tokenURI}."}, "totalSupply()": {"details": "See {IERC721Enumerable-totalSupply}."}, "transferFrom(address,address,uint256)": {"details": "See {IERC721-transferFrom}."}}, "version": 1}}, "IERC721": {"contractName": "IERC721", "sourceId": "token/ERC721/IERC721.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "balance", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "operator", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "owner", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "_approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Required interface of an ERC721 compliant contract.", "events": {"Approval(address,address,uint256)": {"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."}, "ApprovalForAll(address,address,bool)": {"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."}, "Transfer(address,address,uint256)": {"details": "Emitted when `tokenId` token is transfered from `from` to `to`."}}, "kind": "dev", "methods": {"approve(address,uint256)": {"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."}, "balanceOf(address)": {"details": "Returns the number of tokens in ``owner``'s account."}, "getApproved(uint256)": {"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."}, "isApprovedForAll(address,address)": {"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"}, "ownerOf(uint256)": {"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."}, "safeTransferFrom(address,address,uint256)": {"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."}, "setApprovalForAll(address,bool)": {"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."}, "supportsInterface(bytes4)": {"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}, "transferFrom(address,address,uint256)": {"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}}, "version": 1}}, "IERC721Enumerable": {"contractName": "IERC721Enumerable", "sourceId": "token/ERC721/IERC721Enumerable.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "balance", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "operator", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "owner", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "_approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "tokenByIndex", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenOfOwnerByIndex", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "See https://eips.ethereum.org/EIPS/eip-721", "kind": "dev", "methods": {"approve(address,uint256)": {"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."}, "balanceOf(address)": {"details": "Returns the number of tokens in ``owner``'s account."}, "getApproved(uint256)": {"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."}, "isApprovedForAll(address,address)": {"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"}, "ownerOf(uint256)": {"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."}, "safeTransferFrom(address,address,uint256)": {"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."}, "setApprovalForAll(address,bool)": {"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."}, "supportsInterface(bytes4)": {"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}, "tokenByIndex(uint256)": {"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."}, "tokenOfOwnerByIndex(address,uint256)": {"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."}, "totalSupply()": {"details": "Returns the total amount of tokens stored by the contract."}, "transferFrom(address,address,uint256)": {"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}}, "title": "ERC-721 Non-Fungible Token Standard, optional enumeration extension", "version": 1}}, "IERC721Metadata": {"contractName": "IERC721Metadata", "sourceId": "token/ERC721/IERC721Metadata.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "approved", "type": "bool", "indexed": false, "internalType": "bool"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "balance", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "operator", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "owner", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "_approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "tokenURI", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "See https://eips.ethereum.org/EIPS/eip-721", "kind": "dev", "methods": {"approve(address,uint256)": {"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."}, "balanceOf(address)": {"details": "Returns the number of tokens in ``owner``'s account."}, "getApproved(uint256)": {"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."}, "isApprovedForAll(address,address)": {"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"}, "name()": {"details": "Returns the token collection name."}, "ownerOf(uint256)": {"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."}, "safeTransferFrom(address,address,uint256)": {"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."}, "setApprovalForAll(address,bool)": {"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."}, "supportsInterface(bytes4)": {"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}, "symbol()": {"details": "Returns the token collection symbol."}, "tokenURI(uint256)": {"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."}, "transferFrom(address,address,uint256)": {"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}}, "title": "ERC-721 Non-Fungible Token Standard, optional metadata extension", "version": 1}}, "IERC721Receiver": {"contractName": "IERC721Receiver", "sourceId": "token/ERC721/IERC721Receiver.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "function", "name": "onERC721Received", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.", "kind": "dev", "methods": {"onERC721Received(address,address,uint256,bytes)": {"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`."}}, "title": "ERC721 token receiver interface", "version": 1}}, "ERC777": {"contractName": "ERC777", "sourceId": "token/ERC777/ERC777.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}, {"name": "defaultOperators", "type": "address[]", "internalType": "address[]"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true, "internalType": "address"}, {"name": "spender", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "event", "name": "AuthorizedOperator", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenHolder", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "Burned", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "amount", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "data", "type": "bytes", "indexed": false, "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "indexed": false, "internalType": "bytes"}], "anonymous": false}, {"type": "event", "name": "Minted", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "amount", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "data", "type": "bytes", "indexed": false, "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "indexed": false, "internalType": "bytes"}], "anonymous": false}, {"type": "event", "name": "RevokedOperator", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenHolder", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "Sent", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "amount", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "data", "type": "bytes", "indexed": false, "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "indexed": false, "internalType": "bytes"}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "value", "type": "uint256", "indexed": false, "internalType": "uint256"}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "holder", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "authorizeOperator", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "tokenHolder", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "decimals", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "defaultOperators", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address[]", "internalType": "address[]"}]}, {"type": "function", "name": "granularity", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "isOperatorFor", "stateMutability": "view", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "tokenHolder", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "operatorBurn", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "operatorSend", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "revokeOperator", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "send", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "holder", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Implementation of the {IERC777} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. Support for ERC20 is included in this contract, as specified by the EIP: both the ERC777 and ERC20 interfaces can be safely used when interacting with it. Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token movements. Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there are no special restrictions in the amount of tokens that created, moved, or destroyed. This makes integration with ERC20 applications seamless.", "kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}. Note that operator and allowance concepts are orthogonal: operators may not have allowance, and accounts with allowance may not be operators themselves."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Note that accounts cannot have allowance issued by their operators."}, "authorizeOperator(address)": {"details": "See {IERC777-authorizeOperator}."}, "balanceOf(address)": {"details": "Returns the amount of tokens owned by an account (`tokenHolder`)."}, "burn(uint256,bytes)": {"details": "See {IERC777-burn}. Also emits a {IERC20-Transfer} event for ERC20 compatibility."}, "constructor": {"details": "`defaultOperators` may be an empty array."}, "decimals()": {"details": "See {ERC20-decimals}. Always returns 18, as per the [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility)."}, "defaultOperators()": {"details": "See {IERC777-defaultOperators}."}, "granularity()": {"details": "See {IERC777-granularity}. This implementation always returns `1`."}, "isOperatorFor(address,address)": {"details": "See {IERC777-isOperatorFor}."}, "name()": {"details": "See {IERC777-name}."}, "operatorBurn(address,uint256,bytes,bytes)": {"details": "See {IERC777-operatorBurn}. Emits {Burned} and {IERC20-Transfer} events."}, "operatorSend(address,address,uint256,bytes,bytes)": {"details": "See {IERC777-operatorSend}. Emits {Sent} and {IERC20-Transfer} events."}, "revokeOperator(address)": {"details": "See {IERC777-revokeOperator}."}, "send(address,uint256,bytes)": {"details": "See {IERC777-send}. Also emits a {IERC20-Transfer} event for ERC20 compatibility."}, "symbol()": {"details": "See {IERC777-symbol}."}, "totalSupply()": {"details": "See {IERC777-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient} interface if it is a contract. Also emits a {Sent} event."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Note that operator and allowance concepts are orthogonal: operators cannot call `transferFrom` (unless they have allowance), and accounts with allowance cannot call `operatorSend` (unless they are operators). Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events."}}, "version": 1}}, "IERC777": {"contractName": "IERC777", "sourceId": "token/ERC777/IERC777.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "event", "name": "AuthorizedOperator", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenHolder", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "Burned", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "amount", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "data", "type": "bytes", "indexed": false, "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "indexed": false, "internalType": "bytes"}], "anonymous": false}, {"type": "event", "name": "Minted", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "amount", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "data", "type": "bytes", "indexed": false, "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "indexed": false, "internalType": "bytes"}], "anonymous": false}, {"type": "event", "name": "RevokedOperator", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "tokenHolder", "type": "address", "indexed": true, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "Sent", "inputs": [{"name": "operator", "type": "address", "indexed": true, "internalType": "address"}, {"name": "from", "type": "address", "indexed": true, "internalType": "address"}, {"name": "to", "type": "address", "indexed": true, "internalType": "address"}, {"name": "amount", "type": "uint256", "indexed": false, "internalType": "uint256"}, {"name": "data", "type": "bytes", "indexed": false, "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "indexed": false, "internalType": "bytes"}], "anonymous": false}, {"type": "function", "name": "authorizeOperator", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "defaultOperators", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address[]", "internalType": "address[]"}]}, {"type": "function", "name": "granularity", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "isOperatorFor", "stateMutability": "view", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "tokenHolder", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "operatorBurn", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "operatorSend", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "revokeOperator", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "send", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Interface of the ERC777Token standard as defined in the EIP. This contract uses the https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let token holders and recipients react to token movements by using setting implementers for the associated interfaces in said registry. See {IERC1820Registry} and {ERC1820Implementer}.", "kind": "dev", "methods": {"authorizeOperator(address)": {"details": "Make an account an operator of the caller. See {isOperatorFor}. Emits an {AuthorizedOperator} event. Requirements - `operator` cannot be calling address."}, "balanceOf(address)": {"details": "Returns the amount of tokens owned by an account (`owner`)."}, "burn(uint256,bytes)": {"details": "Destroys `amount` tokens from the caller's account, reducing the total supply. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - the caller must have at least `amount` tokens."}, "defaultOperators()": {"details": "Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false."}, "granularity()": {"details": "Returns the smallest part of the token that is not divisible. This means all token operations (creation, movement and destruction) must have amounts that are a multiple of this number. For most token contracts, this value will equal 1."}, "isOperatorFor(address,address)": {"details": "Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}."}, "name()": {"details": "Returns the name of the token."}, "operatorBurn(address,uint256,bytes,bytes)": {"details": "Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - `account` cannot be the zero address. - `account` must have at least `amount` tokens. - the caller must be an operator for `account`."}, "operatorSend(address,address,uint256,bytes,bytes)": {"details": "Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - `sender` cannot be the zero address. - `sender` must have at least `amount` tokens. - the caller must be an operator for `sender`. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface."}, "revokeOperator(address)": {"details": "Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}. Emits a {RevokedOperator} event. Requirements - `operator` cannot be calling address."}, "send(address,uint256,bytes)": {"details": "Moves `amount` tokens from the caller's account to `recipient`. If send or receive hooks are registered for the caller and `recipient`, the corresponding functions will be called with `data` and empty `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - the caller must have at least `amount` tokens. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "Returns the amount of tokens in existence."}}, "version": 1}}, "IERC777Recipient": {"contractName": "IERC777Recipient", "sourceId": "token/ERC777/IERC777Recipient.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "function", "name": "tokensReceived", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "userData", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Interface of the ERC777TokensRecipient standard as defined in the EIP. Accounts can be notified of {IERC777} tokens being sent to them by having a contract implement this interface (contract holders can be their own implementer) and registering it on the https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry]. See {IERC1820Registry} and {ERC1820Implementer}.", "kind": "dev", "methods": {"tokensReceived(address,address,address,uint256,bytes,bytes)": {"details": "Called by an {IERC777} token contract whenever tokens are being moved or created into a registered account (`to`). The type of operation is conveyed by `from` being the zero address or not. This call occurs _after_ the token contract's state is updated, so {IERC777-balanceOf}, etc., can be used to query the post-operation state. This function may revert to prevent the operation from being executed."}}, "version": 1}}, "IERC777Sender": {"contractName": "IERC777Sender", "sourceId": "token/ERC777/IERC777Sender.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "function", "name": "tokensToSend", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "userData", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Interface of the ERC777TokensSender standard as defined in the EIP. {IERC777} Token holders can be notified of operations performed on their tokens by having a contract implement this interface (contract holders can be  their own implementer) and registering it on the https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry]. See {IERC1820Registry} and {ERC1820Implementer}.", "kind": "dev", "methods": {"tokensToSend(address,address,address,uint256,bytes,bytes)": {"details": "Called by an {IERC777} token contract whenever a registered holder's (`from`) tokens are about to be moved or destroyed. The type of operation is conveyed by `to` being the zero address or not. This call occurs _before_ the token contract's state is updated, so {IERC777-balanceOf}, etc., can be used to query the pre-operation state. This function may revert to prevent the operation from being executed."}}, "version": 1}}, "Address": {"contractName": "Address", "sourceId": "utils/Address.sol", "deploymentBytecode": {"bytecode": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b0119c320d722e1adf39393d84cb231b90c139b52b8ccebb7a50d7cf1e70bc5164736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b0119c320d722e1adf39393d84cb231b90c139b52b8ccebb7a50d7cf1e70bc5164736f6c634300060c0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Collection of functions related to the address type", "kind": "dev", "methods": {}, "version": 1}}, "Arrays": {"contractName": "Arrays", "sourceId": "utils/Arrays.sol", "deploymentBytecode": {"bytecode": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220df9fe9fee67ffe0c3abb786ceab30f0a8fc3bec014ebfa841185f09ed978930264736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220df9fe9fee67ffe0c3abb786ceab30f0a8fc3bec014ebfa841185f09ed978930264736f6c634300060c0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Collection of functions related to array types.", "kind": "dev", "methods": {}, "version": 1}}, "Counters": {"contractName": "Counters", "sourceId": "utils/Counters.sol", "deploymentBytecode": {"bytecode": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c1ceda6fe8491e485f3ff32a9a40f7207ecf5ec0ec74f6df1da73e78931e991064736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c1ceda6fe8491e485f3ff32a9a40f7207ecf5ec0ec74f6df1da73e78931e991064736f6c634300060c0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"author": "Matt Condon (@shrugs)", "details": "Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;` Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath} overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never directly accessed.", "kind": "dev", "methods": {}, "title": "Counters", "version": 1}}, "Create2": {"contractName": "Create2", "sourceId": "utils/Create2.sol", "deploymentBytecode": {"bytecode": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201cb2a809b4a805a50f2fa41cc2cb78b6435c92507ef489c7dc2ad6f0daa3afab64736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201cb2a809b4a805a50f2fa41cc2cb78b6435c92507ef489c7dc2ad6f0daa3afab64736f6c634300060c0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Helper to make usage of the `CREATE2` EVM opcode easier and safer. `CREATE2` can be used to compute in advance the address where a smart contract will be deployed, which allows for interesting new mechanisms known as 'counterfactual interactions'. See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more information.", "kind": "dev", "methods": {}, "version": 1}}, "EnumerableMap": {"contractName": "EnumerableMap", "sourceId": "utils/EnumerableMap.sol", "deploymentBytecode": {"bytecode": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ba8ee09b7d2680206228df8e894999cc89a9615bcf0f9838f2a7fbaf1781a90864736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ba8ee09b7d2680206228df8e894999cc89a9615bcf0f9838f2a7fbaf1781a90864736f6c634300060c0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Library for managing an enumerable variant of Solidity's https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`] type. Maps have the following properties: - Entries are added, removed, and checked for existence in constant time (O(1)). - Entries are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableMap for EnumerableMap.UintToAddressMap;     // Declare a set state variable     EnumerableMap.UintToAddressMap private myMap; } ``` As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are supported.", "kind": "dev", "methods": {}, "version": 1}}, "EnumerableSet": {"contractName": "EnumerableSet", "sourceId": "utils/EnumerableSet.sol", "deploymentBytecode": {"bytecode": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c6ddb605cea974ae81a3420ddff88f9afb8b3e74e430872b7840ac08b88133f064736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c6ddb605cea974ae81a3420ddff88f9afb8b3e74e430872b7840ac08b88133f064736f6c634300060c0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256` (`UintSet`) are supported.", "kind": "dev", "methods": {}, "version": 1}}, "Pausable": {"contractName": "Pausable", "sourceId": "utils/Pausable.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "event", "name": "Paused", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "event", "name": "Unpaused", "inputs": [{"name": "account", "type": "address", "indexed": false, "internalType": "address"}], "anonymous": false}, {"type": "function", "name": "paused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.", "events": {"Paused(address)": {"details": "Emitted when the pause is triggered by `account`."}, "Unpaused(address)": {"details": "Emitted when the pause is lifted by `account`."}}, "kind": "dev", "methods": {"constructor": {"details": "Initializes the contract in unpaused state."}, "paused()": {"details": "Returns true if the contract is paused, and false otherwise."}}, "version": 1}}, "ReentrancyGuard": {"contractName": "ReentrancyGuard", "sourceId": "utils/ReentrancyGuard.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": ""}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].", "kind": "dev", "methods": {}, "version": 1}}, "SafeCast": {"contractName": "SafeCast", "sourceId": "utils/SafeCast.sol", "deploymentBytecode": {"bytecode": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220aba9784744a5cbf82f2470179f1cce3adcec285a64064f126eac879a35bacd6864736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220aba9784744a5cbf82f2470179f1cce3adcec285a64064f126eac879a35bacd6864736f6c634300060c0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Wrappers over Solidity's uintXX/intXX casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always. Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing all math on `uint256` and `int256` and then downcasting.", "kind": "dev", "methods": {}, "version": 1}}, "Strings": {"contractName": "Strings", "sourceId": "utils/Strings.sol", "deploymentBytecode": {"bytecode": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d994812fbb772488a097388df496e2b384bc86a59c0b65978c224d2ef531a6e664736f6c634300060c0033"}, "runtimeBytecode": {"bytecode": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d994812fbb772488a097388df496e2b384bc86a59c0b65978c224d2ef531a6e664736f6c634300060c0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "String operations.", "kind": "dev", "methods": {}, "version": 1}}}}