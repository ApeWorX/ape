{"manifest": "ethpm/3", "sources": {"utils/cryptography/MerkleProof.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x0b24fe01129b29655a0f7968bfc80db3"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n        return computedHash;\n    }\n}\n"}, "proxy/ERC1967/ERC1967Upgrade.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xceadc1585c7916aea8d2f4c04c82c462"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"}, "interfaces/IERC721.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xe6da7798a8c22c5043cc42d64a2a8f80"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721.sol\";\n"}, "proxy/transparent/TransparentUpgradeableProxy.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x433af24ebe64e49e21ea173b3744af6c"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"}, "mocks/ERC1155BurnableMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x81d86936cc90a2e9aef2539052e7bc42"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC1155/extensions/ERC1155Burnable.sol\";\n\ncontract ERC1155BurnableMock is ERC1155Burnable {\n    constructor(string memory uri) ERC1155(uri) {}\n\n    function mint(\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes memory data\n    ) public {\n        _mint(to, id, value, data);\n    }\n}\n"}, "token/ERC20/ERC20.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xf48de0eaae9544072b8766e2eac528a7"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"}, "mocks/wizard/MyGovernor1.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x03abfd7c9d5d4f463bc9d4a3dc76347b"}, "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"../../governance/Governor.sol\";\nimport \"../../governance/extensions/GovernorCountingSimple.sol\";\nimport \"../../governance/extensions/GovernorVotes.sol\";\nimport \"../../governance/extensions/GovernorVotesQuorumFraction.sol\";\nimport \"../../governance/extensions/GovernorTimelockControl.sol\";\n\ncontract MyGovernor1 is\n    Governor,\n    GovernorTimelockControl,\n    GovernorVotes,\n    GovernorVotesQuorumFraction,\n    GovernorCountingSimple\n{\n    constructor(ERC20Votes _token, TimelockController _timelock)\n        Governor(\"MyGovernor\")\n        GovernorVotes(_token)\n        GovernorVotesQuorumFraction(4)\n        GovernorTimelockControl(_timelock)\n    {}\n\n    function votingDelay() public pure override returns (uint256) {\n        return 1; // 1 block\n    }\n\n    function votingPeriod() public pure override returns (uint256) {\n        return 45818; // 1 week\n    }\n\n    // The following functions are overrides required by Solidity.\n\n    function quorum(uint256 blockNumber)\n        public\n        view\n        override(IGovernor, GovernorVotesQuorumFraction)\n        returns (uint256)\n    {\n        return super.quorum(blockNumber);\n    }\n\n    function getVotes(address account, uint256 blockNumber)\n        public\n        view\n        override(IGovernor, GovernorVotes)\n        returns (uint256)\n    {\n        return super.getVotes(account, blockNumber);\n    }\n\n    function state(uint256 proposalId) public view override(Governor, GovernorTimelockControl) returns (ProposalState) {\n        return super.state(proposalId);\n    }\n\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public override(Governor, IGovernor) returns (uint256) {\n        return super.propose(targets, values, calldatas, description);\n    }\n\n    function _execute(\n        uint256 proposalId,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal override(Governor, GovernorTimelockControl) {\n        super._execute(proposalId, targets, values, calldatas, descriptionHash);\n    }\n\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal override(Governor, GovernorTimelockControl) returns (uint256) {\n        return super._cancel(targets, values, calldatas, descriptionHash);\n    }\n\n    function _executor() internal view override(Governor, GovernorTimelockControl) returns (address) {\n        return super._executor();\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(Governor, GovernorTimelockControl)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"}, "mocks/AddressImpl.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x521efadbf907d3700ca7378b35bd0c1b"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Address.sol\";\n\ncontract AddressImpl {\n    string public sharedAnswer;\n\n    event CallReturnValue(string data);\n\n    function isContract(address account) external view returns (bool) {\n        return Address.isContract(account);\n    }\n\n    function sendValue(address payable receiver, uint256 amount) external {\n        Address.sendValue(receiver, amount);\n    }\n\n    function functionCall(address target, bytes calldata data) external {\n        bytes memory returnData = Address.functionCall(target, data);\n        emit CallReturnValue(abi.decode(returnData, (string)));\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes calldata data,\n        uint256 value\n    ) external payable {\n        bytes memory returnData = Address.functionCallWithValue(target, data, value);\n        emit CallReturnValue(abi.decode(returnData, (string)));\n    }\n\n    function functionStaticCall(address target, bytes calldata data) external {\n        bytes memory returnData = Address.functionStaticCall(target, data);\n        emit CallReturnValue(abi.decode(returnData, (string)));\n    }\n\n    function functionDelegateCall(address target, bytes calldata data) external {\n        bytes memory returnData = Address.functionDelegateCall(target, data);\n        emit CallReturnValue(abi.decode(returnData, (string)));\n    }\n\n    // sendValue's tests require the contract to hold Ether\n    receive() external payable {}\n}\n"}, "proxy/utils/Initializable.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x84a9b0b71e63a3fd568c61e210b77064"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !Address.isContract(address(this));\n    }\n}\n"}, "utils/cryptography/ECDSA.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x395edffd6bb2b3ba29970d5814039654"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"}, "mocks/PullPaymentMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xadf7049bf6c48f7c5fe7681ed4f2bd54"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../security/PullPayment.sol\";\n\n// mock class using PullPayment\ncontract PullPaymentMock is PullPayment {\n    constructor() payable {}\n\n    // test helper function to call asyncTransfer\n    function callTransfer(address dest, uint256 amount) public {\n        _asyncTransfer(dest, amount);\n    }\n}\n"}, "mocks/ERC20PausableMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x751b5341b45a270abb1629777a9624ac"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/extensions/ERC20Pausable.sol\";\n\n// mock class using ERC20Pausable\ncontract ERC20PausableMock is ERC20Pausable {\n    constructor(\n        string memory name,\n        string memory symbol,\n        address initialAccount,\n        uint256 initialBalance\n    ) ERC20(name, symbol) {\n        _mint(initialAccount, initialBalance);\n    }\n\n    function pause() external {\n        _pause();\n    }\n\n    function unpause() external {\n        _unpause();\n    }\n\n    function mint(address to, uint256 amount) public {\n        _mint(to, amount);\n    }\n\n    function burn(address from, uint256 amount) public {\n        _burn(from, amount);\n    }\n}\n"}, "token/ERC721/ERC721.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xead7082e39cf31875ff89b22f473500d"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"}, "token/ERC1155/ERC1155.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x1d68a32647e54f6acd6ff471d940ef4c"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"}, "mocks/MathMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xc6fa84338b2c086355768de38de69118"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/math/Math.sol\";\n\ncontract MathMock {\n    function max(uint256 a, uint256 b) public pure returns (uint256) {\n        return Math.max(a, b);\n    }\n\n    function min(uint256 a, uint256 b) public pure returns (uint256) {\n        return Math.min(a, b);\n    }\n\n    function average(uint256 a, uint256 b) public pure returns (uint256) {\n        return Math.average(a, b);\n    }\n\n    function ceilDiv(uint256 a, uint256 b) public pure returns (uint256) {\n        return Math.ceilDiv(a, b);\n    }\n}\n"}, "mocks/SafeCastMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x88d508f23615100bb2d5df5154d18112"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/math/SafeCast.sol\";\n\ncontract SafeCastMock {\n    using SafeCast for uint256;\n    using SafeCast for int256;\n\n    function toUint256(int256 a) public pure returns (uint256) {\n        return a.toUint256();\n    }\n\n    function toUint224(uint256 a) public pure returns (uint224) {\n        return a.toUint224();\n    }\n\n    function toUint128(uint256 a) public pure returns (uint128) {\n        return a.toUint128();\n    }\n\n    function toUint96(uint256 a) public pure returns (uint96) {\n        return a.toUint96();\n    }\n\n    function toUint64(uint256 a) public pure returns (uint64) {\n        return a.toUint64();\n    }\n\n    function toUint32(uint256 a) public pure returns (uint32) {\n        return a.toUint32();\n    }\n\n    function toUint16(uint256 a) public pure returns (uint16) {\n        return a.toUint16();\n    }\n\n    function toUint8(uint256 a) public pure returns (uint8) {\n        return a.toUint8();\n    }\n\n    function toInt256(uint256 a) public pure returns (int256) {\n        return a.toInt256();\n    }\n\n    function toInt128(int256 a) public pure returns (int128) {\n        return a.toInt128();\n    }\n\n    function toInt64(int256 a) public pure returns (int64) {\n        return a.toInt64();\n    }\n\n    function toInt32(int256 a) public pure returns (int32) {\n        return a.toInt32();\n    }\n\n    function toInt16(int256 a) public pure returns (int16) {\n        return a.toInt16();\n    }\n\n    function toInt8(int256 a) public pure returns (int8) {\n        return a.toInt8();\n    }\n}\n"}, "mocks/ERC777Mock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x3264b51fb51450bf75d97ae95835fc72"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\nimport \"../token/ERC777/ERC777.sol\";\n\ncontract ERC777Mock is Context, ERC777 {\n    event BeforeTokenTransfer();\n\n    constructor(\n        address initialHolder,\n        uint256 initialBalance,\n        string memory name,\n        string memory symbol,\n        address[] memory defaultOperators\n    ) ERC777(name, symbol, defaultOperators) {\n        _mint(initialHolder, initialBalance, \"\", \"\");\n    }\n\n    function mintInternal(\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    ) public {\n        _mint(to, amount, userData, operatorData);\n    }\n\n    function mintInternalExtended(\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    ) public {\n        _mint(to, amount, userData, operatorData, requireReceptionAck);\n    }\n\n    function approveInternal(\n        address holder,\n        address spender,\n        uint256 value\n    ) public {\n        _approve(holder, spender, value);\n    }\n\n    function _beforeTokenTransfer(\n        address,\n        address,\n        address,\n        uint256\n    ) internal override {\n        emit BeforeTokenTransfer();\n    }\n}\n"}, "mocks/MultipleInheritanceInitializableMocks.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x92983a5e9a4d6baa9fa2655f068867f5"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/utils/Initializable.sol\";\n\n// Sample contracts showing upgradeability with multiple inheritance.\n// Child contract inherits from Father and Mother contracts, and Father extends from Gramps.\n//\n//         Human\n//       /       \\\n//      |       Gramps\n//      |         |\n//    Mother    Father\n//      |         |\n//      -- Child --\n\n/**\n * Sample base intializable contract that is a human\n */\ncontract SampleHuman is Initializable {\n    bool public isHuman;\n\n    function initialize() public initializer {\n        __SampleHuman_init();\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __SampleHuman_init() internal onlyInitializing {\n        __SampleHuman_init_unchained();\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __SampleHuman_init_unchained() internal onlyInitializing {\n        isHuman = true;\n    }\n}\n\n/**\n * Sample base intializable contract that defines a field mother\n */\ncontract SampleMother is Initializable, SampleHuman {\n    uint256 public mother;\n\n    function initialize(uint256 value) public virtual initializer {\n        __SampleMother_init(value);\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __SampleMother_init(uint256 value) internal onlyInitializing {\n        __SampleHuman_init();\n        __SampleMother_init_unchained(value);\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __SampleMother_init_unchained(uint256 value) internal onlyInitializing {\n        mother = value;\n    }\n}\n\n/**\n * Sample base intializable contract that defines a field gramps\n */\ncontract SampleGramps is Initializable, SampleHuman {\n    string public gramps;\n\n    function initialize(string memory value) public virtual initializer {\n        __SampleGramps_init(value);\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __SampleGramps_init(string memory value) internal onlyInitializing {\n        __SampleHuman_init();\n        __SampleGramps_init_unchained(value);\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __SampleGramps_init_unchained(string memory value) internal onlyInitializing {\n        gramps = value;\n    }\n}\n\n/**\n * Sample base intializable contract that defines a field father and extends from gramps\n */\ncontract SampleFather is Initializable, SampleGramps {\n    uint256 public father;\n\n    function initialize(string memory _gramps, uint256 _father) public initializer {\n        __SampleFather_init(_gramps, _father);\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __SampleFather_init(string memory _gramps, uint256 _father) internal onlyInitializing {\n        __SampleGramps_init(_gramps);\n        __SampleFather_init_unchained(_father);\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __SampleFather_init_unchained(uint256 _father) internal onlyInitializing {\n        father = _father;\n    }\n}\n\n/**\n * Child extends from mother, father (gramps)\n */\ncontract SampleChild is Initializable, SampleMother, SampleFather {\n    uint256 public child;\n\n    function initialize(\n        uint256 _mother,\n        string memory _gramps,\n        uint256 _father,\n        uint256 _child\n    ) public initializer {\n        __SampleChild_init(_mother, _gramps, _father, _child);\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __SampleChild_init(\n        uint256 _mother,\n        string memory _gramps,\n        uint256 _father,\n        uint256 _child\n    ) internal onlyInitializing {\n        __SampleMother_init(_mother);\n        __SampleFather_init(_gramps, _father);\n        __SampleChild_init_unchained(_child);\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __SampleChild_init_unchained(uint256 _child) internal onlyInitializing {\n        child = _child;\n    }\n}\n"}, "token/ERC721/IERC721.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x27d219ec6f69478d065fdbfa7931da68"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"}, "mocks/InitializableMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x5230075a075bf31e7b2e8354ee807c1f"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @title InitializableMock\n * @dev This contract is a mock to test initializable functionality\n */\ncontract InitializableMock is Initializable {\n    bool public initializerRan;\n    bool public onlyInitializingRan;\n    uint256 public x;\n\n    function initialize() public initializer {\n        initializerRan = true;\n    }\n\n    function initializeOnlyInitializing() public onlyInitializing {\n        onlyInitializingRan = true;\n    }\n\n    function initializerNested() public initializer {\n        initialize();\n    }\n\n    function onlyInitializingNested() public initializer {\n        initializeOnlyInitializing();\n    }\n\n    function initializeWithX(uint256 _x) public payable initializer {\n        x = _x;\n    }\n\n    function nonInitializable(uint256 _x) public payable {\n        x = _x;\n    }\n\n    function fail() public pure {\n        require(false, \"InitializableMock forced failure\");\n    }\n}\n\ncontract ConstructorInitializableMock is Initializable {\n    bool public initializerRan;\n    bool public onlyInitializingRan;\n\n    constructor() initializer {\n        initialize();\n        initializeOnlyInitializing();\n    }\n\n    function initialize() public initializer {\n        initializerRan = true;\n    }\n\n    function initializeOnlyInitializing() public onlyInitializing {\n        onlyInitializingRan = true;\n    }\n}\n"}, "mocks/ERC165CheckerMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x185db21182a9486960b8c9368cc69573"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/ERC165Checker.sol\";\n\ncontract ERC165CheckerMock {\n    using ERC165Checker for address;\n\n    function supportsERC165(address account) public view returns (bool) {\n        return account.supportsERC165();\n    }\n\n    function supportsInterface(address account, bytes4 interfaceId) public view returns (bool) {\n        return account.supportsInterface(interfaceId);\n    }\n\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) public view returns (bool) {\n        return account.supportsAllInterfaces(interfaceIds);\n    }\n\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds) public view returns (bool[] memory) {\n        return account.getSupportedInterfaces(interfaceIds);\n    }\n}\n"}, "proxy/transparent/ProxyAdmin.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xa947492251ac15d6bfd899c9fdb4d82b"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        TransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"}, "governance/extensions/GovernorVotesQuorumFraction.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x8db7a71dfd826e04f9fab24151697ac5"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorVotesQuorumFraction.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./GovernorVotes.sol\";\n\n/**\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token and a quorum expressed as a\n * fraction of the total supply.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorVotesQuorumFraction is GovernorVotes {\n    uint256 private _quorumNumerator;\n\n    event QuorumNumeratorUpdated(uint256 oldQuorumNumerator, uint256 newQuorumNumerator);\n\n    constructor(uint256 quorumNumeratorValue) {\n        _updateQuorumNumerator(quorumNumeratorValue);\n    }\n\n    function quorumNumerator() public view virtual returns (uint256) {\n        return _quorumNumerator;\n    }\n\n    function quorumDenominator() public view virtual returns (uint256) {\n        return 100;\n    }\n\n    function quorum(uint256 blockNumber) public view virtual override returns (uint256) {\n        return (token.getPastTotalSupply(blockNumber) * quorumNumerator()) / quorumDenominator();\n    }\n\n    function updateQuorumNumerator(uint256 newQuorumNumerator) external virtual onlyGovernance {\n        _updateQuorumNumerator(newQuorumNumerator);\n    }\n\n    function _updateQuorumNumerator(uint256 newQuorumNumerator) internal virtual {\n        require(\n            newQuorumNumerator <= quorumDenominator(),\n            \"GovernorVotesQuorumFraction: quorumNumerator over quorumDenominator\"\n        );\n\n        uint256 oldQuorumNumerator = _quorumNumerator;\n        _quorumNumerator = newQuorumNumerator;\n\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\n    }\n}\n"}, "interfaces/IERC20Metadata.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x5f6b568ff33d29c2a468a48e4d2bb0f4"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/extensions/IERC20Metadata.sol\";\n"}, "mocks/GovernorCompMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xe57a261f5c63e1f06b320209553c05f6"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../governance/extensions/GovernorCountingSimple.sol\";\nimport \"../governance/extensions/GovernorVotesComp.sol\";\n\ncontract GovernorCompMock is GovernorVotesComp, GovernorCountingSimple {\n    constructor(string memory name_, ERC20VotesComp token_) Governor(name_) GovernorVotesComp(token_) {}\n\n    function quorum(uint256) public pure override returns (uint256) {\n        return 0;\n    }\n\n    function votingDelay() public pure override returns (uint256) {\n        return 4;\n    }\n\n    function votingPeriod() public pure override returns (uint256) {\n        return 16;\n    }\n\n    function cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 salt\n    ) public returns (uint256 proposalId) {\n        return _cancel(targets, values, calldatas, salt);\n    }\n\n    function getVotes(address account, uint256 blockNumber)\n        public\n        view\n        virtual\n        override(IGovernor, GovernorVotesComp)\n        returns (uint256)\n    {\n        return super.getVotes(account, blockNumber);\n    }\n}\n"}, "mocks/ERC165/ERC165InterfacesSupported.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x782e9abe56260a34233eca2d838a5086"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * https://eips.ethereum.org/EIPS/eip-214#specification\n * From the specification:\n * > Any attempts to make state-changing operations inside an execution instance with STATIC set to true will instead\n * throw an exception.\n * > These operations include [...], LOG0, LOG1, LOG2, [...]\n *\n * therefore, because this contract is staticcall'd we need to not emit events (which is how solidity-coverage works)\n * solidity-coverage ignores the /mocks folder, so we duplicate its implementation here to avoid instrumenting it\n */\ncontract SupportsInterfaceWithLookupMock is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 public constant INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev A mapping of interface id to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev A contract implementing SupportsInterfaceWithLookup\n     * implement ERC165 itself.\n     */\n    constructor() {\n        _registerInterface(INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev Implement supportsInterface(bytes4) using a lookup table.\n     */\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Private method for registering an interface.\n     */\n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff, \"ERC165InterfacesSupported: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\ncontract ERC165InterfacesSupported is SupportsInterfaceWithLookupMock {\n    constructor(bytes4[] memory interfaceIds) {\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            _registerInterface(interfaceIds[i]);\n        }\n    }\n}\n"}, "token/ERC20/extensions/ERC20Snapshot.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x0db6a86f6fc065db1a0548ee5fe77a69"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Snapshot.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Arrays.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\n * total supply at the time are recorded for later access.\n *\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\n * In naive implementations it's possible to perform a \"double spend\" attack by reusing the same balance from different\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\n * used to create an efficient ERC20 forking mechanism.\n *\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\n * and the account address.\n *\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\n * return `block.number` will trigger the creation of snapshot at the begining of each new block. When overridding this\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\n *\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\n * alternative consider {ERC20Votes}.\n *\n * ==== Gas Costs\n *\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\n *\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\n * transfers will have normal cost until the next snapshot, and so on.\n */\n\nabstract contract ERC20Snapshot is ERC20 {\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\n    // https://github.com/Giveth/minimd/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\n\n    using Arrays for uint256[];\n    using Counters for Counters.Counter;\n\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\n    // Snapshot struct, but that would impede usage of functions that work on an array.\n    struct Snapshots {\n        uint256[] ids;\n        uint256[] values;\n    }\n\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\n    Snapshots private _totalSupplySnapshots;\n\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\n    Counters.Counter private _currentSnapshotId;\n\n    /**\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\n     */\n    event Snapshot(uint256 id);\n\n    /**\n     * @dev Creates a new snapshot and returns its snapshot id.\n     *\n     * Emits a {Snapshot} event that contains the same id.\n     *\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\n     *\n     * [WARNING]\n     * ====\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\n     * you must consider that it can potentially be used by attackers in two ways.\n     *\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\n     * section above.\n     *\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\n     * ====\n     */\n    function _snapshot() internal virtual returns (uint256) {\n        _currentSnapshotId.increment();\n\n        uint256 currentId = _getCurrentSnapshotId();\n        emit Snapshot(currentId);\n        return currentId;\n    }\n\n    /**\n     * @dev Get the current snapshotId\n     */\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\n        return _currentSnapshotId.current();\n    }\n\n    /**\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\n     */\n    function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\n\n        return snapshotted ? value : balanceOf(account);\n    }\n\n    /**\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\n     */\n    function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\n\n        return snapshotted ? value : totalSupply();\n    }\n\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        if (from == address(0)) {\n            // mint\n            _updateAccountSnapshot(to);\n            _updateTotalSupplySnapshot();\n        } else if (to == address(0)) {\n            // burn\n            _updateAccountSnapshot(from);\n            _updateTotalSupplySnapshot();\n        } else {\n            // transfer\n            _updateAccountSnapshot(from);\n            _updateAccountSnapshot(to);\n        }\n    }\n\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {\n        require(snapshotId > 0, \"ERC20Snapshot: id is 0\");\n        require(snapshotId <= _getCurrentSnapshotId(), \"ERC20Snapshot: nonexistent id\");\n\n        // When a valid snapshot is queried, there are three possibilities:\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\n        //  to this id is the current one.\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\n        //  requested id, and its value is the one to return.\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\n        //  larger than the requested one.\n        //\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\n        // exactly this.\n\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\n\n        if (index == snapshots.ids.length) {\n            return (false, 0);\n        } else {\n            return (true, snapshots.values[index]);\n        }\n    }\n\n    function _updateAccountSnapshot(address account) private {\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\n    }\n\n    function _updateTotalSupplySnapshot() private {\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\n    }\n\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\n        uint256 currentId = _getCurrentSnapshotId();\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\n            snapshots.ids.push(currentId);\n            snapshots.values.push(currentValue);\n        }\n    }\n\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\n        if (ids.length == 0) {\n            return 0;\n        } else {\n            return ids[ids.length - 1];\n        }\n    }\n}\n"}, "proxy/Proxy.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x0ce1b80a6e3f466bd652ca52bb406173"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"}, "interfaces/IERC777Recipient.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x5cb82721cc0841a27ae151e7f7b268e1"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC777Recipient.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC777/IERC777Recipient.sol\";\n"}, "mocks/TimersTimestampImpl.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x4da7cc0f188c4b4b0571dd3741158dd0"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Timers.sol\";\n\ncontract TimersTimestampImpl {\n    using Timers for Timers.Timestamp;\n\n    Timers.Timestamp private _timer;\n\n    function getDeadline() public view returns (uint64) {\n        return _timer.getDeadline();\n    }\n\n    function setDeadline(uint64 timestamp) public {\n        _timer.setDeadline(timestamp);\n    }\n\n    function reset() public {\n        _timer.reset();\n    }\n\n    function isUnset() public view returns (bool) {\n        return _timer.isUnset();\n    }\n\n    function isStarted() public view returns (bool) {\n        return _timer.isStarted();\n    }\n\n    function isPending() public view returns (bool) {\n        return _timer.isPending();\n    }\n\n    function isExpired() public view returns (bool) {\n        return _timer.isExpired();\n    }\n}\n"}, "mocks/EnumerableMapMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x4e0d77aaa9ee32e23d436883db8fd9ef"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/structs/EnumerableMap.sol\";\n\ncontract EnumerableMapMock {\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\n\n    event OperationResult(bool result);\n\n    EnumerableMap.UintToAddressMap private _map;\n\n    function contains(uint256 key) public view returns (bool) {\n        return _map.contains(key);\n    }\n\n    function set(uint256 key, address value) public {\n        bool result = _map.set(key, value);\n        emit OperationResult(result);\n    }\n\n    function remove(uint256 key) public {\n        bool result = _map.remove(key);\n        emit OperationResult(result);\n    }\n\n    function length() public view returns (uint256) {\n        return _map.length();\n    }\n\n    function at(uint256 index) public view returns (uint256 key, address value) {\n        return _map.at(index);\n    }\n\n    function tryGet(uint256 key) public view returns (bool, address) {\n        return _map.tryGet(key);\n    }\n\n    function get(uint256 key) public view returns (address) {\n        return _map.get(key);\n    }\n\n    function getWithMessage(uint256 key, string calldata errorMessage) public view returns (address) {\n        return _map.get(key, errorMessage);\n    }\n}\n"}, "interfaces/IERC165.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xee9624272968c23d93d4c2e39f06e6e2"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"}, "mocks/UUPS/TestInProd.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x579bd066da12b4a2cd1c40cd1c53dc0d"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../CountersImpl.sol\";\nimport \"../../proxy/utils/UUPSUpgradeable.sol\";\n\ncontract UUPSUpgradeableMock is CountersImpl, UUPSUpgradeable {\n    // Not having any checks in this function is dangerous! Do not do this outside tests!\n    function _authorizeUpgrade(address) internal virtual override {}\n}\n\ncontract UUPSUpgradeableUnsafeMock is UUPSUpgradeableMock {\n    function upgradeTo(address newImplementation) external virtual override {\n        ERC1967Upgrade._upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual override {\n        ERC1967Upgrade._upgradeToAndCall(newImplementation, data, false);\n    }\n}\n\ncontract UUPSUpgradeableBrokenMock is UUPSUpgradeableMock {\n    function upgradeTo(address) external virtual override {\n        // pass\n    }\n\n    function upgradeToAndCall(address, bytes memory) external payable virtual override {\n        // pass\n    }\n}\n"}, "mocks/StorageSlotMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x681082aac12d55520958e456fe2a8850"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/StorageSlot.sol\";\n\ncontract StorageSlotMock {\n    using StorageSlot for bytes32;\n\n    function setBoolean(bytes32 slot, bool value) public {\n        slot.getBooleanSlot().value = value;\n    }\n\n    function setAddress(bytes32 slot, address value) public {\n        slot.getAddressSlot().value = value;\n    }\n\n    function setBytes32(bytes32 slot, bytes32 value) public {\n        slot.getBytes32Slot().value = value;\n    }\n\n    function setUint256(bytes32 slot, uint256 value) public {\n        slot.getUint256Slot().value = value;\n    }\n\n    function getBoolean(bytes32 slot) public view returns (bool) {\n        return slot.getBooleanSlot().value;\n    }\n\n    function getAddress(bytes32 slot) public view returns (address) {\n        return slot.getAddressSlot().value;\n    }\n\n    function getBytes32(bytes32 slot) public view returns (bytes32) {\n        return slot.getBytes32Slot().value;\n    }\n\n    function getUint256(bytes32 slot) public view returns (uint256) {\n        return slot.getUint256Slot().value;\n    }\n}\n"}, "utils/math/Math.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x1cd7f39e8c48981ae093d9e696c066d8"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"}, "mocks/OwnableMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x3115355f79ef5589879d1bd20de82b32"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../access/Ownable.sol\";\n\ncontract OwnableMock is Ownable {}\n"}, "mocks/ERC1155PausableMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x5d635e73b1a90f2c04feefb8faa919b4"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Mock.sol\";\nimport \"../token/ERC1155/extensions/ERC1155Pausable.sol\";\n\ncontract ERC1155PausableMock is ERC1155Mock, ERC1155Pausable {\n    constructor(string memory uri) ERC1155Mock(uri) {}\n\n    function pause() external {\n        _pause();\n    }\n\n    function unpause() external {\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override(ERC1155, ERC1155Pausable) {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n    }\n}\n"}, "interfaces/IERC721Enumerable.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xff727125a84ba8d0dd642f6ab0632435"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/extensions/IERC721Enumerable.sol\";\n"}, "mocks/ERC721BurnableMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x4341e54dc10a462272be888db0ae01c4"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/extensions/ERC721Burnable.sol\";\n\ncontract ERC721BurnableMock is ERC721Burnable {\n    constructor(string memory name, string memory symbol) ERC721(name, symbol) {}\n\n    function exists(uint256 tokenId) public view returns (bool) {\n        return _exists(tokenId);\n    }\n\n    function mint(address to, uint256 tokenId) public {\n        _mint(to, tokenId);\n    }\n\n    function safeMint(address to, uint256 tokenId) public {\n        _safeMint(to, tokenId);\n    }\n\n    function safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public {\n        _safeMint(to, tokenId, _data);\n    }\n}\n"}, "governance/extensions/GovernorSettings.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x2c6e87fa9b63c7ef8579eb4ae937d4c2"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorSettings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Governor.sol\";\n\n/**\n * @dev Extension of {Governor} for settings updatable through governance.\n *\n * _Available since v4.4._\n */\nabstract contract GovernorSettings is Governor {\n    uint256 private _votingDelay;\n    uint256 private _votingPeriod;\n    uint256 private _proposalThreshold;\n\n    event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\n    event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\n    event ProposalThresholdSet(uint256 oldProposalThreshold, uint256 newProposalThreshold);\n\n    /**\n     * @dev Initialize the governance parameters.\n     */\n    constructor(\n        uint256 initialVotingDelay,\n        uint256 initialVotingPeriod,\n        uint256 initialProposalThreshold\n    ) {\n        _setVotingDelay(initialVotingDelay);\n        _setVotingPeriod(initialVotingPeriod);\n        _setProposalThreshold(initialProposalThreshold);\n    }\n\n    /**\n     * @dev See {IGovernor-votingDelay}.\n     */\n    function votingDelay() public view virtual override returns (uint256) {\n        return _votingDelay;\n    }\n\n    /**\n     * @dev See {IGovernor-votingPeriod}.\n     */\n    function votingPeriod() public view virtual override returns (uint256) {\n        return _votingPeriod;\n    }\n\n    /**\n     * @dev See {Governor-proposalThreshold}.\n     */\n    function proposalThreshold() public view virtual override returns (uint256) {\n        return _proposalThreshold;\n    }\n\n    /**\n     * @dev Update the voting delay. This operation can only be performed through a governance proposal.\n     *\n     * Emits a {VotingDelaySet} event.\n     */\n    function setVotingDelay(uint256 newVotingDelay) public virtual onlyGovernance {\n        _setVotingDelay(newVotingDelay);\n    }\n\n    /**\n     * @dev Update the voting period. This operation can only be performed through a governance proposal.\n     *\n     * Emits a {VotingPeriodSet} event.\n     */\n    function setVotingPeriod(uint256 newVotingPeriod) public virtual onlyGovernance {\n        _setVotingPeriod(newVotingPeriod);\n    }\n\n    /**\n     * @dev Update the proposal threshold. This operation can only be performed through a governance proposal.\n     *\n     * Emits a {ProposalThresholdSet} event.\n     */\n    function setProposalThreshold(uint256 newProposalThreshold) public virtual onlyGovernance {\n        _setProposalThreshold(newProposalThreshold);\n    }\n\n    /**\n     * @dev Internal setter for the voting delay.\n     *\n     * Emits a {VotingDelaySet} event.\n     */\n    function _setVotingDelay(uint256 newVotingDelay) internal virtual {\n        emit VotingDelaySet(_votingDelay, newVotingDelay);\n        _votingDelay = newVotingDelay;\n    }\n\n    /**\n     * @dev Internal setter for the voting period.\n     *\n     * Emits a {VotingPeriodSet} event.\n     */\n    function _setVotingPeriod(uint256 newVotingPeriod) internal virtual {\n        // voting period must be at least one block long\n        require(newVotingPeriod > 0, \"GovernorSettings: voting period too low\");\n        emit VotingPeriodSet(_votingPeriod, newVotingPeriod);\n        _votingPeriod = newVotingPeriod;\n    }\n\n    /**\n     * @dev Internal setter for the proposal threshold.\n     *\n     * Emits a {ProposalThresholdSet} event.\n     */\n    function _setProposalThreshold(uint256 newProposalThreshold) internal virtual {\n        emit ProposalThresholdSet(_proposalThreshold, newProposalThreshold);\n        _proposalThreshold = newProposalThreshold;\n    }\n}\n"}, "mocks/MerkleProofWrapper.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xe2d20bbf9dab03473dba10ab60563e57"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/cryptography/MerkleProof.sol\";\n\ncontract MerkleProofWrapper {\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) public pure returns (bool) {\n        return MerkleProof.verify(proof, root, leaf);\n    }\n\n    function processProof(bytes32[] memory proof, bytes32 leaf) public pure returns (bytes32) {\n        return MerkleProof.processProof(proof, leaf);\n    }\n}\n"}, "mocks/SignatureCheckerMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x3d0fda24d5d77624d5a7b158a6762681"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/cryptography/SignatureChecker.sol\";\n\ncontract SignatureCheckerMock {\n    using SignatureChecker for address;\n\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) public view returns (bool) {\n        return signer.isValidSignatureNow(hash, signature);\n    }\n}\n"}, "token/ERC1155/presets/ERC1155PresetMinterPauser.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x8773b453e91060696c36c838f7ba56f0"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/presets/ERC1155PresetMinterPauser.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\nimport \"../extensions/ERC1155Burnable.sol\";\nimport \"../extensions/ERC1155Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev {ERC1155} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n */\ncontract ERC1155PresetMinterPauser is Context, AccessControlEnumerable, ERC1155Burnable, ERC1155Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE`, and `PAUSER_ROLE` to the account that\n     * deploys the contract.\n     */\n    constructor(string memory uri) ERC1155(uri) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\n     *\n     * See {ERC1155-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have minter role to mint\");\n\n        _mint(to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}.\n     */\n    function mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have minter role to mint\");\n\n        _mintBatch(to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC1155Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC1155Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControlEnumerable, ERC1155)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override(ERC1155, ERC1155Pausable) {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n    }\n}\n"}, "interfaces/IERC777.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x6009e31d3e8cbdc6831fc5d43e99701c"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC777.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC777/IERC777.sol\";\n"}, "token/ERC721/extensions/IERC721Metadata.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xefbc0d15b80a74e34dbe8da0f3e879bb"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"}, "token/ERC20/extensions/ERC20Wrapper.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x74fa026199b12422b3b1e825bc6da398"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Wrapper.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../utils/SafeERC20.sol\";\n\n/**\n * @dev Extension of the ERC20 token contract to support token wrapping.\n *\n * Users can deposit and withdraw \"underlying tokens\" and receive a matching number of \"wrapped tokens\". This is useful\n * in conjunction with other modules. For example, combining this wrapping mechanism with {ERC20Votes} will allow the\n * wrapping of an existing \"basic\" ERC20 into a governance token.\n *\n * _Available since v4.2._\n */\nabstract contract ERC20Wrapper is ERC20 {\n    IERC20 public immutable underlying;\n\n    constructor(IERC20 underlyingToken) {\n        underlying = underlyingToken;\n    }\n\n    /**\n     * @dev Allow a user to deposit underlying tokens and mint the corresponding number of wrapped tokens.\n     */\n    function depositFor(address account, uint256 amount) public virtual returns (bool) {\n        SafeERC20.safeTransferFrom(underlying, _msgSender(), address(this), amount);\n        _mint(account, amount);\n        return true;\n    }\n\n    /**\n     * @dev Allow a user to burn a number of wrapped tokens and withdraw the corresponding number of underlying tokens.\n     */\n    function withdrawTo(address account, uint256 amount) public virtual returns (bool) {\n        _burn(_msgSender(), amount);\n        SafeERC20.safeTransfer(underlying, account, amount);\n        return true;\n    }\n\n    /**\n     * @dev Mint wrapped token to cover any underlyingTokens that would have been transfered by mistake. Internal\n     * function that can be exposed with access control if desired.\n     */\n    function _recover(address account) internal virtual returns (uint256) {\n        uint256 value = underlying.balanceOf(address(this)) - totalSupply();\n        _mint(account, value);\n        return value;\n    }\n}\n"}, "security/PullPayment.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x43e2639a67e1d791ff6e877e8b602669"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/PullPayment.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/escrow/Escrow.sol\";\n\n/**\n * @dev Simple implementation of a\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\n * strategy, where the paying contract doesn't interact directly with the\n * receiver account, which must withdraw its payments itself.\n *\n * Pull-payments are often considered the best practice when it comes to sending\n * Ether, security-wise. It prevents recipients from blocking execution, and\n * eliminates reentrancy concerns.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n *\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\n * instead of Solidity's `transfer` function. Payees can query their due\n * payments with {payments}, and retrieve them with {withdrawPayments}.\n */\nabstract contract PullPayment {\n    Escrow private immutable _escrow;\n\n    constructor() {\n        _escrow = new Escrow();\n    }\n\n    /**\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\n     *\n     * Note that _any_ account can call this function, not just the `payee`.\n     * This means that contracts unaware of the `PullPayment` protocol can still\n     * receive funds this way, by having a separate account call\n     * {withdrawPayments}.\n     *\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n     * Make sure you trust the recipient, or are either following the\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n     *\n     * @param payee Whose payments will be withdrawn.\n     */\n    function withdrawPayments(address payable payee) public virtual {\n        _escrow.withdraw(payee);\n    }\n\n    /**\n     * @dev Returns the payments owed to an address.\n     * @param dest The creditor's address.\n     */\n    function payments(address dest) public view returns (uint256) {\n        return _escrow.depositsOf(dest);\n    }\n\n    /**\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\n     * there is no danger of them being spent before withdrawal.\n     *\n     * @param dest The destination address of the funds.\n     * @param amount The amount to transfer.\n     */\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\n        _escrow.deposit{value: amount}(dest);\n    }\n}\n"}, "governance/extensions/IGovernorTimelock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xeebb17e144c4fd58549d815db19552da"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/IGovernorTimelock.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IGovernor.sol\";\n\n/**\n * @dev Extension of the {IGovernor} for timelock supporting modules.\n *\n * _Available since v4.3._\n */\nabstract contract IGovernorTimelock is IGovernor {\n    event ProposalQueued(uint256 proposalId, uint256 eta);\n\n    function timelock() public view virtual returns (address);\n\n    function proposalEta(uint256 proposalId) public view virtual returns (uint256);\n\n    function queue(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public virtual returns (uint256 proposalId);\n}\n"}, "mocks/SingleInheritanceInitializableMocks.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xa0f7ac0b67fdf84c854701706691731e"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @title MigratableMockV1\n * @dev This contract is a mock to test initializable functionality through migrations\n */\ncontract MigratableMockV1 is Initializable {\n    uint256 public x;\n\n    function initialize(uint256 value) public payable initializer {\n        x = value;\n    }\n}\n\n/**\n * @title MigratableMockV2\n * @dev This contract is a mock to test migratable functionality with params\n */\ncontract MigratableMockV2 is MigratableMockV1 {\n    bool internal _migratedV2;\n    uint256 public y;\n\n    function migrate(uint256 value, uint256 anotherValue) public payable {\n        require(!_migratedV2);\n        x = value;\n        y = anotherValue;\n        _migratedV2 = true;\n    }\n}\n\n/**\n * @title MigratableMockV3\n * @dev This contract is a mock to test migratable functionality without params\n */\ncontract MigratableMockV3 is MigratableMockV2 {\n    bool internal _migratedV3;\n\n    function migrate() public payable {\n        require(!_migratedV3);\n        uint256 oldX = x;\n        x = y;\n        y = oldX;\n        _migratedV3 = true;\n    }\n}\n"}, "token/ERC20/presets/ERC20PresetMinterPauser.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xca4552dfca9db18a959c6766f7053420"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/presets/ERC20PresetMinterPauser.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../extensions/ERC20Burnable.sol\";\nimport \"../extensions/ERC20Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n */\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20, ERC20Pausable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"}, "mocks/EnumerableSetMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x132727e4f74eb805b03945288864e434"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/structs/EnumerableSet.sol\";\n\n// Bytes32Set\ncontract EnumerableBytes32SetMock {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    event OperationResult(bool result);\n\n    EnumerableSet.Bytes32Set private _set;\n\n    function contains(bytes32 value) public view returns (bool) {\n        return _set.contains(value);\n    }\n\n    function add(bytes32 value) public {\n        bool result = _set.add(value);\n        emit OperationResult(result);\n    }\n\n    function remove(bytes32 value) public {\n        bool result = _set.remove(value);\n        emit OperationResult(result);\n    }\n\n    function length() public view returns (uint256) {\n        return _set.length();\n    }\n\n    function at(uint256 index) public view returns (bytes32) {\n        return _set.at(index);\n    }\n\n    function values() public view returns (bytes32[] memory) {\n        return _set.values();\n    }\n}\n\n// AddressSet\ncontract EnumerableAddressSetMock {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    event OperationResult(bool result);\n\n    EnumerableSet.AddressSet private _set;\n\n    function contains(address value) public view returns (bool) {\n        return _set.contains(value);\n    }\n\n    function add(address value) public {\n        bool result = _set.add(value);\n        emit OperationResult(result);\n    }\n\n    function remove(address value) public {\n        bool result = _set.remove(value);\n        emit OperationResult(result);\n    }\n\n    function length() public view returns (uint256) {\n        return _set.length();\n    }\n\n    function at(uint256 index) public view returns (address) {\n        return _set.at(index);\n    }\n\n    function values() public view returns (address[] memory) {\n        return _set.values();\n    }\n}\n\n// UintSet\ncontract EnumerableUintSetMock {\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    event OperationResult(bool result);\n\n    EnumerableSet.UintSet private _set;\n\n    function contains(uint256 value) public view returns (bool) {\n        return _set.contains(value);\n    }\n\n    function add(uint256 value) public {\n        bool result = _set.add(value);\n        emit OperationResult(result);\n    }\n\n    function remove(uint256 value) public {\n        bool result = _set.remove(value);\n        emit OperationResult(result);\n    }\n\n    function length() public view returns (uint256) {\n        return _set.length();\n    }\n\n    function at(uint256 index) public view returns (uint256) {\n        return _set.at(index);\n    }\n\n    function values() public view returns (uint256[] memory) {\n        return _set.values();\n    }\n}\n"}, "utils/cryptography/draft-EIP712.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x161aae4dc1450371d0f324488f66a9cf"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"}, "token/ERC20/extensions/ERC20FlashMint.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x73c59236c574a32a614475b22fc561ff"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20FlashMint.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../../interfaces/IERC3156.sol\";\nimport \"../ERC20.sol\";\n\n/**\n * @dev Implementation of the ERC3156 Flash loans extension, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n *\n * Adds the {flashLoan} method, which provides flash loan support at the token\n * level. By default there is no fee, but this can be changed by overriding {flashFee}.\n *\n * _Available since v4.1._\n */\nabstract contract ERC20FlashMint is ERC20, IERC3156FlashLender {\n    bytes32 private constant _RETURN_VALUE = keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n\n    /**\n     * @dev Returns the maximum amount of tokens available for loan.\n     * @param token The address of the token that is requested.\n     * @return The amont of token that can be loaned.\n     */\n    function maxFlashLoan(address token) public view override returns (uint256) {\n        return token == address(this) ? type(uint256).max - ERC20.totalSupply() : 0;\n    }\n\n    /**\n     * @dev Returns the fee applied when doing flash loans. By default this\n     * implementation has 0 fees. This function can be overloaded to make\n     * the flash loan mechanism deflationary.\n     * @param token The token to be flash loaned.\n     * @param amount The amount of tokens to be loaned.\n     * @return The fees applied to the corresponding flash loan.\n     */\n    function flashFee(address token, uint256 amount) public view virtual override returns (uint256) {\n        require(token == address(this), \"ERC20FlashMint: wrong token\");\n        // silence warning about unused variable without the addition of bytecode.\n        amount;\n        return 0;\n    }\n\n    /**\n     * @dev Performs a flash loan. New tokens are minted and sent to the\n     * `receiver`, who is required to implement the {IERC3156FlashBorrower}\n     * interface. By the end of the flash loan, the receiver is expected to own\n     * amount + fee tokens and have them approved back to the token contract itself so\n     * they can be burned.\n     * @param receiver The receiver of the flash loan. Should implement the\n     * {IERC3156FlashBorrower.onFlashLoan} interface.\n     * @param token The token to be flash loaned. Only `address(this)` is\n     * supported.\n     * @param amount The amount of tokens to be loaned.\n     * @param data An arbitrary datafield that is passed to the receiver.\n     * @return `true` is the flash loan was successful.\n     */\n    function flashLoan(\n        IERC3156FlashBorrower receiver,\n        address token,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override returns (bool) {\n        uint256 fee = flashFee(token, amount);\n        _mint(address(receiver), amount);\n        require(\n            receiver.onFlashLoan(msg.sender, token, amount, fee, data) == _RETURN_VALUE,\n            \"ERC20FlashMint: invalid return value\"\n        );\n        uint256 currentAllowance = allowance(address(receiver), address(this));\n        require(currentAllowance >= amount + fee, \"ERC20FlashMint: allowance does not allow refund\");\n        _approve(address(receiver), address(this), currentAllowance - amount - fee);\n        _burn(address(receiver), amount + fee);\n        return true;\n    }\n}\n"}, "mocks/PausableMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xa5683047c5c3ab9159768ea312956fc6"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../security/Pausable.sol\";\n\ncontract PausableMock is Pausable {\n    bool public drasticMeasureTaken;\n    uint256 public count;\n\n    constructor() {\n        drasticMeasureTaken = false;\n        count = 0;\n    }\n\n    function normalProcess() external whenNotPaused {\n        count++;\n    }\n\n    function drasticMeasure() external whenPaused {\n        drasticMeasureTaken = true;\n    }\n\n    function pause() external {\n        _pause();\n    }\n\n    function unpause() external {\n        _unpause();\n    }\n}\n"}, "mocks/ERC20CappedMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x02c66aea2a7fd9cc8807fa7bfcd1f41f"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/extensions/ERC20Capped.sol\";\n\ncontract ERC20CappedMock is ERC20Capped {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 cap\n    ) ERC20(name, symbol) ERC20Capped(cap) {}\n\n    function mint(address to, uint256 tokenId) public {\n        _mint(to, tokenId);\n    }\n}\n"}, "governance/compatibility/IGovernorCompatibilityBravo.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x150a6426dc55ba789e76389d6893f908"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/compatibility/IGovernorCompatibilityBravo.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IGovernor.sol\";\n\n/**\n * @dev Interface extension that adds missing functions to the {Governor} core to provide `GovernorBravo` compatibility.\n *\n * _Available since v4.3._\n */\nabstract contract IGovernorCompatibilityBravo is IGovernor {\n    /**\n     * @dev Proposal structure from Compound Governor Bravo. Not actually used by the compatibility layer, as\n     * {{proposal}} returns a very different structure.\n     */\n    struct Proposal {\n        uint256 id;\n        address proposer;\n        uint256 eta;\n        address[] targets;\n        uint256[] values;\n        string[] signatures;\n        bytes[] calldatas;\n        uint256 startBlock;\n        uint256 endBlock;\n        uint256 forVotes;\n        uint256 againstVotes;\n        uint256 abstainVotes;\n        bool canceled;\n        bool executed;\n        mapping(address => Receipt) receipts;\n    }\n\n    /**\n     * @dev Receipt structure from Compound Governor Bravo\n     */\n    struct Receipt {\n        bool hasVoted;\n        uint8 support;\n        uint96 votes;\n    }\n\n    /**\n     * @dev Part of the Governor Bravo's interface.\n     */\n    function quorumVotes() public view virtual returns (uint256);\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"The official record of all proposals ever proposed\"_.\n     */\n    function proposals(uint256)\n        public\n        view\n        virtual\n        returns (\n            uint256 id,\n            address proposer,\n            uint256 eta,\n            uint256 startBlock,\n            uint256 endBlock,\n            uint256 forVotes,\n            uint256 againstVotes,\n            uint256 abstainVotes,\n            bool canceled,\n            bool executed\n        );\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"Function used to propose a new proposal\"_.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        string[] memory signatures,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual returns (uint256);\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"Queues a proposal of state succeeded\"_.\n     */\n    function queue(uint256 proposalId) public virtual;\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"Executes a queued proposal if eta has passed\"_.\n     */\n    function execute(uint256 proposalId) public payable virtual;\n\n    /**\n     * @dev Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold.\n     */\n    function cancel(uint256 proposalId) public virtual;\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"Gets actions of a proposal\"_.\n     */\n    function getActions(uint256 proposalId)\n        public\n        view\n        virtual\n        returns (\n            address[] memory targets,\n            uint256[] memory values,\n            string[] memory signatures,\n            bytes[] memory calldatas\n        );\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"Gets the receipt for a voter on a given proposal\"_.\n     */\n    function getReceipt(uint256 proposalId, address voter) public view virtual returns (Receipt memory);\n}\n"}, "governance/extensions/GovernorTimelockCompound.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xe4ece100bf260287bf7cb53774b9dfc4"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorTimelockCompound.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IGovernorTimelock.sol\";\nimport \"../Governor.sol\";\nimport \"../../utils/math/SafeCast.sol\";\n\n/**\n * https://github.com/compound-finance/compound-protocol/blob/master/contracts/Timelock.sol[Compound's timelock] interface\n */\ninterface ICompoundTimelock {\n    receive() external payable;\n\n    // solhint-disable-next-line func-name-mixedcase\n    function GRACE_PERIOD() external view returns (uint256);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function MINIMUM_DELAY() external view returns (uint256);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function MAXIMUM_DELAY() external view returns (uint256);\n\n    function admin() external view returns (address);\n\n    function pendingAdmin() external view returns (address);\n\n    function delay() external view returns (uint256);\n\n    function queuedTransactions(bytes32) external view returns (bool);\n\n    function setDelay(uint256) external;\n\n    function acceptAdmin() external;\n\n    function setPendingAdmin(address) external;\n\n    function queueTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) external returns (bytes32);\n\n    function cancelTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) external;\n\n    function executeTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) external payable returns (bytes memory);\n}\n\n/**\n * @dev Extension of {Governor} that binds the execution process to a Compound Timelock. This adds a delay, enforced by\n * the external timelock to all successful proposal (in addition to the voting duration). The {Governor} needs to be\n * the admin of the timelock for any operation to be performed. A public, unrestricted,\n * {GovernorTimelockCompound-__acceptAdmin} is available to accept ownership of the timelock.\n *\n * Using this model means the proposal will be operated by the {TimelockController} and not by the {Governor}. Thus,\n * the assets and permissions must be attached to the {TimelockController}. Any asset sent to the {Governor} will be\n * inaccessible.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorTimelockCompound is IGovernorTimelock, Governor {\n    using SafeCast for uint256;\n    using Timers for Timers.Timestamp;\n\n    struct ProposalTimelock {\n        Timers.Timestamp timer;\n    }\n\n    ICompoundTimelock private _timelock;\n\n    mapping(uint256 => ProposalTimelock) private _proposalTimelocks;\n\n    /**\n     * @dev Emitted when the timelock controller used for proposal execution is modified.\n     */\n    event TimelockChange(address oldTimelock, address newTimelock);\n\n    /**\n     * @dev Set the timelock.\n     */\n    constructor(ICompoundTimelock timelockAddress) {\n        _updateTimelock(timelockAddress);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Governor) returns (bool) {\n        return interfaceId == type(IGovernorTimelock).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Overriden version of the {Governor-state} function with added support for the `Queued` and `Expired` status.\n     */\n    function state(uint256 proposalId) public view virtual override(IGovernor, Governor) returns (ProposalState) {\n        ProposalState status = super.state(proposalId);\n\n        if (status != ProposalState.Succeeded) {\n            return status;\n        }\n\n        uint256 eta = proposalEta(proposalId);\n        if (eta == 0) {\n            return status;\n        } else if (block.timestamp >= eta + _timelock.GRACE_PERIOD()) {\n            return ProposalState.Expired;\n        } else {\n            return ProposalState.Queued;\n        }\n    }\n\n    /**\n     * @dev Public accessor to check the address of the timelock\n     */\n    function timelock() public view virtual override returns (address) {\n        return address(_timelock);\n    }\n\n    /**\n     * @dev Public accessor to check the eta of a queued proposal\n     */\n    function proposalEta(uint256 proposalId) public view virtual override returns (uint256) {\n        return _proposalTimelocks[proposalId].timer.getDeadline();\n    }\n\n    /**\n     * @dev Function to queue a proposal to the timelock.\n     */\n    function queue(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public virtual override returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n\n        require(state(proposalId) == ProposalState.Succeeded, \"Governor: proposal not successful\");\n\n        uint256 eta = block.timestamp + _timelock.delay();\n        _proposalTimelocks[proposalId].timer.setDeadline(eta.toUint64());\n        for (uint256 i = 0; i < targets.length; ++i) {\n            require(\n                !_timelock.queuedTransactions(keccak256(abi.encode(targets[i], values[i], \"\", calldatas[i], eta))),\n                \"GovernorTimelockCompound: identical proposal action already queued\"\n            );\n            _timelock.queueTransaction(targets[i], values[i], \"\", calldatas[i], eta);\n        }\n\n        emit ProposalQueued(proposalId, eta);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Overriden execute function that run the already queued proposal through the timelock.\n     */\n    function _execute(\n        uint256 proposalId,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 /*descriptionHash*/\n    ) internal virtual override {\n        uint256 eta = proposalEta(proposalId);\n        require(eta > 0, \"GovernorTimelockCompound: proposal not yet queued\");\n        Address.sendValue(payable(_timelock), msg.value);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            _timelock.executeTransaction(targets[i], values[i], \"\", calldatas[i], eta);\n        }\n    }\n\n    /**\n     * @dev Overriden version of the {Governor-_cancel} function to cancel the timelocked proposal if it as already\n     * been queued.\n     */\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override returns (uint256) {\n        uint256 proposalId = super._cancel(targets, values, calldatas, descriptionHash);\n\n        uint256 eta = proposalEta(proposalId);\n        if (eta > 0) {\n            for (uint256 i = 0; i < targets.length; ++i) {\n                _timelock.cancelTransaction(targets[i], values[i], \"\", calldatas[i], eta);\n            }\n            _proposalTimelocks[proposalId].timer.reset();\n        }\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Address through which the governor executes action. In this case, the timelock.\n     */\n    function _executor() internal view virtual override returns (address) {\n        return address(_timelock);\n    }\n\n    /**\n     * @dev Accept admin right over the timelock.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    function __acceptAdmin() public {\n        _timelock.acceptAdmin();\n    }\n\n    /**\n     * @dev Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates\n     * must be proposed, scheduled and executed using the {Governor} workflow.\n     *\n     * For security reason, the timelock must be handed over to another admin before setting up a new one. The two\n     * operations (hand over the timelock) and do the update can be batched in a single proposal.\n     *\n     * Note that if the timelock admin has been handed over in a previous operation, we refuse updates made through the\n     * timelock if admin of the timelock has already been accepted and the operation is executed outside the scope of\n     * governance.\n     */\n    function updateTimelock(ICompoundTimelock newTimelock) external virtual onlyGovernance {\n        _updateTimelock(newTimelock);\n    }\n\n    function _updateTimelock(ICompoundTimelock newTimelock) private {\n        emit TimelockChange(address(_timelock), address(newTimelock));\n        _timelock = newTimelock;\n    }\n}\n"}, "interfaces/IERC721Receiver.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x04c99e0f7cc521daff42ecd8e8f14877"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721Receiver.sol\";\n"}, "mocks/SignedSafeMathMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xc0abc8207b2fe94f7e6e14bc8f32e130"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/math/SignedSafeMath.sol\";\n\ncontract SignedSafeMathMock {\n    function mul(int256 a, int256 b) public pure returns (int256) {\n        return SignedSafeMath.mul(a, b);\n    }\n\n    function div(int256 a, int256 b) public pure returns (int256) {\n        return SignedSafeMath.div(a, b);\n    }\n\n    function sub(int256 a, int256 b) public pure returns (int256) {\n        return SignedSafeMath.sub(a, b);\n    }\n\n    function add(int256 a, int256 b) public pure returns (int256) {\n        return SignedSafeMath.add(a, b);\n    }\n}\n"}, "mocks/ERC165StorageMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x5e1f7907867ff274418400e6a41d38a7"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/ERC165Storage.sol\";\n\ncontract ERC165StorageMock is ERC165Storage {\n    function registerInterface(bytes4 interfaceId) public {\n        _registerInterface(interfaceId);\n    }\n}\n"}, "governance/extensions/GovernorVotes.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xafe408f37eb12e094c7270738a2aa754"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorVotes.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Governor.sol\";\nimport \"../../token/ERC20/extensions/ERC20Votes.sol\";\nimport \"../../utils/math/Math.sol\";\n\n/**\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorVotes is Governor {\n    ERC20Votes public immutable token;\n\n    constructor(ERC20Votes tokenAddress) {\n        token = tokenAddress;\n    }\n\n    /**\n     * Read the voting weight from the token's built in snapshot mechanism (see {IGovernor-getVotes}).\n     */\n    function getVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\n        return token.getPastVotes(account, blockNumber);\n    }\n}\n"}, "mocks/TimersBlockNumberImpl.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x251e6f75ef0655071e414aa17f406ef0"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Timers.sol\";\n\ncontract TimersBlockNumberImpl {\n    using Timers for Timers.BlockNumber;\n\n    Timers.BlockNumber private _timer;\n\n    function getDeadline() public view returns (uint64) {\n        return _timer.getDeadline();\n    }\n\n    function setDeadline(uint64 timestamp) public {\n        _timer.setDeadline(timestamp);\n    }\n\n    function reset() public {\n        _timer.reset();\n    }\n\n    function isUnset() public view returns (bool) {\n        return _timer.isUnset();\n    }\n\n    function isStarted() public view returns (bool) {\n        return _timer.isStarted();\n    }\n\n    function isPending() public view returns (bool) {\n        return _timer.isPending();\n    }\n\n    function isExpired() public view returns (bool) {\n        return _timer.isExpired();\n    }\n}\n"}, "mocks/ConditionalEscrowMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x63b04414ec27ee252e7e7431785f5a63"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/escrow/ConditionalEscrow.sol\";\n\n// mock class using ConditionalEscrow\ncontract ConditionalEscrowMock is ConditionalEscrow {\n    mapping(address => bool) private _allowed;\n\n    function setAllowed(address payee, bool allowed) public {\n        _allowed[payee] = allowed;\n    }\n\n    function withdrawalAllowed(address payee) public view override returns (bool) {\n        return _allowed[payee];\n    }\n}\n"}, "proxy/beacon/BeaconProxy.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x0d71075819600720f2c99ed4b31d88e0"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"}, "mocks/SafeMathMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x0f2e411c240cab2951bf7856ffe04b98"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/math/SafeMath.sol\";\n\ncontract SafeMathMock {\n    function tryAdd(uint256 a, uint256 b) public pure returns (bool flag, uint256 value) {\n        return SafeMath.tryAdd(a, b);\n    }\n\n    function trySub(uint256 a, uint256 b) public pure returns (bool flag, uint256 value) {\n        return SafeMath.trySub(a, b);\n    }\n\n    function tryMul(uint256 a, uint256 b) public pure returns (bool flag, uint256 value) {\n        return SafeMath.tryMul(a, b);\n    }\n\n    function tryDiv(uint256 a, uint256 b) public pure returns (bool flag, uint256 value) {\n        return SafeMath.tryDiv(a, b);\n    }\n\n    function tryMod(uint256 a, uint256 b) public pure returns (bool flag, uint256 value) {\n        return SafeMath.tryMod(a, b);\n    }\n\n    // using the do* naming convention to avoid warnings due to clashing opcode names\n\n    function doAdd(uint256 a, uint256 b) public pure returns (uint256) {\n        return SafeMath.add(a, b);\n    }\n\n    function doSub(uint256 a, uint256 b) public pure returns (uint256) {\n        return SafeMath.sub(a, b);\n    }\n\n    function doMul(uint256 a, uint256 b) public pure returns (uint256) {\n        return SafeMath.mul(a, b);\n    }\n\n    function doDiv(uint256 a, uint256 b) public pure returns (uint256) {\n        return SafeMath.div(a, b);\n    }\n\n    function doMod(uint256 a, uint256 b) public pure returns (uint256) {\n        return SafeMath.mod(a, b);\n    }\n\n    function subWithMessage(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) public pure returns (uint256) {\n        return SafeMath.sub(a, b, errorMessage);\n    }\n\n    function divWithMessage(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) public pure returns (uint256) {\n        return SafeMath.div(a, b, errorMessage);\n    }\n\n    function modWithMessage(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) public pure returns (uint256) {\n        return SafeMath.mod(a, b, errorMessage);\n    }\n\n    function addMemoryCheck() public pure returns (uint256 mem) {\n        uint256 length = 32;\n        assembly {\n            mem := mload(0x40)\n        }\n        for (uint256 i = 0; i < length; ++i) {\n            SafeMath.add(1, 1);\n        }\n        assembly {\n            mem := sub(mload(0x40), mem)\n        }\n    }\n\n    function subMemoryCheck() public pure returns (uint256 mem) {\n        uint256 length = 32;\n        assembly {\n            mem := mload(0x40)\n        }\n        for (uint256 i = 0; i < length; ++i) {\n            SafeMath.sub(1, 1);\n        }\n        assembly {\n            mem := sub(mload(0x40), mem)\n        }\n    }\n\n    function mulMemoryCheck() public pure returns (uint256 mem) {\n        uint256 length = 32;\n        assembly {\n            mem := mload(0x40)\n        }\n        for (uint256 i = 0; i < length; ++i) {\n            SafeMath.mul(1, 1);\n        }\n        assembly {\n            mem := sub(mload(0x40), mem)\n        }\n    }\n\n    function divMemoryCheck() public pure returns (uint256 mem) {\n        uint256 length = 32;\n        assembly {\n            mem := mload(0x40)\n        }\n        for (uint256 i = 0; i < length; ++i) {\n            SafeMath.div(1, 1);\n        }\n        assembly {\n            mem := sub(mload(0x40), mem)\n        }\n    }\n\n    function modMemoryCheck() public pure returns (uint256 mem) {\n        uint256 length = 32;\n        assembly {\n            mem := mload(0x40)\n        }\n        for (uint256 i = 0; i < length; ++i) {\n            SafeMath.mod(1, 1);\n        }\n        assembly {\n            mem := sub(mload(0x40), mem)\n        }\n    }\n}\n"}, "utils/introspection/ERC165.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x0e7db055ce108f9da7bb6686a00287c0"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"}, "interfaces/IERC1820Registry.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xfee82324a47df8d208c5389f695afab9"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1820Registry.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC1820Registry.sol\";\n"}, "mocks/StringsMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x576c5673181da7bea96fde42342a6e41"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Strings.sol\";\n\ncontract StringsMock {\n    function fromUint256(uint256 value) public pure returns (string memory) {\n        return Strings.toString(value);\n    }\n\n    function fromUint256Hex(uint256 value) public pure returns (string memory) {\n        return Strings.toHexString(value);\n    }\n\n    function fromUint256HexFixed(uint256 value, uint256 length) public pure returns (string memory) {\n        return Strings.toHexString(value, length);\n    }\n}\n"}, "mocks/ERC20SnapshotMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xd1c6ab468983add875049a57a5485e77"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/extensions/ERC20Snapshot.sol\";\n\ncontract ERC20SnapshotMock is ERC20Snapshot {\n    constructor(\n        string memory name,\n        string memory symbol,\n        address initialAccount,\n        uint256 initialBalance\n    ) ERC20(name, symbol) {\n        _mint(initialAccount, initialBalance);\n    }\n\n    function snapshot() public {\n        _snapshot();\n    }\n\n    function mint(address account, uint256 amount) public {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) public {\n        _burn(account, amount);\n    }\n}\n"}, "token/ERC721/extensions/ERC721Enumerable.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x88095889e59d16821879a8083f906503"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"}, "finance/PaymentSplitter.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x6f4509765ae026e31e8e4f0fb8f1f80f"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/utils/SafeERC20.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @title PaymentSplitter\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\n * that the Ether will be split in this way, since it is handled transparently by the contract.\n *\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\n * an amount proportional to the percentage of total shares they were assigned.\n *\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\n * function.\n *\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\n * to run tests before sending real value to this contract.\n */\ncontract PaymentSplitter is Context {\n    event PayeeAdded(address account, uint256 shares);\n    event PaymentReleased(address to, uint256 amount);\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\n    event PaymentReceived(address from, uint256 amount);\n\n    uint256 private _totalShares;\n    uint256 private _totalReleased;\n\n    mapping(address => uint256) private _shares;\n    mapping(address => uint256) private _released;\n    address[] private _payees;\n\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\n\n    /**\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\n     * the matching position in the `shares` array.\n     *\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\n     * duplicates in `payees`.\n     */\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\n        require(payees.length == shares_.length, \"PaymentSplitter: payees and shares length mismatch\");\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], shares_[i]);\n        }\n    }\n\n    /**\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\n     * reliability of the events, and not the actual splitting of Ether.\n     *\n     * To learn more about this see the Solidity documentation for\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\n     * functions].\n     */\n    receive() external payable virtual {\n        emit PaymentReceived(_msgSender(), msg.value);\n    }\n\n    /**\n     * @dev Getter for the total shares held by payees.\n     */\n    function totalShares() public view returns (uint256) {\n        return _totalShares;\n    }\n\n    /**\n     * @dev Getter for the total amount of Ether already released.\n     */\n    function totalReleased() public view returns (uint256) {\n        return _totalReleased;\n    }\n\n    /**\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\n     * contract.\n     */\n    function totalReleased(IERC20 token) public view returns (uint256) {\n        return _erc20TotalReleased[token];\n    }\n\n    /**\n     * @dev Getter for the amount of shares held by an account.\n     */\n    function shares(address account) public view returns (uint256) {\n        return _shares[account];\n    }\n\n    /**\n     * @dev Getter for the amount of Ether already released to a payee.\n     */\n    function released(address account) public view returns (uint256) {\n        return _released[account];\n    }\n\n    /**\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function released(IERC20 token, address account) public view returns (uint256) {\n        return _erc20Released[token][account];\n    }\n\n    /**\n     * @dev Getter for the address of the payee number `index`.\n     */\n    function payee(uint256 index) public view returns (address) {\n        return _payees[index];\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\n     * total shares and their previous withdrawals.\n     */\n    function release(address payable account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 totalReceived = address(this).balance + totalReleased();\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        _released[account] += payment;\n        _totalReleased += payment;\n\n        Address.sendValue(account, payment);\n        emit PaymentReleased(account, payment);\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\n     * contract.\n     */\n    function release(IERC20 token, address account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\n        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        _erc20Released[token][account] += payment;\n        _erc20TotalReleased[token] += payment;\n\n        SafeERC20.safeTransfer(token, account, payment);\n        emit ERC20PaymentReleased(token, account, payment);\n    }\n\n    /**\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\n     * already released amounts.\n     */\n    function _pendingPayment(\n        address account,\n        uint256 totalReceived,\n        uint256 alreadyReleased\n    ) private view returns (uint256) {\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\n    }\n\n    /**\n     * @dev Add a new payee to the contract.\n     * @param account The address of the payee to add.\n     * @param shares_ The number of shares owned by the payee.\n     */\n    function _addPayee(address account, uint256 shares_) private {\n        require(account != address(0), \"PaymentSplitter: account is the zero address\");\n        require(shares_ > 0, \"PaymentSplitter: shares are 0\");\n        require(_shares[account] == 0, \"PaymentSplitter: account already has shares\");\n\n        _payees.push(account);\n        _shares[account] = shares_;\n        _totalShares = _totalShares + shares_;\n        emit PayeeAdded(account, shares_);\n    }\n}\n"}, "token/ERC721/IERC721Receiver.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x592df588492d45fdcf46b3cb608c0fbf"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"}, "mocks/GovernorTimelockControlMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x5a48537e3185d65be5ab32e9a3957cf5"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../governance/extensions/GovernorTimelockControl.sol\";\nimport \"../governance/extensions/GovernorSettings.sol\";\nimport \"../governance/extensions/GovernorCountingSimple.sol\";\nimport \"../governance/extensions/GovernorVotesQuorumFraction.sol\";\n\ncontract GovernorTimelockControlMock is\n    GovernorSettings,\n    GovernorTimelockControl,\n    GovernorVotesQuorumFraction,\n    GovernorCountingSimple\n{\n    constructor(\n        string memory name_,\n        ERC20Votes token_,\n        uint256 votingDelay_,\n        uint256 votingPeriod_,\n        TimelockController timelock_,\n        uint256 quorumNumerator_\n    )\n        Governor(name_)\n        GovernorTimelockControl(timelock_)\n        GovernorSettings(votingDelay_, votingPeriod_, 0)\n        GovernorVotes(token_)\n        GovernorVotesQuorumFraction(quorumNumerator_)\n    {}\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(Governor, GovernorTimelockControl)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function quorum(uint256 blockNumber)\n        public\n        view\n        override(IGovernor, GovernorVotesQuorumFraction)\n        returns (uint256)\n    {\n        return super.quorum(blockNumber);\n    }\n\n    function cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public returns (uint256 proposalId) {\n        return _cancel(targets, values, calldatas, descriptionHash);\n    }\n\n    /**\n     * Overriding nightmare\n     */\n    function state(uint256 proposalId)\n        public\n        view\n        virtual\n        override(Governor, GovernorTimelockControl)\n        returns (ProposalState)\n    {\n        return super.state(proposalId);\n    }\n\n    function proposalThreshold() public view override(Governor, GovernorSettings) returns (uint256) {\n        return super.proposalThreshold();\n    }\n\n    function _execute(\n        uint256 proposalId,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override(Governor, GovernorTimelockControl) {\n        super._execute(proposalId, targets, values, calldatas, descriptionHash);\n    }\n\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override(Governor, GovernorTimelockControl) returns (uint256 proposalId) {\n        return super._cancel(targets, values, calldatas, descriptionHash);\n    }\n\n    function getVotes(address account, uint256 blockNumber)\n        public\n        view\n        virtual\n        override(IGovernor, GovernorVotes)\n        returns (uint256)\n    {\n        return super.getVotes(account, blockNumber);\n    }\n\n    function _executor() internal view virtual override(Governor, GovernorTimelockControl) returns (address) {\n        return super._executor();\n    }\n}\n"}, "token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x04c05cd714f642b1d3bb5ac56f2b939d"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../extensions/ERC721Enumerable.sol\";\nimport \"../extensions/ERC721Burnable.sol\";\nimport \"../extensions/ERC721Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev {ERC721} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *  - token ID and URI autogeneration\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n */\ncontract ERC721PresetMinterPauserAutoId is\n    Context,\n    AccessControlEnumerable,\n    ERC721Enumerable,\n    ERC721Burnable,\n    ERC721Pausable\n{\n    using Counters for Counters.Counter;\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    Counters.Counter private _tokenIdTracker;\n\n    string private _baseTokenURI;\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\n     * See {ERC721-tokenURI}.\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        string memory baseTokenURI\n    ) ERC721(name, symbol) {\n        _baseTokenURI = baseTokenURI;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseTokenURI;\n    }\n\n    /**\n     * @dev Creates a new token for `to`. Its token ID will be automatically\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\n     * URI autogenerated based on the base URI passed at construction.\n     *\n     * See {ERC721-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have minter role to mint\");\n\n        // We cannot just use balanceOf to create the new tokenId because tokens\n        // can be burned (destroyed), so we need a separate counter.\n        _mint(to, _tokenIdTracker.current());\n        _tokenIdTracker.increment();\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControlEnumerable, ERC721, ERC721Enumerable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"}, "mocks/ERC20VotesMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x053434c5bb49ac564e581ceb1181b7e1"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/extensions/ERC20Votes.sol\";\n\ncontract ERC20VotesMock is ERC20Votes {\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) ERC20Permit(name) {}\n\n    function mint(address account, uint256 amount) public {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) public {\n        _burn(account, amount);\n    }\n\n    function getChainId() external view returns (uint256) {\n        return block.chainid;\n    }\n}\n"}, "mocks/ERC721PausableMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xd956d419d6d9abff2fb0fbcb14f5bdae"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/extensions/ERC721Pausable.sol\";\n\n/**\n * @title ERC721PausableMock\n * This mock just provides a public mint, burn and exists functions for testing purposes\n */\ncontract ERC721PausableMock is ERC721Pausable {\n    constructor(string memory name, string memory symbol) ERC721(name, symbol) {}\n\n    function pause() external {\n        _pause();\n    }\n\n    function unpause() external {\n        _unpause();\n    }\n\n    function exists(uint256 tokenId) public view returns (bool) {\n        return _exists(tokenId);\n    }\n\n    function mint(address to, uint256 tokenId) public {\n        _mint(to, tokenId);\n    }\n\n    function safeMint(address to, uint256 tokenId) public {\n        _safeMint(to, tokenId);\n    }\n\n    function safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public {\n        _safeMint(to, tokenId, _data);\n    }\n\n    function burn(uint256 tokenId) public {\n        _burn(tokenId);\n    }\n}\n"}, "interfaces/IERC20.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xd151fbfe7939989b9acf22797b32058b"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"}, "token/ERC777/IERC777Sender.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x7c1ce5bc5bc5f57fe7106ba767063e08"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Sender.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\n *\n * {IERC777} Token holders can be notified of operations performed on their\n * tokens by having a contract implement this interface (contract holders can be\n * their own implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Sender {\n    /**\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\n     * is conveyed by `to` being the zero address or not.\n     *\n     * This call occurs _before_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"}, "interfaces/IERC1820Implementer.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xb78ff1b7467f49381ceffd0e1c86b821"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1820Implementer.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC1820Implementer.sol\";\n"}, "mocks/ERC165Mock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x4af581ea8aa2c8845c950d764f220b26"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/ERC165.sol\";\n\ncontract ERC165Mock is ERC165 {}\n"}, "token/ERC20/extensions/ERC20VotesComp.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x89613d6d7b1c0ad02f4cb831523d2a86"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20VotesComp.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC20Votes.sol\";\n\n/**\n * @dev Extension of ERC20 to support Compound's voting and delegation. This version exactly matches Compound's\n * interface, with the drawback of only supporting supply up to (2^96^ - 1).\n *\n * NOTE: You should use this contract if you need exact compatibility with COMP (for example in order to use your token\n * with Governor Alpha or Bravo) and if you are sure the supply cap of 2^96^ is enough for you. Otherwise, use the\n * {ERC20Votes} variant of this module.\n *\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\n * power can be queried through the public accessors {getCurrentVotes} and {getPriorVotes}.\n *\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\n * Enabling self-delegation can easily be done by overriding the {delegates} function. Keep in mind however that this\n * will significantly increase the base gas cost of transfers.\n *\n * _Available since v4.2._\n */\nabstract contract ERC20VotesComp is ERC20Votes {\n    /**\n     * @dev Comp version of the {getVotes} accessor, with `uint96` return type.\n     */\n    function getCurrentVotes(address account) external view returns (uint96) {\n        return SafeCast.toUint96(getVotes(account));\n    }\n\n    /**\n     * @dev Comp version of the {getPastVotes} accessor, with `uint96` return type.\n     */\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint96) {\n        return SafeCast.toUint96(getPastVotes(account, blockNumber));\n    }\n\n    /**\n     * @dev Maximum token supply. Reduced to `type(uint96).max` (2^96^ - 1) to fit COMP interface.\n     */\n    function _maxSupply() internal view virtual override returns (uint224) {\n        return type(uint96).max;\n    }\n}\n"}, "security/ReentrancyGuard.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x92f9448b23a90ea3bb932ee55cc3ccce"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"}, "mocks/CallReceiverMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xd8ad0fa6f5cb047fd71030abd436c3d2"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ncontract CallReceiverMock {\n    string public sharedAnswer;\n\n    event MockFunctionCalled();\n    event MockFunctionCalledWithArgs(uint256 a, uint256 b);\n\n    uint256[] private _array;\n\n    function mockFunction() public payable returns (string memory) {\n        emit MockFunctionCalled();\n\n        return \"0x1234\";\n    }\n\n    function mockFunctionWithArgs(uint256 a, uint256 b) public payable returns (string memory) {\n        emit MockFunctionCalledWithArgs(a, b);\n\n        return \"0x1234\";\n    }\n\n    function mockFunctionNonPayable() public returns (string memory) {\n        emit MockFunctionCalled();\n\n        return \"0x1234\";\n    }\n\n    function mockStaticFunction() public pure returns (string memory) {\n        return \"0x1234\";\n    }\n\n    function mockFunctionRevertsNoReason() public payable {\n        revert();\n    }\n\n    function mockFunctionRevertsReason() public payable {\n        revert(\"CallReceiverMock: reverting\");\n    }\n\n    function mockFunctionThrows() public payable {\n        assert(false);\n    }\n\n    function mockFunctionOutOfGas() public payable {\n        for (uint256 i = 0; ; ++i) {\n            _array.push(i);\n        }\n    }\n\n    function mockFunctionWritesStorage() public returns (string memory) {\n        sharedAnswer = \"42\";\n        return \"0x1234\";\n    }\n}\n"}, "utils/Timers.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xae135102abee8b2fc88eed09a40cdb4c"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Timers.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Tooling for timepoints, timers and delays\n */\nlibrary Timers {\n    struct Timestamp {\n        uint64 _deadline;\n    }\n\n    function getDeadline(Timestamp memory timer) internal pure returns (uint64) {\n        return timer._deadline;\n    }\n\n    function setDeadline(Timestamp storage timer, uint64 timestamp) internal {\n        timer._deadline = timestamp;\n    }\n\n    function reset(Timestamp storage timer) internal {\n        timer._deadline = 0;\n    }\n\n    function isUnset(Timestamp memory timer) internal pure returns (bool) {\n        return timer._deadline == 0;\n    }\n\n    function isStarted(Timestamp memory timer) internal pure returns (bool) {\n        return timer._deadline > 0;\n    }\n\n    function isPending(Timestamp memory timer) internal view returns (bool) {\n        return timer._deadline > block.timestamp;\n    }\n\n    function isExpired(Timestamp memory timer) internal view returns (bool) {\n        return isStarted(timer) && timer._deadline <= block.timestamp;\n    }\n\n    struct BlockNumber {\n        uint64 _deadline;\n    }\n\n    function getDeadline(BlockNumber memory timer) internal pure returns (uint64) {\n        return timer._deadline;\n    }\n\n    function setDeadline(BlockNumber storage timer, uint64 timestamp) internal {\n        timer._deadline = timestamp;\n    }\n\n    function reset(BlockNumber storage timer) internal {\n        timer._deadline = 0;\n    }\n\n    function isUnset(BlockNumber memory timer) internal pure returns (bool) {\n        return timer._deadline == 0;\n    }\n\n    function isStarted(BlockNumber memory timer) internal pure returns (bool) {\n        return timer._deadline > 0;\n    }\n\n    function isPending(BlockNumber memory timer) internal view returns (bool) {\n        return timer._deadline > block.number;\n    }\n\n    function isExpired(BlockNumber memory timer) internal view returns (bool) {\n        return isStarted(timer) && timer._deadline <= block.number;\n    }\n}\n"}, "token/ERC1155/IERC1155Receiver.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x90eddd06deda7317b4441f04ec26db4d"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"}, "mocks/compound/CompTimelock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xfd7ad8322337afa2448279b3c8c88b3b"}, "content": "// SPDX-License-Identifier: BSD-3-Clause\n// solhint-disable private-vars-leading-underscore\n/**\n * Copyright 2020 Compound Labs, Inc.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the\n * following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n *    disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the\n *    following disclaimer in the documentation and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote\n *    products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npragma solidity ^0.8.0;\n\ncontract CompTimelock {\n    event NewAdmin(address indexed newAdmin);\n    event NewPendingAdmin(address indexed newPendingAdmin);\n    event NewDelay(uint256 indexed newDelay);\n    event CancelTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n    event ExecuteTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n    event QueueTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n\n    uint256 public constant GRACE_PERIOD = 14 days;\n    uint256 public constant MINIMUM_DELAY = 2 days;\n    uint256 public constant MAXIMUM_DELAY = 30 days;\n\n    address public admin;\n    address public pendingAdmin;\n    uint256 public delay;\n\n    mapping(bytes32 => bool) public queuedTransactions;\n\n    constructor(address admin_, uint256 delay_) {\n        require(delay_ >= MINIMUM_DELAY, \"Timelock::constructor: Delay must exceed minimum delay.\");\n        require(delay_ <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\n\n        admin = admin_;\n        delay = delay_;\n    }\n\n    receive() external payable {}\n\n    function setDelay(uint256 delay_) public {\n        require(msg.sender == address(this), \"Timelock::setDelay: Call must come from Timelock.\");\n        require(delay_ >= MINIMUM_DELAY, \"Timelock::setDelay: Delay must exceed minimum delay.\");\n        require(delay_ <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\n        delay = delay_;\n\n        emit NewDelay(delay);\n    }\n\n    function acceptAdmin() public {\n        require(msg.sender == pendingAdmin, \"Timelock::acceptAdmin: Call must come from pendingAdmin.\");\n        admin = msg.sender;\n        pendingAdmin = address(0);\n\n        emit NewAdmin(admin);\n    }\n\n    function setPendingAdmin(address pendingAdmin_) public {\n        require(msg.sender == address(this), \"Timelock::setPendingAdmin: Call must come from Timelock.\");\n        pendingAdmin = pendingAdmin_;\n\n        emit NewPendingAdmin(pendingAdmin);\n    }\n\n    function queueTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) public returns (bytes32) {\n        require(msg.sender == admin, \"Timelock::queueTransaction: Call must come from admin.\");\n        require(\n            eta >= getBlockTimestamp() + delay,\n            \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\"\n        );\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = true;\n\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\n        return txHash;\n    }\n\n    function cancelTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) public {\n        require(msg.sender == admin, \"Timelock::cancelTransaction: Call must come from admin.\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = false;\n\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\n    }\n\n    function executeTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) public payable returns (bytes memory) {\n        require(msg.sender == admin, \"Timelock::executeTransaction: Call must come from admin.\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        require(queuedTransactions[txHash], \"Timelock::executeTransaction: Transaction hasn't been queued.\");\n        require(getBlockTimestamp() >= eta, \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\");\n        require(getBlockTimestamp() <= eta + GRACE_PERIOD, \"Timelock::executeTransaction: Transaction is stale.\");\n\n        queuedTransactions[txHash] = false;\n\n        bytes memory callData;\n\n        if (bytes(signature).length == 0) {\n            callData = data;\n        } else {\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n        }\n\n        // solium-disable-next-line security/no-call-value\n        (bool success, bytes memory returnData) = target.call{value: value}(callData);\n        require(success, \"Timelock::executeTransaction: Transaction execution reverted.\");\n\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\n\n        return returnData;\n    }\n\n    function getBlockTimestamp() internal view returns (uint256) {\n        // solium-disable-next-line security/no-block-members\n        return block.timestamp;\n    }\n}\n"}, "mocks/ERC1820ImplementerMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x932975c1e28f595457f9621603c95220"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/ERC1820Implementer.sol\";\n\ncontract ERC1820ImplementerMock is ERC1820Implementer {\n    function registerInterfaceForAddress(bytes32 interfaceHash, address account) public {\n        _registerInterfaceForAddress(interfaceHash, account);\n    }\n}\n"}, "mocks/ERC20BurnableMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x16c0c062fb93e0fc7c60061c16e198bc"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/extensions/ERC20Burnable.sol\";\n\ncontract ERC20BurnableMock is ERC20Burnable {\n    constructor(\n        string memory name,\n        string memory symbol,\n        address initialAccount,\n        uint256 initialBalance\n    ) ERC20(name, symbol) {\n        _mint(initialAccount, initialBalance);\n    }\n}\n"}, "token/ERC20/utils/TokenTimelock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x4c1f25a465550ee0582e72e007c45e08"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/TokenTimelock.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./SafeERC20.sol\";\n\n/**\n * @dev A token holder contract that will allow a beneficiary to extract the\n * tokens after a given release time.\n *\n * Useful for simple vesting schedules like \"advisors get all of their tokens\n * after 1 year\".\n */\ncontract TokenTimelock {\n    using SafeERC20 for IERC20;\n\n    // ERC20 basic token contract being held\n    IERC20 private immutable _token;\n\n    // beneficiary of tokens after they are released\n    address private immutable _beneficiary;\n\n    // timestamp when token release is enabled\n    uint256 private immutable _releaseTime;\n\n    constructor(\n        IERC20 token_,\n        address beneficiary_,\n        uint256 releaseTime_\n    ) {\n        require(releaseTime_ > block.timestamp, \"TokenTimelock: release time is before current time\");\n        _token = token_;\n        _beneficiary = beneficiary_;\n        _releaseTime = releaseTime_;\n    }\n\n    /**\n     * @return the token being held.\n     */\n    function token() public view virtual returns (IERC20) {\n        return _token;\n    }\n\n    /**\n     * @return the beneficiary of the tokens.\n     */\n    function beneficiary() public view virtual returns (address) {\n        return _beneficiary;\n    }\n\n    /**\n     * @return the time when the tokens are released.\n     */\n    function releaseTime() public view virtual returns (uint256) {\n        return _releaseTime;\n    }\n\n    /**\n     * @notice Transfers tokens held by timelock to beneficiary.\n     */\n    function release() public virtual {\n        require(block.timestamp >= releaseTime(), \"TokenTimelock: current time is before release time\");\n\n        uint256 amount = token().balanceOf(address(this));\n        require(amount > 0, \"TokenTimelock: no tokens to release\");\n\n        token().safeTransfer(beneficiary(), amount);\n    }\n}\n"}, "token/ERC721/extensions/ERC721Pausable.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x2bc2d361b7e7bda979021da66e1696af"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC721 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC721Pausable is ERC721, Pausable {\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        require(!paused(), \"ERC721Pausable: token transfer while paused\");\n    }\n}\n"}, "token/ERC777/presets/ERC777PresetFixedSupply.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xcf632c608a0fc89ebfcd9870cb7e6ca2"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/presets/ERC777PresetFixedSupply.sol)\npragma solidity ^0.8.0;\n\nimport \"../ERC777.sol\";\n\n/**\n * @dev {ERC777} token, including:\n *\n *  - Preminted initial supply\n *  - No access control mechanism (for minting/pausing) and hence no governance\n *\n * _Available since v3.4._\n */\ncontract ERC777PresetFixedSupply is ERC777 {\n    /**\n     * @dev Mints `initialSupply` amount of token and transfers them to `owner`.\n     *\n     * See {ERC777-constructor}.\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        address[] memory defaultOperators,\n        uint256 initialSupply,\n        address owner\n    ) ERC777(name, symbol, defaultOperators) {\n        _mint(owner, initialSupply, \"\", \"\");\n    }\n}\n"}, "utils/escrow/RefundEscrow.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xaee62e265ecc9a3b5f03a79e34b89158"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/escrow/RefundEscrow.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ConditionalEscrow.sol\";\n\n/**\n * @title RefundEscrow\n * @dev Escrow that holds funds for a beneficiary, deposited from multiple\n * parties.\n * @dev Intended usage: See {Escrow}. Same usage guidelines apply here.\n * @dev The owner account (that is, the contract that instantiates this\n * contract) may deposit, close the deposit period, and allow for either\n * withdrawal by the beneficiary, or refunds to the depositors. All interactions\n * with `RefundEscrow` will be made through the owner contract.\n */\ncontract RefundEscrow is ConditionalEscrow {\n    using Address for address payable;\n\n    enum State {\n        Active,\n        Refunding,\n        Closed\n    }\n\n    event RefundsClosed();\n    event RefundsEnabled();\n\n    State private _state;\n    address payable private immutable _beneficiary;\n\n    /**\n     * @dev Constructor.\n     * @param beneficiary_ The beneficiary of the deposits.\n     */\n    constructor(address payable beneficiary_) {\n        require(beneficiary_ != address(0), \"RefundEscrow: beneficiary is the zero address\");\n        _beneficiary = beneficiary_;\n        _state = State.Active;\n    }\n\n    /**\n     * @return The current state of the escrow.\n     */\n    function state() public view virtual returns (State) {\n        return _state;\n    }\n\n    /**\n     * @return The beneficiary of the escrow.\n     */\n    function beneficiary() public view virtual returns (address payable) {\n        return _beneficiary;\n    }\n\n    /**\n     * @dev Stores funds that may later be refunded.\n     * @param refundee The address funds will be sent to if a refund occurs.\n     */\n    function deposit(address refundee) public payable virtual override {\n        require(state() == State.Active, \"RefundEscrow: can only deposit while active\");\n        super.deposit(refundee);\n    }\n\n    /**\n     * @dev Allows for the beneficiary to withdraw their funds, rejecting\n     * further deposits.\n     */\n    function close() public virtual onlyOwner {\n        require(state() == State.Active, \"RefundEscrow: can only close while active\");\n        _state = State.Closed;\n        emit RefundsClosed();\n    }\n\n    /**\n     * @dev Allows for refunds to take place, rejecting further deposits.\n     */\n    function enableRefunds() public virtual onlyOwner {\n        require(state() == State.Active, \"RefundEscrow: can only enable refunds while active\");\n        _state = State.Refunding;\n        emit RefundsEnabled();\n    }\n\n    /**\n     * @dev Withdraws the beneficiary's funds.\n     */\n    function beneficiaryWithdraw() public virtual {\n        require(state() == State.Closed, \"RefundEscrow: beneficiary can only withdraw while closed\");\n        beneficiary().sendValue(address(this).balance);\n    }\n\n    /**\n     * @dev Returns whether refundees can withdraw their deposits (be refunded). The overridden function receives a\n     * 'payee' argument, but we ignore it here since the condition is global, not per-payee.\n     */\n    function withdrawalAllowed(address) public view override returns (bool) {\n        return state() == State.Refunding;\n    }\n}\n"}, "mocks/ArraysImpl.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x896807a6030108ad8e8872fceca45a48"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Arrays.sol\";\n\ncontract ArraysImpl {\n    using Arrays for uint256[];\n\n    uint256[] private _array;\n\n    constructor(uint256[] memory array) {\n        _array = array;\n    }\n\n    function findUpperBound(uint256 element) external view returns (uint256) {\n        return _array.findUpperBound(element);\n    }\n}\n"}, "utils/structs/EnumerableMap.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x1bca902345f0e6f88ca41adc097ef42f"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableMap.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./EnumerableSet.sol\";\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\n * supported.\n */\nlibrary EnumerableMap {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct Map {\n        // Storage of keys\n        EnumerableSet.Bytes32Set _keys;\n        mapping(bytes32 => bytes32) _values;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(\n        Map storage map,\n        bytes32 key,\n        bytes32 value\n    ) private returns (bool) {\n        map._values[key] = value;\n        return map._keys.add(key);\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        delete map._values[key];\n        return map._keys.remove(key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._keys.contains(key);\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._keys.length();\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        bytes32 key = map._keys.at(index);\n        return (key, map._values[key]);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\n        bytes32 value = map._values[key];\n        if (value == bytes32(0)) {\n            return (_contains(map, key), bytes32(0));\n        } else {\n            return (true, value);\n        }\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || _contains(map, key), \"EnumerableMap: nonexistent key\");\n        return value;\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\n     */\n    function _get(\n        Map storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) private view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || _contains(map, key), errorMessage);\n        return value;\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        UintToAddressMap storage map,\n        uint256 key,\n        address value\n    ) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     *\n     * _Available since v3.4._\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        UintToAddressMap storage map,\n        uint256 key,\n        string memory errorMessage\n    ) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\n    }\n}\n"}, "mocks/MulticallTokenMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xf3d490698b1a7cdcf440f9d64eca2c57"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Multicall.sol\";\nimport \"./ERC20Mock.sol\";\n\ncontract MulticallTokenMock is ERC20Mock, Multicall {\n    constructor(uint256 initialBalance) ERC20Mock(\"MulticallToken\", \"BCT\", msg.sender, initialBalance) {}\n}\n"}, "utils/Context.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x5f2c5c4b6af2dd4551027144797bc8be"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"}, "mocks/BitmapMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x6144ba9e614894591453591ab6fd3287"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/structs/BitMaps.sol\";\n\ncontract BitMapMock {\n    using BitMaps for BitMaps.BitMap;\n\n    BitMaps.BitMap private _bitmap;\n\n    function get(uint256 index) public view returns (bool) {\n        return _bitmap.get(index);\n    }\n\n    function setTo(uint256 index, bool value) public {\n        _bitmap.setTo(index, value);\n    }\n\n    function set(uint256 index) public {\n        _bitmap.set(index);\n    }\n\n    function unset(uint256 index) public {\n        _bitmap.unset(index);\n    }\n}\n"}, "utils/Address.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x4cff8b2ea0d958750786b4e3ca308445"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"}, "utils/introspection/IERC1820Registry.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xf584744ea68647073c73fe42d509a3e1"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC1820Registry.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the global ERC1820 Registry, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\n * implementers for interfaces in this registry, as well as query support.\n *\n * Implementers may be shared by multiple accounts, and can also implement more\n * than a single interface for each account. Contracts can implement interfaces\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\n * contract.\n *\n * {IERC165} interfaces can also be queried via the registry.\n *\n * For an in-depth explanation and source code analysis, see the EIP text.\n */\ninterface IERC1820Registry {\n    /**\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\n     * account is able to set interface implementers for it.\n     *\n     * By default, each account is its own manager. Passing a value of `0x0` in\n     * `newManager` will reset the manager to this initial state.\n     *\n     * Emits a {ManagerChanged} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     */\n    function setManager(address account, address newManager) external;\n\n    /**\n     * @dev Returns the manager for `account`.\n     *\n     * See {setManager}.\n     */\n    function getManager(address account) external view returns (address);\n\n    /**\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\n     * `interfaceHash`.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     * The zero address can also be used in `implementer` to remove an old one.\n     *\n     * See {interfaceHash} to learn how these are created.\n     *\n     * Emits an {InterfaceImplementerSet} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n     * end in 28 zeroes).\n     * - `implementer` must implement {IERC1820Implementer} and return true when\n     * queried for support, unless `implementer` is the caller. See\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function setInterfaceImplementer(\n        address account,\n        bytes32 _interfaceHash,\n        address implementer\n    ) external;\n\n    /**\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n     * implementer is registered, returns the zero address.\n     *\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n     * zeroes), `account` will be queried for support of it.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     */\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\n\n    /**\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n     * corresponding\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\n     */\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n\n    /**\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n     * @param account Address of the contract for which to update the cache.\n     * @param interfaceId ERC165 interface for which to update the cache.\n     */\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\n\n    /**\n     * @notice Checks whether a contract implements an ERC165 interface or not.\n     * If the result is not cached a direct lookup on the contract address is performed.\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n     * {updateERC165Cache} with the contract address.\n     * @param account Address of the contract to check.\n     * @param interfaceId ERC165 interface to check.\n     * @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n\n    /**\n     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n     * @param account Address of the contract to check.\n     * @param interfaceId ERC165 interface to check.\n     * @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n\n    event ManagerChanged(address indexed account, address indexed newManager);\n}\n"}, "metatx/ERC2771Context.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x8a9438f1a81b9e6ef9111140deb7cb96"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (metatx/ERC2771Context.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Context variant with ERC2771 support.\n */\nabstract contract ERC2771Context is Context {\n    address private _trustedForwarder;\n\n    constructor(address trustedForwarder) {\n        _trustedForwarder = trustedForwarder;\n    }\n\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\n        return forwarder == _trustedForwarder;\n    }\n\n    function _msgSender() internal view virtual override returns (address sender) {\n        if (isTrustedForwarder(msg.sender)) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        if (isTrustedForwarder(msg.sender)) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return super._msgData();\n        }\n    }\n}\n"}, "security/Pausable.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x9c2dccab8e3a43a18c41e358763fe4d8"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"}, "interfaces/IERC1155Receiver.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xa80dbc3947556c57c569cd81aa255f10"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC1155/IERC1155Receiver.sol\";\n"}, "token/ERC721/utils/ERC721Holder.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x54062ff887823a306b33ea6494a220bc"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"}, "governance/extensions/GovernorTimelockControl.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x6af59ad1eaac4c40ebaa182546390831"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorTimelockControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IGovernorTimelock.sol\";\nimport \"../Governor.sol\";\nimport \"../TimelockController.sol\";\n\n/**\n * @dev Extension of {Governor} that binds the execution process to an instance of {TimelockController}. This adds a\n * delay, enforced by the {TimelockController} to all successful proposal (in addition to the voting duration). The\n * {Governor} needs the proposer (an ideally the executor) roles for the {Governor} to work properly.\n *\n * Using this model means the proposal will be operated by the {TimelockController} and not by the {Governor}. Thus,\n * the assets and permissions must be attached to the {TimelockController}. Any asset sent to the {Governor} will be\n * inaccessible.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorTimelockControl is IGovernorTimelock, Governor {\n    TimelockController private _timelock;\n    mapping(uint256 => bytes32) private _timelockIds;\n\n    /**\n     * @dev Emitted when the timelock controller used for proposal execution is modified.\n     */\n    event TimelockChange(address oldTimelock, address newTimelock);\n\n    /**\n     * @dev Set the timelock.\n     */\n    constructor(TimelockController timelockAddress) {\n        _updateTimelock(timelockAddress);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Governor) returns (bool) {\n        return interfaceId == type(IGovernorTimelock).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Overriden version of the {Governor-state} function with added support for the `Queued` status.\n     */\n    function state(uint256 proposalId) public view virtual override(IGovernor, Governor) returns (ProposalState) {\n        ProposalState status = super.state(proposalId);\n\n        if (status != ProposalState.Succeeded) {\n            return status;\n        }\n\n        // core tracks execution, so we just have to check if successful proposal have been queued.\n        bytes32 queueid = _timelockIds[proposalId];\n        if (queueid == bytes32(0)) {\n            return status;\n        } else if (_timelock.isOperationDone(queueid)) {\n            return ProposalState.Executed;\n        } else {\n            return ProposalState.Queued;\n        }\n    }\n\n    /**\n     * @dev Public accessor to check the address of the timelock\n     */\n    function timelock() public view virtual override returns (address) {\n        return address(_timelock);\n    }\n\n    /**\n     * @dev Public accessor to check the eta of a queued proposal\n     */\n    function proposalEta(uint256 proposalId) public view virtual override returns (uint256) {\n        uint256 eta = _timelock.getTimestamp(_timelockIds[proposalId]);\n        return eta == 1 ? 0 : eta; // _DONE_TIMESTAMP (1) should be replaced with a 0 value\n    }\n\n    /**\n     * @dev Function to queue a proposal to the timelock.\n     */\n    function queue(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public virtual override returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n\n        require(state(proposalId) == ProposalState.Succeeded, \"Governor: proposal not successful\");\n\n        uint256 delay = _timelock.getMinDelay();\n        _timelockIds[proposalId] = _timelock.hashOperationBatch(targets, values, calldatas, 0, descriptionHash);\n        _timelock.scheduleBatch(targets, values, calldatas, 0, descriptionHash, delay);\n\n        emit ProposalQueued(proposalId, block.timestamp + delay);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Overriden execute function that run the already queued proposal through the timelock.\n     */\n    function _execute(\n        uint256, /* proposalId */\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override {\n        _timelock.executeBatch{value: msg.value}(targets, values, calldatas, 0, descriptionHash);\n    }\n\n    /**\n     * @dev Overriden version of the {Governor-_cancel} function to cancel the timelocked proposal if it as already\n     * been queued.\n     */\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override returns (uint256) {\n        uint256 proposalId = super._cancel(targets, values, calldatas, descriptionHash);\n\n        if (_timelockIds[proposalId] != 0) {\n            _timelock.cancel(_timelockIds[proposalId]);\n            delete _timelockIds[proposalId];\n        }\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Address through which the governor executes action. In this case, the timelock.\n     */\n    function _executor() internal view virtual override returns (address) {\n        return address(_timelock);\n    }\n\n    /**\n     * @dev Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates\n     * must be proposed, scheduled and executed using the {Governor} workflow.\n     */\n    function updateTimelock(TimelockController newTimelock) external virtual onlyGovernance {\n        _updateTimelock(newTimelock);\n    }\n\n    function _updateTimelock(TimelockController newTimelock) private {\n        emit TimelockChange(address(_timelock), address(newTimelock));\n        _timelock = newTimelock;\n    }\n}\n"}, "utils/introspection/ERC165Checker.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x1abe3767b27223b96a265645cb2a56e3"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\n        if (result.length < 32) return false;\n        return success && abi.decode(result, (bool));\n    }\n}\n"}, "utils/StorageSlot.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x187a01c1e4e638014509dfee3ac6faa9"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"}, "access/AccessControlEnumerable.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xed8cb66146e00c05d3435beedacd0a9f"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"}, "utils/Create2.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x1f0346d0da642d65cfb74f9241cc7683"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(\n        uint256 amount,\n        bytes32 salt,\n        bytes memory bytecode\n    ) internal returns (address) {\n        address addr;\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n        return addr;\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(\n        bytes32 salt,\n        bytes32 bytecodeHash,\n        address deployer\n    ) internal pure returns (address) {\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\n        return address(uint160(uint256(_data)));\n    }\n}\n"}, "utils/escrow/ConditionalEscrow.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xed8802b28f8eab3257dc05b5b09e5c5d"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/escrow/ConditionalEscrow.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Escrow.sol\";\n\n/**\n * @title ConditionalEscrow\n * @dev Base abstract escrow to only allow withdrawal if a condition is met.\n * @dev Intended usage: See {Escrow}. Same usage guidelines apply here.\n */\nabstract contract ConditionalEscrow is Escrow {\n    /**\n     * @dev Returns whether an address is allowed to withdraw their funds. To be\n     * implemented by derived contracts.\n     * @param payee The destination address of the funds.\n     */\n    function withdrawalAllowed(address payee) public view virtual returns (bool);\n\n    function withdraw(address payable payee) public virtual override {\n        require(withdrawalAllowed(payee), \"ConditionalEscrow: payee is not allowed to withdraw\");\n        super.withdraw(payee);\n    }\n}\n"}, "governance/IGovernor.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xbee5601ce35a6dbb3b02ba45204de4af"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/IGovernor.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Interface of the {Governor} core.\n *\n * _Available since v4.3._\n */\nabstract contract IGovernor is IERC165 {\n    enum ProposalState {\n        Pending,\n        Active,\n        Canceled,\n        Defeated,\n        Succeeded,\n        Queued,\n        Expired,\n        Executed\n    }\n\n    /**\n     * @dev Emitted when a proposal is created.\n     */\n    event ProposalCreated(\n        uint256 proposalId,\n        address proposer,\n        address[] targets,\n        uint256[] values,\n        string[] signatures,\n        bytes[] calldatas,\n        uint256 startBlock,\n        uint256 endBlock,\n        string description\n    );\n\n    /**\n     * @dev Emitted when a proposal is canceled.\n     */\n    event ProposalCanceled(uint256 proposalId);\n\n    /**\n     * @dev Emitted when a proposal is executed.\n     */\n    event ProposalExecuted(uint256 proposalId);\n\n    /**\n     * @dev Emitted when a vote is cast.\n     *\n     * Note: `support` values should be seen as buckets. There interpretation depends on the voting module used.\n     */\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\n\n    /**\n     * @notice module:core\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\n     */\n    function name() public view virtual returns (string memory);\n\n    /**\n     * @notice module:core\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \"1\"\n     */\n    function version() public view virtual returns (string memory);\n\n    /**\n     * @notice module:voting\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\n     *\n     * There are 2 standard keys: `support` and `quorum`.\n     *\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\n     *\n     * NOTE: The string can be decoded by the standard\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\n     * JavaScript class.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function COUNTING_MODE() public pure virtual returns (string memory);\n\n    /**\n     * @notice module:core\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\n     */\n    function hashProposal(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata calldatas,\n        bytes32 descriptionHash\n    ) public pure virtual returns (uint256);\n\n    /**\n     * @notice module:core\n     * @dev Current state of a proposal, following Compound's convention\n     */\n    function state(uint256 proposalId) public view virtual returns (ProposalState);\n\n    /**\n     * @notice module:core\n     * @dev Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's\n     * ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the\n     * beginning of the following block.\n     */\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);\n\n    /**\n     * @notice module:core\n     * @dev Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote\n     * during this block.\n     */\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);\n\n    /**\n     * @notice module:user-config\n     * @dev Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to\n     * leave time for users to buy voting power, of delegate it, before the voting of a proposal starts.\n     */\n    function votingDelay() public view virtual returns (uint256);\n\n    /**\n     * @notice module:user-config\n     * @dev Delay, in number of blocks, between the vote start and vote ends.\n     *\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\n     * duration compared to the voting delay.\n     */\n    function votingPeriod() public view virtual returns (uint256);\n\n    /**\n     * @notice module:user-config\n     * @dev Minimum number of cast voted required for a proposal to be successful.\n     *\n     * Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the\n     * quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).\n     */\n    function quorum(uint256 blockNumber) public view virtual returns (uint256);\n\n    /**\n     * @notice module:reputation\n     * @dev Voting power of an `account` at a specific `blockNumber`.\n     *\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\n     * multiple), {ERC20Votes} tokens.\n     */\n    function getVotes(address account, uint256 blockNumber) public view virtual returns (uint256);\n\n    /**\n     * @notice module:voting\n     * @dev Returns weither `account` has cast a vote on `proposalId`.\n     */\n    function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);\n\n    /**\n     * @dev Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends\n     * {IGovernor-votingPeriod} blocks after the voting starts.\n     *\n     * Emits a {ProposalCreated} event.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual returns (uint256 proposalId);\n\n    /**\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\n     * deadline to be reached.\n     *\n     * Emits a {ProposalExecuted} event.\n     *\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\n     */\n    function execute(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public payable virtual returns (uint256 proposalId);\n\n    /**\n     * @dev Cast a vote\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);\n\n    /**\n     * @dev Cast a with a reason\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVoteWithReason(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason\n    ) public virtual returns (uint256 balance);\n\n    /**\n     * @dev Cast a vote using the user cryptographic signature.\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVoteBySig(\n        uint256 proposalId,\n        uint8 support,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual returns (uint256 balance);\n}\n"}, "governance/Governor.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xee9b9d56e0f0d3398c1269b982211ec3"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/Governor.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/cryptography/ECDSA.sol\";\nimport \"../utils/cryptography/draft-EIP712.sol\";\nimport \"../utils/introspection/ERC165.sol\";\nimport \"../utils/math/SafeCast.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Timers.sol\";\nimport \"./IGovernor.sol\";\n\n/**\n * @dev Core of the governance system, designed to be extended though various modules.\n *\n * This contract is abstract and requires several function to be implemented in various modules:\n *\n * - A counting module must implement {quorum}, {_quorumReached}, {_voteSucceeded} and {_countVote}\n * - A voting module must implement {getVotes}\n * - Additionanly, the {votingPeriod} must also be implemented\n *\n * _Available since v4.3._\n */\nabstract contract Governor is Context, ERC165, EIP712, IGovernor {\n    using SafeCast for uint256;\n    using Timers for Timers.BlockNumber;\n\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\"Ballot(uint256 proposalId,uint8 support)\");\n\n    struct ProposalCore {\n        Timers.BlockNumber voteStart;\n        Timers.BlockNumber voteEnd;\n        bool executed;\n        bool canceled;\n    }\n\n    string private _name;\n\n    mapping(uint256 => ProposalCore) private _proposals;\n\n    /**\n     * @dev Restrict access to governor executing address. Some module might override the _executor function to make\n     * sure this modifier is consistant with the execution model.\n     */\n    modifier onlyGovernance() {\n        require(_msgSender() == _executor(), \"Governor: onlyGovernance\");\n        _;\n    }\n\n    /**\n     * @dev Sets the value for {name} and {version}\n     */\n    constructor(string memory name_) EIP712(name_, version()) {\n        _name = name_;\n    }\n\n    /**\n     * @dev Function to receive ETH that will be handled by the governor (disabled if executor is a third party contract)\n     */\n    receive() external payable virtual {\n        require(_executor() == address(this));\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IGovernor).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IGovernor-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IGovernor-version}.\n     */\n    function version() public view virtual override returns (string memory) {\n        return \"1\";\n    }\n\n    /**\n     * @dev See {IGovernor-hashProposal}.\n     *\n     * The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array\n     * and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id\n     * can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in\n     * advance, before the proposal is submitted.\n     *\n     * Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the\n     * same proposal (with same operation and same description) will have the same id if submitted on multiple governors\n     * accross multiple networks. This also means that in order to execute the same operation twice (on the same\n     * governor) the proposer will have to change the description in order to avoid proposal id conflicts.\n     */\n    function hashProposal(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public pure virtual override returns (uint256) {\n        return uint256(keccak256(abi.encode(targets, values, calldatas, descriptionHash)));\n    }\n\n    /**\n     * @dev See {IGovernor-state}.\n     */\n    function state(uint256 proposalId) public view virtual override returns (ProposalState) {\n        ProposalCore memory proposal = _proposals[proposalId];\n\n        if (proposal.executed) {\n            return ProposalState.Executed;\n        } else if (proposal.canceled) {\n            return ProposalState.Canceled;\n        } else if (proposal.voteStart.getDeadline() >= block.number) {\n            return ProposalState.Pending;\n        } else if (proposal.voteEnd.getDeadline() >= block.number) {\n            return ProposalState.Active;\n        } else if (proposal.voteEnd.isExpired()) {\n            return\n                _quorumReached(proposalId) && _voteSucceeded(proposalId)\n                    ? ProposalState.Succeeded\n                    : ProposalState.Defeated;\n        } else {\n            revert(\"Governor: unknown proposal id\");\n        }\n    }\n\n    /**\n     * @dev See {IGovernor-proposalSnapshot}.\n     */\n    function proposalSnapshot(uint256 proposalId) public view virtual override returns (uint256) {\n        return _proposals[proposalId].voteStart.getDeadline();\n    }\n\n    /**\n     * @dev See {IGovernor-proposalDeadline}.\n     */\n    function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {\n        return _proposals[proposalId].voteEnd.getDeadline();\n    }\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_.\n     */\n    function proposalThreshold() public view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Amount of votes already cast passes the threshold limit.\n     */\n    function _quorumReached(uint256 proposalId) internal view virtual returns (bool);\n\n    /**\n     * @dev Is the proposal successful or not.\n     */\n    function _voteSucceeded(uint256 proposalId) internal view virtual returns (bool);\n\n    /**\n     * @dev Register a vote with a given support and voting weight.\n     *\n     * Note: Support is generic and can represent various things depending on the voting system used.\n     */\n    function _countVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        uint256 weight\n    ) internal virtual;\n\n    /**\n     * @dev See {IGovernor-propose}.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual override returns (uint256) {\n        require(\n            getVotes(msg.sender, block.number - 1) >= proposalThreshold(),\n            \"GovernorCompatibilityBravo: proposer votes below proposal threshold\"\n        );\n\n        uint256 proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));\n\n        require(targets.length == values.length, \"Governor: invalid proposal length\");\n        require(targets.length == calldatas.length, \"Governor: invalid proposal length\");\n        require(targets.length > 0, \"Governor: empty proposal\");\n\n        ProposalCore storage proposal = _proposals[proposalId];\n        require(proposal.voteStart.isUnset(), \"Governor: proposal already exists\");\n\n        uint64 snapshot = block.number.toUint64() + votingDelay().toUint64();\n        uint64 deadline = snapshot + votingPeriod().toUint64();\n\n        proposal.voteStart.setDeadline(snapshot);\n        proposal.voteEnd.setDeadline(deadline);\n\n        emit ProposalCreated(\n            proposalId,\n            _msgSender(),\n            targets,\n            values,\n            new string[](targets.length),\n            calldatas,\n            snapshot,\n            deadline,\n            description\n        );\n\n        return proposalId;\n    }\n\n    /**\n     * @dev See {IGovernor-execute}.\n     */\n    function execute(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public payable virtual override returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n\n        ProposalState status = state(proposalId);\n        require(\n            status == ProposalState.Succeeded || status == ProposalState.Queued,\n            \"Governor: proposal not successful\"\n        );\n        _proposals[proposalId].executed = true;\n\n        emit ProposalExecuted(proposalId);\n\n        _execute(proposalId, targets, values, calldatas, descriptionHash);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Internal execution mechanism. Can be overriden to implement different execution mechanism\n     */\n    function _execute(\n        uint256, /* proposalId */\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 /*descriptionHash*/\n    ) internal virtual {\n        string memory errorMessage = \"Governor: call reverted without message\";\n        for (uint256 i = 0; i < targets.length; ++i) {\n            (bool success, bytes memory returndata) = targets[i].call{value: values[i]}(calldatas[i]);\n            Address.verifyCallResult(success, returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Internal cancel mechanism: locks up the proposal timer, preventing it from being re-submitted. Marks it as\n     * canceled to allow distinguishing it from executed proposals.\n     *\n     * Emits a {IGovernor-ProposalCanceled} event.\n     */\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n        ProposalState status = state(proposalId);\n\n        require(\n            status != ProposalState.Canceled && status != ProposalState.Expired && status != ProposalState.Executed,\n            \"Governor: proposal not active\"\n        );\n        _proposals[proposalId].canceled = true;\n\n        emit ProposalCanceled(proposalId);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev See {IGovernor-castVote}.\n     */\n    function castVote(uint256 proposalId, uint8 support) public virtual override returns (uint256) {\n        address voter = _msgSender();\n        return _castVote(proposalId, voter, support, \"\");\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteWithReason}.\n     */\n    function castVoteWithReason(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason\n    ) public virtual override returns (uint256) {\n        address voter = _msgSender();\n        return _castVote(proposalId, voter, support, reason);\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteBySig}.\n     */\n    function castVoteBySig(\n        uint256 proposalId,\n        uint8 support,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override returns (uint256) {\n        address voter = ECDSA.recover(\n            _hashTypedDataV4(keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support))),\n            v,\n            r,\n            s\n        );\n        return _castVote(proposalId, voter, support, \"\");\n    }\n\n    /**\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function.\n     *\n     * Emits a {IGovernor-VoteCast} event.\n     */\n    function _castVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        string memory reason\n    ) internal virtual returns (uint256) {\n        ProposalCore storage proposal = _proposals[proposalId];\n        require(state(proposalId) == ProposalState.Active, \"Governor: vote not currently active\");\n\n        uint256 weight = getVotes(account, proposal.voteStart.getDeadline());\n        _countVote(proposalId, account, support, weight);\n\n        emit VoteCast(account, proposalId, support, weight, reason);\n\n        return weight;\n    }\n\n    /**\n     * @dev Address through which the governor executes action. Will be overloaded by module that execute actions\n     * through another contract such as a timelock.\n     */\n    function _executor() internal view virtual returns (address) {\n        return address(this);\n    }\n}\n"}, "mocks/ERC20DecimalsMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xc1a6d0757300973b3d2fcf94cc625ace"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/ERC20.sol\";\n\ncontract ERC20DecimalsMock is ERC20 {\n    uint8 private immutable _decimals;\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) ERC20(name_, symbol_) {\n        _decimals = decimals_;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n}\n"}, "interfaces/IERC3156FlashLender.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x9e16b4d269b399e8ab6342e0cf8a2edd"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156FlashLender.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC3156FlashBorrower.sol\";\n\n/**\n * @dev Interface of the ERC3156 FlashLender, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n *\n * _Available since v4.1._\n */\ninterface IERC3156FlashLender {\n    /**\n     * @dev The amount of currency available to be lended.\n     * @param token The loan currency.\n     * @return The amount of `token` that can be borrowed.\n     */\n    function maxFlashLoan(address token) external view returns (uint256);\n\n    /**\n     * @dev The fee to be charged for a given loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\n     */\n    function flashFee(address token, uint256 amount) external view returns (uint256);\n\n    /**\n     * @dev Initiate a flash loan.\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     */\n    function flashLoan(\n        IERC3156FlashBorrower receiver,\n        address token,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n}\n"}, "mocks/ECDSAMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x89ffe0c0ce25a9fa5e5230f3e756908f"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/cryptography/ECDSA.sol\";\n\ncontract ECDSAMock {\n    using ECDSA for bytes32;\n    using ECDSA for bytes;\n\n    function recover(bytes32 hash, bytes memory signature) public pure returns (address) {\n        return hash.recover(signature);\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function recover_v_r_s(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public pure returns (address) {\n        return hash.recover(v, r, s);\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function recover_r_vs(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) public pure returns (address) {\n        return hash.recover(r, vs);\n    }\n\n    function toEthSignedMessageHash(bytes32 hash) public pure returns (bytes32) {\n        return hash.toEthSignedMessageHash();\n    }\n\n    function toEthSignedMessageHash(bytes memory s) public pure returns (bytes32) {\n        return s.toEthSignedMessageHash();\n    }\n}\n"}, "interfaces/IERC1271.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x8fe867b95c856b204f954a1910e28a1e"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"}, "mocks/ERC165/ERC165MissingData.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xf7a435a8acb3f5f0bcf2c8aa87a6ab6b"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ncontract ERC165MissingData {\n    function supportsInterface(bytes4 interfaceId) public view {} // missing return\n}\n"}, "token/ERC1155/extensions/ERC1155Pausable.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x8c76f015a31a093020b83ba53a33c84d"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC1155 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155Pausable is ERC1155, Pausable {\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        require(!paused(), \"ERC1155Pausable: token transfer while paused\");\n    }\n}\n"}, "token/ERC20/extensions/ERC20Capped.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xda89e343119284763a5a135243cdb338"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Capped.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n */\nabstract contract ERC20Capped is ERC20 {\n    uint256 private immutable _cap;\n\n    /**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    constructor(uint256 cap_) {\n        require(cap_ > 0, \"ERC20Capped: cap is 0\");\n        _cap = cap_;\n    }\n\n    /**\n     * @dev Returns the cap on the token's total supply.\n     */\n    function cap() public view virtual returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev See {ERC20-_mint}.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        require(ERC20.totalSupply() + amount <= cap(), \"ERC20Capped: cap exceeded\");\n        super._mint(account, amount);\n    }\n}\n"}, "mocks/ERC721ReceiverMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x6a446429aabded16b45d40ebbbb7f672"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721Receiver.sol\";\n\ncontract ERC721ReceiverMock is IERC721Receiver {\n    enum Error {\n        None,\n        RevertWithMessage,\n        RevertWithoutMessage,\n        Panic\n    }\n\n    bytes4 private immutable _retval;\n    Error private immutable _error;\n\n    event Received(address operator, address from, uint256 tokenId, bytes data, uint256 gas);\n\n    constructor(bytes4 retval, Error error) {\n        _retval = retval;\n        _error = error;\n    }\n\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes memory data\n    ) public override returns (bytes4) {\n        if (_error == Error.RevertWithMessage) {\n            revert(\"ERC721ReceiverMock: reverting\");\n        } else if (_error == Error.RevertWithoutMessage) {\n            revert();\n        } else if (_error == Error.Panic) {\n            uint256 a = uint256(0) / uint256(0);\n            a;\n        }\n        emit Received(operator, from, tokenId, data, gasleft());\n        return _retval;\n    }\n}\n"}, "mocks/ERC3156FlashBorrowerMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xf5aaafe8ca151fca303734ce7c7ba8ce"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\nimport \"../interfaces/IERC3156.sol\";\nimport \"../utils/Address.sol\";\n\n/**\n * @dev WARNING: this IERC3156FlashBorrower mock implementation is for testing purposes ONLY.\n * Writing a secure flash lock borrower is not an easy task, and should be done with the utmost care.\n * This is not an example of how it should be done, and no pattern present in this mock should be considered secure.\n * Following best practices, always have your contract properly audited before using them to manipulate important funds on\n * live networks.\n */\ncontract ERC3156FlashBorrowerMock is IERC3156FlashBorrower {\n    bytes32 internal constant _RETURN_VALUE = keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n\n    bool immutable _enableApprove;\n    bool immutable _enableReturn;\n\n    event BalanceOf(address token, address account, uint256 value);\n    event TotalSupply(address token, uint256 value);\n\n    constructor(bool enableReturn, bool enableApprove) {\n        _enableApprove = enableApprove;\n        _enableReturn = enableReturn;\n    }\n\n    function onFlashLoan(\n        address, /*initiator*/\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) public override returns (bytes32) {\n        require(msg.sender == token);\n\n        emit BalanceOf(token, address(this), IERC20(token).balanceOf(address(this)));\n        emit TotalSupply(token, IERC20(token).totalSupply());\n\n        if (data.length > 0) {\n            // WARNING: This code is for testing purposes only! Do not use.\n            Address.functionCall(token, data);\n        }\n\n        if (_enableApprove) {\n            IERC20(token).approve(token, amount + fee);\n        }\n\n        return _enableReturn ? _RETURN_VALUE : bytes32(0);\n    }\n}\n"}, "mocks/ERC1155ReceiverMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x509f8265587db2c555344f91e2fe5b1d"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC1155/IERC1155Receiver.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\ncontract ERC1155ReceiverMock is ERC165, IERC1155Receiver {\n    bytes4 private _recRetval;\n    bool private _recReverts;\n    bytes4 private _batRetval;\n    bool private _batReverts;\n\n    event Received(address operator, address from, uint256 id, uint256 value, bytes data, uint256 gas);\n    event BatchReceived(address operator, address from, uint256[] ids, uint256[] values, bytes data, uint256 gas);\n\n    constructor(\n        bytes4 recRetval,\n        bool recReverts,\n        bytes4 batRetval,\n        bool batReverts\n    ) {\n        _recRetval = recRetval;\n        _recReverts = recReverts;\n        _batRetval = batRetval;\n        _batReverts = batReverts;\n    }\n\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external override returns (bytes4) {\n        require(!_recReverts, \"ERC1155ReceiverMock: reverting on receive\");\n        emit Received(operator, from, id, value, data, gasleft());\n        return _recRetval;\n    }\n\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external override returns (bytes4) {\n        require(!_batReverts, \"ERC1155ReceiverMock: reverting on batch receive\");\n        emit BatchReceived(operator, from, ids, values, data, gasleft());\n        return _batRetval;\n    }\n}\n"}, "mocks/ERC2771ContextMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xd136ce8da9bd08ff37c24fa830af7412"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ContextMock.sol\";\nimport \"../metatx/ERC2771Context.sol\";\n\n// By inheriting from ERC2771Context, Context's internal functions are overridden automatically\ncontract ERC2771ContextMock is ContextMock, ERC2771Context {\n    constructor(address trustedForwarder) ERC2771Context(trustedForwarder) {}\n\n    function _msgSender() internal view virtual override(Context, ERC2771Context) returns (address) {\n        return ERC2771Context._msgSender();\n    }\n\n    function _msgData() internal view virtual override(Context, ERC2771Context) returns (bytes calldata) {\n        return ERC2771Context._msgData();\n    }\n}\n"}, "token/ERC777/IERC777Recipient.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x268af1696d7a83a7e78a1a8f5ba1c685"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n *\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\n * contract implement this interface (contract holders can be their own\n * implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Recipient {\n    /**\n     * @dev Called by an {IERC777} token contract whenever tokens are being\n     * moved or created into a registered account (`to`). The type of operation\n     * is conveyed by `from` being the zero address or not.\n     *\n     * This call occurs _after_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"}, "mocks/ContextMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x719fb67a19e30889dcb3569262f65b85"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\ncontract ContextMock is Context {\n    event Sender(address sender);\n\n    function msgSender() public {\n        emit Sender(_msgSender());\n    }\n\n    event Data(bytes data, uint256 integerValue, string stringValue);\n\n    function msgData(uint256 integerValue, string memory stringValue) public {\n        emit Data(_msgData(), integerValue, stringValue);\n    }\n}\n\ncontract ContextMockCaller {\n    function callSender(ContextMock context) public {\n        context.msgSender();\n    }\n\n    function callData(\n        ContextMock context,\n        uint256 integerValue,\n        string memory stringValue\n    ) public {\n        context.msgData(integerValue, stringValue);\n    }\n}\n"}, "mocks/ERC1155Mock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x1be5f5c78217fb35b62f121b7d62296c"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC1155/ERC1155.sol\";\n\n/**\n * @title ERC1155Mock\n * This mock just publicizes internal functions for testing purposes\n */\ncontract ERC1155Mock is ERC1155 {\n    constructor(string memory uri) ERC1155(uri) {}\n\n    function setURI(string memory newuri) public {\n        _setURI(newuri);\n    }\n\n    function mint(\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes memory data\n    ) public {\n        _mint(to, id, value, data);\n    }\n\n    function mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) public {\n        _mintBatch(to, ids, values, data);\n    }\n\n    function burn(\n        address owner,\n        uint256 id,\n        uint256 value\n    ) public {\n        _burn(owner, id, value);\n    }\n\n    function burnBatch(\n        address owner,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public {\n        _burnBatch(owner, ids, values);\n    }\n}\n"}, "access/IAccessControlEnumerable.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x4e71cc90682e109e999ce2bd329f6572"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"}, "utils/introspection/IERC165.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x03e6768535ac4da0e9756f1d8a4a018a"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"}, "interfaces/IERC721Metadata.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xd228683ef3a0f519456720463403ced6"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/extensions/IERC721Metadata.sol\";\n"}, "mocks/DummyImplementation.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x23052da0351ecbcd43802845a41fbeef"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nabstract contract Impl {\n    function version() public pure virtual returns (string memory);\n}\n\ncontract DummyImplementation {\n    uint256 public value;\n    string public text;\n    uint256[] public values;\n\n    function initializeNonPayable() public {\n        value = 10;\n    }\n\n    function initializePayable() public payable {\n        value = 100;\n    }\n\n    function initializeNonPayableWithValue(uint256 _value) public {\n        value = _value;\n    }\n\n    function initializePayableWithValue(uint256 _value) public payable {\n        value = _value;\n    }\n\n    function initialize(\n        uint256 _value,\n        string memory _text,\n        uint256[] memory _values\n    ) public {\n        value = _value;\n        text = _text;\n        values = _values;\n    }\n\n    function get() public pure returns (bool) {\n        return true;\n    }\n\n    function version() public pure virtual returns (string memory) {\n        return \"V1\";\n    }\n\n    function reverts() public pure {\n        require(false, \"DummyImplementation reverted\");\n    }\n}\n\ncontract DummyImplementationV2 is DummyImplementation {\n    function migrate(uint256 newVal) public payable {\n        value = newVal;\n    }\n\n    function version() public pure override returns (string memory) {\n        return \"V2\";\n    }\n}\n"}, "mocks/ERC165/ERC165NotSupported.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x3d6acaa746a431a94963bccd84b1ef76"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ncontract ERC165NotSupported {}\n"}, "token/ERC1155/IERC1155.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x59e1bc5713fdebc7f821dc52f4d3e0ef"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"}, "utils/math/SafeMath.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xa6a9d6c1f662e922b82c1ba4d81cdd48"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"}, "token/ERC20/utils/SafeERC20.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x76814c83c32552ed2b521c816b4d801a"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"}, "mocks/AccessControlMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x9ab346051c25fc9309e084adc6112888"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../access/AccessControl.sol\";\n\ncontract AccessControlMock is AccessControl {\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    function setRoleAdmin(bytes32 roleId, bytes32 adminRoleId) public {\n        _setRoleAdmin(roleId, adminRoleId);\n    }\n\n    function senderProtected(bytes32 roleId) public onlyRole(roleId) {}\n}\n"}, "interfaces/IERC3156.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x8a4addf833379ccc6911f847b308332f"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC3156FlashBorrower.sol\";\nimport \"./IERC3156FlashLender.sol\";\n"}, "token/ERC1155/extensions/ERC1155Burnable.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xb9f23167c71a0ebb43ef5915b463a264"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\n\n/**\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\n * own tokens and those that they have been approved to use.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155Burnable is ERC1155 {\n    function burn(\n        address account,\n        uint256 id,\n        uint256 value\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }\n}\n"}, "mocks/ERC721URIStorageMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x49af10a60f7b5cf77c322f7c002eca81"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/extensions/ERC721URIStorage.sol\";\n\n/**\n * @title ERC721Mock\n * This mock just provides a public safeMint, mint, and burn functions for testing purposes\n */\ncontract ERC721URIStorageMock is ERC721URIStorage {\n    string private _baseTokenURI;\n\n    constructor(string memory name, string memory symbol) ERC721(name, symbol) {}\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseTokenURI;\n    }\n\n    function setBaseURI(string calldata newBaseTokenURI) public {\n        _baseTokenURI = newBaseTokenURI;\n    }\n\n    function baseURI() public view returns (string memory) {\n        return _baseURI();\n    }\n\n    function setTokenURI(uint256 tokenId, string memory _tokenURI) public {\n        _setTokenURI(tokenId, _tokenURI);\n    }\n\n    function exists(uint256 tokenId) public view returns (bool) {\n        return _exists(tokenId);\n    }\n\n    function mint(address to, uint256 tokenId) public {\n        _mint(to, tokenId);\n    }\n\n    function safeMint(address to, uint256 tokenId) public {\n        _safeMint(to, tokenId);\n    }\n\n    function safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public {\n        _safeMint(to, tokenId, _data);\n    }\n\n    function burn(uint256 tokenId) public {\n        _burn(tokenId);\n    }\n}\n"}, "mocks/EIP712External.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xf3ce57602b397d603d1ab47a289cd8c9"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/cryptography/draft-EIP712.sol\";\nimport \"../utils/cryptography/ECDSA.sol\";\n\ncontract EIP712External is EIP712 {\n    constructor(string memory name, string memory version) EIP712(name, version) {}\n\n    function domainSeparator() external view returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    function verify(\n        bytes memory signature,\n        address signer,\n        address mailTo,\n        string memory mailContents\n    ) external view {\n        bytes32 digest = _hashTypedDataV4(\n            keccak256(abi.encode(keccak256(\"Mail(address to,string contents)\"), mailTo, keccak256(bytes(mailContents))))\n        );\n        address recoveredSigner = ECDSA.recover(digest, signature);\n        require(recoveredSigner == signer);\n    }\n\n    function getChainId() external view returns (uint256) {\n        return block.chainid;\n    }\n}\n"}, "proxy/Clones.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xf741efede98f234458f02f818f80c7f3"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"}, "utils/Multicall.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x43750878e7e0032470da679a7b57e717"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Multicall.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Address.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * _Available since v4.1._\n */\nabstract contract Multicall {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     */\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\n        }\n        return results;\n    }\n}\n"}, "interfaces/IERC1363Receiver.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x81d82b92e32be3906f750c8aa081eb09"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1363Receiver.sol)\n\npragma solidity ^0.8.0;\n\ninterface IERC1363Receiver {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0x88a7ca5c.\n     * 0x88a7ca5c === bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))\n     */\n\n    /**\n     * @notice Handle the receipt of ERC1363 tokens\n     * @dev Any ERC1363 smart contract calls this function on the recipient\n     * after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\n     * transfer. Return of other than the magic value MUST result in the\n     * transaction being reverted.\n     * Note: the token contract address is always the message sender.\n     * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\n     * @param from address The address which are token transferred from\n     * @param value uint256 The amount of tokens transferred\n     * @param data bytes Additional data with no specified format\n     * @return `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))`\n     *  unless throwing\n     */\n    function onTransferReceived(\n        address operator,\n        address from,\n        uint256 value,\n        bytes memory data\n    ) external returns (bytes4);\n}\n"}, "utils/Arrays.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x2bd89f9eb95c317b3b21cc83fde01a32"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Arrays.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary Arrays {\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        if (array.length == 0) {\n            return 0;\n        }\n\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds down (it does integer division with truncation).\n            if (array[mid] > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && array[low - 1] == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n}\n"}, "mocks/ERC20FlashMintMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x6c99fcc05afa7e70515f430992e692ad"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/extensions/ERC20FlashMint.sol\";\n\ncontract ERC20FlashMintMock is ERC20FlashMint {\n    constructor(\n        string memory name,\n        string memory symbol,\n        address initialAccount,\n        uint256 initialBalance\n    ) ERC20(name, symbol) {\n        _mint(initialAccount, initialBalance);\n    }\n}\n"}, "token/ERC20/extensions/draft-IERC20Permit.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xfb77f144244b9ab12533aa6ce85ef8c5"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"}, "token/ERC777/IERC777.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x577d03e8d175b2f807063648ac4302ad"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777Token standard as defined in the EIP.\n *\n * This contract uses the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\n * token holders and recipients react to token movements by using setting implementers\n * for the associated interfaces in said registry. See {IERC1820Registry} and\n * {ERC1820Implementer}.\n */\ninterface IERC777 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     * means all token operations (creation, movement and destruction) must have\n     * amounts that are a multiple of this number.\n     *\n     * For most token contracts, this value will equal 1.\n     */\n    function granularity() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address owner) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * If send or receive hooks are registered for the caller and `recipient`,\n     * the corresponding functions will be called with `data` and empty\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(\n        address recipient,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * Emits an {AuthorizedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external;\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * Emits a {RevokedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external;\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    event Sent(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData\n    );\n\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\n\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\n\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\n}\n"}, "token/ERC20/IERC20.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x302d9755e46bc69d7058b0cbe7185e37"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"}, "token/ERC777/ERC777.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x5b49b1cbba768763775f40d665ac7326"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/ERC777.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC777.sol\";\nimport \"./IERC777Recipient.sol\";\nimport \"./IERC777Sender.sol\";\nimport \"../ERC20/IERC20.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/IERC1820Registry.sol\";\n\n/**\n * @dev Implementation of the {IERC777} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * Support for ERC20 is included in this contract, as specified by the EIP: both\n * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\n * Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token\n * movements.\n *\n * Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there\n * are no special restrictions in the amount of tokens that created, moved, or\n * destroyed. This makes integration with ERC20 applications seamless.\n */\ncontract ERC777 is Context, IERC777, IERC20 {\n    using Address for address;\n\n    IERC1820Registry internal constant _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n    mapping(address => uint256) private _balances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    bytes32 private constant _TOKENS_SENDER_INTERFACE_HASH = keccak256(\"ERC777TokensSender\");\n    bytes32 private constant _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\"ERC777TokensRecipient\");\n\n    // This isn't ever read from - it's only used to respond to the defaultOperators query.\n    address[] private _defaultOperatorsArray;\n\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\n    mapping(address => bool) private _defaultOperators;\n\n    // For each account, a mapping of its operators and revoked default operators.\n    mapping(address => mapping(address => bool)) private _operators;\n    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\n\n    // ERC20-allowances\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    /**\n     * @dev `defaultOperators` may be an empty array.\n     */\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        address[] memory defaultOperators_\n    ) {\n        _name = name_;\n        _symbol = symbol_;\n\n        _defaultOperatorsArray = defaultOperators_;\n        for (uint256 i = 0; i < defaultOperators_.length; i++) {\n            _defaultOperators[defaultOperators_[i]] = true;\n        }\n\n        // register interfaces\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"ERC777Token\"), address(this));\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"ERC20Token\"), address(this));\n    }\n\n    /**\n     * @dev See {IERC777-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC777-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {ERC20-decimals}.\n     *\n     * Always returns 18, as per the\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\n     */\n    function decimals() public pure virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC777-granularity}.\n     *\n     * This implementation always returns `1`.\n     */\n    function granularity() public view virtual override returns (uint256) {\n        return 1;\n    }\n\n    /**\n     * @dev See {IERC777-totalSupply}.\n     */\n    function totalSupply() public view virtual override(IERC20, IERC777) returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\n     */\n    function balanceOf(address tokenHolder) public view virtual override(IERC20, IERC777) returns (uint256) {\n        return _balances[tokenHolder];\n    }\n\n    /**\n     * @dev See {IERC777-send}.\n     *\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\n     */\n    function send(\n        address recipient,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        _send(_msgSender(), recipient, amount, data, \"\", true);\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\n     * interface if it is a contract.\n     *\n     * Also emits a {Sent} event.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n\n        address from = _msgSender();\n\n        _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n\n        _move(from, from, recipient, amount, \"\", \"\");\n\n        _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n\n        return true;\n    }\n\n    /**\n     * @dev See {IERC777-burn}.\n     *\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\n     */\n    function burn(uint256 amount, bytes memory data) public virtual override {\n        _burn(_msgSender(), amount, data, \"\");\n    }\n\n    /**\n     * @dev See {IERC777-isOperatorFor}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) public view virtual override returns (bool) {\n        return\n            operator == tokenHolder ||\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n            _operators[tokenHolder][operator];\n    }\n\n    /**\n     * @dev See {IERC777-authorizeOperator}.\n     */\n    function authorizeOperator(address operator) public virtual override {\n        require(_msgSender() != operator, \"ERC777: authorizing self as operator\");\n\n        if (_defaultOperators[operator]) {\n            delete _revokedDefaultOperators[_msgSender()][operator];\n        } else {\n            _operators[_msgSender()][operator] = true;\n        }\n\n        emit AuthorizedOperator(operator, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC777-revokeOperator}.\n     */\n    function revokeOperator(address operator) public virtual override {\n        require(operator != _msgSender(), \"ERC777: revoking self as operator\");\n\n        if (_defaultOperators[operator]) {\n            _revokedDefaultOperators[_msgSender()][operator] = true;\n        } else {\n            delete _operators[_msgSender()][operator];\n        }\n\n        emit RevokedOperator(operator, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC777-defaultOperators}.\n     */\n    function defaultOperators() public view virtual override returns (address[] memory) {\n        return _defaultOperatorsArray;\n    }\n\n    /**\n     * @dev See {IERC777-operatorSend}.\n     *\n     * Emits {Sent} and {IERC20-Transfer} events.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    ) public virtual override {\n        require(isOperatorFor(_msgSender(), sender), \"ERC777: caller is not an operator for holder\");\n        _send(sender, recipient, amount, data, operatorData, true);\n    }\n\n    /**\n     * @dev See {IERC777-operatorBurn}.\n     *\n     * Emits {Burned} and {IERC20-Transfer} events.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    ) public virtual override {\n        require(isOperatorFor(_msgSender(), account), \"ERC777: caller is not an operator for holder\");\n        _burn(account, amount, data, operatorData);\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     *\n     * Note that operator and allowance concepts are orthogonal: operators may\n     * not have allowance, and accounts with allowance may not be operators\n     * themselves.\n     */\n    function allowance(address holder, address spender) public view virtual override returns (uint256) {\n        return _allowances[holder][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Note that accounts cannot have allowance issued by their operators.\n     */\n    function approve(address spender, uint256 value) public virtual override returns (bool) {\n        address holder = _msgSender();\n        _approve(holder, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Note that operator and allowance concepts are orthogonal: operators cannot\n     * call `transferFrom` (unless they have allowance), and accounts with\n     * allowance cannot call `operatorSend` (unless they are operators).\n     *\n     * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\n     */\n    function transferFrom(\n        address holder,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n        require(holder != address(0), \"ERC777: transfer from the zero address\");\n\n        address spender = _msgSender();\n\n        _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n\n        _move(spender, holder, recipient, amount, \"\", \"\");\n\n        uint256 currentAllowance = _allowances[holder][spender];\n        require(currentAllowance >= amount, \"ERC777: transfer amount exceeds allowance\");\n        _approve(holder, spender, currentAllowance - amount);\n\n        _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n\n        return true;\n    }\n\n    /**\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `operator`, `data` and `operatorData`.\n     *\n     * See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits {Minted} and {IERC20-Transfer} events.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function _mint(\n        address account,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    ) internal virtual {\n        _mint(account, amount, userData, operatorData, true);\n    }\n\n    /**\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * If `requireReceptionAck` is set to true, and if a send hook is\n     * registered for `account`, the corresponding function will be called with\n     * `operator`, `data` and `operatorData`.\n     *\n     * See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits {Minted} and {IERC20-Transfer} events.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function _mint(\n        address account,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    ) internal virtual {\n        require(account != address(0), \"ERC777: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), account, amount);\n\n        // Update state variables\n        _totalSupply += amount;\n        _balances[account] += amount;\n\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, requireReceptionAck);\n\n        emit Minted(operator, account, amount, userData, operatorData);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Send tokens\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n     */\n    function _send(\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    ) internal virtual {\n        require(from != address(0), \"ERC777: send from the zero address\");\n        require(to != address(0), \"ERC777: send to the zero address\");\n\n        address operator = _msgSender();\n\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\n\n        _move(operator, from, to, amount, userData, operatorData);\n\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n    }\n\n    /**\n     * @dev Burn tokens\n     * @param from address token holder address\n     * @param amount uint256 amount of tokens to burn\n     * @param data bytes extra information provided by the token holder\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function _burn(\n        address from,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    ) internal virtual {\n        require(from != address(0), \"ERC777: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n\n        _beforeTokenTransfer(operator, from, address(0), amount);\n\n        // Update state variables\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC777: burn amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Burned(operator, from, amount, data, operatorData);\n        emit Transfer(from, address(0), amount);\n    }\n\n    function _move(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    ) private {\n        _beforeTokenTransfer(operator, from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC777: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Sent(operator, from, to, amount, userData, operatorData);\n        emit Transfer(from, to, amount);\n    }\n\n    /**\n     * @dev See {ERC20-_approve}.\n     *\n     * Note that accounts cannot have allowance issued by their operators.\n     */\n    function _approve(\n        address holder,\n        address spender,\n        uint256 value\n    ) internal {\n        require(holder != address(0), \"ERC777: approve from the zero address\");\n        require(spender != address(0), \"ERC777: approve to the zero address\");\n\n        _allowances[holder][spender] = value;\n        emit Approval(holder, spender, value);\n    }\n\n    /**\n     * @dev Call from.tokensToSend() if the interface is registered\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function _callTokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    ) private {\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n        }\n    }\n\n    /**\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\n     * tokensReceived() was not registered for the recipient\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n     */\n    function _callTokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    ) private {\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n        } else if (requireReceptionAck) {\n            require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes\n     * calls to {send}, {transfer}, {operatorSend}, minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"}, "utils/math/SignedSafeMath.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xf7b3809e202b5547e9ddd97aaeb1d907"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SignedSafeMath {\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        return a + b;\n    }\n}\n"}, "interfaces/IERC1155.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xf646f2b291e7c83dcc7f1c6c7d1ece30"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC1155/IERC1155.sol\";\n"}, "utils/math/SafeCast.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xcd91252bfcbee6eaba8f5144f504583c"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"}, "mocks/ERC20VotesCompMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xd5feb91e29eb503d3401af62d360be04"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/extensions/ERC20VotesComp.sol\";\n\ncontract ERC20VotesCompMock is ERC20VotesComp {\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) ERC20Permit(name) {}\n\n    function mint(address account, uint256 amount) public {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) public {\n        _burn(account, amount);\n    }\n\n    function getChainId() external view returns (uint256) {\n        return block.chainid;\n    }\n}\n"}, "interfaces/draft-IERC2612.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xad2177bf228c4a10bd94423ed7b1c67a"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/draft-IERC2612.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/extensions/draft-IERC20Permit.sol\";\n\ninterface IERC2612 is IERC20Permit {}\n"}, "mocks/ClashingImplementation.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x40774f559f6efe4bb93058b32e680c02"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Implementation contract with an admin() function made to clash with\n * @dev TransparentUpgradeableProxy's to test correct functioning of the\n * @dev Transparent Proxy feature.\n */\ncontract ClashingImplementation {\n    function admin() external pure returns (address) {\n        return 0x0000000000000000000000000000000011111142;\n    }\n\n    function delegatedFunction() external pure returns (bool) {\n        return true;\n    }\n}\n"}, "interfaces/IERC1155MetadataURI.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xbc1c98271c8b14d98b8caf09250dd039"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC1155/extensions/IERC1155MetadataURI.sol\";\n"}, "token/ERC20/presets/ERC20PresetFixedSupply.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x57f5e8500194cb5f405fb1bdff06dff6"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/presets/ERC20PresetFixedSupply.sol)\npragma solidity ^0.8.0;\n\nimport \"../extensions/ERC20Burnable.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - Preminted initial supply\n *  - Ability for holders to burn (destroy) their tokens\n *  - No access control mechanism (for minting/pausing) and hence no governance\n *\n * This contract uses {ERC20Burnable} to include burn capabilities - head to\n * its documentation for details.\n *\n * _Available since v3.4._\n */\ncontract ERC20PresetFixedSupply is ERC20Burnable {\n    /**\n     * @dev Mints `initialSupply` amount of token and transfers them to `owner`.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 initialSupply,\n        address owner\n    ) ERC20(name, symbol) {\n        _mint(owner, initialSupply);\n    }\n}\n"}, "token/ERC721/extensions/ERC721URIStorage.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x580a443491d9d70eb064b0130fc3cd01"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"}, "utils/Counters.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x74654e3ae5d7f39555055dfe244dab7a"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"}, "mocks/ERC1271WalletMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xd541075f1b02dd2fec14bba2ae153f90"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../access/Ownable.sol\";\nimport \"../interfaces/IERC1271.sol\";\nimport \"../utils/cryptography/ECDSA.sol\";\n\ncontract ERC1271WalletMock is Ownable, IERC1271 {\n    constructor(address originalOwner) {\n        transferOwnership(originalOwner);\n    }\n\n    function isValidSignature(bytes32 hash, bytes memory signature) public view override returns (bytes4 magicValue) {\n        return ECDSA.recover(hash, signature) == owner() ? this.isValidSignature.selector : bytes4(0);\n    }\n}\n"}, "mocks/ERC20WrapperMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xe2d41de561bf9c27cc7c68f5fbbf9fa9"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/extensions/ERC20Wrapper.sol\";\n\ncontract ERC20WrapperMock is ERC20Wrapper {\n    constructor(\n        IERC20 _underlyingToken,\n        string memory name,\n        string memory symbol\n    ) ERC20(name, symbol) ERC20Wrapper(_underlyingToken) {}\n\n    function recover(address account) public returns (uint256) {\n        return _recover(account);\n    }\n}\n"}, "governance/compatibility/GovernorCompatibilityBravo.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xfa2014e0f3e9a657e9f1495997397bc3"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.4.2) (governance/compatibility/GovernorCompatibilityBravo.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/Counters.sol\";\nimport \"../../utils/math/SafeCast.sol\";\nimport \"../extensions/IGovernorTimelock.sol\";\nimport \"../Governor.sol\";\nimport \"./IGovernorCompatibilityBravo.sol\";\n\n/**\n * @dev Compatibility layer that implements GovernorBravo compatibility on to of {Governor}.\n *\n * This compatibility layer includes a voting system and requires a {IGovernorTimelock} compatible module to be added\n * through inheritance. It does not include token bindings, not does it include any variable upgrade patterns.\n *\n * NOTE: When using this module, you may need to enable the Solidity optimizer to avoid hitting the contract size limit.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorCompatibilityBravo is IGovernorTimelock, IGovernorCompatibilityBravo, Governor {\n    using Counters for Counters.Counter;\n    using Timers for Timers.BlockNumber;\n\n    enum VoteType {\n        Against,\n        For,\n        Abstain\n    }\n\n    struct ProposalDetails {\n        address proposer;\n        address[] targets;\n        uint256[] values;\n        string[] signatures;\n        bytes[] calldatas;\n        uint256 forVotes;\n        uint256 againstVotes;\n        uint256 abstainVotes;\n        mapping(address => Receipt) receipts;\n        bytes32 descriptionHash;\n    }\n\n    mapping(uint256 => ProposalDetails) private _proposalDetails;\n\n    // solhint-disable-next-line func-name-mixedcase\n    function COUNTING_MODE() public pure virtual override returns (string memory) {\n        return \"support=bravo&quorum=bravo\";\n    }\n\n    // ============================================== Proposal lifecycle ==============================================\n    /**\n     * @dev See {IGovernor-propose}.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual override(IGovernor, Governor) returns (uint256) {\n        _storeProposal(_msgSender(), targets, values, new string[](calldatas.length), calldatas, description);\n        return super.propose(targets, values, calldatas, description);\n    }\n\n    /**\n     * @dev See {IGovernorCompatibilityBravo-propose}.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        string[] memory signatures,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual override returns (uint256) {\n        _storeProposal(_msgSender(), targets, values, signatures, calldatas, description);\n        return propose(targets, values, _encodeCalldata(signatures, calldatas), description);\n    }\n\n    /**\n     * @dev See {IGovernorCompatibilityBravo-queue}.\n     */\n    function queue(uint256 proposalId) public virtual override {\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        queue(\n            details.targets,\n            details.values,\n            _encodeCalldata(details.signatures, details.calldatas),\n            details.descriptionHash\n        );\n    }\n\n    /**\n     * @dev See {IGovernorCompatibilityBravo-execute}.\n     */\n    function execute(uint256 proposalId) public payable virtual override {\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        execute(\n            details.targets,\n            details.values,\n            _encodeCalldata(details.signatures, details.calldatas),\n            details.descriptionHash\n        );\n    }\n\n    function cancel(uint256 proposalId) public virtual override {\n        ProposalDetails storage details = _proposalDetails[proposalId];\n\n        require(\n            _msgSender() == details.proposer || getVotes(details.proposer, block.number - 1) < proposalThreshold(),\n            \"GovernorBravo: proposer above threshold\"\n        );\n\n        _cancel(\n            details.targets,\n            details.values,\n            _encodeCalldata(details.signatures, details.calldatas),\n            details.descriptionHash\n        );\n    }\n\n    /**\n     * @dev Encodes calldatas with optional function signature.\n     */\n    function _encodeCalldata(string[] memory signatures, bytes[] memory calldatas)\n        private\n        pure\n        returns (bytes[] memory)\n    {\n        bytes[] memory fullcalldatas = new bytes[](calldatas.length);\n\n        for (uint256 i = 0; i < signatures.length; ++i) {\n            fullcalldatas[i] = bytes(signatures[i]).length == 0\n                ? calldatas[i]\n                : abi.encodePacked(bytes4(keccak256(bytes(signatures[i]))), calldatas[i]);\n        }\n\n        return fullcalldatas;\n    }\n\n    /**\n     * @dev Store proposal metadata for later lookup\n     */\n    function _storeProposal(\n        address proposer,\n        address[] memory targets,\n        uint256[] memory values,\n        string[] memory signatures,\n        bytes[] memory calldatas,\n        string memory description\n    ) private {\n        bytes32 descriptionHash = keccak256(bytes(description));\n        uint256 proposalId = hashProposal(targets, values, _encodeCalldata(signatures, calldatas), descriptionHash);\n\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        if (details.descriptionHash == bytes32(0)) {\n            details.proposer = proposer;\n            details.targets = targets;\n            details.values = values;\n            details.signatures = signatures;\n            details.calldatas = calldatas;\n            details.descriptionHash = descriptionHash;\n        }\n    }\n\n    // ==================================================== Views =====================================================\n    /**\n     * @dev See {IGovernorCompatibilityBravo-proposals}.\n     */\n    function proposals(uint256 proposalId)\n        public\n        view\n        virtual\n        override\n        returns (\n            uint256 id,\n            address proposer,\n            uint256 eta,\n            uint256 startBlock,\n            uint256 endBlock,\n            uint256 forVotes,\n            uint256 againstVotes,\n            uint256 abstainVotes,\n            bool canceled,\n            bool executed\n        )\n    {\n        id = proposalId;\n        eta = proposalEta(proposalId);\n        startBlock = proposalSnapshot(proposalId);\n        endBlock = proposalDeadline(proposalId);\n\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        proposer = details.proposer;\n        forVotes = details.forVotes;\n        againstVotes = details.againstVotes;\n        abstainVotes = details.abstainVotes;\n\n        ProposalState status = state(proposalId);\n        canceled = status == ProposalState.Canceled;\n        executed = status == ProposalState.Executed;\n    }\n\n    /**\n     * @dev See {IGovernorCompatibilityBravo-getActions}.\n     */\n    function getActions(uint256 proposalId)\n        public\n        view\n        virtual\n        override\n        returns (\n            address[] memory targets,\n            uint256[] memory values,\n            string[] memory signatures,\n            bytes[] memory calldatas\n        )\n    {\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        return (details.targets, details.values, details.signatures, details.calldatas);\n    }\n\n    /**\n     * @dev See {IGovernorCompatibilityBravo-getReceipt}.\n     */\n    function getReceipt(uint256 proposalId, address voter) public view virtual override returns (Receipt memory) {\n        return _proposalDetails[proposalId].receipts[voter];\n    }\n\n    /**\n     * @dev See {IGovernorCompatibilityBravo-quorumVotes}.\n     */\n    function quorumVotes() public view virtual override returns (uint256) {\n        return quorum(block.number - 1);\n    }\n\n    // ==================================================== Voting ====================================================\n    /**\n     * @dev See {IGovernor-hasVoted}.\n     */\n    function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\n        return _proposalDetails[proposalId].receipts[account].hasVoted;\n    }\n\n    /**\n     * @dev See {Governor-_quorumReached}. In this module, only forVotes count toward the quorum.\n     */\n    function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        return quorum(proposalSnapshot(proposalId)) <= details.forVotes;\n    }\n\n    /**\n     * @dev See {Governor-_voteSucceeded}. In this module, the forVotes must be scritly over the againstVotes.\n     */\n    function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        return details.forVotes > details.againstVotes;\n    }\n\n    /**\n     * @dev See {Governor-_countVote}. In this module, the support follows Governor Bravo.\n     */\n    function _countVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        uint256 weight\n    ) internal virtual override {\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        Receipt storage receipt = details.receipts[account];\n\n        require(!receipt.hasVoted, \"GovernorCompatibilityBravo: vote already cast\");\n        receipt.hasVoted = true;\n        receipt.support = support;\n        receipt.votes = SafeCast.toUint96(weight);\n\n        if (support == uint8(VoteType.Against)) {\n            details.againstVotes += weight;\n        } else if (support == uint8(VoteType.For)) {\n            details.forVotes += weight;\n        } else if (support == uint8(VoteType.Abstain)) {\n            details.abstainVotes += weight;\n        } else {\n            revert(\"GovernorCompatibilityBravo: invalid vote type\");\n        }\n    }\n}\n"}, "governance/extensions/GovernorCountingSimple.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xea8f93bb65eeed458767a28c233ed3ac"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorCountingSimple.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Governor.sol\";\n\n/**\n * @dev Extension of {Governor} for simple, 3 options, vote counting.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorCountingSimple is Governor {\n    /**\n     * @dev Supported vote types. Matches Governor Bravo ordering.\n     */\n    enum VoteType {\n        Against,\n        For,\n        Abstain\n    }\n\n    struct ProposalVote {\n        uint256 againstVotes;\n        uint256 forVotes;\n        uint256 abstainVotes;\n        mapping(address => bool) hasVoted;\n    }\n\n    mapping(uint256 => ProposalVote) private _proposalVotes;\n\n    /**\n     * @dev See {IGovernor-COUNTING_MODE}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function COUNTING_MODE() public pure virtual override returns (string memory) {\n        return \"support=bravo&quorum=for,abstain\";\n    }\n\n    /**\n     * @dev See {IGovernor-hasVoted}.\n     */\n    function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\n        return _proposalVotes[proposalId].hasVoted[account];\n    }\n\n    /**\n     * @dev Accessor to the internal vote counts.\n     */\n    function proposalVotes(uint256 proposalId)\n        public\n        view\n        virtual\n        returns (\n            uint256 againstVotes,\n            uint256 forVotes,\n            uint256 abstainVotes\n        )\n    {\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\n        return (proposalvote.againstVotes, proposalvote.forVotes, proposalvote.abstainVotes);\n    }\n\n    /**\n     * @dev See {Governor-_quorumReached}.\n     */\n    function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\n\n        return quorum(proposalSnapshot(proposalId)) <= proposalvote.forVotes + proposalvote.abstainVotes;\n    }\n\n    /**\n     * @dev See {Governor-_voteSucceeded}. In this module, the forVotes must be strictly over the againstVotes.\n     */\n    function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\n\n        return proposalvote.forVotes > proposalvote.againstVotes;\n    }\n\n    /**\n     * @dev See {Governor-_countVote}. In this module, the support follows the `VoteType` enum (from Governor Bravo).\n     */\n    function _countVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        uint256 weight\n    ) internal virtual override {\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\n\n        require(!proposalvote.hasVoted[account], \"GovernorVotingSimple: vote already cast\");\n        proposalvote.hasVoted[account] = true;\n\n        if (support == uint8(VoteType.Against)) {\n            proposalvote.againstVotes += weight;\n        } else if (support == uint8(VoteType.For)) {\n            proposalvote.forVotes += weight;\n        } else if (support == uint8(VoteType.Abstain)) {\n            proposalvote.abstainVotes += weight;\n        } else {\n            revert(\"GovernorVotingSimple: invalid value for enum VoteType\");\n        }\n    }\n}\n"}, "mocks/GovernorTimelockCompoundMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x29a0a8a94ae1272929bd977988b34f21"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../governance/extensions/GovernorTimelockCompound.sol\";\nimport \"../governance/extensions/GovernorSettings.sol\";\nimport \"../governance/extensions/GovernorCountingSimple.sol\";\nimport \"../governance/extensions/GovernorVotesQuorumFraction.sol\";\n\ncontract GovernorTimelockCompoundMock is\n    GovernorSettings,\n    GovernorTimelockCompound,\n    GovernorVotesQuorumFraction,\n    GovernorCountingSimple\n{\n    constructor(\n        string memory name_,\n        ERC20Votes token_,\n        uint256 votingDelay_,\n        uint256 votingPeriod_,\n        ICompoundTimelock timelock_,\n        uint256 quorumNumerator_\n    )\n        Governor(name_)\n        GovernorTimelockCompound(timelock_)\n        GovernorSettings(votingDelay_, votingPeriod_, 0)\n        GovernorVotes(token_)\n        GovernorVotesQuorumFraction(quorumNumerator_)\n    {}\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(Governor, GovernorTimelockCompound)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function quorum(uint256 blockNumber)\n        public\n        view\n        override(IGovernor, GovernorVotesQuorumFraction)\n        returns (uint256)\n    {\n        return super.quorum(blockNumber);\n    }\n\n    function cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 salt\n    ) public returns (uint256 proposalId) {\n        return _cancel(targets, values, calldatas, salt);\n    }\n\n    /**\n     * Overriding nightmare\n     */\n    function state(uint256 proposalId)\n        public\n        view\n        virtual\n        override(Governor, GovernorTimelockCompound)\n        returns (ProposalState)\n    {\n        return super.state(proposalId);\n    }\n\n    function proposalThreshold() public view override(Governor, GovernorSettings) returns (uint256) {\n        return super.proposalThreshold();\n    }\n\n    function _execute(\n        uint256 proposalId,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override(Governor, GovernorTimelockCompound) {\n        super._execute(proposalId, targets, values, calldatas, descriptionHash);\n    }\n\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 salt\n    ) internal virtual override(Governor, GovernorTimelockCompound) returns (uint256 proposalId) {\n        return super._cancel(targets, values, calldatas, salt);\n    }\n\n    function getVotes(address account, uint256 blockNumber)\n        public\n        view\n        virtual\n        override(IGovernor, GovernorVotes)\n        returns (uint256)\n    {\n        return super.getVotes(account, blockNumber);\n    }\n\n    function _executor() internal view virtual override(Governor, GovernorTimelockCompound) returns (address) {\n        return super._executor();\n    }\n}\n"}, "utils/structs/EnumerableSet.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xb8070bbbb327a49a4d37f5c590b38238"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"}, "mocks/CountersImpl.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x2446dbf347ba8cbdaedbde8892514a0a"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Counters.sol\";\n\ncontract CountersImpl {\n    using Counters for Counters.Counter;\n\n    Counters.Counter private _counter;\n\n    function current() public view returns (uint256) {\n        return _counter.current();\n    }\n\n    function increment() public {\n        _counter.increment();\n    }\n\n    function decrement() public {\n        _counter.decrement();\n    }\n\n    function reset() public {\n        _counter.reset();\n    }\n}\n"}, "mocks/BadBeacon.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xd821204fbf5f1e3f73a880bc121d3d5a"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ncontract BadBeaconNoImpl {}\n\ncontract BadBeaconNotContract {\n    function implementation() external pure returns (address) {\n        return address(0x1);\n    }\n}\n"}, "utils/structs/BitMaps.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xa4862458388199138bffd4fa18f6c8ba"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/BitMaps.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n */\nlibrary BitMaps {\n    struct BitMap {\n        mapping(uint256 => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(\n        BitMap storage bitmap,\n        uint256 index,\n        bool value\n    ) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n}\n"}, "token/ERC20/extensions/ERC20Votes.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xc2f5ca679a09df6b115689e494053884"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Votes.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-ERC20Permit.sol\";\nimport \"../../../utils/math/Math.sol\";\nimport \"../../../utils/math/SafeCast.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\n\n/**\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\n *\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\n *\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\n *\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\n * Enabling self-delegation can easily be done by overriding the {delegates} function. Keep in mind however that this\n * will significantly increase the base gas cost of transfers.\n *\n * _Available since v4.2._\n */\nabstract contract ERC20Votes is ERC20Permit {\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint224 votes;\n    }\n\n    bytes32 private constant _DELEGATION_TYPEHASH =\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    mapping(address => address) private _delegates;\n    mapping(address => Checkpoint[]) private _checkpoints;\n    Checkpoint[] private _totalSupplyCheckpoints;\n\n    /**\n     * @dev Emitted when an account changes their delegate.\n     */\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /**\n     * @dev Emitted when a token transfer or delegate change results in changes to an account's voting power.\n     */\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    /**\n     * @dev Get the `pos`-th checkpoint for `account`.\n     */\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\n        return _checkpoints[account][pos];\n    }\n\n    /**\n     * @dev Get number of checkpoints for `account`.\n     */\n    function numCheckpoints(address account) public view virtual returns (uint32) {\n        return SafeCast.toUint32(_checkpoints[account].length);\n    }\n\n    /**\n     * @dev Get the address `account` is currently delegating to.\n     */\n    function delegates(address account) public view virtual returns (address) {\n        return _delegates[account];\n    }\n\n    /**\n     * @dev Gets the current votes balance for `account`\n     */\n    function getVotes(address account) public view returns (uint256) {\n        uint256 pos = _checkpoints[account].length;\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\n    }\n\n    /**\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\n     *\n     * Requirements:\n     *\n     * - `blockNumber` must have been already mined\n     */\n    function getPastVotes(address account, uint256 blockNumber) public view returns (uint256) {\n        require(blockNumber < block.number, \"ERC20Votes: block not yet mined\");\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\n    }\n\n    /**\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\n     * It is but NOT the sum of all the delegated votes!\n     *\n     * Requirements:\n     *\n     * - `blockNumber` must have been already mined\n     */\n    function getPastTotalSupply(uint256 blockNumber) public view returns (uint256) {\n        require(blockNumber < block.number, \"ERC20Votes: block not yet mined\");\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\n    }\n\n    /**\n     * @dev Lookup a value in a list of (sorted) checkpoints.\n     */\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\n        //\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\n        // the same.\n        uint256 high = ckpts.length;\n        uint256 low = 0;\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (ckpts[mid].fromBlock > blockNumber) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        return high == 0 ? 0 : ckpts[high - 1].votes;\n    }\n\n    /**\n     * @dev Delegate votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) public virtual {\n        _delegate(_msgSender(), delegatee);\n    }\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(block.timestamp <= expiry, \"ERC20Votes: signature expired\");\n        address signer = ECDSA.recover(\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\n            v,\n            r,\n            s\n        );\n        require(nonce == _useNonce(signer), \"ERC20Votes: invalid nonce\");\n        _delegate(signer, delegatee);\n    }\n\n    /**\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\n     */\n    function _maxSupply() internal view virtual returns (uint224) {\n        return type(uint224).max;\n    }\n\n    /**\n     * @dev Snapshots the totalSupply after it has been increased.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        super._mint(account, amount);\n        require(totalSupply() <= _maxSupply(), \"ERC20Votes: total supply risks overflowing votes\");\n\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\n    }\n\n    /**\n     * @dev Snapshots the totalSupply after it has been decreased.\n     */\n    function _burn(address account, uint256 amount) internal virtual override {\n        super._burn(account, amount);\n\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\n    }\n\n    /**\n     * @dev Move voting power when tokens are transferred.\n     *\n     * Emits a {DelegateVotesChanged} event.\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._afterTokenTransfer(from, to, amount);\n\n        _moveVotingPower(delegates(from), delegates(to), amount);\n    }\n\n    /**\n     * @dev Change delegation for `delegator` to `delegatee`.\n     *\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\n     */\n    function _delegate(address delegator, address delegatee) internal virtual {\n        address currentDelegate = delegates(delegator);\n        uint256 delegatorBalance = balanceOf(delegator);\n        _delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _moveVotingPower(\n        address src,\n        address dst,\n        uint256 amount\n    ) private {\n        if (src != dst && amount > 0) {\n            if (src != address(0)) {\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\n            }\n\n            if (dst != address(0)) {\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        Checkpoint[] storage ckpts,\n        function(uint256, uint256) view returns (uint256) op,\n        uint256 delta\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\n        uint256 pos = ckpts.length;\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\n        newWeight = op(oldWeight, delta);\n\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\n            ckpts[pos - 1].votes = SafeCast.toUint224(newWeight);\n        } else {\n            ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(block.number), votes: SafeCast.toUint224(newWeight)}));\n        }\n    }\n\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\n        return a + b;\n    }\n\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\n        return a - b;\n    }\n}\n"}, "mocks/ERC721Mock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x777ca2a3777630c7bec2e6dbc9b7055b"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/ERC721.sol\";\n\n/**\n * @title ERC721Mock\n * This mock just provides a public safeMint, mint, and burn functions for testing purposes\n */\ncontract ERC721Mock is ERC721 {\n    constructor(string memory name, string memory symbol) ERC721(name, symbol) {}\n\n    function baseURI() public view returns (string memory) {\n        return _baseURI();\n    }\n\n    function exists(uint256 tokenId) public view returns (bool) {\n        return _exists(tokenId);\n    }\n\n    function mint(address to, uint256 tokenId) public {\n        _mint(to, tokenId);\n    }\n\n    function safeMint(address to, uint256 tokenId) public {\n        _safeMint(to, tokenId);\n    }\n\n    function safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public {\n        _safeMint(to, tokenId, _data);\n    }\n\n    function burn(uint256 tokenId) public {\n        _burn(tokenId);\n    }\n}\n"}, "mocks/RegressionImplementation.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x427d4c71d64926b9de5d60e5686380bf"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/utils/Initializable.sol\";\n\ncontract Implementation1 is Initializable {\n    uint256 internal _value;\n\n    function initialize() public initializer {}\n\n    function setValue(uint256 _number) public {\n        _value = _number;\n    }\n}\n\ncontract Implementation2 is Initializable {\n    uint256 internal _value;\n\n    function initialize() public initializer {}\n\n    function setValue(uint256 _number) public {\n        _value = _number;\n    }\n\n    function getValue() public view returns (uint256) {\n        return _value;\n    }\n}\n\ncontract Implementation3 is Initializable {\n    uint256 internal _value;\n\n    function initialize() public initializer {}\n\n    function setValue(uint256 _number) public {\n        _value = _number;\n    }\n\n    function getValue(uint256 _number) public view returns (uint256) {\n        return _value + _number;\n    }\n}\n\ncontract Implementation4 is Initializable {\n    uint256 internal _value;\n\n    function initialize() public initializer {}\n\n    function setValue(uint256 _number) public {\n        _value = _number;\n    }\n\n    function getValue() public view returns (uint256) {\n        return _value;\n    }\n\n    fallback() external {\n        _value = 1;\n    }\n}\n"}, "mocks/ERC20Mock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xafadd2df2b3d63aa4d0f8180932b7b73"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/ERC20.sol\";\n\n// mock class using ERC20\ncontract ERC20Mock is ERC20 {\n    constructor(\n        string memory name,\n        string memory symbol,\n        address initialAccount,\n        uint256 initialBalance\n    ) payable ERC20(name, symbol) {\n        _mint(initialAccount, initialBalance);\n    }\n\n    function mint(address account, uint256 amount) public {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) public {\n        _burn(account, amount);\n    }\n\n    function transferInternal(\n        address from,\n        address to,\n        uint256 value\n    ) public {\n        _transfer(from, to, value);\n    }\n\n    function approveInternal(\n        address owner,\n        address spender,\n        uint256 value\n    ) public {\n        _approve(owner, spender, value);\n    }\n}\n"}, "access/IAccessControl.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x57c84298234411cea19c7c284d86be8b"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"}, "token/ERC20/extensions/ERC20Pausable.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xab4babe7912604097ae769a62fa08506"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"}, "utils/escrow/Escrow.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xd0b182675ed7481cb6e1a1a226a47f0f"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/escrow/Escrow.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../access/Ownable.sol\";\nimport \"../Address.sol\";\n\n/**\n * @title Escrow\n * @dev Base escrow contract, holds funds designated for a payee until they\n * withdraw them.\n *\n * Intended usage: This contract (and derived escrow contracts) should be a\n * standalone contract, that only interacts with the contract that instantiated\n * it. That way, it is guaranteed that all Ether will be handled according to\n * the `Escrow` rules, and there is no need to check for payable functions or\n * transfers in the inheritance tree. The contract that uses the escrow as its\n * payment method should be its owner, and provide public methods redirecting\n * to the escrow's deposit and withdraw.\n */\ncontract Escrow is Ownable {\n    using Address for address payable;\n\n    event Deposited(address indexed payee, uint256 weiAmount);\n    event Withdrawn(address indexed payee, uint256 weiAmount);\n\n    mapping(address => uint256) private _deposits;\n\n    function depositsOf(address payee) public view returns (uint256) {\n        return _deposits[payee];\n    }\n\n    /**\n     * @dev Stores the sent amount as credit to be withdrawn.\n     * @param payee The destination address of the funds.\n     */\n    function deposit(address payee) public payable virtual onlyOwner {\n        uint256 amount = msg.value;\n        _deposits[payee] += amount;\n        emit Deposited(payee, amount);\n    }\n\n    /**\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\n     * recipient.\n     *\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n     * Make sure you trust the recipient, or are either following the\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n     *\n     * @param payee The address whose funds will be withdrawn and transferred to.\n     */\n    function withdraw(address payable payee) public virtual onlyOwner {\n        uint256 payment = _deposits[payee];\n\n        _deposits[payee] = 0;\n\n        payee.sendValue(payment);\n\n        emit Withdrawn(payee, payment);\n    }\n}\n"}, "mocks/ERC721EnumerableMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x574df2bb6f3a5ddc7332729e496ac01b"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/extensions/ERC721Enumerable.sol\";\n\n/**\n * @title ERC721Mock\n * This mock just provides a public safeMint, mint, and burn functions for testing purposes\n */\ncontract ERC721EnumerableMock is ERC721Enumerable {\n    string private _baseTokenURI;\n\n    constructor(string memory name, string memory symbol) ERC721(name, symbol) {}\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseTokenURI;\n    }\n\n    function setBaseURI(string calldata newBaseTokenURI) public {\n        _baseTokenURI = newBaseTokenURI;\n    }\n\n    function baseURI() public view returns (string memory) {\n        return _baseURI();\n    }\n\n    function exists(uint256 tokenId) public view returns (bool) {\n        return _exists(tokenId);\n    }\n\n    function mint(address to, uint256 tokenId) public {\n        _mint(to, tokenId);\n    }\n\n    function safeMint(address to, uint256 tokenId) public {\n        _safeMint(to, tokenId);\n    }\n\n    function safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public {\n        _safeMint(to, tokenId, _data);\n    }\n\n    function burn(uint256 tokenId) public {\n        _burn(tokenId);\n    }\n}\n"}, "token/ERC20/extensions/IERC20Metadata.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x909ab67fc5c25033fe6cd364f8c056f9"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"}, "mocks/wizard/MyGovernor3.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x935a83258f293da4256eac065b307eb6"}, "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"../../governance/Governor.sol\";\nimport \"../../governance/compatibility/GovernorCompatibilityBravo.sol\";\nimport \"../../governance/extensions/GovernorVotes.sol\";\nimport \"../../governance/extensions/GovernorVotesQuorumFraction.sol\";\nimport \"../../governance/extensions/GovernorTimelockControl.sol\";\n\ncontract MyGovernor is\n    Governor,\n    GovernorTimelockControl,\n    GovernorCompatibilityBravo,\n    GovernorVotes,\n    GovernorVotesQuorumFraction\n{\n    constructor(ERC20Votes _token, TimelockController _timelock)\n        Governor(\"MyGovernor\")\n        GovernorVotes(_token)\n        GovernorVotesQuorumFraction(4)\n        GovernorTimelockControl(_timelock)\n    {}\n\n    function votingDelay() public pure override returns (uint256) {\n        return 1; // 1 block\n    }\n\n    function votingPeriod() public pure override returns (uint256) {\n        return 45818; // 1 week\n    }\n\n    function proposalThreshold() public pure override returns (uint256) {\n        return 1000e18;\n    }\n\n    // The following functions are overrides required by Solidity.\n\n    function quorum(uint256 blockNumber)\n        public\n        view\n        override(IGovernor, GovernorVotesQuorumFraction)\n        returns (uint256)\n    {\n        return super.quorum(blockNumber);\n    }\n\n    function getVotes(address account, uint256 blockNumber)\n        public\n        view\n        override(IGovernor, GovernorVotes)\n        returns (uint256)\n    {\n        return super.getVotes(account, blockNumber);\n    }\n\n    function state(uint256 proposalId)\n        public\n        view\n        override(Governor, IGovernor, GovernorTimelockControl)\n        returns (ProposalState)\n    {\n        return super.state(proposalId);\n    }\n\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public override(Governor, GovernorCompatibilityBravo, IGovernor) returns (uint256) {\n        return super.propose(targets, values, calldatas, description);\n    }\n\n    function _execute(\n        uint256 proposalId,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal override(Governor, GovernorTimelockControl) {\n        super._execute(proposalId, targets, values, calldatas, descriptionHash);\n    }\n\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal override(Governor, GovernorTimelockControl) returns (uint256) {\n        return super._cancel(targets, values, calldatas, descriptionHash);\n    }\n\n    function _executor() internal view override(Governor, GovernorTimelockControl) returns (address) {\n        return super._executor();\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(Governor, IERC165, GovernorTimelockControl)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"}, "utils/introspection/IERC1820Implementer.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x0612f1c8beee4b227de51b49174b9bc2"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC1820Implementer.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface for an ERC1820 implementer, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP].\n * Used by contracts that will be registered as implementers in the\n * {IERC1820Registry}.\n */\ninterface IERC1820Implementer {\n    /**\n     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\n     * implements `interfaceHash` for `account`.\n     *\n     * See {IERC1820Registry-setInterfaceImplementer}.\n     */\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\n}\n"}, "token/ERC721/extensions/ERC721Burnable.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x7bbd5ca6e396f0ad628cfbf0031d9e32"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n}\n"}, "mocks/SafeERC20Helper.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x64369f579f8173db43fb90c1c28a3785"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\nimport \"../token/ERC20/IERC20.sol\";\nimport \"../token/ERC20/utils/SafeERC20.sol\";\n\ncontract ERC20ReturnFalseMock is Context {\n    uint256 private _allowance;\n\n    // IERC20's functions are not pure, but these mock implementations are: to prevent Solidity from issuing warnings,\n    // we write to a dummy state variable.\n    uint256 private _dummy;\n\n    function transfer(address, uint256) public returns (bool) {\n        _dummy = 0;\n        return false;\n    }\n\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) public returns (bool) {\n        _dummy = 0;\n        return false;\n    }\n\n    function approve(address, uint256) public returns (bool) {\n        _dummy = 0;\n        return false;\n    }\n\n    function allowance(address, address) public view returns (uint256) {\n        require(_dummy == 0); // Duummy read from a state variable so that the function is view\n        return 0;\n    }\n}\n\ncontract ERC20ReturnTrueMock is Context {\n    mapping(address => uint256) private _allowances;\n\n    // IERC20's functions are not pure, but these mock implementations are: to prevent Solidity from issuing warnings,\n    // we write to a dummy state variable.\n    uint256 private _dummy;\n\n    function transfer(address, uint256) public returns (bool) {\n        _dummy = 0;\n        return true;\n    }\n\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) public returns (bool) {\n        _dummy = 0;\n        return true;\n    }\n\n    function approve(address, uint256) public returns (bool) {\n        _dummy = 0;\n        return true;\n    }\n\n    function setAllowance(uint256 allowance_) public {\n        _allowances[_msgSender()] = allowance_;\n    }\n\n    function allowance(address owner, address) public view returns (uint256) {\n        return _allowances[owner];\n    }\n}\n\ncontract ERC20NoReturnMock is Context {\n    mapping(address => uint256) private _allowances;\n\n    // IERC20's functions are not pure, but these mock implementations are: to prevent Solidity from issuing warnings,\n    // we write to a dummy state variable.\n    uint256 private _dummy;\n\n    function transfer(address, uint256) public {\n        _dummy = 0;\n    }\n\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) public {\n        _dummy = 0;\n    }\n\n    function approve(address, uint256) public {\n        _dummy = 0;\n    }\n\n    function setAllowance(uint256 allowance_) public {\n        _allowances[_msgSender()] = allowance_;\n    }\n\n    function allowance(address owner, address) public view returns (uint256) {\n        return _allowances[owner];\n    }\n}\n\ncontract SafeERC20Wrapper is Context {\n    using SafeERC20 for IERC20;\n\n    IERC20 private _token;\n\n    constructor(IERC20 token) {\n        _token = token;\n    }\n\n    function transfer() public {\n        _token.safeTransfer(address(0), 0);\n    }\n\n    function transferFrom() public {\n        _token.safeTransferFrom(address(0), address(0), 0);\n    }\n\n    function approve(uint256 amount) public {\n        _token.safeApprove(address(0), amount);\n    }\n\n    function increaseAllowance(uint256 amount) public {\n        _token.safeIncreaseAllowance(address(0), amount);\n    }\n\n    function decreaseAllowance(uint256 amount) public {\n        _token.safeDecreaseAllowance(address(0), amount);\n    }\n\n    function setAllowance(uint256 allowance_) public {\n        ERC20ReturnTrueMock(address(_token)).setAllowance(allowance_);\n    }\n\n    function allowance() public view returns (uint256) {\n        return _token.allowance(address(0), address(0));\n    }\n}\n"}, "mocks/ERC777SenderRecipientMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x4d1d27e77d4d1c8ac900d7f5a145bd22"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC777/IERC777.sol\";\nimport \"../token/ERC777/IERC777Sender.sol\";\nimport \"../token/ERC777/IERC777Recipient.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/introspection/IERC1820Registry.sol\";\nimport \"../utils/introspection/ERC1820Implementer.sol\";\n\ncontract ERC777SenderRecipientMock is Context, IERC777Sender, IERC777Recipient, ERC1820Implementer {\n    event TokensToSendCalled(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData,\n        address token,\n        uint256 fromBalance,\n        uint256 toBalance\n    );\n\n    event TokensReceivedCalled(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData,\n        address token,\n        uint256 fromBalance,\n        uint256 toBalance\n    );\n\n    // Emitted in ERC777Mock. Here for easier decoding\n    event BeforeTokenTransfer();\n\n    bool private _shouldRevertSend;\n    bool private _shouldRevertReceive;\n\n    IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n    bytes32 private constant _TOKENS_SENDER_INTERFACE_HASH = keccak256(\"ERC777TokensSender\");\n    bytes32 private constant _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\"ERC777TokensRecipient\");\n\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external override {\n        if (_shouldRevertSend) {\n            revert();\n        }\n\n        IERC777 token = IERC777(_msgSender());\n\n        uint256 fromBalance = token.balanceOf(from);\n        // when called due to burn, to will be the zero address, which will have a balance of 0\n        uint256 toBalance = token.balanceOf(to);\n\n        emit TokensToSendCalled(\n            operator,\n            from,\n            to,\n            amount,\n            userData,\n            operatorData,\n            address(token),\n            fromBalance,\n            toBalance\n        );\n    }\n\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external override {\n        if (_shouldRevertReceive) {\n            revert();\n        }\n\n        IERC777 token = IERC777(_msgSender());\n\n        uint256 fromBalance = token.balanceOf(from);\n        // when called due to burn, to will be the zero address, which will have a balance of 0\n        uint256 toBalance = token.balanceOf(to);\n\n        emit TokensReceivedCalled(\n            operator,\n            from,\n            to,\n            amount,\n            userData,\n            operatorData,\n            address(token),\n            fromBalance,\n            toBalance\n        );\n    }\n\n    function senderFor(address account) public {\n        _registerInterfaceForAddress(_TOKENS_SENDER_INTERFACE_HASH, account);\n\n        address self = address(this);\n        if (account == self) {\n            registerSender(self);\n        }\n    }\n\n    function registerSender(address sender) public {\n        _erc1820.setInterfaceImplementer(address(this), _TOKENS_SENDER_INTERFACE_HASH, sender);\n    }\n\n    function recipientFor(address account) public {\n        _registerInterfaceForAddress(_TOKENS_RECIPIENT_INTERFACE_HASH, account);\n\n        address self = address(this);\n        if (account == self) {\n            registerRecipient(self);\n        }\n    }\n\n    function registerRecipient(address recipient) public {\n        _erc1820.setInterfaceImplementer(address(this), _TOKENS_RECIPIENT_INTERFACE_HASH, recipient);\n    }\n\n    function setShouldRevertSend(bool shouldRevert) public {\n        _shouldRevertSend = shouldRevert;\n    }\n\n    function setShouldRevertReceive(bool shouldRevert) public {\n        _shouldRevertReceive = shouldRevert;\n    }\n\n    function send(\n        IERC777 token,\n        address to,\n        uint256 amount,\n        bytes memory data\n    ) public {\n        // This is 777's send function, not the Solidity send function\n        token.send(to, amount, data); // solhint-disable-line check-send-result\n    }\n\n    function burn(\n        IERC777 token,\n        uint256 amount,\n        bytes memory data\n    ) public {\n        token.burn(amount, data);\n    }\n}\n"}, "interfaces/IERC1363Spender.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x59232bcd69ecd60f9fdc41e435eff762"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1363Spender.sol)\n\npragma solidity ^0.8.0;\n\ninterface IERC1363Spender {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0x7b04a2d0.\n     * 0x7b04a2d0 === bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))\n     */\n\n    /**\n     * @notice Handle the approval of ERC1363 tokens\n     * @dev Any ERC1363 smart contract calls this function on the recipient\n     * after an `approve`. This function MAY throw to revert and reject the\n     * approval. Return of other than the magic value MUST result in the\n     * transaction being reverted.\n     * Note: the token contract address is always the message sender.\n     * @param owner address The address which called `approveAndCall` function\n     * @param value uint256 The amount of tokens to be spent\n     * @param data bytes Additional data with no specified format\n     * @return `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))`\n     *  unless throwing\n     */\n    function onApprovalReceived(\n        address owner,\n        uint256 value,\n        bytes memory data\n    ) external returns (bytes4);\n}\n"}, "utils/introspection/ERC165Storage.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xa391733d3f579314de328ba879bc4f2d"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC165.sol\";\n\n/**\n * @dev Storage based implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165Storage is ERC165 {\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"}, "interfaces/IERC1363.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xacec8cadeb2b66b07429c854a788a555"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IERC165.sol\";\n\ninterface IERC1363 is IERC165, IERC20 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0x4bbee2df.\n     * 0x4bbee2df ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)'))\n     */\n\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xfb9ec8ce.\n     * 0xfb9ec8ce ===\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\n     * @param to address The address which you want to transfer to\n     * @param value uint256 The amount of tokens to be transferred\n     * @return true unless throwing\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\n     * @param to address The address which you want to transfer to\n     * @param value uint256 The amount of tokens to be transferred\n     * @param data bytes Additional data with no specified format, sent in call to `to`\n     * @return true unless throwing\n     */\n    function transferAndCall(\n        address to,\n        uint256 value,\n        bytes memory data\n    ) external returns (bool);\n\n    /**\n     * @dev Transfer tokens from one address to another and then call `onTransferReceived` on receiver\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 The amount of tokens to be transferred\n     * @return true unless throwing\n     */\n    function transferFromAndCall(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    /**\n     * @dev Transfer tokens from one address to another and then call `onTransferReceived` on receiver\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 The amount of tokens to be transferred\n     * @param data bytes Additional data with no specified format, sent in call to `to`\n     * @return true unless throwing\n     */\n    function transferFromAndCall(\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) external returns (bool);\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n     * and then call `onApprovalReceived` on spender.\n     * @param spender address The address which will spend the funds\n     * @param value uint256 The amount of tokens to be spent\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n     * and then call `onApprovalReceived` on spender.\n     * @param spender address The address which will spend the funds\n     * @param value uint256 The amount of tokens to be spent\n     * @param data bytes Additional data with no specified format, sent in call to `spender`\n     */\n    function approveAndCall(\n        address spender,\n        uint256 value,\n        bytes memory data\n    ) external returns (bool);\n}\n"}, "governance/extensions/GovernorProposalThreshold.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xbadf0ac3dc5335b05d84dab6e58a9d6e"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorProposalThreshold.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Governor.sol\";\n\n/**\n * @dev Extension of {Governor} for proposal restriction to token holders with a minimum balance.\n *\n * _Available since v4.3._\n * _Deprecated since v4.4._\n */\nabstract contract GovernorProposalThreshold is Governor {\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual override returns (uint256) {\n        return super.propose(targets, values, calldatas, description);\n    }\n}\n"}, "mocks/ClonesMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x3c3d897099214ce6223c577dc55d212c"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/Clones.sol\";\nimport \"../utils/Address.sol\";\n\ncontract ClonesMock {\n    using Address for address;\n    using Clones for address;\n\n    event NewInstance(address instance);\n\n    function clone(address implementation, bytes calldata initdata) public payable {\n        _initAndEmit(implementation.clone(), initdata);\n    }\n\n    function cloneDeterministic(\n        address implementation,\n        bytes32 salt,\n        bytes calldata initdata\n    ) public payable {\n        _initAndEmit(implementation.cloneDeterministic(salt), initdata);\n    }\n\n    function predictDeterministicAddress(address implementation, bytes32 salt) public view returns (address predicted) {\n        return implementation.predictDeterministicAddress(salt);\n    }\n\n    function _initAndEmit(address instance, bytes memory initdata) private {\n        if (initdata.length > 0) {\n            instance.functionCallWithValue(initdata, msg.value);\n        }\n        emit NewInstance(instance);\n    }\n}\n"}, "mocks/ReentrancyAttack.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x365700b7d522712a4b8df63604a1f9df"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\ncontract ReentrancyAttack is Context {\n    function callSender(bytes4 data) public {\n        (bool success, ) = _msgSender().call(abi.encodeWithSelector(data));\n        require(success, \"ReentrancyAttack: failed call\");\n    }\n}\n"}, "mocks/ERC1155SupplyMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xb34aa207d4814d7f3e659955620b936c"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Mock.sol\";\nimport \"../token/ERC1155/extensions/ERC1155Supply.sol\";\n\ncontract ERC1155SupplyMock is ERC1155Mock, ERC1155Supply {\n    constructor(string memory uri) ERC1155Mock(uri) {}\n\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override(ERC1155, ERC1155Supply) {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n    }\n}\n"}, "proxy/ERC1967/ERC1967Proxy.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x524a6c6f00b809b1184050dcc9e131d8"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"}, "token/ERC1155/extensions/ERC1155Supply.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xf9155e286006f035a9a68ad49241dd75"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Supply.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n */\nabstract contract ERC1155Supply is ERC1155 {\n    mapping(uint256 => uint256) private _totalSupply;\n\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return ERC1155Supply.totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        if (from == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] += amounts[i];\n            }\n        }\n\n        if (to == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] -= amounts[i];\n            }\n        }\n    }\n}\n"}, "proxy/beacon/IBeacon.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xb6bd23bf19e90b771337037706470933"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"}, "governance/extensions/GovernorVotesComp.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xb73763c7c121eec0264be012e085585b"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorVotesComp.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Governor.sol\";\nimport \"../../token/ERC20/extensions/ERC20VotesComp.sol\";\n\n/**\n * @dev Extension of {Governor} for voting weight extraction from a Comp token.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorVotesComp is Governor {\n    ERC20VotesComp public immutable token;\n\n    constructor(ERC20VotesComp token_) {\n        token = token_;\n    }\n\n    /**\n     * Read the voting weight from the token's built in snapshot mechanism (see {IGovernor-getVotes}).\n     */\n    function getVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\n        return token.getPriorVotes(account, blockNumber);\n    }\n}\n"}, "finance/VestingWallet.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x70880040ed05fbe6aa93b225cae6031a"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (finance/VestingWallet.sol)\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/utils/SafeERC20.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/math/Math.sol\";\n\n/**\n * @title VestingWallet\n * @dev This contract handles the vesting of Eth and ERC20 tokens for a given beneficiary. Custody of multiple tokens\n * can be given to this contract, which will release the token to the beneficiary following a given vesting schedule.\n * The vesting schedule is customizable through the {vestedAmount} function.\n *\n * Any token transferred to this contract will follow the vesting schedule as if they were locked from the beginning.\n * Consequently, if the vesting has already started, any amount of tokens sent to this contract will (at least partly)\n * be immediately releasable.\n */\ncontract VestingWallet is Context {\n    event EtherReleased(uint256 amount);\n    event ERC20Released(address indexed token, uint256 amount);\n\n    uint256 private _released;\n    mapping(address => uint256) private _erc20Released;\n    address private immutable _beneficiary;\n    uint64 private immutable _start;\n    uint64 private immutable _duration;\n\n    /**\n     * @dev Set the beneficiary, start timestamp and vesting duration of the vesting wallet.\n     */\n    constructor(\n        address beneficiaryAddress,\n        uint64 startTimestamp,\n        uint64 durationSeconds\n    ) {\n        require(beneficiaryAddress != address(0), \"VestingWallet: beneficiary is zero address\");\n        _beneficiary = beneficiaryAddress;\n        _start = startTimestamp;\n        _duration = durationSeconds;\n    }\n\n    /**\n     * @dev The contract should be able to receive Eth.\n     */\n    receive() external payable virtual {}\n\n    /**\n     * @dev Getter for the beneficiary address.\n     */\n    function beneficiary() public view virtual returns (address) {\n        return _beneficiary;\n    }\n\n    /**\n     * @dev Getter for the start timestamp.\n     */\n    function start() public view virtual returns (uint256) {\n        return _start;\n    }\n\n    /**\n     * @dev Getter for the vesting duration.\n     */\n    function duration() public view virtual returns (uint256) {\n        return _duration;\n    }\n\n    /**\n     * @dev Amount of eth already released\n     */\n    function released() public view virtual returns (uint256) {\n        return _released;\n    }\n\n    /**\n     * @dev Amount of token already released\n     */\n    function released(address token) public view virtual returns (uint256) {\n        return _erc20Released[token];\n    }\n\n    /**\n     * @dev Release the native token (ether) that have already vested.\n     *\n     * Emits a {TokensReleased} event.\n     */\n    function release() public virtual {\n        uint256 releasable = vestedAmount(uint64(block.timestamp)) - released();\n        _released += releasable;\n        emit EtherReleased(releasable);\n        Address.sendValue(payable(beneficiary()), releasable);\n    }\n\n    /**\n     * @dev Release the tokens that have already vested.\n     *\n     * Emits a {TokensReleased} event.\n     */\n    function release(address token) public virtual {\n        uint256 releasable = vestedAmount(token, uint64(block.timestamp)) - released(token);\n        _erc20Released[token] += releasable;\n        emit ERC20Released(token, releasable);\n        SafeERC20.safeTransfer(IERC20(token), beneficiary(), releasable);\n    }\n\n    /**\n     * @dev Calculates the amount of ether that has already vested. Default implementation is a linear vesting curve.\n     */\n    function vestedAmount(uint64 timestamp) public view virtual returns (uint256) {\n        return _vestingSchedule(address(this).balance + released(), timestamp);\n    }\n\n    /**\n     * @dev Calculates the amount of tokens that has already vested. Default implementation is a linear vesting curve.\n     */\n    function vestedAmount(address token, uint64 timestamp) public view virtual returns (uint256) {\n        return _vestingSchedule(IERC20(token).balanceOf(address(this)) + released(token), timestamp);\n    }\n\n    /**\n     * @dev Virtual implementation of the vesting formula. This returns the amout vested, as a function of time, for\n     * an asset given its total historical allocation.\n     */\n    function _vestingSchedule(uint256 totalAllocation, uint64 timestamp) internal view virtual returns (uint256) {\n        if (timestamp < start()) {\n            return 0;\n        } else if (timestamp > start() + duration()) {\n            return totalAllocation;\n        } else {\n            return (totalAllocation * (timestamp - start())) / duration();\n        }\n    }\n}\n"}, "proxy/utils/UUPSUpgradeable.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xcb9d8d9e4f5fdba36648528112b5672f"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n}\n"}, "interfaces/IERC2981.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x8232a272694d0794dc146a4061c47b38"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\n     * @param tokenId - the NFT asset queried for royalty information\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\n     * @return receiver - address of who should be sent the royalty payment\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"}, "mocks/GovernorMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x7abb9bb1a3b29757e2fd0dfce9674c70"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../governance/extensions/GovernorProposalThreshold.sol\";\nimport \"../governance/extensions/GovernorSettings.sol\";\nimport \"../governance/extensions/GovernorCountingSimple.sol\";\nimport \"../governance/extensions/GovernorVotesQuorumFraction.sol\";\n\ncontract GovernorMock is\n    GovernorProposalThreshold,\n    GovernorSettings,\n    GovernorVotesQuorumFraction,\n    GovernorCountingSimple\n{\n    constructor(\n        string memory name_,\n        ERC20Votes token_,\n        uint256 votingDelay_,\n        uint256 votingPeriod_,\n        uint256 quorumNumerator_\n    )\n        Governor(name_)\n        GovernorSettings(votingDelay_, votingPeriod_, 0)\n        GovernorVotes(token_)\n        GovernorVotesQuorumFraction(quorumNumerator_)\n    {}\n\n    function cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 salt\n    ) public returns (uint256 proposalId) {\n        return _cancel(targets, values, calldatas, salt);\n    }\n\n    function getVotes(address account, uint256 blockNumber)\n        public\n        view\n        virtual\n        override(IGovernor, GovernorVotes)\n        returns (uint256)\n    {\n        return super.getVotes(account, blockNumber);\n    }\n\n    function proposalThreshold() public view override(Governor, GovernorSettings) returns (uint256) {\n        return super.proposalThreshold();\n    }\n\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual override(Governor, GovernorProposalThreshold) returns (uint256) {\n        return super.propose(targets, values, calldatas, description);\n    }\n}\n"}, "mocks/ERC20PermitMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x0e343f28085a0e6583aae67dd967ccce"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/extensions/draft-ERC20Permit.sol\";\n\ncontract ERC20PermitMock is ERC20Permit {\n    constructor(\n        string memory name,\n        string memory symbol,\n        address initialAccount,\n        uint256 initialBalance\n    ) payable ERC20(name, symbol) ERC20Permit(name) {\n        _mint(initialAccount, initialBalance);\n    }\n\n    function getChainId() external view returns (uint256) {\n        return block.chainid;\n    }\n}\n"}, "token/ERC20/extensions/draft-ERC20Permit.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x4e2473d86be8e737a3ba1c38f36a2aab"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"}, "token/ERC1155/utils/ERC1155Receiver.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x55b180cf664783e9a2baac20e82683fb"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"}, "mocks/MulticallTest.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x0471bdc492e4d2505a3e89478217a62a"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./MulticallTokenMock.sol\";\n\ncontract MulticallTest {\n    function testReturnValues(\n        MulticallTokenMock multicallToken,\n        address[] calldata recipients,\n        uint256[] calldata amounts\n    ) external {\n        bytes[] memory calls = new bytes[](recipients.length);\n        for (uint256 i = 0; i < recipients.length; i++) {\n            calls[i] = abi.encodeWithSignature(\"transfer(address,uint256)\", recipients[i], amounts[i]);\n        }\n\n        bytes[] memory results = multicallToken.multicall(calls);\n        for (uint256 i = 0; i < results.length; i++) {\n            require(abi.decode(results[i], (bool)));\n        }\n    }\n}\n"}, "token/ERC721/extensions/IERC721Enumerable.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xf69eb47f667b846a8698697d25eeff4e"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"}, "mocks/GovernorCompatibilityBravoMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xfbdf9b8fcbea3207c4c7860115d26b2b"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../governance/compatibility/GovernorCompatibilityBravo.sol\";\nimport \"../governance/extensions/GovernorTimelockCompound.sol\";\nimport \"../governance/extensions/GovernorSettings.sol\";\nimport \"../governance/extensions/GovernorVotesComp.sol\";\n\ncontract GovernorCompatibilityBravoMock is\n    GovernorCompatibilityBravo,\n    GovernorSettings,\n    GovernorTimelockCompound,\n    GovernorVotesComp\n{\n    constructor(\n        string memory name_,\n        ERC20VotesComp token_,\n        uint256 votingDelay_,\n        uint256 votingPeriod_,\n        uint256 proposalThreshold_,\n        ICompoundTimelock timelock_\n    )\n        Governor(name_)\n        GovernorTimelockCompound(timelock_)\n        GovernorSettings(votingDelay_, votingPeriod_, proposalThreshold_)\n        GovernorVotesComp(token_)\n    {}\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(IERC165, Governor, GovernorTimelockCompound)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function quorum(uint256) public pure override returns (uint256) {\n        return 0;\n    }\n\n    function state(uint256 proposalId)\n        public\n        view\n        virtual\n        override(IGovernor, Governor, GovernorTimelockCompound)\n        returns (ProposalState)\n    {\n        return super.state(proposalId);\n    }\n\n    function proposalEta(uint256 proposalId)\n        public\n        view\n        virtual\n        override(IGovernorTimelock, GovernorTimelockCompound)\n        returns (uint256)\n    {\n        return super.proposalEta(proposalId);\n    }\n\n    function proposalThreshold() public view override(Governor, GovernorSettings) returns (uint256) {\n        return super.proposalThreshold();\n    }\n\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual override(IGovernor, Governor, GovernorCompatibilityBravo) returns (uint256) {\n        return super.propose(targets, values, calldatas, description);\n    }\n\n    function queue(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 salt\n    ) public virtual override(IGovernorTimelock, GovernorTimelockCompound) returns (uint256) {\n        return super.queue(targets, values, calldatas, salt);\n    }\n\n    function execute(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 salt\n    ) public payable virtual override(IGovernor, Governor) returns (uint256) {\n        return super.execute(targets, values, calldatas, salt);\n    }\n\n    function _execute(\n        uint256 proposalId,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override(Governor, GovernorTimelockCompound) {\n        super._execute(proposalId, targets, values, calldatas, descriptionHash);\n    }\n\n    /**\n     * @notice WARNING: this is for mock purposes only. Ability to the _cancel function should be restricted for live\n     * deployments.\n     */\n    function cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 salt\n    ) public returns (uint256 proposalId) {\n        return _cancel(targets, values, calldatas, salt);\n    }\n\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 salt\n    ) internal virtual override(Governor, GovernorTimelockCompound) returns (uint256 proposalId) {\n        return super._cancel(targets, values, calldatas, salt);\n    }\n\n    function getVotes(address account, uint256 blockNumber)\n        public\n        view\n        virtual\n        override(IGovernor, GovernorVotesComp)\n        returns (uint256)\n    {\n        return super.getVotes(account, blockNumber);\n    }\n\n    function _executor() internal view virtual override(Governor, GovernorTimelockCompound) returns (address) {\n        return super._executor();\n    }\n}\n"}, "utils/introspection/ERC1820Implementer.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x267e2fa54d5923930fc121c178403487"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC1820Implementer.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1820Implementer.sol\";\n\n/**\n * @dev Implementation of the {IERC1820Implementer} interface.\n *\n * Contracts may inherit from this and call {_registerInterfaceForAddress} to\n * declare their willingness to be implementers.\n * {IERC1820Registry-setInterfaceImplementer} should then be called for the\n * registration to be complete.\n */\ncontract ERC1820Implementer is IERC1820Implementer {\n    bytes32 private constant _ERC1820_ACCEPT_MAGIC = keccak256(\"ERC1820_ACCEPT_MAGIC\");\n\n    mapping(bytes32 => mapping(address => bool)) private _supportedInterfaces;\n\n    /**\n     * @dev See {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account)\n        public\n        view\n        virtual\n        override\n        returns (bytes32)\n    {\n        return _supportedInterfaces[interfaceHash][account] ? _ERC1820_ACCEPT_MAGIC : bytes32(0x00);\n    }\n\n    /**\n     * @dev Declares the contract as willing to be an implementer of\n     * `interfaceHash` for `account`.\n     *\n     * See {IERC1820Registry-setInterfaceImplementer} and\n     * {IERC1820Registry-interfaceHash}.\n     */\n    function _registerInterfaceForAddress(bytes32 interfaceHash, address account) internal virtual {\n        _supportedInterfaces[interfaceHash][account] = true;\n    }\n}\n"}, "mocks/Create2Impl.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xcf00427c363da666d4c3041c48fb3039"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Create2.sol\";\nimport \"../utils/introspection/ERC1820Implementer.sol\";\n\ncontract Create2Impl {\n    function deploy(\n        uint256 value,\n        bytes32 salt,\n        bytes memory code\n    ) public {\n        Create2.deploy(value, salt, code);\n    }\n\n    function deployERC1820Implementer(uint256 value, bytes32 salt) public {\n        Create2.deploy(value, salt, type(ERC1820Implementer).creationCode);\n    }\n\n    function computeAddress(bytes32 salt, bytes32 codeHash) public view returns (address) {\n        return Create2.computeAddress(salt, codeHash);\n    }\n\n    function computeAddressWithDeployer(\n        bytes32 salt,\n        bytes32 codeHash,\n        address deployer\n    ) public pure returns (address) {\n        return Create2.computeAddress(salt, codeHash, deployer);\n    }\n\n    receive() external payable {}\n}\n"}, "token/ERC1155/utils/ERC1155Holder.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x5637bdad6fa692dbbce1eeca845bedd8"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"}, "mocks/wizard/MyGovernor2.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x3542b59f4fad18d7cbaa8843395d0f00"}, "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"../../governance/Governor.sol\";\nimport \"../../governance/extensions/GovernorProposalThreshold.sol\";\nimport \"../../governance/extensions/GovernorCountingSimple.sol\";\nimport \"../../governance/extensions/GovernorVotes.sol\";\nimport \"../../governance/extensions/GovernorVotesQuorumFraction.sol\";\nimport \"../../governance/extensions/GovernorTimelockControl.sol\";\n\ncontract MyGovernor2 is\n    Governor,\n    GovernorTimelockControl,\n    GovernorProposalThreshold,\n    GovernorVotes,\n    GovernorVotesQuorumFraction,\n    GovernorCountingSimple\n{\n    constructor(ERC20Votes _token, TimelockController _timelock)\n        Governor(\"MyGovernor\")\n        GovernorVotes(_token)\n        GovernorVotesQuorumFraction(4)\n        GovernorTimelockControl(_timelock)\n    {}\n\n    function votingDelay() public pure override returns (uint256) {\n        return 1; // 1 block\n    }\n\n    function votingPeriod() public pure override returns (uint256) {\n        return 45818; // 1 week\n    }\n\n    function proposalThreshold() public pure override returns (uint256) {\n        return 1000e18;\n    }\n\n    // The following functions are overrides required by Solidity.\n\n    function quorum(uint256 blockNumber)\n        public\n        view\n        override(IGovernor, GovernorVotesQuorumFraction)\n        returns (uint256)\n    {\n        return super.quorum(blockNumber);\n    }\n\n    function getVotes(address account, uint256 blockNumber)\n        public\n        view\n        override(IGovernor, GovernorVotes)\n        returns (uint256)\n    {\n        return super.getVotes(account, blockNumber);\n    }\n\n    function state(uint256 proposalId) public view override(Governor, GovernorTimelockControl) returns (ProposalState) {\n        return super.state(proposalId);\n    }\n\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public override(Governor, GovernorProposalThreshold, IGovernor) returns (uint256) {\n        return super.propose(targets, values, calldatas, description);\n    }\n\n    function _execute(\n        uint256 proposalId,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal override(Governor, GovernorTimelockControl) {\n        super._execute(proposalId, targets, values, calldatas, descriptionHash);\n    }\n\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal override(Governor, GovernorTimelockControl) returns (uint256) {\n        return super._cancel(targets, values, calldatas, descriptionHash);\n    }\n\n    function _executor() internal view override(Governor, GovernorTimelockControl) returns (address) {\n        return super._executor();\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(Governor, GovernorTimelockControl)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"}, "mocks/EtherReceiverMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x03543c772b5715405d1847fe2a7e6ba4"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ncontract EtherReceiverMock {\n    bool private _acceptEther;\n\n    function setAcceptEther(bool acceptEther) public {\n        _acceptEther = acceptEther;\n    }\n\n    receive() external payable {\n        if (!_acceptEther) {\n            revert();\n        }\n    }\n}\n"}, "metatx/MinimalForwarder.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x908ac4bd9f80689dc2e6250f184c906e"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (metatx/MinimalForwarder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/cryptography/ECDSA.sol\";\nimport \"../utils/cryptography/draft-EIP712.sol\";\n\n/**\n * @dev Simple minimal forwarder to be used together with an ERC2771 compatible contract. See {ERC2771Context}.\n */\ncontract MinimalForwarder is EIP712 {\n    using ECDSA for bytes32;\n\n    struct ForwardRequest {\n        address from;\n        address to;\n        uint256 value;\n        uint256 gas;\n        uint256 nonce;\n        bytes data;\n    }\n\n    bytes32 private constant _TYPEHASH =\n        keccak256(\"ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data)\");\n\n    mapping(address => uint256) private _nonces;\n\n    constructor() EIP712(\"MinimalForwarder\", \"0.0.1\") {}\n\n    function getNonce(address from) public view returns (uint256) {\n        return _nonces[from];\n    }\n\n    function verify(ForwardRequest calldata req, bytes calldata signature) public view returns (bool) {\n        address signer = _hashTypedDataV4(\n            keccak256(abi.encode(_TYPEHASH, req.from, req.to, req.value, req.gas, req.nonce, keccak256(req.data)))\n        ).recover(signature);\n        return _nonces[req.from] == req.nonce && signer == req.from;\n    }\n\n    function execute(ForwardRequest calldata req, bytes calldata signature)\n        public\n        payable\n        returns (bool, bytes memory)\n    {\n        require(verify(req, signature), \"MinimalForwarder: signature does not match request\");\n        _nonces[req.from] = req.nonce + 1;\n\n        (bool success, bytes memory returndata) = req.to.call{gas: req.gas, value: req.value}(\n            abi.encodePacked(req.data, req.from)\n        );\n        // Validate that the relayer has sent enough gas for the call.\n        // See https://ronan.eth.link/blog/ethereum-gas-dangers/\n        assert(gasleft() > req.gas / 63);\n\n        return (success, returndata);\n    }\n}\n"}, "access/Ownable.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x8398972af73b4e9e5ff3b31cad86234f"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"}, "proxy/beacon/UpgradeableBeacon.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x8ffefb755605824cf730ce4092b2f581"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n"}, "access/AccessControl.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x79af4d35ce7918696f13f0cb6653ec99"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"}, "mocks/ReentrancyMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x318e72355ec39e830288ec04dc4c76a7"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../security/ReentrancyGuard.sol\";\nimport \"./ReentrancyAttack.sol\";\n\ncontract ReentrancyMock is ReentrancyGuard {\n    uint256 public counter;\n\n    constructor() {\n        counter = 0;\n    }\n\n    function callback() external nonReentrant {\n        _count();\n    }\n\n    function countLocalRecursive(uint256 n) public nonReentrant {\n        if (n > 0) {\n            _count();\n            countLocalRecursive(n - 1);\n        }\n    }\n\n    function countThisRecursive(uint256 n) public nonReentrant {\n        if (n > 0) {\n            _count();\n            (bool success, ) = address(this).call(abi.encodeWithSignature(\"countThisRecursive(uint256)\", n - 1));\n            require(success, \"ReentrancyMock: failed call\");\n        }\n    }\n\n    function countAndCall(ReentrancyAttack attacker) public nonReentrant {\n        _count();\n        bytes4 func = bytes4(keccak256(\"callback()\"));\n        attacker.callSender(func);\n    }\n\n    function _count() private {\n        counter += 1;\n    }\n}\n"}, "mocks/AccessControlEnumerableMock.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x540e353a94b07ea4fc00e8d7c271da65"}, "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../access/AccessControlEnumerable.sol\";\n\ncontract AccessControlEnumerableMock is AccessControlEnumerable {\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    function setRoleAdmin(bytes32 roleId, bytes32 adminRoleId) public {\n        _setRoleAdmin(roleId, adminRoleId);\n    }\n\n    function senderProtected(bytes32 roleId) public onlyRole(roleId) {}\n}\n"}, "token/ERC20/extensions/ERC20Burnable.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x9f43a2bc39b89ae302f1727697f9c420"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"}, "interfaces/IERC777Sender.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xe573734b8269ff2e407c505ea6fa4474"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC777Sender.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC777/IERC777Sender.sol\";\n"}, "utils/cryptography/SignatureChecker.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x4d61badf471155b61db439405abc1f1d"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../Address.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper: Provide a single mechanism to verify both private-key (EOA) ECDSA signature and\n * ERC1271 contract signatures. Using this instead of ECDSA.recover in your contract will make them compatible with\n * smart contract wallets such as Argent and Gnosis.\n *\n * Note: unlike ECDSA signatures, contract signature's are revocable, and the outcome of this function can thus change\n * through time. It could return true at block N and false at block N+1 (or the opposite).\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\n    }\n}\n"}, "utils/Strings.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x9c54c6c065d9e590fdcdd72c451425b9"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"}, "token/ERC1155/extensions/IERC1155MetadataURI.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x9148c2e10c4efb12c71a7f080da5559b"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"}, "governance/TimelockController.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x59f5eb55cde7d6d3ae62c45480aff256"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/TimelockController.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../access/AccessControl.sol\";\n\n/**\n * @dev Contract module which acts as a timelocked controller. When set as the\n * owner of an `Ownable` smart contract, it enforces a timelock on all\n * `onlyOwner` maintenance operations. This gives time for users of the\n * controlled contract to exit before a potentially dangerous maintenance\n * operation is applied.\n *\n * By default, this contract is self administered, meaning administration tasks\n * have to go through the timelock process. The proposer (resp executor) role\n * is in charge of proposing (resp executing) operations. A common use case is\n * to position this {TimelockController} as the owner of a smart contract, with\n * a multisig or a DAO as the sole proposer.\n *\n * _Available since v3.3._\n */\ncontract TimelockController is AccessControl {\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\"TIMELOCK_ADMIN_ROLE\");\n    bytes32 public constant PROPOSER_ROLE = keccak256(\"PROPOSER_ROLE\");\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR_ROLE\");\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\n\n    mapping(bytes32 => uint256) private _timestamps;\n    uint256 private _minDelay;\n\n    /**\n     * @dev Emitted when a call is scheduled as part of operation `id`.\n     */\n    event CallScheduled(\n        bytes32 indexed id,\n        uint256 indexed index,\n        address target,\n        uint256 value,\n        bytes data,\n        bytes32 predecessor,\n        uint256 delay\n    );\n\n    /**\n     * @dev Emitted when a call is performed as part of operation `id`.\n     */\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\n\n    /**\n     * @dev Emitted when operation `id` is cancelled.\n     */\n    event Cancelled(bytes32 indexed id);\n\n    /**\n     * @dev Emitted when the minimum delay for future operations is modified.\n     */\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\n\n    /**\n     * @dev Initializes the contract with a given `minDelay`.\n     */\n    constructor(\n        uint256 minDelay,\n        address[] memory proposers,\n        address[] memory executors\n    ) {\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\n\n        // deployer + self administration\n        _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\n\n        // register proposers\n        for (uint256 i = 0; i < proposers.length; ++i) {\n            _setupRole(PROPOSER_ROLE, proposers[i]);\n        }\n\n        // register executors\n        for (uint256 i = 0; i < executors.length; ++i) {\n            _setupRole(EXECUTOR_ROLE, executors[i]);\n        }\n\n        _minDelay = minDelay;\n        emit MinDelayChange(0, minDelay);\n    }\n\n    /**\n     * @dev Modifier to make a function callable only by a certain role. In\n     * addition to checking the sender's role, `address(0)` 's role is also\n     * considered. Granting a role to `address(0)` is equivalent to enabling\n     * this role for everyone.\n     */\n    modifier onlyRoleOrOpenRole(bytes32 role) {\n        if (!hasRole(role, address(0))) {\n            _checkRole(role, _msgSender());\n        }\n        _;\n    }\n\n    /**\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\n     */\n    receive() external payable {}\n\n    /**\n     * @dev Returns whether an id correspond to a registered operation. This\n     * includes both Pending, Ready and Done operations.\n     */\n    function isOperation(bytes32 id) public view virtual returns (bool pending) {\n        return getTimestamp(id) > 0;\n    }\n\n    /**\n     * @dev Returns whether an operation is pending or not.\n     */\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\n        return getTimestamp(id) > _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns whether an operation is ready or not.\n     */\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\n        uint256 timestamp = getTimestamp(id);\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\n    }\n\n    /**\n     * @dev Returns whether an operation is done or not.\n     */\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\n        return getTimestamp(id) == _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\n     * unset operations, 1 for done operations).\n     */\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\n        return _timestamps[id];\n    }\n\n    /**\n     * @dev Returns the minimum delay for an operation to become valid.\n     *\n     * This value can be changed by executing an operation that calls `updateDelay`.\n     */\n    function getMinDelay() public view virtual returns (uint256 duration) {\n        return _minDelay;\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a single\n     * transaction.\n     */\n    function hashOperation(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32 hash) {\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a batch of\n     * transactions.\n     */\n    function hashOperationBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata datas,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32 hash) {\n        return keccak256(abi.encode(targets, values, datas, predecessor, salt));\n    }\n\n    /**\n     * @dev Schedule an operation containing a single transaction.\n     *\n     * Emits a {CallScheduled} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function schedule(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _schedule(id, delay);\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\n    }\n\n    /**\n     * @dev Schedule an operation containing a batch of transactions.\n     *\n     * Emits one {CallScheduled} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function scheduleBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata datas,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == datas.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\n        _schedule(id, delay);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            emit CallScheduled(id, i, targets[i], values[i], datas[i], predecessor, delay);\n        }\n    }\n\n    /**\n     * @dev Schedule an operation that is to becomes valid after a given delay.\n     */\n    function _schedule(bytes32 id, uint256 delay) private {\n        require(!isOperation(id), \"TimelockController: operation already scheduled\");\n        require(delay >= getMinDelay(), \"TimelockController: insufficient delay\");\n        _timestamps[id] = block.timestamp + delay;\n    }\n\n    /**\n     * @dev Cancel an operation.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function cancel(bytes32 id) public virtual onlyRole(PROPOSER_ROLE) {\n        require(isOperationPending(id), \"TimelockController: operation cannot be cancelled\");\n        delete _timestamps[id];\n\n        emit Cancelled(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a single transaction.\n     *\n     * Emits a {CallExecuted} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    function execute(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _beforeCall(id, predecessor);\n        _call(id, 0, target, value, data);\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a batch of transactions.\n     *\n     * Emits one {CallExecuted} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    function executeBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata datas,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == datas.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\n        _beforeCall(id, predecessor);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            _call(id, i, targets[i], values[i], datas[i]);\n        }\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Checks before execution of an operation's calls.\n     */\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \"TimelockController: missing dependency\");\n    }\n\n    /**\n     * @dev Checks after execution of an operation's calls.\n     */\n    function _afterCall(bytes32 id) private {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        _timestamps[id] = _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Execute an operation's call.\n     *\n     * Emits a {CallExecuted} event.\n     */\n    function _call(\n        bytes32 id,\n        uint256 index,\n        address target,\n        uint256 value,\n        bytes calldata data\n    ) private {\n        (bool success, ) = target.call{value: value}(data);\n        require(success, \"TimelockController: underlying transaction reverted\");\n\n        emit CallExecuted(id, index, target, value, data);\n    }\n\n    /**\n     * @dev Changes the minimum timelock duration for future operations.\n     *\n     * Emits a {MinDelayChange} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\n     */\n    function updateDelay(uint256 newDelay) external virtual {\n        require(msg.sender == address(this), \"TimelockController: caller must be timelock\");\n        emit MinDelayChange(_minDelay, newDelay);\n        _minDelay = newDelay;\n    }\n}\n"}, "interfaces/IERC3156FlashBorrower.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x6317d0dd1a63dfc0a295b00173c76f95"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156FlashBorrower.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n *\n * _Available since v4.1._\n */\ninterface IERC3156FlashBorrower {\n    /**\n     * @dev Receive a flash loan.\n     * @param initiator The initiator of the loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param fee The additional amount of tokens to repay.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     * @return The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\"\n     */\n    function onFlashLoan(\n        address initiator,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external returns (bytes32);\n}\n"}}, "contractTypes": {"AccessControl": {"contractName": "AccessControl", "sourceId": "access/AccessControl.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "RoleAdminChanged", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "previousAdminRole", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "newAdminRole", "type": "bytes32", "internalType": "bytes32", "indexed": true}], "anonymous": false}, {"type": "event", "name": "RoleGranted", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "sender", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "RoleRevoked", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "sender", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "function", "name": "DEFAULT_ADMIN_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "getRoleAdmin", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "grantRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "hasRole", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "renounceRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "revokeRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.", "kind": "dev", "methods": {"getRoleAdmin(bytes32)": {"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."}, "grantRole(bytes32,address)": {"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."}, "hasRole(bytes32,address)": {"details": "Returns `true` if `account` has been granted `role`."}, "renounceRole(bytes32,address)": {"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."}, "revokeRole(bytes32,address)": {"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}}, "version": 1}}, "AccessControlEnumerable": {"contractName": "AccessControlEnumerable", "sourceId": "access/AccessControlEnumerable.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "RoleAdminChanged", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "previousAdminRole", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "newAdminRole", "type": "bytes32", "internalType": "bytes32", "indexed": true}], "anonymous": false}, {"type": "event", "name": "RoleGranted", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "sender", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "RoleRevoked", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "sender", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "function", "name": "DEFAULT_ADMIN_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "getRoleAdmin", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "getRoleMember", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getRoleMemberCount", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "grantRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "hasRole", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "renounceRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "revokeRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Extension of {AccessControl} that allows enumerating the members of each role.", "kind": "dev", "methods": {"getRoleAdmin(bytes32)": {"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."}, "getRoleMember(bytes32,uint256)": {"details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."}, "getRoleMemberCount(bytes32)": {"details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."}, "grantRole(bytes32,address)": {"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."}, "hasRole(bytes32,address)": {"details": "Returns `true` if `account` has been granted `role`."}, "renounceRole(bytes32,address)": {"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."}, "revokeRole(bytes32,address)": {"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}}, "version": 1}}, "IAccessControl": {"contractName": "IAccessControl", "sourceId": "access/IAccessControl.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "RoleAdminChanged", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "previousAdminRole", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "newAdminRole", "type": "bytes32", "internalType": "bytes32", "indexed": true}], "anonymous": false}, {"type": "event", "name": "RoleGranted", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "sender", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "RoleRevoked", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "sender", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "function", "name": "getRoleAdmin", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "grantRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "hasRole", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "renounceRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "revokeRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "External interface of AccessControl declared to support ERC165 detection.", "events": {"RoleAdminChanged(bytes32,bytes32,bytes32)": {"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"}, "RoleGranted(bytes32,address,address)": {"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."}, "RoleRevoked(bytes32,address,address)": {"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}}, "kind": "dev", "methods": {"getRoleAdmin(bytes32)": {"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."}, "grantRole(bytes32,address)": {"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."}, "hasRole(bytes32,address)": {"details": "Returns `true` if `account` has been granted `role`."}, "renounceRole(bytes32,address)": {"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."}, "revokeRole(bytes32,address)": {"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}}, "version": 1}}, "IAccessControlEnumerable": {"contractName": "IAccessControlEnumerable", "sourceId": "access/IAccessControlEnumerable.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "RoleAdminChanged", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "previousAdminRole", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "newAdminRole", "type": "bytes32", "internalType": "bytes32", "indexed": true}], "anonymous": false}, {"type": "event", "name": "RoleGranted", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "sender", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "RoleRevoked", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "sender", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "function", "name": "getRoleAdmin", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "getRoleMember", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getRoleMemberCount", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "grantRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "hasRole", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "renounceRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "revokeRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "External interface of AccessControlEnumerable declared to support ERC165 detection.", "kind": "dev", "methods": {"getRoleAdmin(bytes32)": {"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."}, "getRoleMember(bytes32,uint256)": {"details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."}, "getRoleMemberCount(bytes32)": {"details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."}, "grantRole(bytes32,address)": {"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."}, "hasRole(bytes32,address)": {"details": "Returns `true` if `account` has been granted `role`."}, "renounceRole(bytes32,address)": {"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."}, "revokeRole(bytes32,address)": {"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}}, "version": 1}}, "Ownable": {"contractName": "Ownable", "sourceId": "access/Ownable.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "OwnershipTransferred", "inputs": [{"name": "previousOwner", "type": "address", "internalType": "address", "indexed": true}, {"name": "newOwner", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "function", "name": "owner", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "renounceOwnership", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "transferOwnership", "stateMutability": "nonpayable", "inputs": [{"name": "newOwner", "type": "address", "internalType": "address"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.", "kind": "dev", "methods": {"constructor": {"details": "Initializes the contract setting the deployer as the initial owner."}, "owner()": {"details": "Returns the address of the current owner."}, "renounceOwnership()": {"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."}, "transferOwnership(address)": {"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}, "version": 1}}, "PaymentSplitter": {"contractName": "PaymentSplitter", "sourceId": "finance/PaymentSplitter.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": "0x60806040526004361061008a5760003560e01c80638b83209b116100595780638b83209b146101845780639852595c146101bc578063ce7c2ac2146101f2578063d79779b214610228578063e33b7de31461025e57600080fd5b806319165587146100d85780633a98ef39146100fa578063406072a91461011e57806348b750441461016457600080fd5b366100d3577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b3480156100e457600080fd5b506100f86100f336600461094c565b610273565b005b34801561010657600080fd5b506000545b6040519081526020015b60405180910390f35b34801561012a57600080fd5b5061010b610139366004610969565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205490565b34801561017057600080fd5b506100f861017f366004610969565b6103ad565b34801561019057600080fd5b506101a461019f3660046109a2565b610589565b6040516001600160a01b039091168152602001610115565b3480156101c857600080fd5b5061010b6101d736600461094c565b6001600160a01b031660009081526003602052604090205490565b3480156101fe57600080fd5b5061010b61020d36600461094c565b6001600160a01b031660009081526002602052604090205490565b34801561023457600080fd5b5061010b61024336600461094c565b6001600160a01b031660009081526005602052604090205490565b34801561026a57600080fd5b5060015461010b565b6001600160a01b0381166000908152600260205260409020546102b15760405162461bcd60e51b81526004016102a8906109bb565b60405180910390fd5b60006102bc60015490565b6102c69047610a17565b905060006102f383836102ee866001600160a01b031660009081526003602052604090205490565b6105b9565b9050806000036103155760405162461bcd60e51b81526004016102a890610a2f565b6001600160a01b0383166000908152600360205260408120805483929061033d908490610a17565b9250508190555080600160008282546103569190610a17565b90915550610366905083826105fe565b604080516001600160a01b0385168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a1505050565b6001600160a01b0381166000908152600260205260409020546103e25760405162461bcd60e51b81526004016102a8906109bb565b6001600160a01b0382166000908152600560205260408120546040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa15801561043f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104639190610a7a565b61046d9190610a17565b905060006104a683836102ee87876001600160a01b03918216600090815260066020908152604080832093909416825291909152205490565b9050806000036104c85760405162461bcd60e51b81526004016102a890610a2f565b6001600160a01b038085166000908152600660209081526040808320938716835292905290812080548392906104ff908490610a17565b90915550506001600160a01b0384166000908152600560205260408120805483929061052c908490610a17565b9091555061053d905084848361071c565b604080516001600160a01b038581168252602082018490528616917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a910160405180910390a250505050565b60006004828154811061059e5761059e610a93565b6000918252602090912001546001600160a01b031692915050565b600080546001600160a01b0385168252600260205260408220548391906105e09086610aa9565b6105ea9190610ac8565b6105f49190610aea565b90505b9392505050565b8047101561064e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016102a8565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461069b576040519150601f19603f3d011682016040523d82523d6000602084013e6106a0565b606091505b50509050806107175760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016102a8565b505050565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180516001600160e01b031663a9059cbb60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610717928692916000916107ac918516908490610829565b80519091501561071757808060200190518101906107ca9190610b01565b6107175760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102a8565b60606105f4848460008585843b6108825760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102a8565b600080866001600160a01b0316858760405161089e9190610b53565b60006040518083038185875af1925050503d80600081146108db576040519150601f19603f3d011682016040523d82523d6000602084013e6108e0565b606091505b50915091506108f08282866108fb565b979650505050505050565b6060831561090a5750816105f7565b82511561091a5782518084602001fd5b8160405162461bcd60e51b81526004016102a89190610b6f565b6001600160a01b038116811461094957600080fd5b50565b60006020828403121561095e57600080fd5b81356105f781610934565b6000806040838503121561097c57600080fd5b823561098781610934565b9150602083013561099781610934565b809150509250929050565b6000602082840312156109b457600080fd5b5035919050565b60208082526026908201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060408201526573686172657360d01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008219821115610a2a57610a2a610a01565b500190565b6020808252602b908201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060408201526a191d59481c185e5b595b9d60aa1b606082015260800190565b600060208284031215610a8c57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615610ac357610ac3610a01565b500290565b600082610ae557634e487b7160e01b600052601260045260246000fd5b500490565b600082821015610afc57610afc610a01565b500390565b600060208284031215610b1357600080fd5b815180151581146105f757600080fd5b60005b83811015610b3e578181015183820152602001610b26565b83811115610b4d576000848401525b50505050565b60008251610b65818460208701610b23565b9190910192915050565b6020815260008251806020840152610b8e816040850160208701610b23565b601f01601f1916919091016040019291505056fea26469706673582212207bca78ffedda8a4cc3ff122f50d5d4d94192e12f311e7619301e0389e270246364736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "payable", "inputs": [{"name": "payees", "type": "address[]", "internalType": "address[]"}, {"name": "shares_", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "event", "name": "ERC20PaymentReleased", "inputs": [{"name": "token", "type": "address", "internalType": "contract IERC20", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": false}, {"name": "amount", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "PayeeAdded", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}, {"name": "shares", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "PaymentReceived", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": false}, {"name": "amount", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "PaymentReleased", "inputs": [{"name": "to", "type": "address", "internalType": "address", "indexed": false}, {"name": "amount", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "payee", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "release", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address payable"}], "outputs": []}, {"type": "function", "name": "release", "stateMutability": "nonpayable", "inputs": [{"name": "token", "type": "address", "internalType": "contract IERC20"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "released", "stateMutability": "view", "inputs": [{"name": "token", "type": "address", "internalType": "contract IERC20"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "released", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "shares", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "totalReleased", "stateMutability": "view", "inputs": [{"name": "token", "type": "address", "internalType": "contract IERC20"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "totalReleased", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "totalShares", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware that the Ether will be split in this way, since it is handled transparently by the contract. The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim an amount proportional to the percentage of total shares they were assigned. `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release} function. NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you to run tests before sending real value to this contract.", "kind": "dev", "methods": {"constructor": {"details": "Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at the matching position in the `shares` array. All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no duplicates in `payees`."}, "payee(uint256)": {"details": "Getter for the address of the payee number `index`."}, "release(address)": {"details": "Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals."}, "release(address,address)": {"details": "Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract."}, "released(address)": {"details": "Getter for the amount of Ether already released to a payee."}, "released(address,address)": {"details": "Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract."}, "shares(address)": {"details": "Getter for the amount of shares held by an account."}, "totalReleased()": {"details": "Getter for the total amount of Ether already released."}, "totalReleased(address)": {"details": "Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract."}, "totalShares()": {"details": "Getter for the total shares held by payees."}}, "title": "PaymentSplitter", "version": 1}}, "VestingWallet": {"contractName": "VestingWallet", "sourceId": "finance/VestingWallet.sol", "deploymentBytecode": {"bytecode": "0x60e060405234801561001057600080fd5b50604051610c68380380610c6883398101604081905261002f916100dd565b6001600160a01b03831661009c5760405162461bcd60e51b815260206004820152602a60248201527f56657374696e6757616c6c65743a2062656e6566696369617279206973207a65604482015269726f206164647265737360b01b606482015260840160405180910390fd5b6001600160a01b039092166080526001600160401b0390811660a0521660c05261012e565b80516001600160401b03811681146100d857600080fd5b919050565b6000806000606084860312156100f257600080fd5b83516001600160a01b038116811461010957600080fd5b9250610117602085016100c1565b9150610125604085016100c1565b90509250925092565b60805160a05160c051610af06101786000396000818160d80152818161046901526104be01526000610421015260008181610142015281816102c801526103ee0152610af06000f3fe60806040526004361061008a5760003560e01c8063810ec23b11610059578063810ec23b1461016c57806386d1a69f1461018c57806396132521146101a15780639852595c146101b6578063be9a6555146101ec57600080fd5b80630a17b06b146100965780630fb5a6b4146100c9578063191655871461010657806338af3eed1461012857600080fd5b3661009157005b600080fd5b3480156100a257600080fd5b506100b66100b13660046108fa565b610201565b6040519081526020015b60405180910390f35b3480156100d557600080fd5b507f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166100b6565b34801561011257600080fd5b5061012661012136600461092c565b610225565b005b34801561013457600080fd5b506040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681526020016100c0565b34801561017857600080fd5b506100b6610187366004610947565b6102f1565b34801561019857600080fd5b50610126610387565b3480156101ad57600080fd5b506000546100b6565b3480156101c257600080fd5b506100b66101d136600461092c565b6001600160a01b031660009081526001602052604090205490565b3480156101f857600080fd5b506100b6610416565b600061021f61020f60005490565b6102199047610990565b83610444565b92915050565b6001600160a01b03811660009081526001602052604081205461024883426102f1565b61025291906109a8565b6001600160a01b03831660009081526001602052604081208054929350839290919061027f908490610990565b90915550506040518181526001600160a01b038316907fc0e523490dd523c33b1878c9eb14ff46991e3f5b2cd33710918618f2a39cba1b9060200160405180910390a26102ed827f00000000000000000000000000000000000000000000000000000000000000008361051e565b5050565b6001600160a01b038216600090815260016020526040812054610380906040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa158015610352573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037691906109bf565b6102199190610990565b9392505050565b6000805461039442610201565b61039e91906109a8565b9050806000808282546103b19190610990565b90915550506040518181527fda9d4e5f101b8b9b1c5b76d0c5a9f7923571acfc02376aa076b75a8c080c956b9060200160405180910390a16104137f000000000000000000000000000000000000000000000000000000000000000082610575565b50565b67ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690565b600061044e610416565b8267ffffffffffffffff1610156104675750600061021f565b7f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1661049a610416565b6104a49190610990565b8267ffffffffffffffff1611156104bc57508161021f565b7f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166104ef610416565b6105039067ffffffffffffffff85166109a8565b61050d90856109d8565b61051791906109f7565b905061021f565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610570908490610693565b505050565b804710156105ca5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610617576040519150601f19603f3d011682016040523d82523d6000602084013e61061c565b606091505b50509050806105705760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016105c1565b60006106e8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107659092919063ffffffff16565b80519091501561057057808060200190518101906107069190610a19565b6105705760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105c1565b6060610774848460008561077c565b949350505050565b6060824710156107dd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105c1565b843b61082b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105c1565b600080866001600160a01b031685876040516108479190610a6b565b60006040518083038185875af1925050503d8060008114610884576040519150601f19603f3d011682016040523d82523d6000602084013e610889565b606091505b50915091506108998282866108a4565b979650505050505050565b606083156108b3575081610380565b8251156108c35782518084602001fd5b8160405162461bcd60e51b81526004016105c19190610a87565b803567ffffffffffffffff811681146108f557600080fd5b919050565b60006020828403121561090c57600080fd5b610380826108dd565b80356001600160a01b03811681146108f557600080fd5b60006020828403121561093e57600080fd5b61038082610915565b6000806040838503121561095a57600080fd5b61096383610915565b9150610971602084016108dd565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b600082198211156109a3576109a361097a565b500190565b6000828210156109ba576109ba61097a565b500390565b6000602082840312156109d157600080fd5b5051919050565b60008160001904831182151516156109f2576109f261097a565b500290565b600082610a1457634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610a2b57600080fd5b8151801515811461038057600080fd5b60005b83811015610a56578181015183820152602001610a3e565b83811115610a65576000848401525b50505050565b60008251610a7d818460208701610a3b565b9190910192915050565b6020815260008251806020840152610aa6816040850160208701610a3b565b601f01601f1916919091016040019291505056fea26469706673582212201215f4cbfb4f284b21ad29a62c69f3c4e554847aebdb8467c6b4586ec6298a1764736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x60806040526004361061008a5760003560e01c8063810ec23b11610059578063810ec23b1461016c57806386d1a69f1461018c57806396132521146101a15780639852595c146101b6578063be9a6555146101ec57600080fd5b80630a17b06b146100965780630fb5a6b4146100c9578063191655871461010657806338af3eed1461012857600080fd5b3661009157005b600080fd5b3480156100a257600080fd5b506100b66100b13660046108fa565b610201565b6040519081526020015b60405180910390f35b3480156100d557600080fd5b507f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166100b6565b34801561011257600080fd5b5061012661012136600461092c565b610225565b005b34801561013457600080fd5b506040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681526020016100c0565b34801561017857600080fd5b506100b6610187366004610947565b6102f1565b34801561019857600080fd5b50610126610387565b3480156101ad57600080fd5b506000546100b6565b3480156101c257600080fd5b506100b66101d136600461092c565b6001600160a01b031660009081526001602052604090205490565b3480156101f857600080fd5b506100b6610416565b600061021f61020f60005490565b6102199047610990565b83610444565b92915050565b6001600160a01b03811660009081526001602052604081205461024883426102f1565b61025291906109a8565b6001600160a01b03831660009081526001602052604081208054929350839290919061027f908490610990565b90915550506040518181526001600160a01b038316907fc0e523490dd523c33b1878c9eb14ff46991e3f5b2cd33710918618f2a39cba1b9060200160405180910390a26102ed827f00000000000000000000000000000000000000000000000000000000000000008361051e565b5050565b6001600160a01b038216600090815260016020526040812054610380906040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa158015610352573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037691906109bf565b6102199190610990565b9392505050565b6000805461039442610201565b61039e91906109a8565b9050806000808282546103b19190610990565b90915550506040518181527fda9d4e5f101b8b9b1c5b76d0c5a9f7923571acfc02376aa076b75a8c080c956b9060200160405180910390a16104137f000000000000000000000000000000000000000000000000000000000000000082610575565b50565b67ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690565b600061044e610416565b8267ffffffffffffffff1610156104675750600061021f565b7f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1661049a610416565b6104a49190610990565b8267ffffffffffffffff1611156104bc57508161021f565b7f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166104ef610416565b6105039067ffffffffffffffff85166109a8565b61050d90856109d8565b61051791906109f7565b905061021f565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610570908490610693565b505050565b804710156105ca5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610617576040519150601f19603f3d011682016040523d82523d6000602084013e61061c565b606091505b50509050806105705760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016105c1565b60006106e8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107659092919063ffffffff16565b80519091501561057057808060200190518101906107069190610a19565b6105705760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105c1565b6060610774848460008561077c565b949350505050565b6060824710156107dd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105c1565b843b61082b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105c1565b600080866001600160a01b031685876040516108479190610a6b565b60006040518083038185875af1925050503d8060008114610884576040519150601f19603f3d011682016040523d82523d6000602084013e610889565b606091505b50915091506108998282866108a4565b979650505050505050565b606083156108b3575081610380565b8251156108c35782518084602001fd5b8160405162461bcd60e51b81526004016105c19190610a87565b803567ffffffffffffffff811681146108f557600080fd5b919050565b60006020828403121561090c57600080fd5b610380826108dd565b80356001600160a01b03811681146108f557600080fd5b60006020828403121561093e57600080fd5b61038082610915565b6000806040838503121561095a57600080fd5b61096383610915565b9150610971602084016108dd565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b600082198211156109a3576109a361097a565b500190565b6000828210156109ba576109ba61097a565b500390565b6000602082840312156109d157600080fd5b5051919050565b60008160001904831182151516156109f2576109f261097a565b500290565b600082610a1457634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610a2b57600080fd5b8151801515811461038057600080fd5b60005b83811015610a56578181015183820152602001610a3e565b83811115610a65576000848401525b50505050565b60008251610a7d818460208701610a3b565b9190910192915050565b6020815260008251806020840152610aa6816040850160208701610a3b565b601f01601f1916919091016040019291505056fea26469706673582212201215f4cbfb4f284b21ad29a62c69f3c4e554847aebdb8467c6b4586ec6298a1764736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "beneficiaryAddress", "type": "address", "internalType": "address"}, {"name": "startTimestamp", "type": "uint64", "internalType": "uint64"}, {"name": "durationSeconds", "type": "uint64", "internalType": "uint64"}]}, {"type": "event", "name": "ERC20Released", "inputs": [{"name": "token", "type": "address", "internalType": "address", "indexed": true}, {"name": "amount", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "EtherReleased", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "beneficiary", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "duration", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "release", "stateMutability": "nonpayable", "inputs": [{"name": "token", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "release", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "released", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "released", "stateMutability": "view", "inputs": [{"name": "token", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "start", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "vestedAmount", "stateMutability": "view", "inputs": [{"name": "timestamp", "type": "uint64", "internalType": "uint64"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "vestedAmount", "stateMutability": "view", "inputs": [{"name": "token", "type": "address", "internalType": "address"}, {"name": "timestamp", "type": "uint64", "internalType": "uint64"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "This contract handles the vesting of Eth and ERC20 tokens for a given beneficiary. Custody of multiple tokens can be given to this contract, which will release the token to the beneficiary following a given vesting schedule. The vesting schedule is customizable through the {vestedAmount} function. Any token transferred to this contract will follow the vesting schedule as if they were locked from the beginning. Consequently, if the vesting has already started, any amount of tokens sent to this contract will (at least partly) be immediately releasable.", "kind": "dev", "methods": {"beneficiary()": {"details": "Getter for the beneficiary address."}, "constructor": {"details": "Set the beneficiary, start timestamp and vesting duration of the vesting wallet."}, "duration()": {"details": "Getter for the vesting duration."}, "release()": {"details": "Release the native token (ether) that have already vested. Emits a {TokensReleased} event."}, "release(address)": {"details": "Release the tokens that have already vested. Emits a {TokensReleased} event."}, "released()": {"details": "Amount of eth already released"}, "released(address)": {"details": "Amount of token already released"}, "start()": {"details": "Getter for the start timestamp."}, "vestedAmount(address,uint64)": {"details": "Calculates the amount of tokens that has already vested. Default implementation is a linear vesting curve."}, "vestedAmount(uint64)": {"details": "Calculates the amount of ether that has already vested. Default implementation is a linear vesting curve."}}, "title": "VestingWallet", "version": 1}}, "Governor": {"contractName": "Governor", "sourceId": "governance/Governor.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "ProposalCanceled", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalCreated", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "proposer", "type": "address", "internalType": "address", "indexed": false}, {"name": "targets", "type": "address[]", "internalType": "address[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "signatures", "type": "string[]", "internalType": "string[]", "indexed": false}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]", "indexed": false}, {"name": "startBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "endBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "description", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalExecuted", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VoteCast", "inputs": [{"name": "voter", "type": "address", "internalType": "address", "indexed": true}, {"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "support", "type": "uint8", "internalType": "uint8", "indexed": false}, {"name": "weight", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "reason", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "function", "name": "BALLOT_TYPEHASH", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "COUNTING_MODE", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "castVote", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteBySig", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteWithReason", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "reason", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "hasVoted", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "hashProposal", "stateMutability": "pure", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "proposalDeadline", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalSnapshot", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalThreshold", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorum", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "enum IGovernor.ProposalState"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "version", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "votingDelay", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "votingPeriod", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {"COUNTING_MODE()": {"notice": "module:voting"}, "getVotes(address,uint256)": {"notice": "module:reputation"}, "hasVoted(uint256,address)": {"notice": "module:voting"}, "quorum(uint256)": {"notice": "module:user-config"}, "votingDelay()": {"notice": "module:user-config"}, "votingPeriod()": {"notice": "module:user-config"}}, "version": 1}, "devdoc": {"details": "Core of the governance system, designed to be extended though various modules. This contract is abstract and requires several function to be implemented in various modules: - A counting module must implement {quorum}, {_quorumReached}, {_voteSucceeded} and {_countVote} - A voting module must implement {getVotes} - Additionanly, the {votingPeriod} must also be implemented _Available since v4.3._", "kind": "dev", "methods": {"COUNTING_MODE()": {"details": "A description of the possible `support` values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`. There are 2 standard keys: `support` and `quorum`. - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`. - `quorum=bravo` means that only For votes are counted towards quorum. - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`] JavaScript class."}, "castVote(uint256,uint8)": {"details": "See {IGovernor-castVote}."}, "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {"details": "See {IGovernor-castVoteBySig}."}, "castVoteWithReason(uint256,uint8,string)": {"details": "See {IGovernor-castVoteWithReason}."}, "constructor": {"details": "Sets the value for {name} and {version}"}, "execute(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-execute}."}, "getVotes(address,uint256)": {"details": "Voting power of an `account` at a specific `blockNumber`. Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or multiple), {ERC20Votes} tokens."}, "hasVoted(uint256,address)": {"details": "Returns weither `account` has cast a vote on `proposalId`."}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."}, "name()": {"details": "See {IGovernor-name}."}, "proposalDeadline(uint256)": {"details": "See {IGovernor-proposalDeadline}."}, "proposalSnapshot(uint256)": {"details": "See {IGovernor-proposalSnapshot}."}, "proposalThreshold()": {"details": "Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_."}, "propose(address[],uint256[],bytes[],string)": {"details": "See {IGovernor-propose}."}, "quorum(uint256)": {"details": "Minimum number of cast voted required for a proposal to be successful. Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes})."}, "state(uint256)": {"details": "See {IGovernor-state}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "version()": {"details": "See {IGovernor-version}."}, "votingDelay()": {"details": "Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts."}, "votingPeriod()": {"details": "Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay."}}, "version": 1}}, "IGovernor": {"contractName": "IGovernor", "sourceId": "governance/IGovernor.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "ProposalCanceled", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalCreated", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "proposer", "type": "address", "internalType": "address", "indexed": false}, {"name": "targets", "type": "address[]", "internalType": "address[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "signatures", "type": "string[]", "internalType": "string[]", "indexed": false}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]", "indexed": false}, {"name": "startBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "endBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "description", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalExecuted", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VoteCast", "inputs": [{"name": "voter", "type": "address", "internalType": "address", "indexed": true}, {"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "support", "type": "uint8", "internalType": "uint8", "indexed": false}, {"name": "weight", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "reason", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "function", "name": "COUNTING_MODE", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "castVote", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}], "outputs": [{"name": "balance", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteBySig", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "balance", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteWithReason", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "reason", "type": "string", "internalType": "string"}], "outputs": [{"name": "balance", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "hasVoted", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "hashProposal", "stateMutability": "pure", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "proposalDeadline", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalSnapshot", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorum", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "enum IGovernor.ProposalState"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "version", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "votingDelay", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "votingPeriod", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}], "userdoc": {"kind": "user", "methods": {"COUNTING_MODE()": {"notice": "module:voting"}, "getVotes(address,uint256)": {"notice": "module:reputation"}, "hasVoted(uint256,address)": {"notice": "module:voting"}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"notice": "module:core"}, "name()": {"notice": "module:core"}, "proposalDeadline(uint256)": {"notice": "module:core"}, "proposalSnapshot(uint256)": {"notice": "module:core"}, "quorum(uint256)": {"notice": "module:user-config"}, "state(uint256)": {"notice": "module:core"}, "version()": {"notice": "module:core"}, "votingDelay()": {"notice": "module:user-config"}, "votingPeriod()": {"notice": "module:user-config"}}, "version": 1}, "devdoc": {"details": "Interface of the {Governor} core. _Available since v4.3._", "events": {"ProposalCanceled(uint256)": {"details": "Emitted when a proposal is canceled."}, "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)": {"details": "Emitted when a proposal is created."}, "ProposalExecuted(uint256)": {"details": "Emitted when a proposal is executed."}, "VoteCast(address,uint256,uint8,uint256,string)": {"details": "Emitted when a vote is cast. Note: `support` values should be seen as buckets. There interpretation depends on the voting module used."}}, "kind": "dev", "methods": {"COUNTING_MODE()": {"details": "A description of the possible `support` values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`. There are 2 standard keys: `support` and `quorum`. - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`. - `quorum=bravo` means that only For votes are counted towards quorum. - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`] JavaScript class."}, "castVote(uint256,uint8)": {"details": "Cast a vote Emits a {VoteCast} event."}, "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {"details": "Cast a vote using the user cryptographic signature. Emits a {VoteCast} event."}, "castVoteWithReason(uint256,uint8,string)": {"details": "Cast a with a reason Emits a {VoteCast} event."}, "execute(address[],uint256[],bytes[],bytes32)": {"details": "Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the deadline to be reached. Emits a {ProposalExecuted} event. Note: some module can modify the requirements for execution, for example by adding an additional timelock."}, "getVotes(address,uint256)": {"details": "Voting power of an `account` at a specific `blockNumber`. Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or multiple), {ERC20Votes} tokens."}, "hasVoted(uint256,address)": {"details": "Returns weither `account` has cast a vote on `proposalId`."}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"details": "Hashing function used to (re)build the proposal id from the proposal details.."}, "name()": {"details": "Name of the governor instance (used in building the ERC712 domain separator)."}, "proposalDeadline(uint256)": {"details": "Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote during this block."}, "proposalSnapshot(uint256)": {"details": "Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the beginning of the following block."}, "propose(address[],uint256[],bytes[],string)": {"details": "Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends {IGovernor-votingPeriod} blocks after the voting starts. Emits a {ProposalCreated} event."}, "quorum(uint256)": {"details": "Minimum number of cast voted required for a proposal to be successful. Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes})."}, "state(uint256)": {"details": "Current state of a proposal, following Compound's convention"}, "supportsInterface(bytes4)": {"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}, "version()": {"details": "Version of the governor instance (used in building the ERC712 domain separator). Default: \"1\""}, "votingDelay()": {"details": "Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts."}, "votingPeriod()": {"details": "Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay."}}, "version": 1}}, "TimelockController": {"contractName": "TimelockController", "sourceId": "governance/TimelockController.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": "0x60806040526004361061014f5760003560e01c806364d62353116100b6578063b1c5f4271161006f578063b1c5f427146103f3578063c4d252f514610413578063d45c443514610433578063d547741f14610460578063e38335e514610480578063f27a0c921461049357600080fd5b806364d623531461033c5780638065657f1461035c5780638f2a0bb01461037c5780638f61f4f51461039c57806391d14854146103be578063a217fddf146103de57600080fd5b8063248a9ca311610108578063248a9ca31461025b5780632ab0f5291461028b5780632f2ff15d146102bc57806331d50750146102dc57806336568abe146102fc578063584b153e1461031c57600080fd5b806301d5062a1461015b57806301ffc9a71461017d57806307bd0265146101b25780630d3cf6fc146101f4578063134008d31461022857806313bc9f201461023b57600080fd5b3661015657005b600080fd5b34801561016757600080fd5b5061017b6101763660046111b5565b6104a8565b005b34801561018957600080fd5b5061019d61019836600461122a565b61052c565b60405190151581526020015b60405180910390f35b3480156101be57600080fd5b506101e67fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6381565b6040519081526020016101a9565b34801561020057600080fd5b506101e67f5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca581565b61017b610236366004611254565b610563565b34801561024757600080fd5b5061019d6102563660046112c0565b6105db565b34801561026757600080fd5b506101e66102763660046112c0565b60009081526020819052604090206001015490565b34801561029757600080fd5b5061019d6102a63660046112c0565b6000908152600160208190526040909120541490565b3480156102c857600080fd5b5061017b6102d73660046112d9565b610601565b3480156102e857600080fd5b5061019d6102f73660046112c0565b61062c565b34801561030857600080fd5b5061017b6103173660046112d9565b610645565b34801561032857600080fd5b5061019d6103373660046112c0565b6106c8565b34801561034857600080fd5b5061017b6103573660046112c0565b6106de565b34801561036857600080fd5b506101e6610377366004611254565b610782565b34801561038857600080fd5b5061017b61039736600461134a565b6107c1565b3480156103a857600080fd5b506101e66000805160206118fe83398151915281565b3480156103ca57600080fd5b5061019d6103d93660046112d9565b610902565b3480156103ea57600080fd5b506101e6600081565b3480156103ff57600080fd5b506101e661040e3660046113fc565b61092b565b34801561041f57600080fd5b5061017b61042e3660046112c0565b610970565b34801561043f57600080fd5b506101e661044e3660046112c0565b60009081526001602052604090205490565b34801561046c57600080fd5b5061017b61047b3660046112d9565b610a34565b61017b61048e3660046113fc565b610a5a565b34801561049f57600080fd5b506002546101e6565b6000805160206118fe8339815191526104c18133610b8f565b60006104d1898989898989610782565b90506104dd8184610bf3565b6000817f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca8b8b8b8b8b8a604051610519969594939291906114ce565b60405180910390a3505050505050505050565b60006001600160e01b03198216637965db0b60e01b148061055d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6361058f816000610902565b61059d5761059d8133610b8f565b60006105ad888888888888610782565b90506105b98185610ce2565b6105c88160008a8a8a8a610d7e565b6105d181610e92565b5050505050505050565b6000818152600160205260408120546001811180156105fa5750428111155b9392505050565b60008281526020819052604090206001015461061d8133610b8f565b6106278383610ecb565b505050565b60008181526001602052604081205481905b1192915050565b6001600160a01b03811633146106ba5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6106c48282610f4f565b5050565b600081815260016020819052604082205461063e565b3330146107415760405162461bcd60e51b815260206004820152602b60248201527f54696d656c6f636b436f6e74726f6c6c65723a2063616c6c6572206d7573742060448201526a62652074696d656c6f636b60a81b60648201526084016106b1565b60025460408051918252602082018390527f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d5910160405180910390a1600255565b600086868686868660405160200161079f969594939291906114ce565b6040516020818303038152906040528051906020012090509695505050505050565b6000805160206118fe8339815191526107da8133610b8f565b8887146107f95760405162461bcd60e51b81526004016106b19061150b565b8885146108185760405162461bcd60e51b81526004016106b19061150b565b600061082a8b8b8b8b8b8b8b8b61092b565b90506108368184610bf3565b60005b8a8110156108f45780827f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca8e8e858181106108765761087661154e565b905060200201602081019061088b9190611564565b8d8d8681811061089d5761089d61154e565b905060200201358c8c878181106108b6576108b661154e565b90506020028101906108c8919061157f565b8c8b6040516108dc969594939291906114ce565b60405180910390a36108ed816115dc565b9050610839565b505050505050505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000888888888888888860405160200161094c98979695949392919061168a565b60405160208183030381529060405280519060200120905098975050505050505050565b6000805160206118fe8339815191526109898133610b8f565b610992826106c8565b6109f85760405162461bcd60e51b815260206004820152603160248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e2063616044820152701b9b9bdd0818994818d85b98d95b1b1959607a1b60648201526084016106b1565b6000828152600160205260408082208290555183917fbaa1eb22f2a492ba1a5fea61b8df4d27c6c8b5f3971e63bb58fa14ff72eedb7091a25050565b600082815260208190526040902060010154610a508133610b8f565b6106278383610f4f565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63610a86816000610902565b610a9457610a948133610b8f565b878614610ab35760405162461bcd60e51b81526004016106b19061150b565b878414610ad25760405162461bcd60e51b81526004016106b19061150b565b6000610ae48a8a8a8a8a8a8a8a61092b565b9050610af08185610ce2565b60005b89811015610b7957610b6982828d8d85818110610b1257610b1261154e565b9050602002016020810190610b279190611564565b8c8c86818110610b3957610b3961154e565b905060200201358b8b87818110610b5257610b5261154e565b9050602002810190610b64919061157f565b610d7e565b610b72816115dc565b9050610af3565b50610b8381610e92565b50505050505050505050565b610b998282610902565b6106c457610bb1816001600160a01b03166014610fb4565b610bbc836020610fb4565b604051602001610bcd929190611765565b60408051601f198184030181529082905262461bcd60e51b82526106b1916004016117da565b610bfc8261062c565b15610c615760405162461bcd60e51b815260206004820152602f60248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e20616c60448201526e1c9958591e481cd8da19591d5b1959608a1b60648201526084016106b1565b600254811015610cc25760405162461bcd60e51b815260206004820152602660248201527f54696d656c6f636b436f6e74726f6c6c65723a20696e73756666696369656e746044820152652064656c617960d01b60648201526084016106b1565b610ccc814261180d565b6000928352600160205260409092209190915550565b610ceb826105db565b610d075760405162461bcd60e51b81526004016106b190611825565b801580610d235750600081815260016020819052604090912054145b6106c45760405162461bcd60e51b815260206004820152602660248201527f54696d656c6f636b436f6e74726f6c6c65723a206d697373696e6720646570656044820152656e64656e637960d01b60648201526084016106b1565b6000846001600160a01b0316848484604051610d9b92919061186f565b60006040518083038185875af1925050503d8060008114610dd8576040519150601f19603f3d011682016040523d82523d6000602084013e610ddd565b606091505b5050905080610e4a5760405162461bcd60e51b815260206004820152603360248201527f54696d656c6f636b436f6e74726f6c6c65723a20756e6465726c79696e6720746044820152721c985b9cd858dd1a5bdb881c995d995c9d1959606a1b60648201526084016106b1565b85877fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b5887878787604051610e81949392919061187f565b60405180910390a350505050505050565b610e9b816105db565b610eb75760405162461bcd60e51b81526004016106b190611825565b600090815260016020819052604090912055565b610ed58282610902565b6106c4576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610f0b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610f598282610902565b156106c4576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606000610fc38360026118b1565b610fce90600261180d565b67ffffffffffffffff811115610fe657610fe66118d0565b6040519080825280601f01601f191660200182016040528015611010576020820181803683370190505b509050600360fc1b8160008151811061102b5761102b61154e565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061105a5761105a61154e565b60200101906001600160f81b031916908160001a905350600061107e8460026118b1565b61108990600161180d565b90505b6001811115611101576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106110bd576110bd61154e565b1a60f81b8282815181106110d3576110d361154e565b60200101906001600160f81b031916908160001a90535060049490941c936110fa816118e6565b905061108c565b5083156105fa5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106b1565b80356001600160a01b038116811461116757600080fd5b919050565b60008083601f84011261117e57600080fd5b50813567ffffffffffffffff81111561119657600080fd5b6020830191508360208285010111156111ae57600080fd5b9250929050565b600080600080600080600060c0888a0312156111d057600080fd5b6111d988611150565b965060208801359550604088013567ffffffffffffffff8111156111fc57600080fd5b6112088a828b0161116c565b989b979a50986060810135976080820135975060a09091013595509350505050565b60006020828403121561123c57600080fd5b81356001600160e01b0319811681146105fa57600080fd5b60008060008060008060a0878903121561126d57600080fd5b61127687611150565b955060208701359450604087013567ffffffffffffffff81111561129957600080fd5b6112a589828a0161116c565b979a9699509760608101359660809091013595509350505050565b6000602082840312156112d257600080fd5b5035919050565b600080604083850312156112ec57600080fd5b823591506112fc60208401611150565b90509250929050565b60008083601f84011261131757600080fd5b50813567ffffffffffffffff81111561132f57600080fd5b6020830191508360208260051b85010111156111ae57600080fd5b600080600080600080600080600060c08a8c03121561136857600080fd5b893567ffffffffffffffff8082111561138057600080fd5b61138c8d838e01611305565b909b50995060208c01359150808211156113a557600080fd5b6113b18d838e01611305565b909950975060408c01359150808211156113ca57600080fd5b506113d78c828d01611305565b9a9d999c50979a969997986060880135976080810135975060a0013595509350505050565b60008060008060008060008060a0898b03121561141857600080fd5b883567ffffffffffffffff8082111561143057600080fd5b61143c8c838d01611305565b909a50985060208b013591508082111561145557600080fd5b6114618c838d01611305565b909850965060408b013591508082111561147a57600080fd5b506114878b828c01611305565b999c989b509699959896976060870135966080013595509350505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b038716815285602082015260a0604082015260006114f660a0830186886114a5565b60608301949094525060800152949350505050565b60208082526023908201527f54696d656c6f636b436f6e74726f6c6c65723a206c656e677468206d69736d616040820152620e8c6d60eb1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561157657600080fd5b6105fa82611150565b6000808335601e1984360301811261159657600080fd5b83018035915067ffffffffffffffff8211156115b157600080fd5b6020019150368190038213156111ae57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016115ee576115ee6115c6565b5060010190565b60008383855260208086019550808560051b8301018460005b8781101561167d57848303601f19018952813536889003601e1901811261163457600080fd5b8701803567ffffffffffffffff81111561164d57600080fd5b80360389131561165c57600080fd5b61166985828885016114a5565b9a86019a945050509083019060010161160e565b5090979650505050505050565b60a0808252810188905260008960c08301825b8b8110156116cb576001600160a01b036116b684611150565b1682526020928301929091019060010161169d565b5083810360208501528881526001600160fb1b038911156116eb57600080fd5b8860051b9150818a60208301378181019150506020810160008152602084830301604085015261171c81888a6115f5565b6060850196909652505050608001529695505050505050565b60005b83811015611750578181015183820152602001611738565b8381111561175f576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161179d816017850160208801611735565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516117ce816028840160208801611735565b01602801949350505050565b60208152600082518060208401526117f9816040850160208701611735565b601f01601f19169190910160400192915050565b60008219821115611820576118206115c6565b500190565b6020808252602a908201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e206973604082015269206e6f7420726561647960b01b606082015260800190565b8183823760009101908152919050565b60018060a01b03851681528360208201526060604082015260006118a76060830184866114a5565b9695505050505050565b60008160001904831182151516156118cb576118cb6115c6565b500290565b634e487b7160e01b600052604160045260246000fd5b6000816118f5576118f56115c6565b50600019019056feb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1a2646970667358221220d5ca05b38a7fdd6ea9b5e78300435aaf1f8eb578af10e2b17cb10aa1b17c41de64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "minDelay", "type": "uint256", "internalType": "uint256"}, {"name": "proposers", "type": "address[]", "internalType": "address[]"}, {"name": "executors", "type": "address[]", "internalType": "address[]"}]}, {"type": "event", "name": "CallExecuted", "inputs": [{"name": "id", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "index", "type": "uint256", "internalType": "uint256", "indexed": true}, {"name": "target", "type": "address", "internalType": "address", "indexed": false}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}], "anonymous": false}, {"type": "event", "name": "CallScheduled", "inputs": [{"name": "id", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "index", "type": "uint256", "internalType": "uint256", "indexed": true}, {"name": "target", "type": "address", "internalType": "address", "indexed": false}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "predecessor", "type": "bytes32", "internalType": "bytes32", "indexed": false}, {"name": "delay", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Cancelled", "inputs": [{"name": "id", "type": "bytes32", "internalType": "bytes32", "indexed": true}], "anonymous": false}, {"type": "event", "name": "MinDelayChange", "inputs": [{"name": "oldDuration", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newDuration", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "RoleAdminChanged", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "previousAdminRole", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "newAdminRole", "type": "bytes32", "internalType": "bytes32", "indexed": true}], "anonymous": false}, {"type": "event", "name": "RoleGranted", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "sender", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "RoleRevoked", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "sender", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "function", "name": "DEFAULT_ADMIN_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "EXECUTOR_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "PROPOSER_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "TIMELOCK_ADMIN_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "cancel", "stateMutability": "nonpayable", "inputs": [{"name": "id", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "target", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "predecessor", "type": "bytes32", "internalType": "bytes32"}, {"name": "salt", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "executeBatch", "stateMutability": "payable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "datas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "predecessor", "type": "bytes32", "internalType": "bytes32"}, {"name": "salt", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "getMinDelay", "stateMutability": "view", "inputs": [], "outputs": [{"name": "duration", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getRoleAdmin", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "getTimestamp", "stateMutability": "view", "inputs": [{"name": "id", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "timestamp", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "grantRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "hasRole", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "hashOperation", "stateMutability": "pure", "inputs": [{"name": "target", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "predecessor", "type": "bytes32", "internalType": "bytes32"}, {"name": "salt", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "hash", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "hashOperationBatch", "stateMutability": "pure", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "datas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "predecessor", "type": "bytes32", "internalType": "bytes32"}, {"name": "salt", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "hash", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "isOperation", "stateMutability": "view", "inputs": [{"name": "id", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "pending", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "isOperationDone", "stateMutability": "view", "inputs": [{"name": "id", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "done", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "isOperationPending", "stateMutability": "view", "inputs": [{"name": "id", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "pending", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "isOperationReady", "stateMutability": "view", "inputs": [{"name": "id", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "ready", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "renounceRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "revokeRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "schedule", "stateMutability": "nonpayable", "inputs": [{"name": "target", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "predecessor", "type": "bytes32", "internalType": "bytes32"}, {"name": "salt", "type": "bytes32", "internalType": "bytes32"}, {"name": "delay", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "scheduleBatch", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "datas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "predecessor", "type": "bytes32", "internalType": "bytes32"}, {"name": "salt", "type": "bytes32", "internalType": "bytes32"}, {"name": "delay", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "updateDelay", "stateMutability": "nonpayable", "inputs": [{"name": "newDelay", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Contract module which acts as a timelocked controller. When set as the owner of an `Ownable` smart contract, it enforces a timelock on all `onlyOwner` maintenance operations. This gives time for users of the controlled contract to exit before a potentially dangerous maintenance operation is applied. By default, this contract is self administered, meaning administration tasks have to go through the timelock process. The proposer (resp executor) role is in charge of proposing (resp executing) operations. A common use case is to position this {TimelockController} as the owner of a smart contract, with a multisig or a DAO as the sole proposer. _Available since v3.3._", "events": {"CallExecuted(bytes32,uint256,address,uint256,bytes)": {"details": "Emitted when a call is performed as part of operation `id`."}, "CallScheduled(bytes32,uint256,address,uint256,bytes,bytes32,uint256)": {"details": "Emitted when a call is scheduled as part of operation `id`."}, "Cancelled(bytes32)": {"details": "Emitted when operation `id` is cancelled."}, "MinDelayChange(uint256,uint256)": {"details": "Emitted when the minimum delay for future operations is modified."}}, "kind": "dev", "methods": {"cancel(bytes32)": {"details": "Cancel an operation. Requirements: - the caller must have the 'proposer' role."}, "constructor": {"details": "Initializes the contract with a given `minDelay`."}, "execute(address,uint256,bytes,bytes32,bytes32)": {"details": "Execute an (ready) operation containing a single transaction. Emits a {CallExecuted} event. Requirements: - the caller must have the 'executor' role."}, "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)": {"details": "Execute an (ready) operation containing a batch of transactions. Emits one {CallExecuted} event per transaction in the batch. Requirements: - the caller must have the 'executor' role."}, "getMinDelay()": {"details": "Returns the minimum delay for an operation to become valid. This value can be changed by executing an operation that calls `updateDelay`."}, "getRoleAdmin(bytes32)": {"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."}, "getTimestamp(bytes32)": {"details": "Returns the timestamp at with an operation becomes ready (0 for unset operations, 1 for done operations)."}, "grantRole(bytes32,address)": {"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."}, "hasRole(bytes32,address)": {"details": "Returns `true` if `account` has been granted `role`."}, "hashOperation(address,uint256,bytes,bytes32,bytes32)": {"details": "Returns the identifier of an operation containing a single transaction."}, "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)": {"details": "Returns the identifier of an operation containing a batch of transactions."}, "isOperation(bytes32)": {"details": "Returns whether an id correspond to a registered operation. This includes both Pending, Ready and Done operations."}, "isOperationDone(bytes32)": {"details": "Returns whether an operation is done or not."}, "isOperationPending(bytes32)": {"details": "Returns whether an operation is pending or not."}, "isOperationReady(bytes32)": {"details": "Returns whether an operation is ready or not."}, "renounceRole(bytes32,address)": {"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."}, "revokeRole(bytes32,address)": {"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}, "schedule(address,uint256,bytes,bytes32,bytes32,uint256)": {"details": "Schedule an operation containing a single transaction. Emits a {CallScheduled} event. Requirements: - the caller must have the 'proposer' role."}, "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)": {"details": "Schedule an operation containing a batch of transactions. Emits one {CallScheduled} event per transaction in the batch. Requirements: - the caller must have the 'proposer' role."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "updateDelay(uint256)": {"details": "Changes the minimum timelock duration for future operations. Emits a {MinDelayChange} event. Requirements: - the caller must be the timelock itself. This can only be achieved by scheduling and later executing an operation where the timelock is the target and the data is the ABI-encoded call to this function."}}, "version": 1}}, "GovernorCompatibilityBravo": {"contractName": "GovernorCompatibilityBravo", "sourceId": "governance/compatibility/GovernorCompatibilityBravo.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "ProposalCanceled", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalCreated", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "proposer", "type": "address", "internalType": "address", "indexed": false}, {"name": "targets", "type": "address[]", "internalType": "address[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "signatures", "type": "string[]", "internalType": "string[]", "indexed": false}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]", "indexed": false}, {"name": "startBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "endBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "description", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalExecuted", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalQueued", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "eta", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VoteCast", "inputs": [{"name": "voter", "type": "address", "internalType": "address", "indexed": true}, {"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "support", "type": "uint8", "internalType": "uint8", "indexed": false}, {"name": "weight", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "reason", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "function", "name": "BALLOT_TYPEHASH", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "COUNTING_MODE", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "cancel", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "castVote", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteBySig", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteWithReason", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "reason", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "getActions", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "signatures", "type": "string[]", "internalType": "string[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}]}, {"type": "function", "name": "getReceipt", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "voter", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "tuple", "components": [{"name": "hasVoted", "type": "bool", "internalType": "bool"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "votes", "type": "uint96", "internalType": "uint96"}], "internalType": "struct IGovernorCompatibilityBravo.Receipt"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "hasVoted", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "hashProposal", "stateMutability": "pure", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "proposalDeadline", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalEta", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalSnapshot", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalThreshold", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposals", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "proposer", "type": "address", "internalType": "address"}, {"name": "eta", "type": "uint256", "internalType": "uint256"}, {"name": "startBlock", "type": "uint256", "internalType": "uint256"}, {"name": "endBlock", "type": "uint256", "internalType": "uint256"}, {"name": "forVotes", "type": "uint256", "internalType": "uint256"}, {"name": "againstVotes", "type": "uint256", "internalType": "uint256"}, {"name": "abstainVotes", "type": "uint256", "internalType": "uint256"}, {"name": "canceled", "type": "bool", "internalType": "bool"}, {"name": "executed", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "signatures", "type": "string[]", "internalType": "string[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "queue", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "queue", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "quorum", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorumVotes", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "enum IGovernor.ProposalState"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "timelock", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "version", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "votingDelay", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "votingPeriod", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {"COUNTING_MODE()": {"notice": "module:voting"}, "getVotes(address,uint256)": {"notice": "module:reputation"}, "quorum(uint256)": {"notice": "module:user-config"}, "votingDelay()": {"notice": "module:user-config"}, "votingPeriod()": {"notice": "module:user-config"}}, "version": 1}, "devdoc": {"details": "Compatibility layer that implements GovernorBravo compatibility on to of {Governor}. This compatibility layer includes a voting system and requires a {IGovernorTimelock} compatible module to be added through inheritance. It does not include token bindings, not does it include any variable upgrade patterns. NOTE: When using this module, you may need to enable the Solidity optimizer to avoid hitting the contract size limit. _Available since v4.3._", "kind": "dev", "methods": {"COUNTING_MODE()": {"details": "A description of the possible `support` values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`. There are 2 standard keys: `support` and `quorum`. - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`. - `quorum=bravo` means that only For votes are counted towards quorum. - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`] JavaScript class."}, "cancel(uint256)": {"details": "Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold."}, "castVote(uint256,uint8)": {"details": "See {IGovernor-castVote}."}, "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {"details": "See {IGovernor-castVoteBySig}."}, "castVoteWithReason(uint256,uint8,string)": {"details": "See {IGovernor-castVoteWithReason}."}, "execute(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-execute}."}, "execute(uint256)": {"details": "See {IGovernorCompatibilityBravo-execute}."}, "getActions(uint256)": {"details": "See {IGovernorCompatibilityBravo-getActions}."}, "getReceipt(uint256,address)": {"details": "See {IGovernorCompatibilityBravo-getReceipt}."}, "getVotes(address,uint256)": {"details": "Voting power of an `account` at a specific `blockNumber`. Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or multiple), {ERC20Votes} tokens."}, "hasVoted(uint256,address)": {"details": "See {IGovernor-hasVoted}."}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."}, "name()": {"details": "See {IGovernor-name}."}, "proposalDeadline(uint256)": {"details": "See {IGovernor-proposalDeadline}."}, "proposalSnapshot(uint256)": {"details": "See {IGovernor-proposalSnapshot}."}, "proposalThreshold()": {"details": "Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_."}, "proposals(uint256)": {"details": "See {IGovernorCompatibilityBravo-proposals}."}, "propose(address[],uint256[],bytes[],string)": {"details": "See {IGovernor-propose}."}, "propose(address[],uint256[],string[],bytes[],string)": {"details": "See {IGovernorCompatibilityBravo-propose}."}, "queue(uint256)": {"details": "See {IGovernorCompatibilityBravo-queue}."}, "quorum(uint256)": {"details": "Minimum number of cast voted required for a proposal to be successful. Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes})."}, "quorumVotes()": {"details": "See {IGovernorCompatibilityBravo-quorumVotes}."}, "state(uint256)": {"details": "See {IGovernor-state}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "version()": {"details": "See {IGovernor-version}."}, "votingDelay()": {"details": "Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts."}, "votingPeriod()": {"details": "Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay."}}, "version": 1}}, "IGovernorCompatibilityBravo": {"contractName": "IGovernorCompatibilityBravo", "sourceId": "governance/compatibility/IGovernorCompatibilityBravo.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "ProposalCanceled", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalCreated", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "proposer", "type": "address", "internalType": "address", "indexed": false}, {"name": "targets", "type": "address[]", "internalType": "address[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "signatures", "type": "string[]", "internalType": "string[]", "indexed": false}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]", "indexed": false}, {"name": "startBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "endBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "description", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalExecuted", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VoteCast", "inputs": [{"name": "voter", "type": "address", "internalType": "address", "indexed": true}, {"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "support", "type": "uint8", "internalType": "uint8", "indexed": false}, {"name": "weight", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "reason", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "function", "name": "COUNTING_MODE", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "cancel", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "castVote", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}], "outputs": [{"name": "balance", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteBySig", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "balance", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteWithReason", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "reason", "type": "string", "internalType": "string"}], "outputs": [{"name": "balance", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "getActions", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "signatures", "type": "string[]", "internalType": "string[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}]}, {"type": "function", "name": "getReceipt", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "voter", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "tuple", "components": [{"name": "hasVoted", "type": "bool", "internalType": "bool"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "votes", "type": "uint96", "internalType": "uint96"}], "internalType": "struct IGovernorCompatibilityBravo.Receipt"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "hasVoted", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "hashProposal", "stateMutability": "pure", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "proposalDeadline", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalSnapshot", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposals", "stateMutability": "view", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "proposer", "type": "address", "internalType": "address"}, {"name": "eta", "type": "uint256", "internalType": "uint256"}, {"name": "startBlock", "type": "uint256", "internalType": "uint256"}, {"name": "endBlock", "type": "uint256", "internalType": "uint256"}, {"name": "forVotes", "type": "uint256", "internalType": "uint256"}, {"name": "againstVotes", "type": "uint256", "internalType": "uint256"}, {"name": "abstainVotes", "type": "uint256", "internalType": "uint256"}, {"name": "canceled", "type": "bool", "internalType": "bool"}, {"name": "executed", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "signatures", "type": "string[]", "internalType": "string[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "queue", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "quorum", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorumVotes", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "enum IGovernor.ProposalState"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "version", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "votingDelay", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "votingPeriod", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}], "userdoc": {"kind": "user", "methods": {"COUNTING_MODE()": {"notice": "module:voting"}, "getVotes(address,uint256)": {"notice": "module:reputation"}, "hasVoted(uint256,address)": {"notice": "module:voting"}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"notice": "module:core"}, "name()": {"notice": "module:core"}, "proposalDeadline(uint256)": {"notice": "module:core"}, "proposalSnapshot(uint256)": {"notice": "module:core"}, "quorum(uint256)": {"notice": "module:user-config"}, "state(uint256)": {"notice": "module:core"}, "version()": {"notice": "module:core"}, "votingDelay()": {"notice": "module:user-config"}, "votingPeriod()": {"notice": "module:user-config"}}, "version": 1}, "devdoc": {"details": "Interface extension that adds missing functions to the {Governor} core to provide `GovernorBravo` compatibility. _Available since v4.3._", "kind": "dev", "methods": {"COUNTING_MODE()": {"details": "A description of the possible `support` values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`. There are 2 standard keys: `support` and `quorum`. - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`. - `quorum=bravo` means that only For votes are counted towards quorum. - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`] JavaScript class."}, "cancel(uint256)": {"details": "Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold."}, "castVote(uint256,uint8)": {"details": "Cast a vote Emits a {VoteCast} event."}, "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {"details": "Cast a vote using the user cryptographic signature. Emits a {VoteCast} event."}, "castVoteWithReason(uint256,uint8,string)": {"details": "Cast a with a reason Emits a {VoteCast} event."}, "execute(address[],uint256[],bytes[],bytes32)": {"details": "Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the deadline to be reached. Emits a {ProposalExecuted} event. Note: some module can modify the requirements for execution, for example by adding an additional timelock."}, "execute(uint256)": {"details": "Part of the Governor Bravo's interface: _\"Executes a queued proposal if eta has passed\"_."}, "getActions(uint256)": {"details": "Part of the Governor Bravo's interface: _\"Gets actions of a proposal\"_."}, "getReceipt(uint256,address)": {"details": "Part of the Governor Bravo's interface: _\"Gets the receipt for a voter on a given proposal\"_."}, "getVotes(address,uint256)": {"details": "Voting power of an `account` at a specific `blockNumber`. Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or multiple), {ERC20Votes} tokens."}, "hasVoted(uint256,address)": {"details": "Returns weither `account` has cast a vote on `proposalId`."}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"details": "Hashing function used to (re)build the proposal id from the proposal details.."}, "name()": {"details": "Name of the governor instance (used in building the ERC712 domain separator)."}, "proposalDeadline(uint256)": {"details": "Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote during this block."}, "proposalSnapshot(uint256)": {"details": "Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the beginning of the following block."}, "proposals(uint256)": {"details": "Part of the Governor Bravo's interface: _\"The official record of all proposals ever proposed\"_."}, "propose(address[],uint256[],bytes[],string)": {"details": "Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends {IGovernor-votingPeriod} blocks after the voting starts. Emits a {ProposalCreated} event."}, "propose(address[],uint256[],string[],bytes[],string)": {"details": "Part of the Governor Bravo's interface: _\"Function used to propose a new proposal\"_."}, "queue(uint256)": {"details": "Part of the Governor Bravo's interface: _\"Queues a proposal of state succeeded\"_."}, "quorum(uint256)": {"details": "Minimum number of cast voted required for a proposal to be successful. Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes})."}, "quorumVotes()": {"details": "Part of the Governor Bravo's interface."}, "state(uint256)": {"details": "Current state of a proposal, following Compound's convention"}, "supportsInterface(bytes4)": {"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}, "version()": {"details": "Version of the governor instance (used in building the ERC712 domain separator). Default: \"1\""}, "votingDelay()": {"details": "Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts."}, "votingPeriod()": {"details": "Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay."}}, "version": 1}}, "GovernorCountingSimple": {"contractName": "GovernorCountingSimple", "sourceId": "governance/extensions/GovernorCountingSimple.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "ProposalCanceled", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalCreated", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "proposer", "type": "address", "internalType": "address", "indexed": false}, {"name": "targets", "type": "address[]", "internalType": "address[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "signatures", "type": "string[]", "internalType": "string[]", "indexed": false}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]", "indexed": false}, {"name": "startBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "endBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "description", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalExecuted", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VoteCast", "inputs": [{"name": "voter", "type": "address", "internalType": "address", "indexed": true}, {"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "support", "type": "uint8", "internalType": "uint8", "indexed": false}, {"name": "weight", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "reason", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "function", "name": "BALLOT_TYPEHASH", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "COUNTING_MODE", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "castVote", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteBySig", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteWithReason", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "reason", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "hasVoted", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "hashProposal", "stateMutability": "pure", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "proposalDeadline", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalSnapshot", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalThreshold", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalVotes", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "againstVotes", "type": "uint256", "internalType": "uint256"}, {"name": "forVotes", "type": "uint256", "internalType": "uint256"}, {"name": "abstainVotes", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorum", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "enum IGovernor.ProposalState"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "version", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "votingDelay", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "votingPeriod", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {"getVotes(address,uint256)": {"notice": "module:reputation"}, "quorum(uint256)": {"notice": "module:user-config"}, "votingDelay()": {"notice": "module:user-config"}, "votingPeriod()": {"notice": "module:user-config"}}, "version": 1}, "devdoc": {"details": "Extension of {Governor} for simple, 3 options, vote counting. _Available since v4.3._", "kind": "dev", "methods": {"COUNTING_MODE()": {"details": "See {IGovernor-COUNTING_MODE}."}, "castVote(uint256,uint8)": {"details": "See {IGovernor-castVote}."}, "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {"details": "See {IGovernor-castVoteBySig}."}, "castVoteWithReason(uint256,uint8,string)": {"details": "See {IGovernor-castVoteWithReason}."}, "execute(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-execute}."}, "getVotes(address,uint256)": {"details": "Voting power of an `account` at a specific `blockNumber`. Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or multiple), {ERC20Votes} tokens."}, "hasVoted(uint256,address)": {"details": "See {IGovernor-hasVoted}."}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."}, "name()": {"details": "See {IGovernor-name}."}, "proposalDeadline(uint256)": {"details": "See {IGovernor-proposalDeadline}."}, "proposalSnapshot(uint256)": {"details": "See {IGovernor-proposalSnapshot}."}, "proposalThreshold()": {"details": "Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_."}, "proposalVotes(uint256)": {"details": "Accessor to the internal vote counts."}, "propose(address[],uint256[],bytes[],string)": {"details": "See {IGovernor-propose}."}, "quorum(uint256)": {"details": "Minimum number of cast voted required for a proposal to be successful. Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes})."}, "state(uint256)": {"details": "See {IGovernor-state}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "version()": {"details": "See {IGovernor-version}."}, "votingDelay()": {"details": "Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts."}, "votingPeriod()": {"details": "Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay."}}, "version": 1}}, "GovernorProposalThreshold": {"contractName": "GovernorProposalThreshold", "sourceId": "governance/extensions/GovernorProposalThreshold.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "ProposalCanceled", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalCreated", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "proposer", "type": "address", "internalType": "address", "indexed": false}, {"name": "targets", "type": "address[]", "internalType": "address[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "signatures", "type": "string[]", "internalType": "string[]", "indexed": false}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]", "indexed": false}, {"name": "startBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "endBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "description", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalExecuted", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VoteCast", "inputs": [{"name": "voter", "type": "address", "internalType": "address", "indexed": true}, {"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "support", "type": "uint8", "internalType": "uint8", "indexed": false}, {"name": "weight", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "reason", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "function", "name": "BALLOT_TYPEHASH", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "COUNTING_MODE", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "castVote", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteBySig", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteWithReason", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "reason", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "hasVoted", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "hashProposal", "stateMutability": "pure", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "proposalDeadline", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalSnapshot", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalThreshold", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorum", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "enum IGovernor.ProposalState"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "version", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "votingDelay", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "votingPeriod", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {"COUNTING_MODE()": {"notice": "module:voting"}, "getVotes(address,uint256)": {"notice": "module:reputation"}, "hasVoted(uint256,address)": {"notice": "module:voting"}, "quorum(uint256)": {"notice": "module:user-config"}, "votingDelay()": {"notice": "module:user-config"}, "votingPeriod()": {"notice": "module:user-config"}}, "version": 1}, "devdoc": {"details": "Extension of {Governor} for proposal restriction to token holders with a minimum balance. _Available since v4.3._ _Deprecated since v4.4._", "kind": "dev", "methods": {"COUNTING_MODE()": {"details": "A description of the possible `support` values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`. There are 2 standard keys: `support` and `quorum`. - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`. - `quorum=bravo` means that only For votes are counted towards quorum. - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`] JavaScript class."}, "castVote(uint256,uint8)": {"details": "See {IGovernor-castVote}."}, "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {"details": "See {IGovernor-castVoteBySig}."}, "castVoteWithReason(uint256,uint8,string)": {"details": "See {IGovernor-castVoteWithReason}."}, "execute(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-execute}."}, "getVotes(address,uint256)": {"details": "Voting power of an `account` at a specific `blockNumber`. Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or multiple), {ERC20Votes} tokens."}, "hasVoted(uint256,address)": {"details": "Returns weither `account` has cast a vote on `proposalId`."}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."}, "name()": {"details": "See {IGovernor-name}."}, "proposalDeadline(uint256)": {"details": "See {IGovernor-proposalDeadline}."}, "proposalSnapshot(uint256)": {"details": "See {IGovernor-proposalSnapshot}."}, "proposalThreshold()": {"details": "Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_."}, "propose(address[],uint256[],bytes[],string)": {"details": "See {IGovernor-propose}."}, "quorum(uint256)": {"details": "Minimum number of cast voted required for a proposal to be successful. Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes})."}, "state(uint256)": {"details": "See {IGovernor-state}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "version()": {"details": "See {IGovernor-version}."}, "votingDelay()": {"details": "Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts."}, "votingPeriod()": {"details": "Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay."}}, "version": 1}}, "GovernorSettings": {"contractName": "GovernorSettings", "sourceId": "governance/extensions/GovernorSettings.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "ProposalCanceled", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalCreated", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "proposer", "type": "address", "internalType": "address", "indexed": false}, {"name": "targets", "type": "address[]", "internalType": "address[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "signatures", "type": "string[]", "internalType": "string[]", "indexed": false}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]", "indexed": false}, {"name": "startBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "endBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "description", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalExecuted", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalThresholdSet", "inputs": [{"name": "oldProposalThreshold", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newProposalThreshold", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VoteCast", "inputs": [{"name": "voter", "type": "address", "internalType": "address", "indexed": true}, {"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "support", "type": "uint8", "internalType": "uint8", "indexed": false}, {"name": "weight", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "reason", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VotingDelaySet", "inputs": [{"name": "oldVotingDelay", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newVotingDelay", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VotingPeriodSet", "inputs": [{"name": "oldVotingPeriod", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newVotingPeriod", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "BALLOT_TYPEHASH", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "COUNTING_MODE", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "castVote", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteBySig", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteWithReason", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "reason", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "hasVoted", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "hashProposal", "stateMutability": "pure", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "proposalDeadline", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalSnapshot", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalThreshold", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorum", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "setProposalThreshold", "stateMutability": "nonpayable", "inputs": [{"name": "newProposalThreshold", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "setVotingDelay", "stateMutability": "nonpayable", "inputs": [{"name": "newVotingDelay", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "setVotingPeriod", "stateMutability": "nonpayable", "inputs": [{"name": "newVotingPeriod", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "enum IGovernor.ProposalState"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "version", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "votingDelay", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "votingPeriod", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {"COUNTING_MODE()": {"notice": "module:voting"}, "getVotes(address,uint256)": {"notice": "module:reputation"}, "hasVoted(uint256,address)": {"notice": "module:voting"}, "quorum(uint256)": {"notice": "module:user-config"}}, "version": 1}, "devdoc": {"details": "Extension of {Governor} for settings updatable through governance. _Available since v4.4._", "kind": "dev", "methods": {"COUNTING_MODE()": {"details": "A description of the possible `support` values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`. There are 2 standard keys: `support` and `quorum`. - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`. - `quorum=bravo` means that only For votes are counted towards quorum. - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`] JavaScript class."}, "castVote(uint256,uint8)": {"details": "See {IGovernor-castVote}."}, "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {"details": "See {IGovernor-castVoteBySig}."}, "castVoteWithReason(uint256,uint8,string)": {"details": "See {IGovernor-castVoteWithReason}."}, "constructor": {"details": "Initialize the governance parameters."}, "execute(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-execute}."}, "getVotes(address,uint256)": {"details": "Voting power of an `account` at a specific `blockNumber`. Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or multiple), {ERC20Votes} tokens."}, "hasVoted(uint256,address)": {"details": "Returns weither `account` has cast a vote on `proposalId`."}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."}, "name()": {"details": "See {IGovernor-name}."}, "proposalDeadline(uint256)": {"details": "See {IGovernor-proposalDeadline}."}, "proposalSnapshot(uint256)": {"details": "See {IGovernor-proposalSnapshot}."}, "proposalThreshold()": {"details": "See {Governor-proposalThreshold}."}, "propose(address[],uint256[],bytes[],string)": {"details": "See {IGovernor-propose}."}, "quorum(uint256)": {"details": "Minimum number of cast voted required for a proposal to be successful. Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes})."}, "setProposalThreshold(uint256)": {"details": "Update the proposal threshold. This operation can only be performed through a governance proposal. Emits a {ProposalThresholdSet} event."}, "setVotingDelay(uint256)": {"details": "Update the voting delay. This operation can only be performed through a governance proposal. Emits a {VotingDelaySet} event."}, "setVotingPeriod(uint256)": {"details": "Update the voting period. This operation can only be performed through a governance proposal. Emits a {VotingPeriodSet} event."}, "state(uint256)": {"details": "See {IGovernor-state}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "version()": {"details": "See {IGovernor-version}."}, "votingDelay()": {"details": "See {IGovernor-votingDelay}."}, "votingPeriod()": {"details": "See {IGovernor-votingPeriod}."}}, "version": 1}}, "GovernorTimelockCompound": {"contractName": "GovernorTimelockCompound", "sourceId": "governance/extensions/GovernorTimelockCompound.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "ProposalCanceled", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalCreated", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "proposer", "type": "address", "internalType": "address", "indexed": false}, {"name": "targets", "type": "address[]", "internalType": "address[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "signatures", "type": "string[]", "internalType": "string[]", "indexed": false}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]", "indexed": false}, {"name": "startBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "endBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "description", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalExecuted", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalQueued", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "eta", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TimelockChange", "inputs": [{"name": "oldTimelock", "type": "address", "internalType": "address", "indexed": false}, {"name": "newTimelock", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VoteCast", "inputs": [{"name": "voter", "type": "address", "internalType": "address", "indexed": true}, {"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "support", "type": "uint8", "internalType": "uint8", "indexed": false}, {"name": "weight", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "reason", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "function", "name": "BALLOT_TYPEHASH", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "COUNTING_MODE", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "__acceptAdmin", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "castVote", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteBySig", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteWithReason", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "reason", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "hasVoted", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "hashProposal", "stateMutability": "pure", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "proposalDeadline", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalEta", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalSnapshot", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalThreshold", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "queue", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorum", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "enum IGovernor.ProposalState"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "timelock", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "updateTimelock", "stateMutability": "nonpayable", "inputs": [{"name": "newTimelock", "type": "address", "internalType": "contract ICompoundTimelock"}], "outputs": []}, {"type": "function", "name": "version", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "votingDelay", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "votingPeriod", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {"COUNTING_MODE()": {"notice": "module:voting"}, "getVotes(address,uint256)": {"notice": "module:reputation"}, "hasVoted(uint256,address)": {"notice": "module:voting"}, "quorum(uint256)": {"notice": "module:user-config"}, "votingDelay()": {"notice": "module:user-config"}, "votingPeriod()": {"notice": "module:user-config"}}, "version": 1}, "devdoc": {"details": "Extension of {Governor} that binds the execution process to a Compound Timelock. This adds a delay, enforced by the external timelock to all successful proposal (in addition to the voting duration). The {Governor} needs to be the admin of the timelock for any operation to be performed. A public, unrestricted, {GovernorTimelockCompound-__acceptAdmin} is available to accept ownership of the timelock. Using this model means the proposal will be operated by the {TimelockController} and not by the {Governor}. Thus, the assets and permissions must be attached to the {TimelockController}. Any asset sent to the {Governor} will be inaccessible. _Available since v4.3._", "events": {"TimelockChange(address,address)": {"details": "Emitted when the timelock controller used for proposal execution is modified."}}, "kind": "dev", "methods": {"COUNTING_MODE()": {"details": "A description of the possible `support` values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`. There are 2 standard keys: `support` and `quorum`. - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`. - `quorum=bravo` means that only For votes are counted towards quorum. - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`] JavaScript class."}, "__acceptAdmin()": {"details": "Accept admin right over the timelock."}, "castVote(uint256,uint8)": {"details": "See {IGovernor-castVote}."}, "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {"details": "See {IGovernor-castVoteBySig}."}, "castVoteWithReason(uint256,uint8,string)": {"details": "See {IGovernor-castVoteWithReason}."}, "constructor": {"details": "Set the timelock."}, "execute(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-execute}."}, "getVotes(address,uint256)": {"details": "Voting power of an `account` at a specific `blockNumber`. Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or multiple), {ERC20Votes} tokens."}, "hasVoted(uint256,address)": {"details": "Returns weither `account` has cast a vote on `proposalId`."}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."}, "name()": {"details": "See {IGovernor-name}."}, "proposalDeadline(uint256)": {"details": "See {IGovernor-proposalDeadline}."}, "proposalEta(uint256)": {"details": "Public accessor to check the eta of a queued proposal"}, "proposalSnapshot(uint256)": {"details": "See {IGovernor-proposalSnapshot}."}, "proposalThreshold()": {"details": "Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_."}, "propose(address[],uint256[],bytes[],string)": {"details": "See {IGovernor-propose}."}, "queue(address[],uint256[],bytes[],bytes32)": {"details": "Function to queue a proposal to the timelock."}, "quorum(uint256)": {"details": "Minimum number of cast voted required for a proposal to be successful. Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes})."}, "state(uint256)": {"details": "Overriden version of the {Governor-state} function with added support for the `Queued` and `Expired` status."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "timelock()": {"details": "Public accessor to check the address of the timelock"}, "updateTimelock(address)": {"details": "Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates must be proposed, scheduled and executed using the {Governor} workflow. For security reason, the timelock must be handed over to another admin before setting up a new one. The two operations (hand over the timelock) and do the update can be batched in a single proposal. Note that if the timelock admin has been handed over in a previous operation, we refuse updates made through the timelock if admin of the timelock has already been accepted and the operation is executed outside the scope of governance."}, "version()": {"details": "See {IGovernor-version}."}, "votingDelay()": {"details": "Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts."}, "votingPeriod()": {"details": "Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay."}}, "version": 1}}, "ICompoundTimelock": {"contractName": "ICompoundTimelock", "sourceId": "governance/extensions/GovernorTimelockCompound.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "GRACE_PERIOD", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "MAXIMUM_DELAY", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "MINIMUM_DELAY", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "acceptAdmin", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "admin", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "cancelTransaction", "stateMutability": "nonpayable", "inputs": [{"name": "target", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "signature", "type": "string", "internalType": "string"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "eta", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "delay", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "executeTransaction", "stateMutability": "payable", "inputs": [{"name": "target", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "signature", "type": "string", "internalType": "string"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "eta", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bytes", "internalType": "bytes"}]}, {"type": "function", "name": "pendingAdmin", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "queueTransaction", "stateMutability": "nonpayable", "inputs": [{"name": "target", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "signature", "type": "string", "internalType": "string"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "eta", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "queuedTransactions", "stateMutability": "view", "inputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "setDelay", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "setPendingAdmin", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {}, "notice": "https://github.com/compound-finance/compound-protocol/blob/master/contracts/Timelock.sol[Compound's timelock] interface", "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "GovernorTimelockControl": {"contractName": "GovernorTimelockControl", "sourceId": "governance/extensions/GovernorTimelockControl.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "ProposalCanceled", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalCreated", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "proposer", "type": "address", "internalType": "address", "indexed": false}, {"name": "targets", "type": "address[]", "internalType": "address[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "signatures", "type": "string[]", "internalType": "string[]", "indexed": false}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]", "indexed": false}, {"name": "startBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "endBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "description", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalExecuted", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalQueued", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "eta", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TimelockChange", "inputs": [{"name": "oldTimelock", "type": "address", "internalType": "address", "indexed": false}, {"name": "newTimelock", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VoteCast", "inputs": [{"name": "voter", "type": "address", "internalType": "address", "indexed": true}, {"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "support", "type": "uint8", "internalType": "uint8", "indexed": false}, {"name": "weight", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "reason", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "function", "name": "BALLOT_TYPEHASH", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "COUNTING_MODE", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "castVote", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteBySig", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteWithReason", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "reason", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "hasVoted", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "hashProposal", "stateMutability": "pure", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "proposalDeadline", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalEta", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalSnapshot", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalThreshold", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "queue", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorum", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "enum IGovernor.ProposalState"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "timelock", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "updateTimelock", "stateMutability": "nonpayable", "inputs": [{"name": "newTimelock", "type": "address", "internalType": "contract TimelockController"}], "outputs": []}, {"type": "function", "name": "version", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "votingDelay", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "votingPeriod", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {"COUNTING_MODE()": {"notice": "module:voting"}, "getVotes(address,uint256)": {"notice": "module:reputation"}, "hasVoted(uint256,address)": {"notice": "module:voting"}, "quorum(uint256)": {"notice": "module:user-config"}, "votingDelay()": {"notice": "module:user-config"}, "votingPeriod()": {"notice": "module:user-config"}}, "version": 1}, "devdoc": {"details": "Extension of {Governor} that binds the execution process to an instance of {TimelockController}. This adds a delay, enforced by the {TimelockController} to all successful proposal (in addition to the voting duration). The {Governor} needs the proposer (an ideally the executor) roles for the {Governor} to work properly. Using this model means the proposal will be operated by the {TimelockController} and not by the {Governor}. Thus, the assets and permissions must be attached to the {TimelockController}. Any asset sent to the {Governor} will be inaccessible. _Available since v4.3._", "events": {"TimelockChange(address,address)": {"details": "Emitted when the timelock controller used for proposal execution is modified."}}, "kind": "dev", "methods": {"COUNTING_MODE()": {"details": "A description of the possible `support` values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`. There are 2 standard keys: `support` and `quorum`. - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`. - `quorum=bravo` means that only For votes are counted towards quorum. - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`] JavaScript class."}, "castVote(uint256,uint8)": {"details": "See {IGovernor-castVote}."}, "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {"details": "See {IGovernor-castVoteBySig}."}, "castVoteWithReason(uint256,uint8,string)": {"details": "See {IGovernor-castVoteWithReason}."}, "constructor": {"details": "Set the timelock."}, "execute(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-execute}."}, "getVotes(address,uint256)": {"details": "Voting power of an `account` at a specific `blockNumber`. Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or multiple), {ERC20Votes} tokens."}, "hasVoted(uint256,address)": {"details": "Returns weither `account` has cast a vote on `proposalId`."}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."}, "name()": {"details": "See {IGovernor-name}."}, "proposalDeadline(uint256)": {"details": "See {IGovernor-proposalDeadline}."}, "proposalEta(uint256)": {"details": "Public accessor to check the eta of a queued proposal"}, "proposalSnapshot(uint256)": {"details": "See {IGovernor-proposalSnapshot}."}, "proposalThreshold()": {"details": "Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_."}, "propose(address[],uint256[],bytes[],string)": {"details": "See {IGovernor-propose}."}, "queue(address[],uint256[],bytes[],bytes32)": {"details": "Function to queue a proposal to the timelock."}, "quorum(uint256)": {"details": "Minimum number of cast voted required for a proposal to be successful. Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes})."}, "state(uint256)": {"details": "Overriden version of the {Governor-state} function with added support for the `Queued` status."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "timelock()": {"details": "Public accessor to check the address of the timelock"}, "updateTimelock(address)": {"details": "Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates must be proposed, scheduled and executed using the {Governor} workflow."}, "version()": {"details": "See {IGovernor-version}."}, "votingDelay()": {"details": "Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts."}, "votingPeriod()": {"details": "Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay."}}, "version": 1}}, "GovernorVotes": {"contractName": "GovernorVotes", "sourceId": "governance/extensions/GovernorVotes.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "ProposalCanceled", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalCreated", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "proposer", "type": "address", "internalType": "address", "indexed": false}, {"name": "targets", "type": "address[]", "internalType": "address[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "signatures", "type": "string[]", "internalType": "string[]", "indexed": false}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]", "indexed": false}, {"name": "startBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "endBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "description", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalExecuted", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VoteCast", "inputs": [{"name": "voter", "type": "address", "internalType": "address", "indexed": true}, {"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "support", "type": "uint8", "internalType": "uint8", "indexed": false}, {"name": "weight", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "reason", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "function", "name": "BALLOT_TYPEHASH", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "COUNTING_MODE", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "castVote", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteBySig", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteWithReason", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "reason", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "hasVoted", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "hashProposal", "stateMutability": "pure", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "proposalDeadline", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalSnapshot", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalThreshold", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorum", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "enum IGovernor.ProposalState"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "token", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "contract ERC20Votes"}]}, {"type": "function", "name": "version", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "votingDelay", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "votingPeriod", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {"COUNTING_MODE()": {"notice": "module:voting"}, "getVotes(address,uint256)": {"notice": "Read the voting weight from the token's built in snapshot mechanism (see {IGovernor-getVotes})."}, "hasVoted(uint256,address)": {"notice": "module:voting"}, "quorum(uint256)": {"notice": "module:user-config"}, "votingDelay()": {"notice": "module:user-config"}, "votingPeriod()": {"notice": "module:user-config"}}, "version": 1}, "devdoc": {"details": "Extension of {Governor} for voting weight extraction from an {ERC20Votes} token. _Available since v4.3._", "kind": "dev", "methods": {"COUNTING_MODE()": {"details": "A description of the possible `support` values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`. There are 2 standard keys: `support` and `quorum`. - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`. - `quorum=bravo` means that only For votes are counted towards quorum. - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`] JavaScript class."}, "castVote(uint256,uint8)": {"details": "See {IGovernor-castVote}."}, "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {"details": "See {IGovernor-castVoteBySig}."}, "castVoteWithReason(uint256,uint8,string)": {"details": "See {IGovernor-castVoteWithReason}."}, "execute(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-execute}."}, "hasVoted(uint256,address)": {"details": "Returns weither `account` has cast a vote on `proposalId`."}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."}, "name()": {"details": "See {IGovernor-name}."}, "proposalDeadline(uint256)": {"details": "See {IGovernor-proposalDeadline}."}, "proposalSnapshot(uint256)": {"details": "See {IGovernor-proposalSnapshot}."}, "proposalThreshold()": {"details": "Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_."}, "propose(address[],uint256[],bytes[],string)": {"details": "See {IGovernor-propose}."}, "quorum(uint256)": {"details": "Minimum number of cast voted required for a proposal to be successful. Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes})."}, "state(uint256)": {"details": "See {IGovernor-state}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "version()": {"details": "See {IGovernor-version}."}, "votingDelay()": {"details": "Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts."}, "votingPeriod()": {"details": "Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay."}}, "version": 1}}, "GovernorVotesComp": {"contractName": "GovernorVotesComp", "sourceId": "governance/extensions/GovernorVotesComp.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "ProposalCanceled", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalCreated", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "proposer", "type": "address", "internalType": "address", "indexed": false}, {"name": "targets", "type": "address[]", "internalType": "address[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "signatures", "type": "string[]", "internalType": "string[]", "indexed": false}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]", "indexed": false}, {"name": "startBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "endBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "description", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalExecuted", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VoteCast", "inputs": [{"name": "voter", "type": "address", "internalType": "address", "indexed": true}, {"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "support", "type": "uint8", "internalType": "uint8", "indexed": false}, {"name": "weight", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "reason", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "function", "name": "BALLOT_TYPEHASH", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "COUNTING_MODE", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "castVote", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteBySig", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteWithReason", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "reason", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "hasVoted", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "hashProposal", "stateMutability": "pure", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "proposalDeadline", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalSnapshot", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalThreshold", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorum", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "enum IGovernor.ProposalState"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "token", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "contract ERC20VotesComp"}]}, {"type": "function", "name": "version", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "votingDelay", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "votingPeriod", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {"COUNTING_MODE()": {"notice": "module:voting"}, "getVotes(address,uint256)": {"notice": "Read the voting weight from the token's built in snapshot mechanism (see {IGovernor-getVotes})."}, "hasVoted(uint256,address)": {"notice": "module:voting"}, "quorum(uint256)": {"notice": "module:user-config"}, "votingDelay()": {"notice": "module:user-config"}, "votingPeriod()": {"notice": "module:user-config"}}, "version": 1}, "devdoc": {"details": "Extension of {Governor} for voting weight extraction from a Comp token. _Available since v4.3._", "kind": "dev", "methods": {"COUNTING_MODE()": {"details": "A description of the possible `support` values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`. There are 2 standard keys: `support` and `quorum`. - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`. - `quorum=bravo` means that only For votes are counted towards quorum. - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`] JavaScript class."}, "castVote(uint256,uint8)": {"details": "See {IGovernor-castVote}."}, "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {"details": "See {IGovernor-castVoteBySig}."}, "castVoteWithReason(uint256,uint8,string)": {"details": "See {IGovernor-castVoteWithReason}."}, "execute(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-execute}."}, "hasVoted(uint256,address)": {"details": "Returns weither `account` has cast a vote on `proposalId`."}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."}, "name()": {"details": "See {IGovernor-name}."}, "proposalDeadline(uint256)": {"details": "See {IGovernor-proposalDeadline}."}, "proposalSnapshot(uint256)": {"details": "See {IGovernor-proposalSnapshot}."}, "proposalThreshold()": {"details": "Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_."}, "propose(address[],uint256[],bytes[],string)": {"details": "See {IGovernor-propose}."}, "quorum(uint256)": {"details": "Minimum number of cast voted required for a proposal to be successful. Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes})."}, "state(uint256)": {"details": "See {IGovernor-state}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "version()": {"details": "See {IGovernor-version}."}, "votingDelay()": {"details": "Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts."}, "votingPeriod()": {"details": "Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay."}}, "version": 1}}, "GovernorVotesQuorumFraction": {"contractName": "GovernorVotesQuorumFraction", "sourceId": "governance/extensions/GovernorVotesQuorumFraction.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "ProposalCanceled", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalCreated", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "proposer", "type": "address", "internalType": "address", "indexed": false}, {"name": "targets", "type": "address[]", "internalType": "address[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "signatures", "type": "string[]", "internalType": "string[]", "indexed": false}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]", "indexed": false}, {"name": "startBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "endBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "description", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalExecuted", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "QuorumNumeratorUpdated", "inputs": [{"name": "oldQuorumNumerator", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newQuorumNumerator", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VoteCast", "inputs": [{"name": "voter", "type": "address", "internalType": "address", "indexed": true}, {"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "support", "type": "uint8", "internalType": "uint8", "indexed": false}, {"name": "weight", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "reason", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "function", "name": "BALLOT_TYPEHASH", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "COUNTING_MODE", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "castVote", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteBySig", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteWithReason", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "reason", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "hasVoted", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "hashProposal", "stateMutability": "pure", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "proposalDeadline", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalSnapshot", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalThreshold", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorum", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorumDenominator", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorumNumerator", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "enum IGovernor.ProposalState"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "token", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "contract ERC20Votes"}]}, {"type": "function", "name": "updateQuorumNumerator", "stateMutability": "nonpayable", "inputs": [{"name": "newQuorumNumerator", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "version", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "votingDelay", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "votingPeriod", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {"COUNTING_MODE()": {"notice": "module:voting"}, "getVotes(address,uint256)": {"notice": "Read the voting weight from the token's built in snapshot mechanism (see {IGovernor-getVotes})."}, "hasVoted(uint256,address)": {"notice": "module:voting"}, "quorum(uint256)": {"notice": "module:user-config"}, "votingDelay()": {"notice": "module:user-config"}, "votingPeriod()": {"notice": "module:user-config"}}, "version": 1}, "devdoc": {"details": "Extension of {Governor} for voting weight extraction from an {ERC20Votes} token and a quorum expressed as a fraction of the total supply. _Available since v4.3._", "kind": "dev", "methods": {"COUNTING_MODE()": {"details": "A description of the possible `support` values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`. There are 2 standard keys: `support` and `quorum`. - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`. - `quorum=bravo` means that only For votes are counted towards quorum. - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`] JavaScript class."}, "castVote(uint256,uint8)": {"details": "See {IGovernor-castVote}."}, "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {"details": "See {IGovernor-castVoteBySig}."}, "castVoteWithReason(uint256,uint8,string)": {"details": "See {IGovernor-castVoteWithReason}."}, "execute(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-execute}."}, "hasVoted(uint256,address)": {"details": "Returns weither `account` has cast a vote on `proposalId`."}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."}, "name()": {"details": "See {IGovernor-name}."}, "proposalDeadline(uint256)": {"details": "See {IGovernor-proposalDeadline}."}, "proposalSnapshot(uint256)": {"details": "See {IGovernor-proposalSnapshot}."}, "proposalThreshold()": {"details": "Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_."}, "propose(address[],uint256[],bytes[],string)": {"details": "See {IGovernor-propose}."}, "quorum(uint256)": {"details": "Minimum number of cast voted required for a proposal to be successful. Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes})."}, "state(uint256)": {"details": "See {IGovernor-state}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "version()": {"details": "See {IGovernor-version}."}, "votingDelay()": {"details": "Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts."}, "votingPeriod()": {"details": "Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay."}}, "version": 1}}, "IGovernorTimelock": {"contractName": "IGovernorTimelock", "sourceId": "governance/extensions/IGovernorTimelock.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "ProposalCanceled", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalCreated", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "proposer", "type": "address", "internalType": "address", "indexed": false}, {"name": "targets", "type": "address[]", "internalType": "address[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "signatures", "type": "string[]", "internalType": "string[]", "indexed": false}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]", "indexed": false}, {"name": "startBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "endBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "description", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalExecuted", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalQueued", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "eta", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VoteCast", "inputs": [{"name": "voter", "type": "address", "internalType": "address", "indexed": true}, {"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "support", "type": "uint8", "internalType": "uint8", "indexed": false}, {"name": "weight", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "reason", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "function", "name": "COUNTING_MODE", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "castVote", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}], "outputs": [{"name": "balance", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteBySig", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "balance", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteWithReason", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "reason", "type": "string", "internalType": "string"}], "outputs": [{"name": "balance", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "hasVoted", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "hashProposal", "stateMutability": "pure", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "proposalDeadline", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalEta", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalSnapshot", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "queue", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorum", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "enum IGovernor.ProposalState"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "timelock", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "version", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "votingDelay", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "votingPeriod", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}], "userdoc": {"kind": "user", "methods": {"COUNTING_MODE()": {"notice": "module:voting"}, "getVotes(address,uint256)": {"notice": "module:reputation"}, "hasVoted(uint256,address)": {"notice": "module:voting"}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"notice": "module:core"}, "name()": {"notice": "module:core"}, "proposalDeadline(uint256)": {"notice": "module:core"}, "proposalSnapshot(uint256)": {"notice": "module:core"}, "quorum(uint256)": {"notice": "module:user-config"}, "state(uint256)": {"notice": "module:core"}, "version()": {"notice": "module:core"}, "votingDelay()": {"notice": "module:user-config"}, "votingPeriod()": {"notice": "module:user-config"}}, "version": 1}, "devdoc": {"details": "Extension of the {IGovernor} for timelock supporting modules. _Available since v4.3._", "kind": "dev", "methods": {"COUNTING_MODE()": {"details": "A description of the possible `support` values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`. There are 2 standard keys: `support` and `quorum`. - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`. - `quorum=bravo` means that only For votes are counted towards quorum. - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`] JavaScript class."}, "castVote(uint256,uint8)": {"details": "Cast a vote Emits a {VoteCast} event."}, "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {"details": "Cast a vote using the user cryptographic signature. Emits a {VoteCast} event."}, "castVoteWithReason(uint256,uint8,string)": {"details": "Cast a with a reason Emits a {VoteCast} event."}, "execute(address[],uint256[],bytes[],bytes32)": {"details": "Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the deadline to be reached. Emits a {ProposalExecuted} event. Note: some module can modify the requirements for execution, for example by adding an additional timelock."}, "getVotes(address,uint256)": {"details": "Voting power of an `account` at a specific `blockNumber`. Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or multiple), {ERC20Votes} tokens."}, "hasVoted(uint256,address)": {"details": "Returns weither `account` has cast a vote on `proposalId`."}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"details": "Hashing function used to (re)build the proposal id from the proposal details.."}, "name()": {"details": "Name of the governor instance (used in building the ERC712 domain separator)."}, "proposalDeadline(uint256)": {"details": "Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote during this block."}, "proposalSnapshot(uint256)": {"details": "Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the beginning of the following block."}, "propose(address[],uint256[],bytes[],string)": {"details": "Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends {IGovernor-votingPeriod} blocks after the voting starts. Emits a {ProposalCreated} event."}, "quorum(uint256)": {"details": "Minimum number of cast voted required for a proposal to be successful. Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes})."}, "state(uint256)": {"details": "Current state of a proposal, following Compound's convention"}, "supportsInterface(bytes4)": {"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}, "version()": {"details": "Version of the governor instance (used in building the ERC712 domain separator). Default: \"1\""}, "votingDelay()": {"details": "Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts."}, "votingPeriod()": {"details": "Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay."}}, "version": 1}}, "IERC1271": {"contractName": "IERC1271", "sourceId": "interfaces/IERC1271.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "isValidSignature", "stateMutability": "view", "inputs": [{"name": "hash", "type": "bytes32", "internalType": "bytes32"}, {"name": "signature", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "magicValue", "type": "bytes4", "internalType": "bytes4"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Interface of the ERC1271 standard signature validation method for contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271]. _Available since v4.1._", "kind": "dev", "methods": {"isValidSignature(bytes32,bytes)": {"details": "Should return whether the signature provided is valid for the provided data", "params": {"hash": "Hash of the data to be signed", "signature": "Signature byte array associated with _data"}}}, "version": 1}}, "IERC1363": {"contractName": "IERC1363", "sourceId": "interfaces/IERC1363.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "approveAndCall", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "approveAndCall", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferAndCall", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferAndCall", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFromAndCall", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFromAndCall", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"allowance(address,address)": {"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."}, "approve(address,uint256)": {"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."}, "approveAndCall(address,uint256)": {"details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender and then call `onApprovalReceived` on spender.", "params": {"spender": "address The address which will spend the funds", "value": "uint256 The amount of tokens to be spent"}}, "approveAndCall(address,uint256,bytes)": {"details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender and then call `onApprovalReceived` on spender.", "params": {"data": "bytes Additional data with no specified format, sent in call to `spender`", "spender": "address The address which will spend the funds", "value": "uint256 The amount of tokens to be spent"}}, "balanceOf(address)": {"details": "Returns the amount of tokens owned by `account`."}, "supportsInterface(bytes4)": {"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}, "totalSupply()": {"details": "Returns the amount of tokens in existence."}, "transfer(address,uint256)": {"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}, "transferAndCall(address,uint256)": {"details": "Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver", "params": {"to": "address The address which you want to transfer to", "value": "uint256 The amount of tokens to be transferred"}, "returns": {"_0": "true unless throwing"}}, "transferAndCall(address,uint256,bytes)": {"details": "Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver", "params": {"data": "bytes Additional data with no specified format, sent in call to `to`", "to": "address The address which you want to transfer to", "value": "uint256 The amount of tokens to be transferred"}, "returns": {"_0": "true unless throwing"}}, "transferFrom(address,address,uint256)": {"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}, "transferFromAndCall(address,address,uint256)": {"details": "Transfer tokens from one address to another and then call `onTransferReceived` on receiver", "params": {"from": "address The address which you want to send tokens from", "to": "address The address which you want to transfer to", "value": "uint256 The amount of tokens to be transferred"}, "returns": {"_0": "true unless throwing"}}, "transferFromAndCall(address,address,uint256,bytes)": {"details": "Transfer tokens from one address to another and then call `onTransferReceived` on receiver", "params": {"data": "bytes Additional data with no specified format, sent in call to `to`", "from": "address The address which you want to send tokens from", "to": "address The address which you want to transfer to", "value": "uint256 The amount of tokens to be transferred"}, "returns": {"_0": "true unless throwing"}}}, "version": 1}}, "IERC1363Receiver": {"contractName": "IERC1363Receiver", "sourceId": "interfaces/IERC1363Receiver.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "onTransferReceived", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}], "userdoc": {"kind": "user", "methods": {"onTransferReceived(address,address,uint256,bytes)": {"notice": "Handle the receipt of ERC1363 tokens"}}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"onTransferReceived(address,address,uint256,bytes)": {"details": "Any ERC1363 smart contract calls this function on the recipient after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the transfer. Return of other than the magic value MUST result in the transaction being reverted. Note: the token contract address is always the message sender.", "params": {"data": "bytes Additional data with no specified format", "from": "address The address which are token transferred from", "operator": "address The address which called `transferAndCall` or `transferFromAndCall` function", "value": "uint256 The amount of tokens transferred"}, "returns": {"_0": "`bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))`  unless throwing"}}}, "version": 1}}, "IERC1363Spender": {"contractName": "IERC1363Spender", "sourceId": "interfaces/IERC1363Spender.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "onApprovalReceived", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}], "userdoc": {"kind": "user", "methods": {"onApprovalReceived(address,uint256,bytes)": {"notice": "Handle the approval of ERC1363 tokens"}}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"onApprovalReceived(address,uint256,bytes)": {"details": "Any ERC1363 smart contract calls this function on the recipient after an `approve`. This function MAY throw to revert and reject the approval. Return of other than the magic value MUST result in the transaction being reverted. Note: the token contract address is always the message sender.", "params": {"data": "bytes Additional data with no specified format", "owner": "address The address which called `approveAndCall` function", "value": "uint256 The amount of tokens to be spent"}, "returns": {"_0": "`bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))`  unless throwing"}}}, "version": 1}}, "IERC2981": {"contractName": "IERC2981", "sourceId": "interfaces/IERC2981.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "royaltyInfo", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "salePrice", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "receiver", "type": "address", "internalType": "address"}, {"name": "royaltyAmount", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Interface for the NFT Royalty Standard", "kind": "dev", "methods": {"royaltyInfo(uint256,uint256)": {"details": "Called with the sale price to determine how much royalty is owed and to whom.", "params": {"salePrice": "- the sale price of the NFT asset specified by `tokenId`", "tokenId": "- the NFT asset queried for royalty information"}, "returns": {"receiver": "- address of who should be sent the royalty payment", "royaltyAmount": "- the royalty payment amount for `salePrice`"}}, "supportsInterface(bytes4)": {"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}}, "version": 1}}, "IERC3156FlashBorrower": {"contractName": "IERC3156FlashBorrower", "sourceId": "interfaces/IERC3156FlashBorrower.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "onFlashLoan", "stateMutability": "nonpayable", "inputs": [{"name": "initiator", "type": "address", "internalType": "address"}, {"name": "token", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "fee", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Interface of the ERC3156 FlashBorrower, as defined in https://eips.ethereum.org/EIPS/eip-3156[ERC-3156]. _Available since v4.1._", "kind": "dev", "methods": {"onFlashLoan(address,address,uint256,uint256,bytes)": {"details": "Receive a flash loan.", "params": {"amount": "The amount of tokens lent.", "data": "Arbitrary data structure, intended to contain user-defined parameters.", "fee": "The additional amount of tokens to repay.", "initiator": "The initiator of the loan.", "token": "The loan currency."}, "returns": {"_0": "The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\""}}}, "version": 1}}, "IERC3156FlashLender": {"contractName": "IERC3156FlashLender", "sourceId": "interfaces/IERC3156FlashLender.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "flashFee", "stateMutability": "view", "inputs": [{"name": "token", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "flashLoan", "stateMutability": "nonpayable", "inputs": [{"name": "receiver", "type": "address", "internalType": "contract IERC3156FlashBorrower"}, {"name": "token", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "maxFlashLoan", "stateMutability": "view", "inputs": [{"name": "token", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Interface of the ERC3156 FlashLender, as defined in https://eips.ethereum.org/EIPS/eip-3156[ERC-3156]. _Available since v4.1._", "kind": "dev", "methods": {"flashFee(address,uint256)": {"details": "The fee to be charged for a given loan.", "params": {"amount": "The amount of tokens lent.", "token": "The loan currency."}, "returns": {"_0": "The amount of `token` to be charged for the loan, on top of the returned principal."}}, "flashLoan(address,address,uint256,bytes)": {"details": "Initiate a flash loan.", "params": {"amount": "The amount of tokens lent.", "data": "Arbitrary data structure, intended to contain user-defined parameters.", "receiver": "The receiver of the tokens in the loan, and the receiver of the callback.", "token": "The loan currency."}}, "maxFlashLoan(address)": {"details": "The amount of currency available to be lended.", "params": {"token": "The loan currency."}, "returns": {"_0": "The amount of `token` that can be borrowed."}}}, "version": 1}}, "IERC2612": {"contractName": "IERC2612", "sourceId": "interfaces/draft-IERC2612.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "DOMAIN_SEPARATOR", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "nonces", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "permit", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "deadline", "type": "uint256", "internalType": "uint256"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"DOMAIN_SEPARATOR()": {"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."}, "nonces(address)": {"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."}, "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}}, "version": 1}}, "ERC2771Context": {"contractName": "ERC2771Context", "sourceId": "metatx/ERC2771Context.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "isTrustedForwarder", "stateMutability": "view", "inputs": [{"name": "forwarder", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Context variant with ERC2771 support.", "kind": "dev", "methods": {}, "version": 1}}, "MinimalForwarder": {"contractName": "MinimalForwarder", "sourceId": "metatx/MinimalForwarder.sol", "deploymentBytecode": {"bytecode": "0x61014060405234801561001157600080fd5b50604080518082018252601081526f26b4b734b6b0b62337b93bb0b93232b960811b602080830191825283518085019094526005845264302e302e3160d81b908401528151902060e08190527fae209a0b48f21c054280f2455d32cf309387644879d9acbd8ffc1991638118856101008190524660a0529192917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6100fb8184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6080523060c052610120525061011092505050565b60805160a05160c05160e0516101005161012051610b5061015f60003960006104f2015260006105410152600061051c015260006104750152600061049f015260006104c90152610b506000f3fe6080604052600436106100345760003560e01c80632d0335ab1461003957806347153f8214610082578063bf5d3bdb146100a3575b600080fd5b34801561004557600080fd5b5061006f6100543660046108d2565b6001600160a01b031660009081526020819052604090205490565b6040519081526020015b60405180910390f35b610095610090366004610902565b6100d3565b6040516100799291906109d1565b3480156100af57600080fd5b506100c36100be366004610902565b610272565b6040519015158152602001610079565b600060606100e2858585610272565b61014e5760405162461bcd60e51b815260206004820152603260248201527f4d696e696d616c466f727761726465723a207369676e617475726520646f6573604482015271081b9bdd081b585d18da081c995c5d595cdd60721b60648201526084015b60405180910390fd5b61015d60808601356001610a0d565b60008061016d60208901896108d2565b6001600160a01b03166001600160a01b03168152602001908152602001600020819055506000808660200160208101906101a791906108d2565b6001600160a01b0316606088013560408901356101c760a08b018b610a33565b6101d460208d018d6108d2565b6040516020016101e693929190610a7a565b60408051601f198184030181529082905261020091610aa0565b600060405180830381858888f193505050503d806000811461023e576040519150601f19603f3d011682016040523d82523d6000602084013e610243565b606091505b509092509050610258603f6060890135610abc565b5a1161026657610266610ade565b90969095509350505050565b60008061038584848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061037f92507fdd8f4b70b0f4393e889bd39128a30628a78b61816a9eb8199759e7a349657e4891506102e2905060208a018a6108d2565b6102f260408b0160208c016108d2565b60408b013560608c013560808d013561030e60a08f018f610a33565b60405161031c929190610af4565b6040805191829003822060208301989098526001600160a01b0396871690820152949093166060850152608084019190915260a083015260c082015260e081019190915261010001604051602081830303815290604052805190602001206103f0565b90610444565b9050608085013560008061039c60208901896108d2565b6001600160a01b03166001600160a01b03168152602001908152602001600020541480156103e757506103d260208601866108d2565b6001600160a01b0316816001600160a01b0316145b95945050505050565b600061043e6103fd610468565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b6000806000610453858561058f565b91509150610460816105fd565b509392505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156104c157507f000000000000000000000000000000000000000000000000000000000000000046145b156104eb57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b60008082516041036105c55760208301516040840151606085015160001a6105b9878285856107b6565b945094505050506105f6565b82516040036105ee57602083015160408401516105e38683836108a3565b9350935050506105f6565b506000905060025b9250929050565b600081600481111561061157610611610b04565b036106195750565b600181600481111561062d5761062d610b04565b0361067a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610145565b600281600481111561068e5761068e610b04565b036106db5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610145565b60038160048111156106ef576106ef610b04565b036107475760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610145565b600481600481111561075b5761075b610b04565b036107b35760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610145565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156107ed575060009050600361089a565b8460ff16601b1415801561080557508460ff16601c14155b15610816575060009050600461089a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561086a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166108935760006001925092505061089a565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b016108c4878288856107b6565b935093505050935093915050565b6000602082840312156108e457600080fd5b81356001600160a01b03811681146108fb57600080fd5b9392505050565b60008060006040848603121561091757600080fd5b833567ffffffffffffffff8082111561092f57600080fd5b9085019060c0828803121561094357600080fd5b9093506020850135908082111561095957600080fd5b818601915086601f83011261096d57600080fd5b81358181111561097c57600080fd5b87602082850101111561098e57600080fd5b6020830194508093505050509250925092565b60005b838110156109bc5781810151838201526020016109a4565b838111156109cb576000848401525b50505050565b821515815260406020820152600082518060408401526109f88160608501602087016109a1565b601f01601f1916919091016060019392505050565b60008219821115610a2e57634e487b7160e01b600052601160045260246000fd5b500190565b6000808335601e19843603018112610a4a57600080fd5b83018035915067ffffffffffffffff821115610a6557600080fd5b6020019150368190038213156105f657600080fd5b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b60008251610ab28184602087016109a1565b9190910192915050565b600082610ad957634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052600160045260246000fd5b8183823760009101908152919050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220a3190a4169d63ed0d813cd351e209f93225443d8f6fb9d78fe2c9a3a6a721e5664736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052600436106100345760003560e01c80632d0335ab1461003957806347153f8214610082578063bf5d3bdb146100a3575b600080fd5b34801561004557600080fd5b5061006f6100543660046108d2565b6001600160a01b031660009081526020819052604090205490565b6040519081526020015b60405180910390f35b610095610090366004610902565b6100d3565b6040516100799291906109d1565b3480156100af57600080fd5b506100c36100be366004610902565b610272565b6040519015158152602001610079565b600060606100e2858585610272565b61014e5760405162461bcd60e51b815260206004820152603260248201527f4d696e696d616c466f727761726465723a207369676e617475726520646f6573604482015271081b9bdd081b585d18da081c995c5d595cdd60721b60648201526084015b60405180910390fd5b61015d60808601356001610a0d565b60008061016d60208901896108d2565b6001600160a01b03166001600160a01b03168152602001908152602001600020819055506000808660200160208101906101a791906108d2565b6001600160a01b0316606088013560408901356101c760a08b018b610a33565b6101d460208d018d6108d2565b6040516020016101e693929190610a7a565b60408051601f198184030181529082905261020091610aa0565b600060405180830381858888f193505050503d806000811461023e576040519150601f19603f3d011682016040523d82523d6000602084013e610243565b606091505b509092509050610258603f6060890135610abc565b5a1161026657610266610ade565b90969095509350505050565b60008061038584848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061037f92507fdd8f4b70b0f4393e889bd39128a30628a78b61816a9eb8199759e7a349657e4891506102e2905060208a018a6108d2565b6102f260408b0160208c016108d2565b60408b013560608c013560808d013561030e60a08f018f610a33565b60405161031c929190610af4565b6040805191829003822060208301989098526001600160a01b0396871690820152949093166060850152608084019190915260a083015260c082015260e081019190915261010001604051602081830303815290604052805190602001206103f0565b90610444565b9050608085013560008061039c60208901896108d2565b6001600160a01b03166001600160a01b03168152602001908152602001600020541480156103e757506103d260208601866108d2565b6001600160a01b0316816001600160a01b0316145b95945050505050565b600061043e6103fd610468565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b6000806000610453858561058f565b91509150610460816105fd565b509392505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156104c157507f000000000000000000000000000000000000000000000000000000000000000046145b156104eb57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b60008082516041036105c55760208301516040840151606085015160001a6105b9878285856107b6565b945094505050506105f6565b82516040036105ee57602083015160408401516105e38683836108a3565b9350935050506105f6565b506000905060025b9250929050565b600081600481111561061157610611610b04565b036106195750565b600181600481111561062d5761062d610b04565b0361067a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610145565b600281600481111561068e5761068e610b04565b036106db5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610145565b60038160048111156106ef576106ef610b04565b036107475760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610145565b600481600481111561075b5761075b610b04565b036107b35760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610145565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156107ed575060009050600361089a565b8460ff16601b1415801561080557508460ff16601c14155b15610816575060009050600461089a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561086a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166108935760006001925092505061089a565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b016108c4878288856107b6565b935093505050935093915050565b6000602082840312156108e457600080fd5b81356001600160a01b03811681146108fb57600080fd5b9392505050565b60008060006040848603121561091757600080fd5b833567ffffffffffffffff8082111561092f57600080fd5b9085019060c0828803121561094357600080fd5b9093506020850135908082111561095957600080fd5b818601915086601f83011261096d57600080fd5b81358181111561097c57600080fd5b87602082850101111561098e57600080fd5b6020830194508093505050509250925092565b60005b838110156109bc5781810151838201526020016109a4565b838111156109cb576000848401525b50505050565b821515815260406020820152600082518060408401526109f88160608501602087016109a1565b601f01601f1916919091016060019392505050565b60008219821115610a2e57634e487b7160e01b600052601160045260246000fd5b500190565b6000808335601e19843603018112610a4a57600080fd5b83018035915067ffffffffffffffff821115610a6557600080fd5b6020019150368190038213156105f657600080fd5b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b60008251610ab28184602087016109a1565b9190910192915050565b600082610ad957634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052600160045260246000fd5b8183823760009101908152919050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220a3190a4169d63ed0d813cd351e209f93225443d8f6fb9d78fe2c9a3a6a721e5664736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": []}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "req", "type": "tuple", "components": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "gas", "type": "uint256", "internalType": "uint256"}, {"name": "nonce", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "internalType": "struct MinimalForwarder.ForwardRequest"}, {"name": "signature", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}, {"name": "", "type": "bytes", "internalType": "bytes"}]}, {"type": "function", "name": "getNonce", "stateMutability": "view", "inputs": [{"name": "from", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "verify", "stateMutability": "view", "inputs": [{"name": "req", "type": "tuple", "components": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "gas", "type": "uint256", "internalType": "uint256"}, {"name": "nonce", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "internalType": "struct MinimalForwarder.ForwardRequest"}, {"name": "signature", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Simple minimal forwarder to be used together with an ERC2771 compatible contract. See {ERC2771Context}.", "kind": "dev", "methods": {}, "version": 1}}, "AccessControlEnumerableMock": {"contractName": "AccessControlEnumerableMock", "sourceId": "mocks/AccessControlEnumerableMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5061001c600033610021565b610177565b61002b828261002f565b5050565b610043828261006c60201b6103341760201c565b60008281526001602090815260409091206100679183906103b861010a821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661002b576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556100c63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061011f836001600160a01b038416610128565b90505b92915050565b600081815260018301602052604081205461016f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610122565b506000610122565b610af9806101866000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80634b9304a4116100715780634b9304a4146101425780639010d07c1461015557806391d1485414610180578063a217fddf14610193578063ca15c8731461019b578063d547741f146101ae57600080fd5b806301ffc9a7146100ae5780631e4e0091146100d6578063248a9ca3146100eb5780632f2ff15d1461011c57806336568abe1461012f575b600080fd5b6100c16100bc36600461088d565b6101c1565b60405190151581526020015b60405180910390f35b6100e96100e43660046108b7565b6101ec565b005b61010e6100f93660046108d9565b60009081526020819052604090206001015490565b6040519081526020016100cd565b6100e961012a3660046108f2565b6101fa565b6100e961013d3660046108f2565b610225565b6100e96101503660046108d9565b6102a4565b6101686101633660046108b7565b6102af565b6040516001600160a01b0390911681526020016100cd565b6100c161018e3660046108f2565b6102ce565b61010e600081565b61010e6101a93660046108d9565b6102f7565b6100e96101bc3660046108f2565b61030e565b60006001600160e01b03198216635a05180f60e01b14806101e657506101e6826103cd565b92915050565b6101f68282610402565b5050565b600082815260208190526040902060010154610216813361044d565b61022083836104b1565b505050565b6001600160a01b038116331461029a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6101f682826104d3565b806101f6813361044d565b60008281526001602052604081206102c790836104f5565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008181526001602052604081206101e690610501565b60008281526020819052604090206001015461032a813361044d565b61022083836104d3565b61033e82826102ce565b6101f6576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556103743390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006102c7836001600160a01b03841661050b565b60006001600160e01b03198216637965db0b60e01b14806101e657506301ffc9a760e01b6001600160e01b03198316146101e6565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b61045782826102ce565b6101f65761046f816001600160a01b0316601461055a565b61047a83602061055a565b60405160200161048b92919061095e565b60408051601f198184030181529082905262461bcd60e51b8252610291916004016109d3565b6104bb8282610334565b600082815260016020526040902061022090826103b8565b6104dd82826106f6565b6000828152600160205260409020610220908261075b565b60006102c78383610770565b60006101e6825490565b6000818152600183016020526040812054610552575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556101e6565b5060006101e6565b60606000610569836002610a1c565b610574906002610a3b565b67ffffffffffffffff81111561058c5761058c610a53565b6040519080825280601f01601f1916602001820160405280156105b6576020820181803683370190505b509050600360fc1b816000815181106105d1576105d1610a69565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061060057610600610a69565b60200101906001600160f81b031916908160001a9053506000610624846002610a1c565b61062f906001610a3b565b90505b60018111156106a7576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061066357610663610a69565b1a60f81b82828151811061067957610679610a69565b60200101906001600160f81b031916908160001a90535060049490941c936106a081610a7f565b9050610632565b5083156102c75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610291565b61070082826102ce565b156101f6576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006102c7836001600160a01b03841661079a565b600082600001828154811061078757610787610a69565b9060005260206000200154905092915050565b600081815260018301602052604081205480156108835760006107be600183610a96565b85549091506000906107d290600190610a96565b90508181146108375760008660000182815481106107f2576107f2610a69565b906000526020600020015490508087600001848154811061081557610815610a69565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061084857610848610aad565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506101e6565b60009150506101e6565b60006020828403121561089f57600080fd5b81356001600160e01b0319811681146102c757600080fd5b600080604083850312156108ca57600080fd5b50508035926020909101359150565b6000602082840312156108eb57600080fd5b5035919050565b6000806040838503121561090557600080fd5b8235915060208301356001600160a01b038116811461092357600080fd5b809150509250929050565b60005b83811015610949578181015183820152602001610931565b83811115610958576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161099681601785016020880161092e565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516109c781602884016020880161092e565b01602801949350505050565b60208152600082518060208401526109f281604085016020870161092e565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610a3657610a36610a06565b500290565b60008219821115610a4e57610a4e610a06565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610a8e57610a8e610a06565b506000190190565b600082821015610aa857610aa8610a06565b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212207c84a207741c98f89e8b6d9d0daa2b38db03fd6d6b585cf54d5b8c4db7b1b2b464736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80634b9304a4116100715780634b9304a4146101425780639010d07c1461015557806391d1485414610180578063a217fddf14610193578063ca15c8731461019b578063d547741f146101ae57600080fd5b806301ffc9a7146100ae5780631e4e0091146100d6578063248a9ca3146100eb5780632f2ff15d1461011c57806336568abe1461012f575b600080fd5b6100c16100bc36600461088d565b6101c1565b60405190151581526020015b60405180910390f35b6100e96100e43660046108b7565b6101ec565b005b61010e6100f93660046108d9565b60009081526020819052604090206001015490565b6040519081526020016100cd565b6100e961012a3660046108f2565b6101fa565b6100e961013d3660046108f2565b610225565b6100e96101503660046108d9565b6102a4565b6101686101633660046108b7565b6102af565b6040516001600160a01b0390911681526020016100cd565b6100c161018e3660046108f2565b6102ce565b61010e600081565b61010e6101a93660046108d9565b6102f7565b6100e96101bc3660046108f2565b61030e565b60006001600160e01b03198216635a05180f60e01b14806101e657506101e6826103cd565b92915050565b6101f68282610402565b5050565b600082815260208190526040902060010154610216813361044d565b61022083836104b1565b505050565b6001600160a01b038116331461029a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6101f682826104d3565b806101f6813361044d565b60008281526001602052604081206102c790836104f5565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008181526001602052604081206101e690610501565b60008281526020819052604090206001015461032a813361044d565b61022083836104d3565b61033e82826102ce565b6101f6576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556103743390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006102c7836001600160a01b03841661050b565b60006001600160e01b03198216637965db0b60e01b14806101e657506301ffc9a760e01b6001600160e01b03198316146101e6565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b61045782826102ce565b6101f65761046f816001600160a01b0316601461055a565b61047a83602061055a565b60405160200161048b92919061095e565b60408051601f198184030181529082905262461bcd60e51b8252610291916004016109d3565b6104bb8282610334565b600082815260016020526040902061022090826103b8565b6104dd82826106f6565b6000828152600160205260409020610220908261075b565b60006102c78383610770565b60006101e6825490565b6000818152600183016020526040812054610552575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556101e6565b5060006101e6565b60606000610569836002610a1c565b610574906002610a3b565b67ffffffffffffffff81111561058c5761058c610a53565b6040519080825280601f01601f1916602001820160405280156105b6576020820181803683370190505b509050600360fc1b816000815181106105d1576105d1610a69565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061060057610600610a69565b60200101906001600160f81b031916908160001a9053506000610624846002610a1c565b61062f906001610a3b565b90505b60018111156106a7576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061066357610663610a69565b1a60f81b82828151811061067957610679610a69565b60200101906001600160f81b031916908160001a90535060049490941c936106a081610a7f565b9050610632565b5083156102c75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610291565b61070082826102ce565b156101f6576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006102c7836001600160a01b03841661079a565b600082600001828154811061078757610787610a69565b9060005260206000200154905092915050565b600081815260018301602052604081205480156108835760006107be600183610a96565b85549091506000906107d290600190610a96565b90508181146108375760008660000182815481106107f2576107f2610a69565b906000526020600020015490508087600001848154811061081557610815610a69565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061084857610848610aad565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506101e6565b60009150506101e6565b60006020828403121561089f57600080fd5b81356001600160e01b0319811681146102c757600080fd5b600080604083850312156108ca57600080fd5b50508035926020909101359150565b6000602082840312156108eb57600080fd5b5035919050565b6000806040838503121561090557600080fd5b8235915060208301356001600160a01b038116811461092357600080fd5b809150509250929050565b60005b83811015610949578181015183820152602001610931565b83811115610958576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161099681601785016020880161092e565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516109c781602884016020880161092e565b01602801949350505050565b60208152600082518060208401526109f281604085016020870161092e565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610a3657610a36610a06565b500290565b60008219821115610a4e57610a4e610a06565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610a8e57610a8e610a06565b506000190190565b600082821015610aa857610aa8610a06565b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212207c84a207741c98f89e8b6d9d0daa2b38db03fd6d6b585cf54d5b8c4db7b1b2b464736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": []}, {"type": "event", "name": "RoleAdminChanged", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "previousAdminRole", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "newAdminRole", "type": "bytes32", "internalType": "bytes32", "indexed": true}], "anonymous": false}, {"type": "event", "name": "RoleGranted", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "sender", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "RoleRevoked", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "sender", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "function", "name": "DEFAULT_ADMIN_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "getRoleAdmin", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "getRoleMember", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getRoleMemberCount", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "grantRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "hasRole", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "renounceRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "revokeRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "senderProtected", "stateMutability": "nonpayable", "inputs": [{"name": "roleId", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "setRoleAdmin", "stateMutability": "nonpayable", "inputs": [{"name": "roleId", "type": "bytes32", "internalType": "bytes32"}, {"name": "adminRoleId", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"getRoleAdmin(bytes32)": {"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."}, "getRoleMember(bytes32,uint256)": {"details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."}, "getRoleMemberCount(bytes32)": {"details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."}, "grantRole(bytes32,address)": {"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."}, "hasRole(bytes32,address)": {"details": "Returns `true` if `account` has been granted `role`."}, "renounceRole(bytes32,address)": {"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."}, "revokeRole(bytes32,address)": {"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}}, "version": 1}}, "AccessControlMock": {"contractName": "AccessControlMock", "sourceId": "mocks/AccessControlMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5061001c600033610021565b6100cd565b61002b828261002f565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661002b576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556100893390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610830806100dc6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806336568abe1161006657806336568abe146101195780634b9304a41461012c57806391d148541461013f578063a217fddf14610152578063d547741f1461015a57600080fd5b806301ffc9a7146100985780631e4e0091146100c0578063248a9ca3146100d55780632f2ff15d14610106575b600080fd5b6100ab6100a63660046105f1565b61016d565b60405190151581526020015b60405180910390f35b6100d36100ce36600461061b565b6101a4565b005b6100f86100e336600461063d565b60009081526020819052604090206001015490565b6040519081526020016100b7565b6100d3610114366004610656565b6101b2565b6100d3610127366004610656565b6101dd565b6100d361013a36600461063d565b61025c565b6100ab61014d366004610656565b610267565b6100f8600081565b6100d3610168366004610656565b610290565b60006001600160e01b03198216637965db0b60e01b148061019e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6101ae82826102b6565b5050565b6000828152602081905260409020600101546101ce8133610301565b6101d88383610365565b505050565b6001600160a01b03811633146102525760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6101ae82826103e9565b806101ae8133610301565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000828152602081905260409020600101546102ac8133610301565b6101d883836103e9565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b61030b8282610267565b6101ae57610323816001600160a01b0316601461044e565b61032e83602061044e565b60405160200161033f9291906106c2565b60408051601f198184030181529082905262461bcd60e51b825261024991600401610737565b61036f8282610267565b6101ae576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556103a53390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6103f38282610267565b156101ae576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6060600061045d836002610780565b61046890600261079f565b67ffffffffffffffff811115610480576104806107b7565b6040519080825280601f01601f1916602001820160405280156104aa576020820181803683370190505b509050600360fc1b816000815181106104c5576104c56107cd565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106104f4576104f46107cd565b60200101906001600160f81b031916908160001a9053506000610518846002610780565b61052390600161079f565b90505b600181111561059b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610557576105576107cd565b1a60f81b82828151811061056d5761056d6107cd565b60200101906001600160f81b031916908160001a90535060049490941c93610594816107e3565b9050610526565b5083156105ea5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610249565b9392505050565b60006020828403121561060357600080fd5b81356001600160e01b0319811681146105ea57600080fd5b6000806040838503121561062e57600080fd5b50508035926020909101359150565b60006020828403121561064f57600080fd5b5035919050565b6000806040838503121561066957600080fd5b8235915060208301356001600160a01b038116811461068757600080fd5b809150509250929050565b60005b838110156106ad578181015183820152602001610695565b838111156106bc576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516106fa816017850160208801610692565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161072b816028840160208801610692565b01602801949350505050565b6020815260008251806020840152610756816040850160208701610692565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561079a5761079a61076a565b500290565b600082198211156107b2576107b261076a565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000816107f2576107f261076a565b50600019019056fea26469706673582212208f17e85b333e587fa8c258445ba165bb55af427d66023d536a0e92efeef6d7ad64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806336568abe1161006657806336568abe146101195780634b9304a41461012c57806391d148541461013f578063a217fddf14610152578063d547741f1461015a57600080fd5b806301ffc9a7146100985780631e4e0091146100c0578063248a9ca3146100d55780632f2ff15d14610106575b600080fd5b6100ab6100a63660046105f1565b61016d565b60405190151581526020015b60405180910390f35b6100d36100ce36600461061b565b6101a4565b005b6100f86100e336600461063d565b60009081526020819052604090206001015490565b6040519081526020016100b7565b6100d3610114366004610656565b6101b2565b6100d3610127366004610656565b6101dd565b6100d361013a36600461063d565b61025c565b6100ab61014d366004610656565b610267565b6100f8600081565b6100d3610168366004610656565b610290565b60006001600160e01b03198216637965db0b60e01b148061019e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6101ae82826102b6565b5050565b6000828152602081905260409020600101546101ce8133610301565b6101d88383610365565b505050565b6001600160a01b03811633146102525760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6101ae82826103e9565b806101ae8133610301565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000828152602081905260409020600101546102ac8133610301565b6101d883836103e9565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b61030b8282610267565b6101ae57610323816001600160a01b0316601461044e565b61032e83602061044e565b60405160200161033f9291906106c2565b60408051601f198184030181529082905262461bcd60e51b825261024991600401610737565b61036f8282610267565b6101ae576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556103a53390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6103f38282610267565b156101ae576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6060600061045d836002610780565b61046890600261079f565b67ffffffffffffffff811115610480576104806107b7565b6040519080825280601f01601f1916602001820160405280156104aa576020820181803683370190505b509050600360fc1b816000815181106104c5576104c56107cd565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106104f4576104f46107cd565b60200101906001600160f81b031916908160001a9053506000610518846002610780565b61052390600161079f565b90505b600181111561059b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610557576105576107cd565b1a60f81b82828151811061056d5761056d6107cd565b60200101906001600160f81b031916908160001a90535060049490941c93610594816107e3565b9050610526565b5083156105ea5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610249565b9392505050565b60006020828403121561060357600080fd5b81356001600160e01b0319811681146105ea57600080fd5b6000806040838503121561062e57600080fd5b50508035926020909101359150565b60006020828403121561064f57600080fd5b5035919050565b6000806040838503121561066957600080fd5b8235915060208301356001600160a01b038116811461068757600080fd5b809150509250929050565b60005b838110156106ad578181015183820152602001610695565b838111156106bc576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516106fa816017850160208801610692565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161072b816028840160208801610692565b01602801949350505050565b6020815260008251806020840152610756816040850160208701610692565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561079a5761079a61076a565b500290565b600082198211156107b2576107b261076a565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000816107f2576107f261076a565b50600019019056fea26469706673582212208f17e85b333e587fa8c258445ba165bb55af427d66023d536a0e92efeef6d7ad64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": []}, {"type": "event", "name": "RoleAdminChanged", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "previousAdminRole", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "newAdminRole", "type": "bytes32", "internalType": "bytes32", "indexed": true}], "anonymous": false}, {"type": "event", "name": "RoleGranted", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "sender", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "RoleRevoked", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "sender", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "function", "name": "DEFAULT_ADMIN_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "getRoleAdmin", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "grantRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "hasRole", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "renounceRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "revokeRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "senderProtected", "stateMutability": "nonpayable", "inputs": [{"name": "roleId", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "setRoleAdmin", "stateMutability": "nonpayable", "inputs": [{"name": "roleId", "type": "bytes32", "internalType": "bytes32"}, {"name": "adminRoleId", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"getRoleAdmin(bytes32)": {"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."}, "grantRole(bytes32,address)": {"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."}, "hasRole(bytes32,address)": {"details": "Returns `true` if `account` has been granted `role`."}, "renounceRole(bytes32,address)": {"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."}, "revokeRole(bytes32,address)": {"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}}, "version": 1}}, "AddressImpl": {"contractName": "AddressImpl", "sourceId": "mocks/AddressImpl.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50610c04806100206000396000f3fe6080604052600436106100745760003560e01c8063a0b5ffb01161004e578063a0b5ffb0146100eb578063c21d36f31461010b578063ee33b7e21461012b578063fc40cf731461014b57600080fd5b8063162790551461008057806324a084df146100b65780632a011594146100d857600080fd5b3661007b57005b600080fd5b34801561008c57600080fd5b506100a161009b3660046108a5565b3b151590565b60405190151581526020015b60405180910390f35b3480156100c257600080fd5b506100d66100d13660046108c2565b61016d565b005b6100d66100e6366004610937565b61017b565b3480156100f757600080fd5b506100d6610106366004610993565b610212565b34801561011757600080fd5b506100d6610126366004610993565b6102a6565b34801561013757600080fd5b506100d6610146366004610993565b6102e8565b34801561015757600080fd5b5061016061032a565b6040516100ad9190610a18565b61017782826103b8565b5050565b60006101bf8585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508792506104db915050565b90507fe518073da644d0626295bee74d5d5c51447a33857c62913bb30f35e2fba3db7c818060200190518101906101f69190610a61565b6040516102039190610a18565b60405180910390a15050505050565b60006102548484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061050b92505050565b90507fe518073da644d0626295bee74d5d5c51447a33857c62913bb30f35e2fba3db7c8180602001905181019061028b9190610a61565b6040516102989190610a18565b60405180910390a150505050565b60006102548484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061054d92505050565b60006102548484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061057292505050565b6000805461033790610b03565b80601f016020809104026020016040519081016040528092919081815260200182805461036390610b03565b80156103b05780601f10610385576101008083540402835291602001916103b0565b820191906000526020600020905b81548152906001019060200180831161039357829003601f168201915b505050505081565b8047101561040d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461045a576040519150601f19603f3d011682016040523d82523d6000602084013e61045f565b606091505b50509050806104d65760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610404565b505050565b6060610501848484604051806060016040528060298152602001610b5a60299139610597565b90505b9392505050565b606061050483836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506106bf565b60606105048383604051806060016040528060258152602001610b83602591396106ce565b60606105048383604051806060016040528060278152602001610ba86027913961079f565b6060824710156105f85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610404565b843b6106465760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610404565b600080866001600160a01b031685876040516106629190610b3d565b60006040518083038185875af1925050503d806000811461069f576040519150601f19603f3d011682016040523d82523d6000602084013e6106a4565b606091505b50915091506106b4828286610854565b979650505050505050565b60606105018484600085610597565b6060833b61072a5760405162461bcd60e51b8152602060048201526024808201527f416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e746044820152631c9858dd60e21b6064820152608401610404565b600080856001600160a01b0316856040516107459190610b3d565b600060405180830381855afa9150503d8060008114610780576040519150601f19603f3d011682016040523d82523d6000602084013e610785565b606091505b5091509150610795828286610854565b9695505050505050565b6060833b6107fe5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610404565b600080856001600160a01b0316856040516108199190610b3d565b600060405180830381855af49150503d8060008114610780576040519150601f19603f3d011682016040523d82523d6000602084013e610785565b60608315610863575081610504565b8251156108735782518084602001fd5b8160405162461bcd60e51b81526004016104049190610a18565b6001600160a01b03811681146108a257600080fd5b50565b6000602082840312156108b757600080fd5b81356105048161088d565b600080604083850312156108d557600080fd5b82356108e08161088d565b946020939093013593505050565b60008083601f84011261090057600080fd5b50813567ffffffffffffffff81111561091857600080fd5b60208301915083602082850101111561093057600080fd5b9250929050565b6000806000806060858703121561094d57600080fd5b84356109588161088d565b9350602085013567ffffffffffffffff81111561097457600080fd5b610980878288016108ee565b9598909750949560400135949350505050565b6000806000604084860312156109a857600080fd5b83356109b38161088d565b9250602084013567ffffffffffffffff8111156109cf57600080fd5b6109db868287016108ee565b9497909650939450505050565b60005b83811015610a035781810151838201526020016109eb565b83811115610a12576000848401525b50505050565b6020815260008251806020840152610a378160408501602087016109e8565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610a7357600080fd5b815167ffffffffffffffff80821115610a8b57600080fd5b818401915084601f830112610a9f57600080fd5b815181811115610ab157610ab1610a4b565b604051601f8201601f19908116603f01168101908382118183101715610ad957610ad9610a4b565b81604052828152876020848701011115610af257600080fd5b6106b48360208301602088016109e8565b600181811c90821680610b1757607f821691505b602082108103610b3757634e487b7160e01b600052602260045260246000fd5b50919050565b60008251610b4f8184602087016109e8565b919091019291505056fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220aeea6c910158fbe545b0a7aaeeb22a321e2ee9c7b9d7a427b0388a79a0f6efd364736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052600436106100745760003560e01c8063a0b5ffb01161004e578063a0b5ffb0146100eb578063c21d36f31461010b578063ee33b7e21461012b578063fc40cf731461014b57600080fd5b8063162790551461008057806324a084df146100b65780632a011594146100d857600080fd5b3661007b57005b600080fd5b34801561008c57600080fd5b506100a161009b3660046108a5565b3b151590565b60405190151581526020015b60405180910390f35b3480156100c257600080fd5b506100d66100d13660046108c2565b61016d565b005b6100d66100e6366004610937565b61017b565b3480156100f757600080fd5b506100d6610106366004610993565b610212565b34801561011757600080fd5b506100d6610126366004610993565b6102a6565b34801561013757600080fd5b506100d6610146366004610993565b6102e8565b34801561015757600080fd5b5061016061032a565b6040516100ad9190610a18565b61017782826103b8565b5050565b60006101bf8585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508792506104db915050565b90507fe518073da644d0626295bee74d5d5c51447a33857c62913bb30f35e2fba3db7c818060200190518101906101f69190610a61565b6040516102039190610a18565b60405180910390a15050505050565b60006102548484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061050b92505050565b90507fe518073da644d0626295bee74d5d5c51447a33857c62913bb30f35e2fba3db7c8180602001905181019061028b9190610a61565b6040516102989190610a18565b60405180910390a150505050565b60006102548484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061054d92505050565b60006102548484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061057292505050565b6000805461033790610b03565b80601f016020809104026020016040519081016040528092919081815260200182805461036390610b03565b80156103b05780601f10610385576101008083540402835291602001916103b0565b820191906000526020600020905b81548152906001019060200180831161039357829003601f168201915b505050505081565b8047101561040d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461045a576040519150601f19603f3d011682016040523d82523d6000602084013e61045f565b606091505b50509050806104d65760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610404565b505050565b6060610501848484604051806060016040528060298152602001610b5a60299139610597565b90505b9392505050565b606061050483836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506106bf565b60606105048383604051806060016040528060258152602001610b83602591396106ce565b60606105048383604051806060016040528060278152602001610ba86027913961079f565b6060824710156105f85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610404565b843b6106465760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610404565b600080866001600160a01b031685876040516106629190610b3d565b60006040518083038185875af1925050503d806000811461069f576040519150601f19603f3d011682016040523d82523d6000602084013e6106a4565b606091505b50915091506106b4828286610854565b979650505050505050565b60606105018484600085610597565b6060833b61072a5760405162461bcd60e51b8152602060048201526024808201527f416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e746044820152631c9858dd60e21b6064820152608401610404565b600080856001600160a01b0316856040516107459190610b3d565b600060405180830381855afa9150503d8060008114610780576040519150601f19603f3d011682016040523d82523d6000602084013e610785565b606091505b5091509150610795828286610854565b9695505050505050565b6060833b6107fe5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610404565b600080856001600160a01b0316856040516108199190610b3d565b600060405180830381855af49150503d8060008114610780576040519150601f19603f3d011682016040523d82523d6000602084013e610785565b60608315610863575081610504565b8251156108735782518084602001fd5b8160405162461bcd60e51b81526004016104049190610a18565b6001600160a01b03811681146108a257600080fd5b50565b6000602082840312156108b757600080fd5b81356105048161088d565b600080604083850312156108d557600080fd5b82356108e08161088d565b946020939093013593505050565b60008083601f84011261090057600080fd5b50813567ffffffffffffffff81111561091857600080fd5b60208301915083602082850101111561093057600080fd5b9250929050565b6000806000806060858703121561094d57600080fd5b84356109588161088d565b9350602085013567ffffffffffffffff81111561097457600080fd5b610980878288016108ee565b9598909750949560400135949350505050565b6000806000604084860312156109a857600080fd5b83356109b38161088d565b9250602084013567ffffffffffffffff8111156109cf57600080fd5b6109db868287016108ee565b9497909650939450505050565b60005b83811015610a035781810151838201526020016109eb565b83811115610a12576000848401525b50505050565b6020815260008251806020840152610a378160408501602087016109e8565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610a7357600080fd5b815167ffffffffffffffff80821115610a8b57600080fd5b818401915084601f830112610a9f57600080fd5b815181811115610ab157610ab1610a4b565b604051601f8201601f19908116603f01168101908382118183101715610ad957610ad9610a4b565b81604052828152876020848701011115610af257600080fd5b6106b48360208301602088016109e8565b600181811c90821680610b1757607f821691505b602082108103610b3757634e487b7160e01b600052602260045260246000fd5b50919050565b60008251610b4f8184602087016109e8565b919091019291505056fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220aeea6c910158fbe545b0a7aaeeb22a321e2ee9c7b9d7a427b0388a79a0f6efd364736f6c634300080d0033"}, "abi": [{"type": "event", "name": "CallReturnValue", "inputs": [{"name": "data", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "function", "name": "functionCall", "stateMutability": "nonpayable", "inputs": [{"name": "target", "type": "address", "internalType": "address"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "functionCallWithValue", "stateMutability": "payable", "inputs": [{"name": "target", "type": "address", "internalType": "address"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "functionDelegateCall", "stateMutability": "nonpayable", "inputs": [{"name": "target", "type": "address", "internalType": "address"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "functionStaticCall", "stateMutability": "nonpayable", "inputs": [{"name": "target", "type": "address", "internalType": "address"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "isContract", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "sendValue", "stateMutability": "nonpayable", "inputs": [{"name": "receiver", "type": "address", "internalType": "address payable"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "sharedAnswer", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ArraysImpl": {"contractName": "ArraysImpl", "sourceId": "mocks/ArraysImpl.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506040516103a53803806103a583398101604081905261002f916100bf565b8051610042906000906020840190610049565b505061017c565b828054828255906000526020600020908101928215610084579160200282015b82811115610084578251825591602001919060010190610069565b50610090929150610094565b5090565b5b808211156100905760008155600101610095565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156100d257600080fd5b82516001600160401b03808211156100e957600080fd5b818501915085601f8301126100fd57600080fd5b81518181111561010f5761010f6100a9565b8060051b604051601f19603f83011681018181108582111715610134576101346100a9565b60405291825284820192508381018501918883111561015257600080fd5b938501935b8285101561017057845184529385019392850192610157565b98975050505050505050565b61021a8061018b6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806333e3a58a14610030575b600080fd5b61004361003e36600461014e565b610055565b60405190815260200160405180910390f35b60006100618183610067565b92915050565b8154600090810361007a57506000610061565b82546000905b808210156100d6576000610094838361012c565b9050848682815481106100a9576100a9610167565b906000526020600020015411156100c2578091506100d0565b6100cd816001610193565b92505b50610080565b60008211801561010b575083856100ee6001856101ab565b815481106100fe576100fe610167565b9060005260206000200154145b156101245761011b6001836101ab565b92505050610061565b509392505050565b600061013b60028484186101c2565b61014790848416610193565b9392505050565b60006020828403121561016057600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156101a6576101a661017d565b500190565b6000828210156101bd576101bd61017d565b500390565b6000826101df57634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122010ca24f735e0e93f63a607748ab06c0b15b92be5fe27f7f88bedec5c3cf2877464736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806333e3a58a14610030575b600080fd5b61004361003e36600461014e565b610055565b60405190815260200160405180910390f35b60006100618183610067565b92915050565b8154600090810361007a57506000610061565b82546000905b808210156100d6576000610094838361012c565b9050848682815481106100a9576100a9610167565b906000526020600020015411156100c2578091506100d0565b6100cd816001610193565b92505b50610080565b60008211801561010b575083856100ee6001856101ab565b815481106100fe576100fe610167565b9060005260206000200154145b156101245761011b6001836101ab565b92505050610061565b509392505050565b600061013b60028484186101c2565b61014790848416610193565b9392505050565b60006020828403121561016057600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156101a6576101a661017d565b500190565b6000828210156101bd576101bd61017d565b500390565b6000826101df57634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122010ca24f735e0e93f63a607748ab06c0b15b92be5fe27f7f88bedec5c3cf2877464736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "array", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "function", "name": "findUpperBound", "stateMutability": "view", "inputs": [{"name": "element", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "BadBeaconNoImpl": {"contractName": "BadBeaconNoImpl", "sourceId": "mocks/BadBeacon.sol", "deploymentBytecode": {"bytecode": "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212204a049e093547cbfa462ef142d60ee9d9277e01da23392971b5c170744dc6933a64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052600080fdfea26469706673582212204a049e093547cbfa462ef142d60ee9d9277e01da23392971b5c170744dc6933a64736f6c634300080d0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "BadBeaconNotContract": {"contractName": "BadBeaconNotContract", "sourceId": "mocks/BadBeacon.sol", "deploymentBytecode": {"bytecode": "0x6080604052348015600f57600080fd5b50607780601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635c60da1b14602d575b600080fd5b604080516001815290519081900360200190f3fea2646970667358221220ad737da36a8b9ad200d10c47073fa5d43040fd2b814908b72fc24d46f1294d1964736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052348015600f57600080fd5b506004361060285760003560e01c80635c60da1b14602d575b600080fd5b604080516001815290519081900360200190f3fea2646970667358221220ad737da36a8b9ad200d10c47073fa5d43040fd2b814908b72fc24d46f1294d1964736f6c634300080d0033"}, "abi": [{"type": "function", "name": "implementation", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "BitMapMock": {"contractName": "BitMapMock", "sourceId": "mocks/BitmapMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506101eb806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063088d22551461005157806360fe47b1146100845780639507d39a146100b4578063dcc9d43c146100fa575b600080fd5b61008261005f366004610167565b600881901c60009081526020819052604090208054600160ff84161b1916905550565b005b610082610092366004610167565b600881901c60009081526020819052604090208054600160ff84161b17905550565b6100e66100c2366004610167565b600881901c600090815260208190526040812054600160ff84161b16151592915050565b604051901515815260200160405180910390f35b610082610108366004610180565b61011460008383610118565b5050565b801561014257600882901c60009081526020849052604090208054600160ff85161b179055505050565b600882901c60009081526020849052604090208054600160ff85161b19169055505050565b60006020828403121561017957600080fd5b5035919050565b6000806040838503121561019357600080fd5b82359150602083013580151581146101aa57600080fd5b80915050925092905056fea2646970667358221220c3567596c099f65066c01875a79daceca7797cfc795eb4cd19467eb2c2709ee664736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063088d22551461005157806360fe47b1146100845780639507d39a146100b4578063dcc9d43c146100fa575b600080fd5b61008261005f366004610167565b600881901c60009081526020819052604090208054600160ff84161b1916905550565b005b610082610092366004610167565b600881901c60009081526020819052604090208054600160ff84161b17905550565b6100e66100c2366004610167565b600881901c600090815260208190526040812054600160ff84161b16151592915050565b604051901515815260200160405180910390f35b610082610108366004610180565b61011460008383610118565b5050565b801561014257600882901c60009081526020849052604090208054600160ff85161b179055505050565b600882901c60009081526020849052604090208054600160ff85161b19169055505050565b60006020828403121561017957600080fd5b5035919050565b6000806040838503121561019357600080fd5b82359150602083013580151581146101aa57600080fd5b80915050925092905056fea2646970667358221220c3567596c099f65066c01875a79daceca7797cfc795eb4cd19467eb2c2709ee664736f6c634300080d0033"}, "abi": [{"type": "function", "name": "get", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "set", "stateMutability": "nonpayable", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "setTo", "stateMutability": "nonpayable", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "unset", "stateMutability": "nonpayable", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "CallReceiverMock": {"contractName": "CallReceiverMock", "sourceId": "mocks/CallReceiverMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5061053b806100206000396000f3fe6080604052600436106100915760003560e01c8063a793ab4711610059578063a793ab47146100e3578063aa04f77e146100eb578063c8fc769614610100578063fc40cf731461012f578063fdb273251461014457600080fd5b80630c034968146100965780630f63e42c146100a05780632c81d638146100cb5780633bcfaa14146100d35780633e6fec04146100db575b600080fd5b61009e610157565b005b3480156100ac57600080fd5b506100b56101a3565b6040516100c29190610417565b60405180910390f35b61009e600080fd5b61009e6101f0565b6100b56101a3565b61009e6101fa565b3480156100f757600080fd5b506100b5610241565b34801561010c57600080fd5b506040805180820190915260068152650c1e0c4c8ccd60d21b60208201526100b5565b34801561013b57600080fd5b506100b5610290565b6100b561015236600461046c565b61031e565b60405162461bcd60e51b815260206004820152601b60248201527f43616c6c52656365697665724d6f636b3a20726576657274696e670000000000604482015260640160405180910390fd5b6040516060907f52c66ed6ec9ca819cba26fe2b2650059270d8981b295af300187a964f54a8c2390600090a1506040805180820190915260068152650c1e0c4c8ccd60d21b602082015290565b6101f861048e565b565b60005b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60181905561023a816104a4565b90506101fd565b604080518082019091526002808252611a1960f11b602090920191825260609161026e916000919061037e565b50506040805180820190915260068152650c1e0c4c8ccd60d21b602082015290565b6000805461029d906104cb565b80601f01602080910402602001604051908101604052809291908181526020018280546102c9906104cb565b80156103165780601f106102eb57610100808354040283529160200191610316565b820191906000526020600020905b8154815290600101906020018083116102f957829003601f168201915b505050505081565b60408051838152602081018390526060917f2b42b3c9af4187c86225f201736204c7597312c830cb5c2537dff6ef24b946ae910160405180910390a1506040805180820190915260068152650c1e0c4c8ccd60d21b602082015292915050565b82805461038a906104cb565b90600052602060002090601f0160209004810192826103ac57600085556103f2565b82601f106103c557805160ff19168380011785556103f2565b828001600101855582156103f2579182015b828111156103f25782518255916020019190600101906103d7565b506103fe929150610402565b5090565b5b808211156103fe5760008155600101610403565b600060208083528351808285015260005b8181101561044457858101830151858201604001528201610428565b81811115610456576000604083870101525b50601f01601f1916929092016040019392505050565b6000806040838503121561047f57600080fd5b50508035926020909101359150565b634e487b7160e01b600052600160045260246000fd5b6000600182016104c457634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c908216806104df57607f821691505b6020821081036104ff57634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212203a30d5a6321eedee601d731891f27ade1e8d3e18a2364d8c07c8f7e7e7b1ad4164736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052600436106100915760003560e01c8063a793ab4711610059578063a793ab47146100e3578063aa04f77e146100eb578063c8fc769614610100578063fc40cf731461012f578063fdb273251461014457600080fd5b80630c034968146100965780630f63e42c146100a05780632c81d638146100cb5780633bcfaa14146100d35780633e6fec04146100db575b600080fd5b61009e610157565b005b3480156100ac57600080fd5b506100b56101a3565b6040516100c29190610417565b60405180910390f35b61009e600080fd5b61009e6101f0565b6100b56101a3565b61009e6101fa565b3480156100f757600080fd5b506100b5610241565b34801561010c57600080fd5b506040805180820190915260068152650c1e0c4c8ccd60d21b60208201526100b5565b34801561013b57600080fd5b506100b5610290565b6100b561015236600461046c565b61031e565b60405162461bcd60e51b815260206004820152601b60248201527f43616c6c52656365697665724d6f636b3a20726576657274696e670000000000604482015260640160405180910390fd5b6040516060907f52c66ed6ec9ca819cba26fe2b2650059270d8981b295af300187a964f54a8c2390600090a1506040805180820190915260068152650c1e0c4c8ccd60d21b602082015290565b6101f861048e565b565b60005b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60181905561023a816104a4565b90506101fd565b604080518082019091526002808252611a1960f11b602090920191825260609161026e916000919061037e565b50506040805180820190915260068152650c1e0c4c8ccd60d21b602082015290565b6000805461029d906104cb565b80601f01602080910402602001604051908101604052809291908181526020018280546102c9906104cb565b80156103165780601f106102eb57610100808354040283529160200191610316565b820191906000526020600020905b8154815290600101906020018083116102f957829003601f168201915b505050505081565b60408051838152602081018390526060917f2b42b3c9af4187c86225f201736204c7597312c830cb5c2537dff6ef24b946ae910160405180910390a1506040805180820190915260068152650c1e0c4c8ccd60d21b602082015292915050565b82805461038a906104cb565b90600052602060002090601f0160209004810192826103ac57600085556103f2565b82601f106103c557805160ff19168380011785556103f2565b828001600101855582156103f2579182015b828111156103f25782518255916020019190600101906103d7565b506103fe929150610402565b5090565b5b808211156103fe5760008155600101610403565b600060208083528351808285015260005b8181101561044457858101830151858201604001528201610428565b81811115610456576000604083870101525b50601f01601f1916929092016040019392505050565b6000806040838503121561047f57600080fd5b50508035926020909101359150565b634e487b7160e01b600052600160045260246000fd5b6000600182016104c457634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c908216806104df57607f821691505b6020821081036104ff57634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212203a30d5a6321eedee601d731891f27ade1e8d3e18a2364d8c07c8f7e7e7b1ad4164736f6c634300080d0033"}, "abi": [{"type": "event", "name": "MockFunctionCalled", "inputs": [], "anonymous": false}, {"type": "event", "name": "MockFunctionCalledWithArgs", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "b", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "mockFunction", "stateMutability": "payable", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "mockFunctionNonPayable", "stateMutability": "nonpayable", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "mockFunctionOutOfGas", "stateMutability": "payable", "inputs": [], "outputs": []}, {"type": "function", "name": "mockFunctionRevertsNoReason", "stateMutability": "payable", "inputs": [], "outputs": []}, {"type": "function", "name": "mockFunctionRevertsReason", "stateMutability": "payable", "inputs": [], "outputs": []}, {"type": "function", "name": "mockFunctionThrows", "stateMutability": "payable", "inputs": [], "outputs": []}, {"type": "function", "name": "mockFunctionWithArgs", "stateMutability": "payable", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "mockFunctionWritesStorage", "stateMutability": "nonpayable", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "mockStaticFunction", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "sharedAnswer", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ClashingImplementation": {"contractName": "ClashingImplementation", "sourceId": "mocks/ClashingImplementation.sol", "deploymentBytecode": {"bytecode": "0x6080604052348015600f57600080fd5b5060928061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063abf8e0e7146037578063f851a44014604b575b600080fd5b604051600181526020015b60405180910390f35b60405163111111428152602001604256fea26469706673582212206e6061b2391d167b6716d25be1bc9fd15a38e2ea3a8e2d7c41b7ee515d968f1864736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052348015600f57600080fd5b506004361060325760003560e01c8063abf8e0e7146037578063f851a44014604b575b600080fd5b604051600181526020015b60405180910390f35b60405163111111428152602001604256fea26469706673582212206e6061b2391d167b6716d25be1bc9fd15a38e2ea3a8e2d7c41b7ee515d968f1864736f6c634300080d0033"}, "abi": [{"type": "function", "name": "admin", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "delegatedFunction", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Implementation contract with an admin() function made to clash withTransparentUpgradeableProxy's to test correct functioning of theTransparent Proxy feature.", "kind": "dev", "methods": {}, "version": 1}}, "ClonesMock": {"contractName": "ClonesMock", "sourceId": "mocks/ClonesMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506106d4806100206000396000f3fe6080604052600436106100345760003560e01c80630fbe133c14610039578063360d0fad1461004e5780636e9ebc811461008a575b600080fd5b61004c610047366004610523565b61009d565b005b34801561005a57600080fd5b5061006e610069366004610576565b6100f3565b6040516001600160a01b03909116815260200160405180910390f35b61004c6100983660046105a0565b610111565b6100ee6100b2846001600160a01b031661012d565b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506101cf92505050565b505050565b60006101086001600160a01b0384168361022c565b90505b92915050565b6101276100b26001600160a01b03861685610292565b50505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166101ca5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064015b60405180910390fd5b919050565b8051156101ec576101ea6001600160a01b0383168234610332565b505b6040516001600160a01b03831681527f39a773f10839d86923d91d5ce7d6642f2f63a95d850495abb1f162e38aa04ea59060200160405180910390a15050565b6000610108838330604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b03811661010b5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c656400000000000000000060448201526064016101c1565b606061035884848460405180606001604052806029815260200161067660299139610362565b90505b9392505050565b6060824710156103c35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101c1565b843b6104115760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101c1565b600080866001600160a01b0316858760405161042d9190610626565b60006040518083038185875af1925050503d806000811461046a576040519150601f19603f3d011682016040523d82523d6000602084013e61046f565b606091505b509150915061047f82828661048a565b979650505050505050565b6060831561049957508161035b565b8251156104a95782518084602001fd5b8160405162461bcd60e51b81526004016101c19190610642565b80356001600160a01b03811681146101ca57600080fd5b60008083601f8401126104ec57600080fd5b50813567ffffffffffffffff81111561050457600080fd5b60208301915083602082850101111561051c57600080fd5b9250929050565b60008060006040848603121561053857600080fd5b610541846104c3565b9250602084013567ffffffffffffffff81111561055d57600080fd5b610569868287016104da565b9497909650939450505050565b6000806040838503121561058957600080fd5b610592836104c3565b946020939093013593505050565b600080600080606085870312156105b657600080fd5b6105bf856104c3565b935060208501359250604085013567ffffffffffffffff8111156105e257600080fd5b6105ee878288016104da565b95989497509550505050565b60005b838110156106155781810151838201526020016105fd565b838111156101275750506000910152565b600082516106388184602087016105fa565b9190910192915050565b60208152600082518060208401526106618160408501602087016105fa565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a26469706673582212201db3a8c16067352af32b21cb2ed2e14ed197ef0574909df9460783ce78cc4db464736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052600436106100345760003560e01c80630fbe133c14610039578063360d0fad1461004e5780636e9ebc811461008a575b600080fd5b61004c610047366004610523565b61009d565b005b34801561005a57600080fd5b5061006e610069366004610576565b6100f3565b6040516001600160a01b03909116815260200160405180910390f35b61004c6100983660046105a0565b610111565b6100ee6100b2846001600160a01b031661012d565b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506101cf92505050565b505050565b60006101086001600160a01b0384168361022c565b90505b92915050565b6101276100b26001600160a01b03861685610292565b50505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166101ca5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064015b60405180910390fd5b919050565b8051156101ec576101ea6001600160a01b0383168234610332565b505b6040516001600160a01b03831681527f39a773f10839d86923d91d5ce7d6642f2f63a95d850495abb1f162e38aa04ea59060200160405180910390a15050565b6000610108838330604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b03811661010b5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c656400000000000000000060448201526064016101c1565b606061035884848460405180606001604052806029815260200161067660299139610362565b90505b9392505050565b6060824710156103c35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101c1565b843b6104115760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101c1565b600080866001600160a01b0316858760405161042d9190610626565b60006040518083038185875af1925050503d806000811461046a576040519150601f19603f3d011682016040523d82523d6000602084013e61046f565b606091505b509150915061047f82828661048a565b979650505050505050565b6060831561049957508161035b565b8251156104a95782518084602001fd5b8160405162461bcd60e51b81526004016101c19190610642565b80356001600160a01b03811681146101ca57600080fd5b60008083601f8401126104ec57600080fd5b50813567ffffffffffffffff81111561050457600080fd5b60208301915083602082850101111561051c57600080fd5b9250929050565b60008060006040848603121561053857600080fd5b610541846104c3565b9250602084013567ffffffffffffffff81111561055d57600080fd5b610569868287016104da565b9497909650939450505050565b6000806040838503121561058957600080fd5b610592836104c3565b946020939093013593505050565b600080600080606085870312156105b657600080fd5b6105bf856104c3565b935060208501359250604085013567ffffffffffffffff8111156105e257600080fd5b6105ee878288016104da565b95989497509550505050565b60005b838110156106155781810151838201526020016105fd565b838111156101275750506000910152565b600082516106388184602087016105fa565b9190910192915050565b60208152600082518060208401526106618160408501602087016105fa565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a26469706673582212201db3a8c16067352af32b21cb2ed2e14ed197ef0574909df9460783ce78cc4db464736f6c634300080d0033"}, "abi": [{"type": "event", "name": "NewInstance", "inputs": [{"name": "instance", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "function", "name": "clone", "stateMutability": "payable", "inputs": [{"name": "implementation", "type": "address", "internalType": "address"}, {"name": "initdata", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "cloneDeterministic", "stateMutability": "payable", "inputs": [{"name": "implementation", "type": "address", "internalType": "address"}, {"name": "salt", "type": "bytes32", "internalType": "bytes32"}, {"name": "initdata", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "predictDeterministicAddress", "stateMutability": "view", "inputs": [{"name": "implementation", "type": "address", "internalType": "address"}, {"name": "salt", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "predicted", "type": "address", "internalType": "address"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ConditionalEscrowMock": {"contractName": "ConditionalEscrowMock", "sourceId": "mocks/ConditionalEscrowMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6106ec8061007e6000396000f3fe60806040526004361061007b5760003560e01c80638da5cb5b1161004e5780638da5cb5b1461014b578063e3a9db1a14610173578063f2fde38b146101b7578063f340fa01146101d757600080fd5b80634697f05d1461008057806351cff8d9146100c8578063685ca194146100e8578063715018a614610136575b600080fd5b34801561008c57600080fd5b506100c661009b3660046105f9565b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b005b3480156100d457600080fd5b506100c66100e3366004610637565b6101ea565b3480156100f457600080fd5b50610121610103366004610637565b6001600160a01b031660009081526002602052604090205460ff1690565b60405190151581526020015b60405180910390f35b34801561014257600080fd5b506100c661027f565b34801561015757600080fd5b506000546040516001600160a01b03909116815260200161012d565b34801561017f57600080fd5b506101a961018e366004610637565b6001600160a01b031660009081526001602052604090205490565b60405190815260200161012d565b3480156101c357600080fd5b506100c66101d2366004610637565b6102b5565b6100c66101e5366004610637565b61034d565b6001600160a01b03811660009081526002602052604090205460ff166102735760405162461bcd60e51b815260206004820152603360248201527f436f6e646974696f6e616c457363726f773a207061796565206973206e6f7420604482015272616c6c6f77656420746f20776974686472617760681b60648201526084015b60405180910390fd5b61027c816103e9565b50565b6000546001600160a01b031633146102a95760405162461bcd60e51b815260040161026a9061065b565b6102b36000610476565b565b6000546001600160a01b031633146102df5760405162461bcd60e51b815260040161026a9061065b565b6001600160a01b0381166103445760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161026a565b61027c81610476565b6000546001600160a01b031633146103775760405162461bcd60e51b815260040161026a9061065b565b6001600160a01b0381166000908152600160205260408120805434928392916103a1908490610690565b90915550506040518181526001600160a01b038316907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4906020015b60405180910390a25050565b6000546001600160a01b031633146104135760405162461bcd60e51b815260040161026a9061065b565b6001600160a01b038116600081815260016020526040812080549190559061043b90826104c6565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826040516103dd91815260200190565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b804710156105165760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161026a565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610563576040519150601f19603f3d011682016040523d82523d6000602084013e610568565b606091505b50509050806105df5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161026a565b505050565b6001600160a01b038116811461027c57600080fd5b6000806040838503121561060c57600080fd5b8235610617816105e4565b91506020830135801515811461062c57600080fd5b809150509250929050565b60006020828403121561064957600080fd5b8135610654816105e4565b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156106b157634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a28cf437235ddfafcb413b5c6b951cfbfe46df28936986dee655677a039ae3a564736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x60806040526004361061007b5760003560e01c80638da5cb5b1161004e5780638da5cb5b1461014b578063e3a9db1a14610173578063f2fde38b146101b7578063f340fa01146101d757600080fd5b80634697f05d1461008057806351cff8d9146100c8578063685ca194146100e8578063715018a614610136575b600080fd5b34801561008c57600080fd5b506100c661009b3660046105f9565b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b005b3480156100d457600080fd5b506100c66100e3366004610637565b6101ea565b3480156100f457600080fd5b50610121610103366004610637565b6001600160a01b031660009081526002602052604090205460ff1690565b60405190151581526020015b60405180910390f35b34801561014257600080fd5b506100c661027f565b34801561015757600080fd5b506000546040516001600160a01b03909116815260200161012d565b34801561017f57600080fd5b506101a961018e366004610637565b6001600160a01b031660009081526001602052604090205490565b60405190815260200161012d565b3480156101c357600080fd5b506100c66101d2366004610637565b6102b5565b6100c66101e5366004610637565b61034d565b6001600160a01b03811660009081526002602052604090205460ff166102735760405162461bcd60e51b815260206004820152603360248201527f436f6e646974696f6e616c457363726f773a207061796565206973206e6f7420604482015272616c6c6f77656420746f20776974686472617760681b60648201526084015b60405180910390fd5b61027c816103e9565b50565b6000546001600160a01b031633146102a95760405162461bcd60e51b815260040161026a9061065b565b6102b36000610476565b565b6000546001600160a01b031633146102df5760405162461bcd60e51b815260040161026a9061065b565b6001600160a01b0381166103445760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161026a565b61027c81610476565b6000546001600160a01b031633146103775760405162461bcd60e51b815260040161026a9061065b565b6001600160a01b0381166000908152600160205260408120805434928392916103a1908490610690565b90915550506040518181526001600160a01b038316907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4906020015b60405180910390a25050565b6000546001600160a01b031633146104135760405162461bcd60e51b815260040161026a9061065b565b6001600160a01b038116600081815260016020526040812080549190559061043b90826104c6565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826040516103dd91815260200190565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b804710156105165760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161026a565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610563576040519150601f19603f3d011682016040523d82523d6000602084013e610568565b606091505b50509050806105df5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161026a565b505050565b6001600160a01b038116811461027c57600080fd5b6000806040838503121561060c57600080fd5b8235610617816105e4565b91506020830135801515811461062c57600080fd5b809150509250929050565b60006020828403121561064957600080fd5b8135610654816105e4565b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156106b157634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a28cf437235ddfafcb413b5c6b951cfbfe46df28936986dee655677a039ae3a564736f6c634300080d0033"}, "abi": [{"type": "event", "name": "Deposited", "inputs": [{"name": "payee", "type": "address", "internalType": "address", "indexed": true}, {"name": "weiAmount", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "OwnershipTransferred", "inputs": [{"name": "previousOwner", "type": "address", "internalType": "address", "indexed": true}, {"name": "newOwner", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Withdrawn", "inputs": [{"name": "payee", "type": "address", "internalType": "address", "indexed": true}, {"name": "weiAmount", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "deposit", "stateMutability": "payable", "inputs": [{"name": "payee", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "depositsOf", "stateMutability": "view", "inputs": [{"name": "payee", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "owner", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "renounceOwnership", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "setAllowed", "stateMutability": "nonpayable", "inputs": [{"name": "payee", "type": "address", "internalType": "address"}, {"name": "allowed", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "transferOwnership", "stateMutability": "nonpayable", "inputs": [{"name": "newOwner", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "withdraw", "stateMutability": "nonpayable", "inputs": [{"name": "payee", "type": "address", "internalType": "address payable"}], "outputs": []}, {"type": "function", "name": "withdrawalAllowed", "stateMutability": "view", "inputs": [{"name": "payee", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"deposit(address)": {"details": "Stores the sent amount as credit to be withdrawn.", "params": {"payee": "The destination address of the funds."}}, "owner()": {"details": "Returns the address of the current owner."}, "renounceOwnership()": {"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."}, "transferOwnership(address)": {"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}, "withdraw(address)": {"details": "Withdraw accumulated balance for a payee, forwarding all gas to the recipient. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.", "params": {"payee": "The address whose funds will be withdrawn and transferred to."}}, "withdrawalAllowed(address)": {"details": "Returns whether an address is allowed to withdraw their funds. To be implemented by derived contracts.", "params": {"payee": "The destination address of the funds."}}}, "version": 1}}, "ContextMock": {"contractName": "ContextMock", "sourceId": "mocks/ContextMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5061025e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063376bf2621461003b578063d737d0c714610050575b600080fd5b61004e6100493660046100e5565b610058565b005b61004e61009a565b7faf235354a0a47c91ee171961326335cb2d1a8e55b8a89859b0e61eb049e50ea0600036848460405161008e94939291906101a0565b60405180910390a15050565b6040805133815290517fd6558c3ed910d959271054471fd1c326679d9fece99c5091b00ed89627cf2bfc9181900360200190a1565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156100f857600080fd5b82359150602083013567ffffffffffffffff8082111561011757600080fd5b818501915085601f83011261012b57600080fd5b81358181111561013d5761013d6100cf565b604051601f8201601f19908116603f01168101908382118183101715610165576101656100cf565b8160405282815288602084870101111561017e57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60608152836060820152838560808301376000608085830101526000601f1980601f8701168301602086818601526080858303016040860152855180608084015260005b818110156102005787810183015184820160a0015282016101e4565b8181111561021257600060a083860101525b50601f019092160160a00197965050505050505056fea2646970667358221220e845e49c0a2abb4dcb4548c9a7de7f52d51b7bbba73bf7abbd4e88f6eb12314664736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063376bf2621461003b578063d737d0c714610050575b600080fd5b61004e6100493660046100e5565b610058565b005b61004e61009a565b7faf235354a0a47c91ee171961326335cb2d1a8e55b8a89859b0e61eb049e50ea0600036848460405161008e94939291906101a0565b60405180910390a15050565b6040805133815290517fd6558c3ed910d959271054471fd1c326679d9fece99c5091b00ed89627cf2bfc9181900360200190a1565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156100f857600080fd5b82359150602083013567ffffffffffffffff8082111561011757600080fd5b818501915085601f83011261012b57600080fd5b81358181111561013d5761013d6100cf565b604051601f8201601f19908116603f01168101908382118183101715610165576101656100cf565b8160405282815288602084870101111561017e57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60608152836060820152838560808301376000608085830101526000601f1980601f8701168301602086818601526080858303016040860152855180608084015260005b818110156102005787810183015184820160a0015282016101e4565b8181111561021257600060a083860101525b50601f019092160160a00197965050505050505056fea2646970667358221220e845e49c0a2abb4dcb4548c9a7de7f52d51b7bbba73bf7abbd4e88f6eb12314664736f6c634300080d0033"}, "abi": [{"type": "event", "name": "Data", "inputs": [{"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "integerValue", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "stringValue", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Sender", "inputs": [{"name": "sender", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "function", "name": "msgData", "stateMutability": "nonpayable", "inputs": [{"name": "integerValue", "type": "uint256", "internalType": "uint256"}, {"name": "stringValue", "type": "string", "internalType": "string"}], "outputs": []}, {"type": "function", "name": "msgSender", "stateMutability": "nonpayable", "inputs": [], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ContextMockCaller": {"contractName": "ContextMockCaller", "sourceId": "mocks/ContextMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506102cf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100355760003560e01c80628604591461003a5780633207ad961461004f575b600080fd5b61004d61004836600461014f565b610062565b005b61004d61005d36600461021a565b6100c7565b604051631bb5f93160e11b81526001600160a01b0384169063376bf26290610090908590859060040161023c565b600060405180830381600087803b1580156100aa57600080fd5b505af11580156100be573d6000803e3d6000fd5b50505050505050565b806001600160a01b031663d737d0c76040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561010257600080fd5b505af1158015610116573d6000803e3d6000fd5b5050505050565b80356001600160a01b038116811461013457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561016457600080fd5b61016d8461011d565b925060208401359150604084013567ffffffffffffffff8082111561019157600080fd5b818601915086601f8301126101a557600080fd5b8135818111156101b7576101b7610139565b604051601f8201601f19908116603f011681019083821181831017156101df576101df610139565b816040528281528960208487010111156101f857600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020828403121561022c57600080fd5b6102358261011d565b9392505050565b82815260006020604081840152835180604085015260005b8181101561027057858101830151858201606001528201610254565b81811115610282576000606083870101525b50601f01601f19169290920160600194935050505056fea2646970667358221220b77c620a597f8e88798a608cf89d03bebd7c804b8c6c64a34edad3021eda82be64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100355760003560e01c80628604591461003a5780633207ad961461004f575b600080fd5b61004d61004836600461014f565b610062565b005b61004d61005d36600461021a565b6100c7565b604051631bb5f93160e11b81526001600160a01b0384169063376bf26290610090908590859060040161023c565b600060405180830381600087803b1580156100aa57600080fd5b505af11580156100be573d6000803e3d6000fd5b50505050505050565b806001600160a01b031663d737d0c76040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561010257600080fd5b505af1158015610116573d6000803e3d6000fd5b5050505050565b80356001600160a01b038116811461013457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561016457600080fd5b61016d8461011d565b925060208401359150604084013567ffffffffffffffff8082111561019157600080fd5b818601915086601f8301126101a557600080fd5b8135818111156101b7576101b7610139565b604051601f8201601f19908116603f011681019083821181831017156101df576101df610139565b816040528281528960208487010111156101f857600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020828403121561022c57600080fd5b6102358261011d565b9392505050565b82815260006020604081840152835180604085015260005b8181101561027057858101830151858201606001528201610254565b81811115610282576000606083870101525b50601f01601f19169290920160600194935050505056fea2646970667358221220b77c620a597f8e88798a608cf89d03bebd7c804b8c6c64a34edad3021eda82be64736f6c634300080d0033"}, "abi": [{"type": "function", "name": "callData", "stateMutability": "nonpayable", "inputs": [{"name": "context", "type": "address", "internalType": "contract ContextMock"}, {"name": "integerValue", "type": "uint256", "internalType": "uint256"}, {"name": "stringValue", "type": "string", "internalType": "string"}], "outputs": []}, {"type": "function", "name": "callSender", "stateMutability": "nonpayable", "inputs": [{"name": "context", "type": "address", "internalType": "contract ContextMock"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "CountersImpl": {"contractName": "CountersImpl", "sourceId": "mocks/CountersImpl.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50610123806100206000396000f3fe6080604052348015600f57600080fd5b506004361060465760003560e01c80632baeceb714604b5780639fa6a6e3146053578063d09de08a146068578063d826f88f14606e575b600080fd5b60516074565b005b60005460405190815260200160405180910390f35b6051607e565b6051608b565b607c60006093565b565b607c600080546001019055565b607c60008055565b80548060e55760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f770000000000604482015260640160405180910390fd5b60001901905556fea2646970667358221220747c652843886b2e577a3a1b0c8319e0e56764bdd2dd01daeaa512869389ccba64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052348015600f57600080fd5b506004361060465760003560e01c80632baeceb714604b5780639fa6a6e3146053578063d09de08a146068578063d826f88f14606e575b600080fd5b60516074565b005b60005460405190815260200160405180910390f35b6051607e565b6051608b565b607c60006093565b565b607c600080546001019055565b607c60008055565b80548060e55760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f770000000000604482015260640160405180910390fd5b60001901905556fea2646970667358221220747c652843886b2e577a3a1b0c8319e0e56764bdd2dd01daeaa512869389ccba64736f6c634300080d0033"}, "abi": [{"type": "function", "name": "current", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decrement", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "increment", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "reset", "stateMutability": "nonpayable", "inputs": [], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "Create2Impl": {"contractName": "Create2Impl", "sourceId": "mocks/Create2Impl.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506105b9806100206000396000f3fe6080604052600436106100435760003560e01c8063076c37b21461004f578063481286e61461007157806356299481146100ad57806366cfa057146100cd57600080fd5b3661004a57005b600080fd5b34801561005b57600080fd5b5061006f61006a36600461030e565b6100ed565b005b34801561007d57600080fd5b5061009161008c36600461030e565b61011f565b6040516001600160a01b03909116815260200160405180910390f35b3480156100b957600080fd5b506100916100c8366004610330565b610185565b3480156100d957600080fd5b5061006f6100e836600461038b565b6101e6565b61011a82826040518060200161010290610301565b601f1982820381018352601f909101166040526101f7565b505050565b600061017e8383604080516001600160f81b03196020808301919091526bffffffffffffffffffffffff193060601b16602183015260358201859052605580830185905283518084039091018152607590920190925280519101206000905b9392505050565b604080516001600160f81b03196020808301919091526bffffffffffffffffffffffff19606085901b16602183015260358201869052605580830186905283518084039091018152607590920190925280519101206000905b949350505050565b6101f18383836101f7565b50505050565b6000808447101561024f5760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b82516000036102a05760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f6044820152606401610246565b8383516020850187f590506001600160a01b0381166101de5760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f79000000000000006044820152606401610246565b6101348061045083390190565b6000806040838503121561032157600080fd5b50508035926020909101359150565b60008060006060848603121561034557600080fd5b833592506020840135915060408401356001600160a01b038116811461036a57600080fd5b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156103a057600080fd5b8335925060208401359150604084013567ffffffffffffffff808211156103c657600080fd5b818601915086601f8301126103da57600080fd5b8135818111156103ec576103ec610375565b604051601f8201601f19908116603f0116810190838211818310171561041457610414610375565b8160405282815289602084870101111561042d57600080fd5b826020860160208301376000602084830101528095505050505050925092509256fe608060405234801561001057600080fd5b50610114806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063249cb3fa14602d575b600080fd5b603c603836600460a4565b604e565b60405190815260200160405180910390f35b6000828152602081815260408083206001600160a01b038516845290915281205460ff16607b576000609d565b7fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b9392505050565b6000806040838503121560b657600080fd5b8235915060208301356001600160a01b038116811460d357600080fd5b80915050925092905056fea2646970667358221220640cc461f323b6dd9a283fba2a01542533a6eba087367e4b74b31b2b9d6322a064736f6c634300080d0033a2646970667358221220fc934b82b83d096e5b9596c90d0cc307243b24f6d752d801fe8e4ca7bfc17fdc64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052600436106100435760003560e01c8063076c37b21461004f578063481286e61461007157806356299481146100ad57806366cfa057146100cd57600080fd5b3661004a57005b600080fd5b34801561005b57600080fd5b5061006f61006a36600461030e565b6100ed565b005b34801561007d57600080fd5b5061009161008c36600461030e565b61011f565b6040516001600160a01b03909116815260200160405180910390f35b3480156100b957600080fd5b506100916100c8366004610330565b610185565b3480156100d957600080fd5b5061006f6100e836600461038b565b6101e6565b61011a82826040518060200161010290610301565b601f1982820381018352601f909101166040526101f7565b505050565b600061017e8383604080516001600160f81b03196020808301919091526bffffffffffffffffffffffff193060601b16602183015260358201859052605580830185905283518084039091018152607590920190925280519101206000905b9392505050565b604080516001600160f81b03196020808301919091526bffffffffffffffffffffffff19606085901b16602183015260358201869052605580830186905283518084039091018152607590920190925280519101206000905b949350505050565b6101f18383836101f7565b50505050565b6000808447101561024f5760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b82516000036102a05760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f6044820152606401610246565b8383516020850187f590506001600160a01b0381166101de5760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f79000000000000006044820152606401610246565b6101348061045083390190565b6000806040838503121561032157600080fd5b50508035926020909101359150565b60008060006060848603121561034557600080fd5b833592506020840135915060408401356001600160a01b038116811461036a57600080fd5b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156103a057600080fd5b8335925060208401359150604084013567ffffffffffffffff808211156103c657600080fd5b818601915086601f8301126103da57600080fd5b8135818111156103ec576103ec610375565b604051601f8201601f19908116603f0116810190838211818310171561041457610414610375565b8160405282815289602084870101111561042d57600080fd5b826020860160208301376000602084830101528095505050505050925092509256fe608060405234801561001057600080fd5b50610114806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063249cb3fa14602d575b600080fd5b603c603836600460a4565b604e565b60405190815260200160405180910390f35b6000828152602081815260408083206001600160a01b038516845290915281205460ff16607b576000609d565b7fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b9392505050565b6000806040838503121560b657600080fd5b8235915060208301356001600160a01b038116811460d357600080fd5b80915050925092905056fea2646970667358221220640cc461f323b6dd9a283fba2a01542533a6eba087367e4b74b31b2b9d6322a064736f6c634300080d0033a2646970667358221220fc934b82b83d096e5b9596c90d0cc307243b24f6d752d801fe8e4ca7bfc17fdc64736f6c634300080d0033"}, "abi": [{"type": "function", "name": "computeAddress", "stateMutability": "view", "inputs": [{"name": "salt", "type": "bytes32", "internalType": "bytes32"}, {"name": "codeHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "computeAddressWithDeployer", "stateMutability": "pure", "inputs": [{"name": "salt", "type": "bytes32", "internalType": "bytes32"}, {"name": "codeHash", "type": "bytes32", "internalType": "bytes32"}, {"name": "deployer", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "deploy", "stateMutability": "nonpayable", "inputs": [{"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "salt", "type": "bytes32", "internalType": "bytes32"}, {"name": "code", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "deployERC1820Implementer", "stateMutability": "nonpayable", "inputs": [{"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "salt", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "DummyImplementation": {"contractName": "DummyImplementation", "sourceId": "mocks/DummyImplementation.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50610642806100206000396000f3fe60806040526004361061009c5760003560e01c80635e383d21116100645780635e383d21146101495780636d4ce63c14610169578063763e2831146101855780639fba1f9a146101a5578063d31f8b6b146101af578063e79f5bee146101cf57600080fd5b80631f1bd692146100a1578063227367d5146100cc5780633bccbbc9146100e55780633fa4f245146100fa57806354fd4d501461011e575b600080fd5b3480156100ad57600080fd5b506100b66101dd565b6040516100c391906103dd565b60405180910390f35b3480156100d857600080fd5b506100e3600a600055565b005b3480156100f157600080fd5b506100e361026b565b34801561010657600080fd5b5061011060005481565b6040519081526020016100c3565b34801561012a57600080fd5b50604080518082019091526002815261563160f01b60208201526100b6565b34801561015557600080fd5b50610110610164366004610432565b6102b7565b34801561017557600080fd5b50604051600181526020016100c3565b34801561019157600080fd5b506100e36101a0366004610432565b600055565b6100e36064600055565b3480156101bb57600080fd5b506100e36101ca366004610512565b6102d8565b6100e36101a0366004610432565b600180546101ea906105d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610216906105d2565b80156102635780601f1061023857610100808354040283529160200191610263565b820191906000526020600020905b81548152906001019060200180831161024657829003601f168201915b505050505081565b60405162461bcd60e51b815260206004820152601c60248201527f44756d6d79496d706c656d656e746174696f6e20726576657274656400000000604482015260640160405180910390fd5b600281815481106102c757600080fd5b600091825260209091200154905081565b600083905581516102f090600190602085019061030a565b50805161030490600290602084019061038e565b50505050565b828054610316906105d2565b90600052602060002090601f016020900481019282610338576000855561037e565b82601f1061035157805160ff191683800117855561037e565b8280016001018555821561037e579182015b8281111561037e578251825591602001919060010190610363565b5061038a9291506103c8565b5090565b82805482825590600052602060002090810192821561037e579160200282018281111561037e578251825591602001919060010190610363565b5b8082111561038a57600081556001016103c9565b600060208083528351808285015260005b8181101561040a578581018301518582016040015282016103ee565b8181111561041c576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561044457600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561048a5761048a61044b565b604052919050565b600082601f8301126104a357600080fd5b8135602067ffffffffffffffff8211156104bf576104bf61044b565b8160051b6104ce828201610461565b92835284810182019282810190878511156104e857600080fd5b83870192505b84831015610507578235825291830191908301906104ee565b979650505050505050565b60008060006060848603121561052757600080fd5b8335925060208085013567ffffffffffffffff8082111561054757600080fd5b818701915087601f83011261055b57600080fd5b81358181111561056d5761056d61044b565b61057f601f8201601f19168501610461565b818152898583860101111561059357600080fd5b8185850186830137600091810190940152919350604086013591808311156105ba57600080fd5b50506105c886828701610492565b9150509250925092565b600181811c908216806105e657607f821691505b60208210810361060657634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212205627e7747a42f524a2b02462bdb78cb01d70d2cd099b1e011d69ad09b8b5591f64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x60806040526004361061009c5760003560e01c80635e383d21116100645780635e383d21146101495780636d4ce63c14610169578063763e2831146101855780639fba1f9a146101a5578063d31f8b6b146101af578063e79f5bee146101cf57600080fd5b80631f1bd692146100a1578063227367d5146100cc5780633bccbbc9146100e55780633fa4f245146100fa57806354fd4d501461011e575b600080fd5b3480156100ad57600080fd5b506100b66101dd565b6040516100c391906103dd565b60405180910390f35b3480156100d857600080fd5b506100e3600a600055565b005b3480156100f157600080fd5b506100e361026b565b34801561010657600080fd5b5061011060005481565b6040519081526020016100c3565b34801561012a57600080fd5b50604080518082019091526002815261563160f01b60208201526100b6565b34801561015557600080fd5b50610110610164366004610432565b6102b7565b34801561017557600080fd5b50604051600181526020016100c3565b34801561019157600080fd5b506100e36101a0366004610432565b600055565b6100e36064600055565b3480156101bb57600080fd5b506100e36101ca366004610512565b6102d8565b6100e36101a0366004610432565b600180546101ea906105d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610216906105d2565b80156102635780601f1061023857610100808354040283529160200191610263565b820191906000526020600020905b81548152906001019060200180831161024657829003601f168201915b505050505081565b60405162461bcd60e51b815260206004820152601c60248201527f44756d6d79496d706c656d656e746174696f6e20726576657274656400000000604482015260640160405180910390fd5b600281815481106102c757600080fd5b600091825260209091200154905081565b600083905581516102f090600190602085019061030a565b50805161030490600290602084019061038e565b50505050565b828054610316906105d2565b90600052602060002090601f016020900481019282610338576000855561037e565b82601f1061035157805160ff191683800117855561037e565b8280016001018555821561037e579182015b8281111561037e578251825591602001919060010190610363565b5061038a9291506103c8565b5090565b82805482825590600052602060002090810192821561037e579160200282018281111561037e578251825591602001919060010190610363565b5b8082111561038a57600081556001016103c9565b600060208083528351808285015260005b8181101561040a578581018301518582016040015282016103ee565b8181111561041c576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561044457600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561048a5761048a61044b565b604052919050565b600082601f8301126104a357600080fd5b8135602067ffffffffffffffff8211156104bf576104bf61044b565b8160051b6104ce828201610461565b92835284810182019282810190878511156104e857600080fd5b83870192505b84831015610507578235825291830191908301906104ee565b979650505050505050565b60008060006060848603121561052757600080fd5b8335925060208085013567ffffffffffffffff8082111561054757600080fd5b818701915087601f83011261055b57600080fd5b81358181111561056d5761056d61044b565b61057f601f8201601f19168501610461565b818152898583860101111561059357600080fd5b8185850186830137600091810190940152919350604086013591808311156105ba57600080fd5b50506105c886828701610492565b9150509250925092565b600181811c908216806105e657607f821691505b60208210810361060657634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212205627e7747a42f524a2b02462bdb78cb01d70d2cd099b1e011d69ad09b8b5591f64736f6c634300080d0033"}, "abi": [{"type": "function", "name": "get", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "initialize", "stateMutability": "nonpayable", "inputs": [{"name": "_value", "type": "uint256", "internalType": "uint256"}, {"name": "_text", "type": "string", "internalType": "string"}, {"name": "_values", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": []}, {"type": "function", "name": "initializeNonPayable", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "initializeNonPayableWithValue", "stateMutability": "nonpayable", "inputs": [{"name": "_value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "initializePayable", "stateMutability": "payable", "inputs": [], "outputs": []}, {"type": "function", "name": "initializePayableWithValue", "stateMutability": "payable", "inputs": [{"name": "_value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "reverts", "stateMutability": "pure", "inputs": [], "outputs": []}, {"type": "function", "name": "text", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "value", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "values", "stateMutability": "view", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "version", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "DummyImplementationV2": {"contractName": "DummyImplementationV2", "sourceId": "mocks/DummyImplementation.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5061064d806100206000396000f3fe6080604052600436106100a75760003560e01c80635e383d21116100645780635e383d21146101675780636d4ce63c14610187578063763e2831146101a35780639fba1f9a146101be578063d31f8b6b146101c8578063e79f5bee1461012957600080fd5b80631f1bd692146100ac578063227367d5146100d75780633bccbbc9146100f05780633fa4f24514610105578063454b06081461012957806354fd4d501461013c575b600080fd5b3480156100b857600080fd5b506100c16101e8565b6040516100ce91906103e8565b60405180910390f35b3480156100e357600080fd5b506100ee600a600055565b005b3480156100fc57600080fd5b506100ee610276565b34801561011157600080fd5b5061011b60005481565b6040519081526020016100ce565b6100ee61013736600461043d565b600055565b34801561014857600080fd5b506040805180820190915260028152612b1960f11b60208201526100c1565b34801561017357600080fd5b5061011b61018236600461043d565b6102c2565b34801561019357600080fd5b50604051600181526020016100ce565b3480156101af57600080fd5b506100ee61013736600461043d565b6100ee6064600055565b3480156101d457600080fd5b506100ee6101e336600461051d565b6102e3565b600180546101f5906105dd565b80601f0160208091040260200160405190810160405280929190818152602001828054610221906105dd565b801561026e5780601f106102435761010080835404028352916020019161026e565b820191906000526020600020905b81548152906001019060200180831161025157829003601f168201915b505050505081565b60405162461bcd60e51b815260206004820152601c60248201527f44756d6d79496d706c656d656e746174696f6e20726576657274656400000000604482015260640160405180910390fd5b600281815481106102d257600080fd5b600091825260209091200154905081565b600083905581516102fb906001906020850190610315565b50805161030f906002906020840190610399565b50505050565b828054610321906105dd565b90600052602060002090601f0160209004810192826103435760008555610389565b82601f1061035c57805160ff1916838001178555610389565b82800160010185558215610389579182015b8281111561038957825182559160200191906001019061036e565b506103959291506103d3565b5090565b828054828255906000526020600020908101928215610389579160200282018281111561038957825182559160200191906001019061036e565b5b8082111561039557600081556001016103d4565b600060208083528351808285015260005b81811015610415578581018301518582016040015282016103f9565b81811115610427576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561044f57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561049557610495610456565b604052919050565b600082601f8301126104ae57600080fd5b8135602067ffffffffffffffff8211156104ca576104ca610456565b8160051b6104d982820161046c565b92835284810182019282810190878511156104f357600080fd5b83870192505b84831015610512578235825291830191908301906104f9565b979650505050505050565b60008060006060848603121561053257600080fd5b8335925060208085013567ffffffffffffffff8082111561055257600080fd5b818701915087601f83011261056657600080fd5b81358181111561057857610578610456565b61058a601f8201601f1916850161046c565b818152898583860101111561059e57600080fd5b8185850186830137600091810190940152919350604086013591808311156105c557600080fd5b50506105d38682870161049d565b9150509250925092565b600181811c908216806105f157607f821691505b60208210810361061157634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212202ff03e8e558aab80043176c90851678eed92df343f7f374a994bb4cb61e38fd564736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052600436106100a75760003560e01c80635e383d21116100645780635e383d21146101675780636d4ce63c14610187578063763e2831146101a35780639fba1f9a146101be578063d31f8b6b146101c8578063e79f5bee1461012957600080fd5b80631f1bd692146100ac578063227367d5146100d75780633bccbbc9146100f05780633fa4f24514610105578063454b06081461012957806354fd4d501461013c575b600080fd5b3480156100b857600080fd5b506100c16101e8565b6040516100ce91906103e8565b60405180910390f35b3480156100e357600080fd5b506100ee600a600055565b005b3480156100fc57600080fd5b506100ee610276565b34801561011157600080fd5b5061011b60005481565b6040519081526020016100ce565b6100ee61013736600461043d565b600055565b34801561014857600080fd5b506040805180820190915260028152612b1960f11b60208201526100c1565b34801561017357600080fd5b5061011b61018236600461043d565b6102c2565b34801561019357600080fd5b50604051600181526020016100ce565b3480156101af57600080fd5b506100ee61013736600461043d565b6100ee6064600055565b3480156101d457600080fd5b506100ee6101e336600461051d565b6102e3565b600180546101f5906105dd565b80601f0160208091040260200160405190810160405280929190818152602001828054610221906105dd565b801561026e5780601f106102435761010080835404028352916020019161026e565b820191906000526020600020905b81548152906001019060200180831161025157829003601f168201915b505050505081565b60405162461bcd60e51b815260206004820152601c60248201527f44756d6d79496d706c656d656e746174696f6e20726576657274656400000000604482015260640160405180910390fd5b600281815481106102d257600080fd5b600091825260209091200154905081565b600083905581516102fb906001906020850190610315565b50805161030f906002906020840190610399565b50505050565b828054610321906105dd565b90600052602060002090601f0160209004810192826103435760008555610389565b82601f1061035c57805160ff1916838001178555610389565b82800160010185558215610389579182015b8281111561038957825182559160200191906001019061036e565b506103959291506103d3565b5090565b828054828255906000526020600020908101928215610389579160200282018281111561038957825182559160200191906001019061036e565b5b8082111561039557600081556001016103d4565b600060208083528351808285015260005b81811015610415578581018301518582016040015282016103f9565b81811115610427576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561044f57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561049557610495610456565b604052919050565b600082601f8301126104ae57600080fd5b8135602067ffffffffffffffff8211156104ca576104ca610456565b8160051b6104d982820161046c565b92835284810182019282810190878511156104f357600080fd5b83870192505b84831015610512578235825291830191908301906104f9565b979650505050505050565b60008060006060848603121561053257600080fd5b8335925060208085013567ffffffffffffffff8082111561055257600080fd5b818701915087601f83011261056657600080fd5b81358181111561057857610578610456565b61058a601f8201601f1916850161046c565b818152898583860101111561059e57600080fd5b8185850186830137600091810190940152919350604086013591808311156105c557600080fd5b50506105d38682870161049d565b9150509250925092565b600181811c908216806105f157607f821691505b60208210810361061157634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212202ff03e8e558aab80043176c90851678eed92df343f7f374a994bb4cb61e38fd564736f6c634300080d0033"}, "abi": [{"type": "function", "name": "get", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "initialize", "stateMutability": "nonpayable", "inputs": [{"name": "_value", "type": "uint256", "internalType": "uint256"}, {"name": "_text", "type": "string", "internalType": "string"}, {"name": "_values", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": []}, {"type": "function", "name": "initializeNonPayable", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "initializeNonPayableWithValue", "stateMutability": "nonpayable", "inputs": [{"name": "_value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "initializePayable", "stateMutability": "payable", "inputs": [], "outputs": []}, {"type": "function", "name": "initializePayableWithValue", "stateMutability": "payable", "inputs": [{"name": "_value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "migrate", "stateMutability": "payable", "inputs": [{"name": "newVal", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "reverts", "stateMutability": "pure", "inputs": [], "outputs": []}, {"type": "function", "name": "text", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "value", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "values", "stateMutability": "view", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "version", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "Impl": {"contractName": "Impl", "sourceId": "mocks/DummyImplementation.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "version", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ECDSAMock": {"contractName": "ECDSAMock", "sourceId": "mocks/ECDSAMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5061099e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063126442731461005c57806319045a251461008c578063918a15cf1461009f57806392bd87b5146100c0578063a005410b146100d3575b600080fd5b61006f61006a36600461066e565b6100e6565b6040516001600160a01b0390911681526020015b60405180910390f35b61006f61009a366004610754565b6100fd565b6100b26100ad36600461079b565b610110565b604051908152602001610083565b6100b26100ce3660046107b4565b610121565b61006f6100e13660046107e9565b61012c565b60006100f485858585610141565b95945050505050565b60006101098383610169565b9392505050565b600061011b8261018d565b92915050565b600061011b826101e1565b60006101398484846101ff565b949350505050565b600080600061015287878787610225565b9150915061015f81610312565b5095945050505050565b600080600061017885856104d0565b9150915061018581610312565b509392505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c015b604051602081830303815290604052805190602001209050919050565b60006101ed825161053e565b826040516020016101c4929190610845565b600080600061020f86868661063f565b9150915061021c81610312565b50949350505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561025c5750600090506003610309565b8460ff16601b1415801561027457508460ff16601c14155b156102855750600090506004610309565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156102d9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661030257600060019250925050610309565b9150600090505b94509492505050565b6000816004811115610326576103266108a0565b0361032e5750565b6001816004811115610342576103426108a0565b036103945760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064015b60405180910390fd5b60028160048111156103a8576103a86108a0565b036103f55760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161038b565b6003816004811115610409576104096108a0565b036104615760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161038b565b6004816004811115610475576104756108a0565b036104cd5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161038b565b50565b60008082516041036105065760208301516040840151606085015160001a6104fa87828585610225565b94509450505050610537565b825160400361052f576020830151604084015161052486838361063f565b935093505050610537565b506000905060025b9250929050565b6060816000036105655750506040805180820190915260018152600360fc1b602082015290565b8160005b811561058f5780610579816108cc565b91506105889050600a836108fb565b9150610569565b60008167ffffffffffffffff8111156105aa576105aa6106b1565b6040519080825280601f01601f1916602001820160405280156105d4576020820181803683370190505b5090505b8415610139576105e960018361090f565b91506105f6600a86610926565b61060190603061093a565b60f81b81838151811061061657610616610952565b60200101906001600160f81b031916908160001a905350610638600a866108fb565b94506105d8565b6000806001600160ff1b03831660ff84901c601b0161066087828885610225565b935093505050935093915050565b6000806000806080858703121561068457600080fd5b84359350602085013560ff8116811461069c57600080fd5b93969395505050506040820135916060013590565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126106d857600080fd5b813567ffffffffffffffff808211156106f3576106f36106b1565b604051601f8301601f19908116603f0116810190828211818310171561071b5761071b6106b1565b8160405283815286602085880101111561073457600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561076757600080fd5b82359150602083013567ffffffffffffffff81111561078557600080fd5b610791858286016106c7565b9150509250929050565b6000602082840312156107ad57600080fd5b5035919050565b6000602082840312156107c657600080fd5b813567ffffffffffffffff8111156107dd57600080fd5b610139848285016106c7565b6000806000606084860312156107fe57600080fd5b505081359360208301359350604090920135919050565b60005b83811015610830578181015183820152602001610818565b8381111561083f576000848401525b50505050565b7f19457468657265756d205369676e6564204d6573736167653a0a00000000000081526000835161087d81601a850160208801610815565b83519083019061089481601a840160208801610815565b01601a01949350505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016108de576108de6108b6565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261090a5761090a6108e5565b500490565b600082821015610921576109216108b6565b500390565b600082610935576109356108e5565b500690565b6000821982111561094d5761094d6108b6565b500190565b634e487b7160e01b600052603260045260246000fdfea26469706673582212203e12a99737094cacb62716badf386523ecddaebe369aadff44b864a4d822214d64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063126442731461005c57806319045a251461008c578063918a15cf1461009f57806392bd87b5146100c0578063a005410b146100d3575b600080fd5b61006f61006a36600461066e565b6100e6565b6040516001600160a01b0390911681526020015b60405180910390f35b61006f61009a366004610754565b6100fd565b6100b26100ad36600461079b565b610110565b604051908152602001610083565b6100b26100ce3660046107b4565b610121565b61006f6100e13660046107e9565b61012c565b60006100f485858585610141565b95945050505050565b60006101098383610169565b9392505050565b600061011b8261018d565b92915050565b600061011b826101e1565b60006101398484846101ff565b949350505050565b600080600061015287878787610225565b9150915061015f81610312565b5095945050505050565b600080600061017885856104d0565b9150915061018581610312565b509392505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c015b604051602081830303815290604052805190602001209050919050565b60006101ed825161053e565b826040516020016101c4929190610845565b600080600061020f86868661063f565b9150915061021c81610312565b50949350505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561025c5750600090506003610309565b8460ff16601b1415801561027457508460ff16601c14155b156102855750600090506004610309565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156102d9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661030257600060019250925050610309565b9150600090505b94509492505050565b6000816004811115610326576103266108a0565b0361032e5750565b6001816004811115610342576103426108a0565b036103945760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064015b60405180910390fd5b60028160048111156103a8576103a86108a0565b036103f55760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161038b565b6003816004811115610409576104096108a0565b036104615760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161038b565b6004816004811115610475576104756108a0565b036104cd5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161038b565b50565b60008082516041036105065760208301516040840151606085015160001a6104fa87828585610225565b94509450505050610537565b825160400361052f576020830151604084015161052486838361063f565b935093505050610537565b506000905060025b9250929050565b6060816000036105655750506040805180820190915260018152600360fc1b602082015290565b8160005b811561058f5780610579816108cc565b91506105889050600a836108fb565b9150610569565b60008167ffffffffffffffff8111156105aa576105aa6106b1565b6040519080825280601f01601f1916602001820160405280156105d4576020820181803683370190505b5090505b8415610139576105e960018361090f565b91506105f6600a86610926565b61060190603061093a565b60f81b81838151811061061657610616610952565b60200101906001600160f81b031916908160001a905350610638600a866108fb565b94506105d8565b6000806001600160ff1b03831660ff84901c601b0161066087828885610225565b935093505050935093915050565b6000806000806080858703121561068457600080fd5b84359350602085013560ff8116811461069c57600080fd5b93969395505050506040820135916060013590565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126106d857600080fd5b813567ffffffffffffffff808211156106f3576106f36106b1565b604051601f8301601f19908116603f0116810190828211818310171561071b5761071b6106b1565b8160405283815286602085880101111561073457600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561076757600080fd5b82359150602083013567ffffffffffffffff81111561078557600080fd5b610791858286016106c7565b9150509250929050565b6000602082840312156107ad57600080fd5b5035919050565b6000602082840312156107c657600080fd5b813567ffffffffffffffff8111156107dd57600080fd5b610139848285016106c7565b6000806000606084860312156107fe57600080fd5b505081359360208301359350604090920135919050565b60005b83811015610830578181015183820152602001610818565b8381111561083f576000848401525b50505050565b7f19457468657265756d205369676e6564204d6573736167653a0a00000000000081526000835161087d81601a850160208801610815565b83519083019061089481601a840160208801610815565b01601a01949350505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016108de576108de6108b6565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261090a5761090a6108e5565b500490565b600082821015610921576109216108b6565b500390565b600082610935576109356108e5565b500690565b6000821982111561094d5761094d6108b6565b500190565b634e487b7160e01b600052603260045260246000fdfea26469706673582212203e12a99737094cacb62716badf386523ecddaebe369aadff44b864a4d822214d64736f6c634300080d0033"}, "abi": [{"type": "function", "name": "recover", "stateMutability": "pure", "inputs": [{"name": "hash", "type": "bytes32", "internalType": "bytes32"}, {"name": "signature", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "recover_r_vs", "stateMutability": "pure", "inputs": [{"name": "hash", "type": "bytes32", "internalType": "bytes32"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "vs", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "recover_v_r_s", "stateMutability": "pure", "inputs": [{"name": "hash", "type": "bytes32", "internalType": "bytes32"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "toEthSignedMessageHash", "stateMutability": "pure", "inputs": [{"name": "hash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "toEthSignedMessageHash", "stateMutability": "pure", "inputs": [{"name": "s", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "EIP712External": {"contractName": "EIP712External", "sourceId": "mocks/EIP712External.sol", "deploymentBytecode": {"bytecode": "0x61014060405234801561001157600080fd5b506040516109f53803806109f583398101604081905261003091610186565b815160209283012081519183019190912060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818801819052818301969096526060810194909452608080850193909352308483018190528151808603909301835260c094850190915281519190950120905291909152610120526101e9565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126100eb57600080fd5b81516001600160401b0380821115610105576101056100c4565b604051601f8301601f19908116603f0116810190828211818310171561012d5761012d6100c4565b8160405283815260209250868385880101111561014957600080fd5b600091505b8382101561016b578582018301518183018401529082019061014e565b8382111561017c5760008385830101525b9695505050505050565b6000806040838503121561019957600080fd5b82516001600160401b03808211156101b057600080fd5b6101bc868387016100da565b935060208501519150808211156101d257600080fd5b506101df858286016100da565b9150509250929050565b60805160a05160c05160e05161010051610120516107bd6102386000396000610234015260006102830152600061025e015260006101b7015260006101e10152600061020b01526107bd6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806308c6e079146100465780633408e4701461005b578063f698da251461006f575b600080fd5b6100596100543660046106c1565b610077565b005b465b60405190815260200160405180910390f35b61005d610123565b60006100ed7f847fc9da8ec3c72cae85ca691245eaeb0a4a1e74f77c3a919c43afda231d39ba8484805190602001206040516020016100d2939291909283526001600160a01b03919091166020830152604082015260600190565b60405160208183030381529060405280519060200120610132565b905060006100fb8287610186565b9050846001600160a01b0316816001600160a01b03161461011b57600080fd5b505050505050565b600061012d6101aa565b905090565b600061018061013f6101aa565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b600080600061019585856102d1565b915091506101a28161033f565b509392505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561020357507f000000000000000000000000000000000000000000000000000000000000000046145b1561022d57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b60008082516041036103075760208301516040840151606085015160001a6102fb878285856104fd565b94509450505050610338565b825160400361033057602083015160408401516103258683836105ea565b935093505050610338565b506000905060025b9250929050565b600081600481111561035357610353610771565b0361035b5750565b600181600481111561036f5761036f610771565b036103c15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064015b60405180910390fd5b60028160048111156103d5576103d5610771565b036104225760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016103b8565b600381600481111561043657610436610771565b0361048e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016103b8565b60048160048111156104a2576104a2610771565b036104fa5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016103b8565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561053457506000905060036105e1565b8460ff16601b1415801561054c57508460ff16601c14155b1561055d57506000905060046105e1565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156105b1573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166105da576000600192509250506105e1565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161060b878288856104fd565b935093505050935093915050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561064a5761064a610619565b604051601f8501601f19908116603f0116810190828211818310171561067257610672610619565b8160405280935085815286868601111561068b57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146106bc57600080fd5b919050565b600080600080608085870312156106d757600080fd5b843567ffffffffffffffff808211156106ef57600080fd5b818701915087601f83011261070357600080fd5b6107128883356020850161062f565b9550610720602088016106a5565b945061072e604088016106a5565b9350606087013591508082111561074457600080fd5b508501601f8101871361075657600080fd5b6107658782356020840161062f565b91505092959194509250565b634e487b7160e01b600052602160045260246000fdfea26469706673582212200b49e39b79764b695a71537ca3904827f297255c59e0f6d7af6508948fad8a9264736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806308c6e079146100465780633408e4701461005b578063f698da251461006f575b600080fd5b6100596100543660046106c1565b610077565b005b465b60405190815260200160405180910390f35b61005d610123565b60006100ed7f847fc9da8ec3c72cae85ca691245eaeb0a4a1e74f77c3a919c43afda231d39ba8484805190602001206040516020016100d2939291909283526001600160a01b03919091166020830152604082015260600190565b60405160208183030381529060405280519060200120610132565b905060006100fb8287610186565b9050846001600160a01b0316816001600160a01b03161461011b57600080fd5b505050505050565b600061012d6101aa565b905090565b600061018061013f6101aa565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b600080600061019585856102d1565b915091506101a28161033f565b509392505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561020357507f000000000000000000000000000000000000000000000000000000000000000046145b1561022d57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b60008082516041036103075760208301516040840151606085015160001a6102fb878285856104fd565b94509450505050610338565b825160400361033057602083015160408401516103258683836105ea565b935093505050610338565b506000905060025b9250929050565b600081600481111561035357610353610771565b0361035b5750565b600181600481111561036f5761036f610771565b036103c15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064015b60405180910390fd5b60028160048111156103d5576103d5610771565b036104225760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016103b8565b600381600481111561043657610436610771565b0361048e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016103b8565b60048160048111156104a2576104a2610771565b036104fa5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016103b8565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561053457506000905060036105e1565b8460ff16601b1415801561054c57508460ff16601c14155b1561055d57506000905060046105e1565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156105b1573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166105da576000600192509250506105e1565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161060b878288856104fd565b935093505050935093915050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561064a5761064a610619565b604051601f8501601f19908116603f0116810190828211818310171561067257610672610619565b8160405280935085815286868601111561068b57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146106bc57600080fd5b919050565b600080600080608085870312156106d757600080fd5b843567ffffffffffffffff808211156106ef57600080fd5b818701915087601f83011261070357600080fd5b6107128883356020850161062f565b9550610720602088016106a5565b945061072e604088016106a5565b9350606087013591508082111561074457600080fd5b508501601f8101871361075657600080fd5b6107658782356020840161062f565b91505092959194509250565b634e487b7160e01b600052602160045260246000fdfea26469706673582212200b49e39b79764b695a71537ca3904827f297255c59e0f6d7af6508948fad8a9264736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "version", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "domainSeparator", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "getChainId", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "verify", "stateMutability": "view", "inputs": [{"name": "signature", "type": "bytes", "internalType": "bytes"}, {"name": "signer", "type": "address", "internalType": "address"}, {"name": "mailTo", "type": "address", "internalType": "address"}, {"name": "mailContents", "type": "string", "internalType": "string"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ERC1155BurnableMock": {"contractName": "ERC1155BurnableMock", "sourceId": "mocks/ERC1155BurnableMock.sol", "deploymentBytecode": {"bytecode": "0x60806040523480156200001157600080fd5b5060405162001c1338038062001c1383398101604081905262000034916200011d565b80620000408162000048565b505062000235565b80516200005d90600290602084019062000061565b5050565b8280546200006f90620001f9565b90600052602060002090601f016020900481019282620000935760008555620000de565b82601f10620000ae57805160ff1916838001178555620000de565b82800160010185558215620000de579182015b82811115620000de578251825591602001919060010190620000c1565b50620000ec929150620000f0565b5090565b5b80821115620000ec5760008155600101620000f1565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200013157600080fd5b82516001600160401b03808211156200014957600080fd5b818501915085601f8301126200015e57600080fd5b81518181111562000173576200017362000107565b604051601f8201601f19908116603f011681019083821181831017156200019e576200019e62000107565b816040528281528886848701011115620001b757600080fd5b600093505b82841015620001db5784840186015181850187015292850192620001bc565b82841115620001ed5760008684830101525b98975050505050505050565b600181811c908216806200020e57607f821691505b6020821081036200022f57634e487b7160e01b600052602260045260246000fd5b50919050565b6119ce80620002456000396000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c80636b20c454116100715780636b20c4541461014b578063731133e91461015e578063a22cb46514610171578063e985e9c514610184578063f242432a146101c0578063f5298aca146101d357600080fd5b8062fdd58e146100ad57806301ffc9a7146100d35780630e89341c146100f65780632eb2c2d6146101165780634e1273f41461012b575b600080fd5b6100c06100bb366004610fb3565b6101e6565b6040519081526020015b60405180910390f35b6100e66100e1366004610ff6565b61027d565b60405190151581526020016100ca565b61010961010436600461101a565b6102cf565b6040516100ca9190611080565b6101296101243660046111df565b610363565b005b61013e610139366004611289565b6103fa565b6040516100ca919061138f565b6101296101593660046113a2565b610524565b61012961016c366004611416565b61056c565b61012961017f366004611477565b61057e565b6100e66101923660046114b3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101296101ce3660046114e6565b61058d565b6101296101e136600461154b565b6105d2565b60006001600160a01b0383166102575760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806102ae57506001600160e01b031982166303a24d0760e21b145b806102c957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600280546102de9061157e565b80601f016020809104026020016040519081016040528092919081815260200182805461030a9061157e565b80156103575780601f1061032c57610100808354040283529160200191610357565b820191906000526020600020905b81548152906001019060200180831161033a57829003601f168201915b50505050509050919050565b6001600160a01b03851633148061037f575061037f8533610192565b6103e65760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161024e565b6103f38585858585610615565b5050505050565b6060815183511461045f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161024e565b6000835167ffffffffffffffff81111561047b5761047b611093565b6040519080825280602002602001820160405280156104a4578160200160208202803683370190505b50905060005b845181101561051c576104ef8582815181106104c8576104c86115b8565b60200260200101518583815181106104e2576104e26115b8565b60200260200101516101e6565b828281518110610501576105016115b8565b6020908102919091010152610515816115e4565b90506104aa565b509392505050565b6001600160a01b03831633148061054057506105408333610192565b61055c5760405162461bcd60e51b815260040161024e906115fd565b6105678383836107b1565b505050565b6105788484848461092d565b50505050565b610589338383610a37565b5050565b6001600160a01b0385163314806105a957506105a98533610192565b6105c55760405162461bcd60e51b815260040161024e906115fd565b6103f38585858585610b17565b6001600160a01b0383163314806105ee57506105ee8333610192565b61060a5760405162461bcd60e51b815260040161024e906115fd565b610567838383610c34565b81518351146106365760405162461bcd60e51b815260040161024e90611646565b6001600160a01b03841661065c5760405162461bcd60e51b815260040161024e9061168e565b3360005b845181101561074357600085828151811061067d5761067d6115b8565b60200260200101519050600085838151811061069b5761069b6115b8565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156106eb5760405162461bcd60e51b815260040161024e906116d3565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061072890849061171d565b925050819055505050508061073c906115e4565b9050610660565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610793929190611735565b60405180910390a46107a9818787878787610d36565b505050505050565b6001600160a01b0383166107d75760405162461bcd60e51b815260040161024e90611763565b80518251146107f85760405162461bcd60e51b815260040161024e90611646565b604080516020810190915260009081905233905b83518110156108ce576000848281518110610829576108296115b8565b602002602001015190506000848381518110610847576108476115b8565b602090810291909101810151600084815280835260408082206001600160a01b038c1683529093529190912054909150818110156108975760405162461bcd60e51b815260040161024e906117a6565b6000928352602083815260408085206001600160a01b038b16865290915290922091039055806108c6816115e4565b91505061080c565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161091f929190611735565b60405180910390a450505050565b6001600160a01b03841661098d5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161024e565b336109a78160008761099e88610e91565b6103f388610e91565b6000848152602081815260408083206001600160a01b0389168452909152812080548592906109d790849061171d565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46103f381600087878787610edc565b816001600160a01b0316836001600160a01b031603610aaa5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161024e565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416610b3d5760405162461bcd60e51b815260040161024e9061168e565b33610b4d81878761099e88610e91565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015610b8e5760405162461bcd60e51b815260040161024e906116d3565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290610bcb90849061171d565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610c2b828888888888610edc565b50505050505050565b6001600160a01b038316610c5a5760405162461bcd60e51b815260040161024e90611763565b33610c8a81856000610c6b87610e91565b610c7487610e91565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b038816845290915290205482811015610ccb5760405162461bcd60e51b815260040161024e906117a6565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b0384163b156107a95760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610d7a90899089908890889088906004016117ea565b6020604051808303816000875af1925050508015610db5575060408051601f3d908101601f19168201909252610db291810190611848565b60015b610e6157610dc1611865565b806308c379a003610dfa5750610dd5611881565b80610de05750610dfc565b8060405162461bcd60e51b815260040161024e9190611080565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161024e565b6001600160e01b0319811663bc197c8160e01b14610c2b5760405162461bcd60e51b815260040161024e9061190b565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610ecb57610ecb6115b8565b602090810291909101015292915050565b6001600160a01b0384163b156107a95760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610f209089908990889088908890600401611953565b6020604051808303816000875af1925050508015610f5b575060408051601f3d908101601f19168201909252610f5891810190611848565b60015b610f6757610dc1611865565b6001600160e01b0319811663f23a6e6160e01b14610c2b5760405162461bcd60e51b815260040161024e9061190b565b80356001600160a01b0381168114610fae57600080fd5b919050565b60008060408385031215610fc657600080fd5b610fcf83610f97565b946020939093013593505050565b6001600160e01b031981168114610ff357600080fd5b50565b60006020828403121561100857600080fd5b813561101381610fdd565b9392505050565b60006020828403121561102c57600080fd5b5035919050565b6000815180845260005b818110156110595760208185018101518683018201520161103d565b8181111561106b576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006110136020830184611033565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156110cf576110cf611093565b6040525050565b600067ffffffffffffffff8211156110f0576110f0611093565b5060051b60200190565b600082601f83011261110b57600080fd5b81356020611118826110d6565b60405161112582826110a9565b83815260059390931b850182019282810191508684111561114557600080fd5b8286015b848110156111605780358352918301918301611149565b509695505050505050565b600082601f83011261117c57600080fd5b813567ffffffffffffffff81111561119657611196611093565b6040516111ad601f8301601f1916602001826110a9565b8181528460208386010111156111c257600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156111f757600080fd5b61120086610f97565b945061120e60208701610f97565b9350604086013567ffffffffffffffff8082111561122b57600080fd5b61123789838a016110fa565b9450606088013591508082111561124d57600080fd5b61125989838a016110fa565b9350608088013591508082111561126f57600080fd5b5061127c8882890161116b565b9150509295509295909350565b6000806040838503121561129c57600080fd5b823567ffffffffffffffff808211156112b457600080fd5b818501915085601f8301126112c857600080fd5b813560206112d5826110d6565b6040516112e282826110a9565b83815260059390931b850182019282810191508984111561130257600080fd5b948201945b838610156113275761131886610f97565b82529482019490820190611307565b9650508601359250508082111561133d57600080fd5b5061134a858286016110fa565b9150509250929050565b600081518084526020808501945080840160005b8381101561138457815187529582019590820190600101611368565b509495945050505050565b6020815260006110136020830184611354565b6000806000606084860312156113b757600080fd5b6113c084610f97565b9250602084013567ffffffffffffffff808211156113dd57600080fd5b6113e9878388016110fa565b935060408601359150808211156113ff57600080fd5b5061140c868287016110fa565b9150509250925092565b6000806000806080858703121561142c57600080fd5b61143585610f97565b93506020850135925060408501359150606085013567ffffffffffffffff81111561145f57600080fd5b61146b8782880161116b565b91505092959194509250565b6000806040838503121561148a57600080fd5b61149383610f97565b9150602083013580151581146114a857600080fd5b809150509250929050565b600080604083850312156114c657600080fd5b6114cf83610f97565b91506114dd60208401610f97565b90509250929050565b600080600080600060a086880312156114fe57600080fd5b61150786610f97565b945061151560208701610f97565b93506040860135925060608601359150608086013567ffffffffffffffff81111561153f57600080fd5b61127c8882890161116b565b60008060006060848603121561156057600080fd5b61156984610f97565b95602085013595506040909401359392505050565b600181811c9082168061159257607f821691505b6020821081036115b257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016115f6576115f66115ce565b5060010190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60008219821115611730576117306115ce565b500190565b6040815260006117486040830185611354565b828103602084015261175a8185611354565b95945050505050565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b0386811682528516602082015260a06040820181905260009061181690830186611354565b82810360608401526118288186611354565b9050828103608084015261183c8185611033565b98975050505050505050565b60006020828403121561185a57600080fd5b815161101381610fdd565b600060033d111561187e5760046000803e5060005160e01c5b90565b600060443d101561188f5790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156118bf57505050505090565b82850191508151818111156118d75750505050505090565b843d87010160208285010111156118f15750505050505090565b611900602082860101876110a9565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061198d90830184611033565b97965050505050505056fea2646970667358221220edddc85b5fa211b39f3d47f3e03538be2d640c5980e34317708de925fa66471964736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100a85760003560e01c80636b20c454116100715780636b20c4541461014b578063731133e91461015e578063a22cb46514610171578063e985e9c514610184578063f242432a146101c0578063f5298aca146101d357600080fd5b8062fdd58e146100ad57806301ffc9a7146100d35780630e89341c146100f65780632eb2c2d6146101165780634e1273f41461012b575b600080fd5b6100c06100bb366004610fb3565b6101e6565b6040519081526020015b60405180910390f35b6100e66100e1366004610ff6565b61027d565b60405190151581526020016100ca565b61010961010436600461101a565b6102cf565b6040516100ca9190611080565b6101296101243660046111df565b610363565b005b61013e610139366004611289565b6103fa565b6040516100ca919061138f565b6101296101593660046113a2565b610524565b61012961016c366004611416565b61056c565b61012961017f366004611477565b61057e565b6100e66101923660046114b3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101296101ce3660046114e6565b61058d565b6101296101e136600461154b565b6105d2565b60006001600160a01b0383166102575760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806102ae57506001600160e01b031982166303a24d0760e21b145b806102c957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600280546102de9061157e565b80601f016020809104026020016040519081016040528092919081815260200182805461030a9061157e565b80156103575780601f1061032c57610100808354040283529160200191610357565b820191906000526020600020905b81548152906001019060200180831161033a57829003601f168201915b50505050509050919050565b6001600160a01b03851633148061037f575061037f8533610192565b6103e65760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161024e565b6103f38585858585610615565b5050505050565b6060815183511461045f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161024e565b6000835167ffffffffffffffff81111561047b5761047b611093565b6040519080825280602002602001820160405280156104a4578160200160208202803683370190505b50905060005b845181101561051c576104ef8582815181106104c8576104c86115b8565b60200260200101518583815181106104e2576104e26115b8565b60200260200101516101e6565b828281518110610501576105016115b8565b6020908102919091010152610515816115e4565b90506104aa565b509392505050565b6001600160a01b03831633148061054057506105408333610192565b61055c5760405162461bcd60e51b815260040161024e906115fd565b6105678383836107b1565b505050565b6105788484848461092d565b50505050565b610589338383610a37565b5050565b6001600160a01b0385163314806105a957506105a98533610192565b6105c55760405162461bcd60e51b815260040161024e906115fd565b6103f38585858585610b17565b6001600160a01b0383163314806105ee57506105ee8333610192565b61060a5760405162461bcd60e51b815260040161024e906115fd565b610567838383610c34565b81518351146106365760405162461bcd60e51b815260040161024e90611646565b6001600160a01b03841661065c5760405162461bcd60e51b815260040161024e9061168e565b3360005b845181101561074357600085828151811061067d5761067d6115b8565b60200260200101519050600085838151811061069b5761069b6115b8565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156106eb5760405162461bcd60e51b815260040161024e906116d3565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061072890849061171d565b925050819055505050508061073c906115e4565b9050610660565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610793929190611735565b60405180910390a46107a9818787878787610d36565b505050505050565b6001600160a01b0383166107d75760405162461bcd60e51b815260040161024e90611763565b80518251146107f85760405162461bcd60e51b815260040161024e90611646565b604080516020810190915260009081905233905b83518110156108ce576000848281518110610829576108296115b8565b602002602001015190506000848381518110610847576108476115b8565b602090810291909101810151600084815280835260408082206001600160a01b038c1683529093529190912054909150818110156108975760405162461bcd60e51b815260040161024e906117a6565b6000928352602083815260408085206001600160a01b038b16865290915290922091039055806108c6816115e4565b91505061080c565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161091f929190611735565b60405180910390a450505050565b6001600160a01b03841661098d5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161024e565b336109a78160008761099e88610e91565b6103f388610e91565b6000848152602081815260408083206001600160a01b0389168452909152812080548592906109d790849061171d565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46103f381600087878787610edc565b816001600160a01b0316836001600160a01b031603610aaa5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161024e565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416610b3d5760405162461bcd60e51b815260040161024e9061168e565b33610b4d81878761099e88610e91565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015610b8e5760405162461bcd60e51b815260040161024e906116d3565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290610bcb90849061171d565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610c2b828888888888610edc565b50505050505050565b6001600160a01b038316610c5a5760405162461bcd60e51b815260040161024e90611763565b33610c8a81856000610c6b87610e91565b610c7487610e91565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b038816845290915290205482811015610ccb5760405162461bcd60e51b815260040161024e906117a6565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b0384163b156107a95760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610d7a90899089908890889088906004016117ea565b6020604051808303816000875af1925050508015610db5575060408051601f3d908101601f19168201909252610db291810190611848565b60015b610e6157610dc1611865565b806308c379a003610dfa5750610dd5611881565b80610de05750610dfc565b8060405162461bcd60e51b815260040161024e9190611080565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161024e565b6001600160e01b0319811663bc197c8160e01b14610c2b5760405162461bcd60e51b815260040161024e9061190b565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610ecb57610ecb6115b8565b602090810291909101015292915050565b6001600160a01b0384163b156107a95760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610f209089908990889088908890600401611953565b6020604051808303816000875af1925050508015610f5b575060408051601f3d908101601f19168201909252610f5891810190611848565b60015b610f6757610dc1611865565b6001600160e01b0319811663f23a6e6160e01b14610c2b5760405162461bcd60e51b815260040161024e9061190b565b80356001600160a01b0381168114610fae57600080fd5b919050565b60008060408385031215610fc657600080fd5b610fcf83610f97565b946020939093013593505050565b6001600160e01b031981168114610ff357600080fd5b50565b60006020828403121561100857600080fd5b813561101381610fdd565b9392505050565b60006020828403121561102c57600080fd5b5035919050565b6000815180845260005b818110156110595760208185018101518683018201520161103d565b8181111561106b576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006110136020830184611033565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156110cf576110cf611093565b6040525050565b600067ffffffffffffffff8211156110f0576110f0611093565b5060051b60200190565b600082601f83011261110b57600080fd5b81356020611118826110d6565b60405161112582826110a9565b83815260059390931b850182019282810191508684111561114557600080fd5b8286015b848110156111605780358352918301918301611149565b509695505050505050565b600082601f83011261117c57600080fd5b813567ffffffffffffffff81111561119657611196611093565b6040516111ad601f8301601f1916602001826110a9565b8181528460208386010111156111c257600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156111f757600080fd5b61120086610f97565b945061120e60208701610f97565b9350604086013567ffffffffffffffff8082111561122b57600080fd5b61123789838a016110fa565b9450606088013591508082111561124d57600080fd5b61125989838a016110fa565b9350608088013591508082111561126f57600080fd5b5061127c8882890161116b565b9150509295509295909350565b6000806040838503121561129c57600080fd5b823567ffffffffffffffff808211156112b457600080fd5b818501915085601f8301126112c857600080fd5b813560206112d5826110d6565b6040516112e282826110a9565b83815260059390931b850182019282810191508984111561130257600080fd5b948201945b838610156113275761131886610f97565b82529482019490820190611307565b9650508601359250508082111561133d57600080fd5b5061134a858286016110fa565b9150509250929050565b600081518084526020808501945080840160005b8381101561138457815187529582019590820190600101611368565b509495945050505050565b6020815260006110136020830184611354565b6000806000606084860312156113b757600080fd5b6113c084610f97565b9250602084013567ffffffffffffffff808211156113dd57600080fd5b6113e9878388016110fa565b935060408601359150808211156113ff57600080fd5b5061140c868287016110fa565b9150509250925092565b6000806000806080858703121561142c57600080fd5b61143585610f97565b93506020850135925060408501359150606085013567ffffffffffffffff81111561145f57600080fd5b61146b8782880161116b565b91505092959194509250565b6000806040838503121561148a57600080fd5b61149383610f97565b9150602083013580151581146114a857600080fd5b809150509250929050565b600080604083850312156114c657600080fd5b6114cf83610f97565b91506114dd60208401610f97565b90509250929050565b600080600080600060a086880312156114fe57600080fd5b61150786610f97565b945061151560208701610f97565b93506040860135925060608601359150608086013567ffffffffffffffff81111561153f57600080fd5b61127c8882890161116b565b60008060006060848603121561156057600080fd5b61156984610f97565b95602085013595506040909401359392505050565b600181811c9082168061159257607f821691505b6020821081036115b257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016115f6576115f66115ce565b5060010190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60008219821115611730576117306115ce565b500190565b6040815260006117486040830185611354565b828103602084015261175a8185611354565b95945050505050565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b0386811682528516602082015260a06040820181905260009061181690830186611354565b82810360608401526118288186611354565b9050828103608084015261183c8185611033565b98975050505050505050565b60006020828403121561185a57600080fd5b815161101381610fdd565b600060033d111561187e5760046000803e5060005160e01c5b90565b600060443d101561188f5790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156118bf57505050505090565b82850191508151818111156118d75750505050505090565b843d87010160208285010111156118f15750505050505090565b611900602082860101876110a9565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061198d90830184611033565b97965050505050505056fea2646970667358221220edddc85b5fa211b39f3d47f3e03538be2d640c5980e34317708de925fa66471964736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "uri", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TransferBatch", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TransferSingle", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "URI", "inputs": [{"name": "value", "type": "string", "internalType": "string", "indexed": false}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfBatch", "stateMutability": "view", "inputs": [{"name": "accounts", "type": "address[]", "internalType": "address[]"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": [{"name": "", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "burnBatch", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": []}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeBatchTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "uri", "stateMutability": "view", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"balanceOf(address,uint256)": {"details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."}, "balanceOfBatch(address[],uint256[])": {"details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."}, "isApprovedForAll(address,address)": {"details": "See {IERC1155-isApprovedForAll}."}, "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {"details": "See {IERC1155-safeBatchTransferFrom}."}, "safeTransferFrom(address,address,uint256,uint256,bytes)": {"details": "See {IERC1155-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC1155-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "uri(uint256)": {"details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}}, "version": 1}}, "ERC1155Mock": {"contractName": "ERC1155Mock", "sourceId": "mocks/ERC1155Mock.sol", "deploymentBytecode": {"bytecode": "0x60806040523480156200001157600080fd5b5060405162001ee338038062001ee383398101604081905262000034916200011d565b80620000408162000048565b505062000235565b80516200005d90600290602084019062000061565b5050565b8280546200006f90620001f9565b90600052602060002090601f016020900481019282620000935760008555620000de565b82601f10620000ae57805160ff1916838001178555620000de565b82800160010185558215620000de579182015b82811115620000de578251825591602001919060010190620000c1565b50620000ec929150620000f0565b5090565b5b80821115620000ec5760008155600101620000f1565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200013157600080fd5b82516001600160401b03808211156200014957600080fd5b818501915085601f8301126200015e57600080fd5b81518181111562000173576200017362000107565b604051601f8201601f19908116603f011681019083821181831017156200019e576200019e62000107565b816040528281528886848701011115620001b757600080fd5b600093505b82841015620001db5784840186015181850187015292850192620001bc565b82841115620001ed5760008684830101525b98975050505050505050565b600181811c908216806200020e57607f821691505b6020821081036200022f57634e487b7160e01b600052602260045260246000fd5b50919050565b611c9e80620002456000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c80634e1273f41161008c578063a22cb46511610066578063a22cb465146101bd578063e985e9c5146101d0578063f242432a1461020c578063f5298aca1461021f57600080fd5b80634e1273f4146101775780636b20c45414610197578063731133e9146101aa57600080fd5b8062fdd58e146100d357806301ffc9a7146100f957806302fe53051461011c5780630e89341c146101315780631f7fdffa146101515780632eb2c2d614610164575b600080fd5b6100e66100e13660046111a6565b610232565b6040519081526020015b60405180910390f35b61010c6101073660046111e6565b6102c9565b60405190151581526020016100f0565b61012f61012a3660046112ab565b61031b565b005b61014461013f3660046112fc565b610327565b6040516100f09190611362565b61012f61015f36600461142a565b6103bb565b61012f6101723660046114c3565b6103cd565b61018a61018536600461156d565b610464565b6040516100f09190611673565b61012f6101a5366004611686565b61058e565b61012f6101b83660046116fa565b61059e565b61012f6101cb36600461174f565b6105aa565b61010c6101de36600461178b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61012f61021a3660046117be565b6105b9565b61012f61022d366004611823565b610640565b60006001600160a01b0383166102a35760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806102fa57506001600160e01b031982166303a24d0760e21b145b8061031557506301ffc9a760e01b6001600160e01b03198316145b92915050565b6103248161064b565b50565b60606002805461033690611856565b80601f016020809104026020016040519081016040528092919081815260200182805461036290611856565b80156103af5780601f10610384576101008083540402835291602001916103af565b820191906000526020600020905b81548152906001019060200180831161039257829003601f168201915b50505050509050919050565b6103c78484848461065e565b50505050565b6001600160a01b0385163314806103e957506103e985336101de565b6104505760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161029a565b61045d85858585856107a9565b5050505050565b606081518351146104c95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161029a565b6000835167ffffffffffffffff8111156104e5576104e561120a565b60405190808252806020026020018201604052801561050e578160200160208202803683370190505b50905060005b84518110156105865761055985828151811061053257610532611890565b602002602001015185838151811061054c5761054c611890565b6020026020010151610232565b82828151811061056b5761056b611890565b602090810291909101015261057f816118bc565b9050610514565b509392505050565b610599838383610945565b505050565b6103c784848484610ac1565b6105b5338383610b91565b5050565b6001600160a01b0385163314806105d557506105d585336101de565b6106335760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161029a565b61045d8585858585610c71565b610599838383610d8e565b80516105b59060029060208401906110f1565b6001600160a01b0384166106845760405162461bcd60e51b815260040161029a906118d5565b81518351146106a55760405162461bcd60e51b815260040161029a90611916565b3360005b8451811015610741578381815181106106c4576106c4611890565b60200260200101516000808784815181106106e1576106e1611890565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254610729919061195e565b90915550819050610739816118bc565b9150506106a9565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610792929190611976565b60405180910390a461045d81600087878787610e90565b81518351146107ca5760405162461bcd60e51b815260040161029a90611916565b6001600160a01b0384166107f05760405162461bcd60e51b815260040161029a906119a4565b3360005b84518110156108d757600085828151811061081157610811611890565b60200260200101519050600085838151811061082f5761082f611890565b602090810291909101810151600084815280835260408082206001600160a01b038e16835290935291909120549091508181101561087f5760405162461bcd60e51b815260040161029a906119e9565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906108bc90849061195e565b92505081905550505050806108d0906118bc565b90506107f4565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610927929190611976565b60405180910390a461093d818787878787610e90565b505050505050565b6001600160a01b03831661096b5760405162461bcd60e51b815260040161029a90611a33565b805182511461098c5760405162461bcd60e51b815260040161029a90611916565b604080516020810190915260009081905233905b8351811015610a625760008482815181106109bd576109bd611890565b6020026020010151905060008483815181106109db576109db611890565b602090810291909101810151600084815280835260408082206001600160a01b038c168352909352919091205490915081811015610a2b5760405162461bcd60e51b815260040161029a90611a76565b6000928352602083815260408085206001600160a01b038b1686529091529092209103905580610a5a816118bc565b9150506109a0565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051610ab3929190611976565b60405180910390a450505050565b6001600160a01b038416610ae75760405162461bcd60e51b815260040161029a906118d5565b33610b0181600087610af888610feb565b61045d88610feb565b6000848152602081815260408083206001600160a01b038916845290915281208054859290610b3190849061195e565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461045d81600087878787611036565b816001600160a01b0316836001600160a01b031603610c045760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161029a565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416610c975760405162461bcd60e51b815260040161029a906119a4565b33610ca7818787610af888610feb565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015610ce85760405162461bcd60e51b815260040161029a906119e9565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290610d2590849061195e565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610d85828888888888611036565b50505050505050565b6001600160a01b038316610db45760405162461bcd60e51b815260040161029a90611a33565b33610de481856000610dc587610feb565b610dce87610feb565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b038816845290915290205482811015610e255760405162461bcd60e51b815260040161029a90611a76565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b0384163b1561093d5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610ed49089908990889088908890600401611aba565b6020604051808303816000875af1925050508015610f0f575060408051601f3d908101601f19168201909252610f0c91810190611b18565b60015b610fbb57610f1b611b35565b806308c379a003610f545750610f2f611b51565b80610f3a5750610f56565b8060405162461bcd60e51b815260040161029a9190611362565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161029a565b6001600160e01b0319811663bc197c8160e01b14610d855760405162461bcd60e51b815260040161029a90611bdb565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061102557611025611890565b602090810291909101015292915050565b6001600160a01b0384163b1561093d5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061107a9089908990889088908890600401611c23565b6020604051808303816000875af19250505080156110b5575060408051601f3d908101601f191682019092526110b291810190611b18565b60015b6110c157610f1b611b35565b6001600160e01b0319811663f23a6e6160e01b14610d855760405162461bcd60e51b815260040161029a90611bdb565b8280546110fd90611856565b90600052602060002090601f01602090048101928261111f5760008555611165565b82601f1061113857805160ff1916838001178555611165565b82800160010185558215611165579182015b8281111561116557825182559160200191906001019061114a565b50611171929150611175565b5090565b5b808211156111715760008155600101611176565b80356001600160a01b03811681146111a157600080fd5b919050565b600080604083850312156111b957600080fd5b6111c28361118a565b946020939093013593505050565b6001600160e01b03198116811461032457600080fd5b6000602082840312156111f857600080fd5b8135611203816111d0565b9392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156112465761124661120a565b6040525050565b600067ffffffffffffffff8311156112675761126761120a565b60405161127e601f8501601f191660200182611220565b80915083815284848401111561129357600080fd5b83836020830137600060208583010152509392505050565b6000602082840312156112bd57600080fd5b813567ffffffffffffffff8111156112d457600080fd5b8201601f810184136112e557600080fd5b6112f48482356020840161124d565b949350505050565b60006020828403121561130e57600080fd5b5035919050565b6000815180845260005b8181101561133b5760208185018101518683018201520161131f565b8181111561134d576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006112036020830184611315565b600067ffffffffffffffff82111561138f5761138f61120a565b5060051b60200190565b600082601f8301126113aa57600080fd5b813560206113b782611375565b6040516113c48282611220565b83815260059390931b85018201928281019150868411156113e457600080fd5b8286015b848110156113ff57803583529183019183016113e8565b509695505050505050565b600082601f83011261141b57600080fd5b6112038383356020850161124d565b6000806000806080858703121561144057600080fd5b6114498561118a565b9350602085013567ffffffffffffffff8082111561146657600080fd5b61147288838901611399565b9450604087013591508082111561148857600080fd5b61149488838901611399565b935060608701359150808211156114aa57600080fd5b506114b78782880161140a565b91505092959194509250565b600080600080600060a086880312156114db57600080fd5b6114e48661118a565b94506114f26020870161118a565b9350604086013567ffffffffffffffff8082111561150f57600080fd5b61151b89838a01611399565b9450606088013591508082111561153157600080fd5b61153d89838a01611399565b9350608088013591508082111561155357600080fd5b506115608882890161140a565b9150509295509295909350565b6000806040838503121561158057600080fd5b823567ffffffffffffffff8082111561159857600080fd5b818501915085601f8301126115ac57600080fd5b813560206115b982611375565b6040516115c68282611220565b83815260059390931b85018201928281019150898411156115e657600080fd5b948201945b8386101561160b576115fc8661118a565b825294820194908201906115eb565b9650508601359250508082111561162157600080fd5b5061162e85828601611399565b9150509250929050565b600081518084526020808501945080840160005b838110156116685781518752958201959082019060010161164c565b509495945050505050565b6020815260006112036020830184611638565b60008060006060848603121561169b57600080fd5b6116a48461118a565b9250602084013567ffffffffffffffff808211156116c157600080fd5b6116cd87838801611399565b935060408601359150808211156116e357600080fd5b506116f086828701611399565b9150509250925092565b6000806000806080858703121561171057600080fd5b6117198561118a565b93506020850135925060408501359150606085013567ffffffffffffffff81111561174357600080fd5b6114b78782880161140a565b6000806040838503121561176257600080fd5b61176b8361118a565b91506020830135801515811461178057600080fd5b809150509250929050565b6000806040838503121561179e57600080fd5b6117a78361118a565b91506117b56020840161118a565b90509250929050565b600080600080600060a086880312156117d657600080fd5b6117df8661118a565b94506117ed6020870161118a565b93506040860135925060608601359150608086013567ffffffffffffffff81111561181757600080fd5b6115608882890161140a565b60008060006060848603121561183857600080fd5b6118418461118a565b95602085013595506040909401359392505050565b600181811c9082168061186a57607f821691505b60208210810361188a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016118ce576118ce6118a6565b5060010190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60008219821115611971576119716118a6565b500190565b6040815260006119896040830185611638565b828103602084015261199b8185611638565b95945050505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b0386811682528516602082015260a060408201819052600090611ae690830186611638565b8281036060840152611af88186611638565b90508281036080840152611b0c8185611315565b98975050505050505050565b600060208284031215611b2a57600080fd5b8151611203816111d0565b600060033d1115611b4e5760046000803e5060005160e01c5b90565b600060443d1015611b5f5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715611b8f57505050505090565b8285019150815181811115611ba75750505050505090565b843d8701016020828501011115611bc15750505050505090565b611bd060208286010187611220565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611c5d90830184611315565b97965050505050505056fea264697066735822122012b698f17aa4aef2754aae66d4a126c23aa6013bc6695e88f53f943a1eb8de7064736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "uri", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TransferBatch", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TransferSingle", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "URI", "inputs": [{"name": "value", "type": "string", "internalType": "string", "indexed": false}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfBatch", "stateMutability": "view", "inputs": [{"name": "accounts", "type": "address[]", "internalType": "address[]"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": [{"name": "", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "burnBatch", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": []}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "mintBatch", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeBatchTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "setURI", "stateMutability": "nonpayable", "inputs": [{"name": "newuri", "type": "string", "internalType": "string"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "uri", "stateMutability": "view", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"balanceOf(address,uint256)": {"details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."}, "balanceOfBatch(address[],uint256[])": {"details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."}, "isApprovedForAll(address,address)": {"details": "See {IERC1155-isApprovedForAll}."}, "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {"details": "See {IERC1155-safeBatchTransferFrom}."}, "safeTransferFrom(address,address,uint256,uint256,bytes)": {"details": "See {IERC1155-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC1155-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "uri(uint256)": {"details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}}, "title": "ERC1155Mock This mock just publicizes internal functions for testing purposes", "version": 1}}, "ERC1155PausableMock": {"contractName": "ERC1155PausableMock", "sourceId": "mocks/ERC1155PausableMock.sol", "deploymentBytecode": {"bytecode": "0x60806040523480156200001157600080fd5b506040516200210538038062002105833981016040819052620000349162000129565b8080620000418162000054565b50506003805460ff191690555062000241565b8051620000699060029060208401906200006d565b5050565b8280546200007b9062000205565b90600052602060002090601f0160209004810192826200009f5760008555620000ea565b82601f10620000ba57805160ff1916838001178555620000ea565b82800160010185558215620000ea579182015b82811115620000ea578251825591602001919060010190620000cd565b50620000f8929150620000fc565b5090565b5b80821115620000f85760008155600101620000fd565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200013d57600080fd5b82516001600160401b03808211156200015557600080fd5b818501915085601f8301126200016a57600080fd5b8151818111156200017f576200017f62000113565b604051601f8201601f19908116603f01168101908382118183101715620001aa57620001aa62000113565b816040528281528886848701011115620001c357600080fd5b600093505b82841015620001e75784840186015181850187015292850192620001c8565b82841115620001f95760008684830101525b98975050505050505050565b600181811c908216806200021a57607f821691505b6020821081036200023b57634e487b7160e01b600052602260045260246000fd5b50919050565b611eb480620002516000396000f3fe608060405234801561001057600080fd5b50600436106100ff5760003560e01c80635c975abb11610097578063a22cb46511610066578063a22cb46514610209578063e985e9c51461021c578063f242432a14610258578063f5298aca1461026b57600080fd5b80635c975abb146101d05780636b20c454146101db578063731133e9146101ee5780638456cb591461020157600080fd5b80631f7fdffa116100d35780631f7fdffa146101825780632eb2c2d6146101955780633f4ba83a146101a85780634e1273f4146101b057600080fd5b8062fdd58e1461010457806301ffc9a71461012a57806302fe53051461014d5780630e89341c14610162575b600080fd5b6101176101123660046113bc565b61027e565b6040519081526020015b60405180910390f35b61013d6101383660046113fc565b610315565b6040519015158152602001610121565b61016061015b3660046114c1565b610367565b005b610175610170366004611512565b610373565b6040516101219190611578565b610160610190366004611640565b610407565b6101606101a33660046116d9565b610419565b6101606104b0565b6101c36101be366004611783565b6104ba565b6040516101219190611889565b60035460ff1661013d565b6101606101e936600461189c565b6105e4565b6101606101fc366004611910565b6105f4565b610160610600565b610160610217366004611965565b610608565b61013d61022a3660046119a1565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101606102663660046119d4565b610617565b610160610279366004611a39565b61069e565b60006001600160a01b0383166102ef5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061034657506001600160e01b031982166303a24d0760e21b145b8061036157506301ffc9a760e01b6001600160e01b03198316145b92915050565b610370816106a9565b50565b60606002805461038290611a6c565b80601f01602080910402602001604051908101604052809291908181526020018280546103ae90611a6c565b80156103fb5780601f106103d0576101008083540402835291602001916103fb565b820191906000526020600020905b8154815290600101906020018083116103de57829003601f168201915b50505050509050919050565b610413848484846106bc565b50505050565b6001600160a01b0385163314806104355750610435853361022a565b61049c5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016102e6565b6104a98585858585610816565b5050505050565b6104b86109c0565b565b6060815183511461051f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016102e6565b6000835167ffffffffffffffff81111561053b5761053b611420565b604051908082528060200260200182016040528015610564578160200160208202803683370190505b50905060005b84518110156105dc576105af85828151811061058857610588611aa6565b60200260200101518583815181106105a2576105a2611aa6565b602002602001015161027e565b8282815181106105c1576105c1611aa6565b60209081029190910101526105d581611ad2565b905061056a565b509392505050565b6105ef838383610a53565b505050565b61041384848484610be1565b6104b8610cb7565b610613338383610d32565b5050565b6001600160a01b0385163314806106335750610633853361022a565b6106915760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016102e6565b6104a98585858585610e12565b6105ef838383610f2f565b8051610613906002906020840190611307565b6001600160a01b0384166106e25760405162461bcd60e51b81526004016102e690611aeb565b81518351146107035760405162461bcd60e51b81526004016102e690611b2c565b3361071381600087878787611030565b60005b84518110156107ae5783818151811061073157610731611aa6565b602002602001015160008087848151811061074e5761074e611aa6565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546107969190611b74565b909155508190506107a681611ad2565b915050610716565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516107ff929190611b8c565b60405180910390a46104a98160008787878761103e565b81518351146108375760405162461bcd60e51b81526004016102e690611b2c565b6001600160a01b03841661085d5760405162461bcd60e51b81526004016102e690611bba565b3361086c818787878787611030565b60005b845181101561095257600085828151811061088c5761088c611aa6565b6020026020010151905060008583815181106108aa576108aa611aa6565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156108fa5760405162461bcd60e51b81526004016102e690611bff565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610937908490611b74565b925050819055505050508061094b90611ad2565b905061086f565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516109a2929190611b8c565b60405180910390a46109b881878787878761103e565b505050505050565b60035460ff16610a095760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102e6565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038316610a795760405162461bcd60e51b81526004016102e690611c49565b8051825114610a9a5760405162461bcd60e51b81526004016102e690611b2c565b6000339050610abd81856000868660405180602001604052806000815250611030565b60005b8351811015610b82576000848281518110610add57610add611aa6565b602002602001015190506000848381518110610afb57610afb611aa6565b602090810291909101810151600084815280835260408082206001600160a01b038c168352909352919091205490915081811015610b4b5760405162461bcd60e51b81526004016102e690611c8c565b6000928352602083815260408085206001600160a01b038b1686529091529092209103905580610b7a81611ad2565b915050610ac0565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051610bd3929190611b8c565b60405180910390a450505050565b6001600160a01b038416610c075760405162461bcd60e51b81526004016102e690611aeb565b33610c2781600087610c1888611199565b610c2188611199565b87611030565b6000848152602081815260408083206001600160a01b038916845290915281208054859290610c57908490611b74565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46104a9816000878787876111e4565b60035460ff1615610cfd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102e6565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610a363390565b816001600160a01b0316836001600160a01b031603610da55760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016102e6565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416610e385760405162461bcd60e51b81526004016102e690611bba565b33610e48818787610c1888611199565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015610e895760405162461bcd60e51b81526004016102e690611bff565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290610ec6908490611b74565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610f268288888888886111e4565b50505050505050565b6001600160a01b038316610f555760405162461bcd60e51b81526004016102e690611c49565b33610f8481856000610f6687611199565b610f6f87611199565b60405180602001604052806000815250611030565b6000838152602081815260408083206001600160a01b038816845290915290205482811015610fc55760405162461bcd60e51b81526004016102e690611c8c565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6109b886868686868661129f565b6001600160a01b0384163b156109b85760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906110829089908990889088908890600401611cd0565b6020604051808303816000875af19250505080156110bd575060408051601f3d908101601f191682019092526110ba91810190611d2e565b60015b611169576110c9611d4b565b806308c379a00361110257506110dd611d67565b806110e85750611104565b8060405162461bcd60e51b81526004016102e69190611578565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016102e6565b6001600160e01b0319811663bc197c8160e01b14610f265760405162461bcd60e51b81526004016102e690611df1565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106111d3576111d3611aa6565b602090810291909101015292915050565b6001600160a01b0384163b156109b85760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906112289089908990889088908890600401611e39565b6020604051808303816000875af1925050508015611263575060408051601f3d908101601f1916820190925261126091810190611d2e565b60015b61126f576110c9611d4b565b6001600160e01b0319811663f23a6e6160e01b14610f265760405162461bcd60e51b81526004016102e690611df1565b60035460ff16156109b85760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201526b1dda1a5b19481c185d5cd95960a21b60648201526084016102e6565b82805461131390611a6c565b90600052602060002090601f016020900481019282611335576000855561137b565b82601f1061134e57805160ff191683800117855561137b565b8280016001018555821561137b579182015b8281111561137b578251825591602001919060010190611360565b5061138792915061138b565b5090565b5b80821115611387576000815560010161138c565b80356001600160a01b03811681146113b757600080fd5b919050565b600080604083850312156113cf57600080fd5b6113d8836113a0565b946020939093013593505050565b6001600160e01b03198116811461037057600080fd5b60006020828403121561140e57600080fd5b8135611419816113e6565b9392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561145c5761145c611420565b6040525050565b600067ffffffffffffffff83111561147d5761147d611420565b604051611494601f8501601f191660200182611436565b8091508381528484840111156114a957600080fd5b83836020830137600060208583010152509392505050565b6000602082840312156114d357600080fd5b813567ffffffffffffffff8111156114ea57600080fd5b8201601f810184136114fb57600080fd5b61150a84823560208401611463565b949350505050565b60006020828403121561152457600080fd5b5035919050565b6000815180845260005b8181101561155157602081850181015186830182015201611535565b81811115611563576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611419602083018461152b565b600067ffffffffffffffff8211156115a5576115a5611420565b5060051b60200190565b600082601f8301126115c057600080fd5b813560206115cd8261158b565b6040516115da8282611436565b83815260059390931b85018201928281019150868411156115fa57600080fd5b8286015b8481101561161557803583529183019183016115fe565b509695505050505050565b600082601f83011261163157600080fd5b61141983833560208501611463565b6000806000806080858703121561165657600080fd5b61165f856113a0565b9350602085013567ffffffffffffffff8082111561167c57600080fd5b611688888389016115af565b9450604087013591508082111561169e57600080fd5b6116aa888389016115af565b935060608701359150808211156116c057600080fd5b506116cd87828801611620565b91505092959194509250565b600080600080600060a086880312156116f157600080fd5b6116fa866113a0565b9450611708602087016113a0565b9350604086013567ffffffffffffffff8082111561172557600080fd5b61173189838a016115af565b9450606088013591508082111561174757600080fd5b61175389838a016115af565b9350608088013591508082111561176957600080fd5b5061177688828901611620565b9150509295509295909350565b6000806040838503121561179657600080fd5b823567ffffffffffffffff808211156117ae57600080fd5b818501915085601f8301126117c257600080fd5b813560206117cf8261158b565b6040516117dc8282611436565b83815260059390931b85018201928281019150898411156117fc57600080fd5b948201945b8386101561182157611812866113a0565b82529482019490820190611801565b9650508601359250508082111561183757600080fd5b50611844858286016115af565b9150509250929050565b600081518084526020808501945080840160005b8381101561187e57815187529582019590820190600101611862565b509495945050505050565b602081526000611419602083018461184e565b6000806000606084860312156118b157600080fd5b6118ba846113a0565b9250602084013567ffffffffffffffff808211156118d757600080fd5b6118e3878388016115af565b935060408601359150808211156118f957600080fd5b50611906868287016115af565b9150509250925092565b6000806000806080858703121561192657600080fd5b61192f856113a0565b93506020850135925060408501359150606085013567ffffffffffffffff81111561195957600080fd5b6116cd87828801611620565b6000806040838503121561197857600080fd5b611981836113a0565b91506020830135801515811461199657600080fd5b809150509250929050565b600080604083850312156119b457600080fd5b6119bd836113a0565b91506119cb602084016113a0565b90509250929050565b600080600080600060a086880312156119ec57600080fd5b6119f5866113a0565b9450611a03602087016113a0565b93506040860135925060608601359150608086013567ffffffffffffffff811115611a2d57600080fd5b61177688828901611620565b600080600060608486031215611a4e57600080fd5b611a57846113a0565b95602085013595506040909401359392505050565b600181811c90821680611a8057607f821691505b602082108103611aa057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611ae457611ae4611abc565b5060010190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60008219821115611b8757611b87611abc565b500190565b604081526000611b9f604083018561184e565b8281036020840152611bb1818561184e565b95945050505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b0386811682528516602082015260a060408201819052600090611cfc9083018661184e565b8281036060840152611d0e818661184e565b90508281036080840152611d22818561152b565b98975050505050505050565b600060208284031215611d4057600080fd5b8151611419816113e6565b600060033d1115611d645760046000803e5060005160e01c5b90565b600060443d1015611d755790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715611da557505050505090565b8285019150815181811115611dbd5750505050505090565b843d8701016020828501011115611dd75750505050505090565b611de660208286010187611436565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611e739083018461152b565b97965050505050505056fea264697066735822122063d23e339f7273a10df3fe322c77cb83cf36d1cbc34aaa0c531ab676e975925d64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100ff5760003560e01c80635c975abb11610097578063a22cb46511610066578063a22cb46514610209578063e985e9c51461021c578063f242432a14610258578063f5298aca1461026b57600080fd5b80635c975abb146101d05780636b20c454146101db578063731133e9146101ee5780638456cb591461020157600080fd5b80631f7fdffa116100d35780631f7fdffa146101825780632eb2c2d6146101955780633f4ba83a146101a85780634e1273f4146101b057600080fd5b8062fdd58e1461010457806301ffc9a71461012a57806302fe53051461014d5780630e89341c14610162575b600080fd5b6101176101123660046113bc565b61027e565b6040519081526020015b60405180910390f35b61013d6101383660046113fc565b610315565b6040519015158152602001610121565b61016061015b3660046114c1565b610367565b005b610175610170366004611512565b610373565b6040516101219190611578565b610160610190366004611640565b610407565b6101606101a33660046116d9565b610419565b6101606104b0565b6101c36101be366004611783565b6104ba565b6040516101219190611889565b60035460ff1661013d565b6101606101e936600461189c565b6105e4565b6101606101fc366004611910565b6105f4565b610160610600565b610160610217366004611965565b610608565b61013d61022a3660046119a1565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101606102663660046119d4565b610617565b610160610279366004611a39565b61069e565b60006001600160a01b0383166102ef5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061034657506001600160e01b031982166303a24d0760e21b145b8061036157506301ffc9a760e01b6001600160e01b03198316145b92915050565b610370816106a9565b50565b60606002805461038290611a6c565b80601f01602080910402602001604051908101604052809291908181526020018280546103ae90611a6c565b80156103fb5780601f106103d0576101008083540402835291602001916103fb565b820191906000526020600020905b8154815290600101906020018083116103de57829003601f168201915b50505050509050919050565b610413848484846106bc565b50505050565b6001600160a01b0385163314806104355750610435853361022a565b61049c5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016102e6565b6104a98585858585610816565b5050505050565b6104b86109c0565b565b6060815183511461051f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016102e6565b6000835167ffffffffffffffff81111561053b5761053b611420565b604051908082528060200260200182016040528015610564578160200160208202803683370190505b50905060005b84518110156105dc576105af85828151811061058857610588611aa6565b60200260200101518583815181106105a2576105a2611aa6565b602002602001015161027e565b8282815181106105c1576105c1611aa6565b60209081029190910101526105d581611ad2565b905061056a565b509392505050565b6105ef838383610a53565b505050565b61041384848484610be1565b6104b8610cb7565b610613338383610d32565b5050565b6001600160a01b0385163314806106335750610633853361022a565b6106915760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016102e6565b6104a98585858585610e12565b6105ef838383610f2f565b8051610613906002906020840190611307565b6001600160a01b0384166106e25760405162461bcd60e51b81526004016102e690611aeb565b81518351146107035760405162461bcd60e51b81526004016102e690611b2c565b3361071381600087878787611030565b60005b84518110156107ae5783818151811061073157610731611aa6565b602002602001015160008087848151811061074e5761074e611aa6565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546107969190611b74565b909155508190506107a681611ad2565b915050610716565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516107ff929190611b8c565b60405180910390a46104a98160008787878761103e565b81518351146108375760405162461bcd60e51b81526004016102e690611b2c565b6001600160a01b03841661085d5760405162461bcd60e51b81526004016102e690611bba565b3361086c818787878787611030565b60005b845181101561095257600085828151811061088c5761088c611aa6565b6020026020010151905060008583815181106108aa576108aa611aa6565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156108fa5760405162461bcd60e51b81526004016102e690611bff565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610937908490611b74565b925050819055505050508061094b90611ad2565b905061086f565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516109a2929190611b8c565b60405180910390a46109b881878787878761103e565b505050505050565b60035460ff16610a095760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102e6565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038316610a795760405162461bcd60e51b81526004016102e690611c49565b8051825114610a9a5760405162461bcd60e51b81526004016102e690611b2c565b6000339050610abd81856000868660405180602001604052806000815250611030565b60005b8351811015610b82576000848281518110610add57610add611aa6565b602002602001015190506000848381518110610afb57610afb611aa6565b602090810291909101810151600084815280835260408082206001600160a01b038c168352909352919091205490915081811015610b4b5760405162461bcd60e51b81526004016102e690611c8c565b6000928352602083815260408085206001600160a01b038b1686529091529092209103905580610b7a81611ad2565b915050610ac0565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051610bd3929190611b8c565b60405180910390a450505050565b6001600160a01b038416610c075760405162461bcd60e51b81526004016102e690611aeb565b33610c2781600087610c1888611199565b610c2188611199565b87611030565b6000848152602081815260408083206001600160a01b038916845290915281208054859290610c57908490611b74565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46104a9816000878787876111e4565b60035460ff1615610cfd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102e6565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610a363390565b816001600160a01b0316836001600160a01b031603610da55760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016102e6565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416610e385760405162461bcd60e51b81526004016102e690611bba565b33610e48818787610c1888611199565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015610e895760405162461bcd60e51b81526004016102e690611bff565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290610ec6908490611b74565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610f268288888888886111e4565b50505050505050565b6001600160a01b038316610f555760405162461bcd60e51b81526004016102e690611c49565b33610f8481856000610f6687611199565b610f6f87611199565b60405180602001604052806000815250611030565b6000838152602081815260408083206001600160a01b038816845290915290205482811015610fc55760405162461bcd60e51b81526004016102e690611c8c565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6109b886868686868661129f565b6001600160a01b0384163b156109b85760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906110829089908990889088908890600401611cd0565b6020604051808303816000875af19250505080156110bd575060408051601f3d908101601f191682019092526110ba91810190611d2e565b60015b611169576110c9611d4b565b806308c379a00361110257506110dd611d67565b806110e85750611104565b8060405162461bcd60e51b81526004016102e69190611578565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016102e6565b6001600160e01b0319811663bc197c8160e01b14610f265760405162461bcd60e51b81526004016102e690611df1565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106111d3576111d3611aa6565b602090810291909101015292915050565b6001600160a01b0384163b156109b85760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906112289089908990889088908890600401611e39565b6020604051808303816000875af1925050508015611263575060408051601f3d908101601f1916820190925261126091810190611d2e565b60015b61126f576110c9611d4b565b6001600160e01b0319811663f23a6e6160e01b14610f265760405162461bcd60e51b81526004016102e690611df1565b60035460ff16156109b85760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201526b1dda1a5b19481c185d5cd95960a21b60648201526084016102e6565b82805461131390611a6c565b90600052602060002090601f016020900481019282611335576000855561137b565b82601f1061134e57805160ff191683800117855561137b565b8280016001018555821561137b579182015b8281111561137b578251825591602001919060010190611360565b5061138792915061138b565b5090565b5b80821115611387576000815560010161138c565b80356001600160a01b03811681146113b757600080fd5b919050565b600080604083850312156113cf57600080fd5b6113d8836113a0565b946020939093013593505050565b6001600160e01b03198116811461037057600080fd5b60006020828403121561140e57600080fd5b8135611419816113e6565b9392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561145c5761145c611420565b6040525050565b600067ffffffffffffffff83111561147d5761147d611420565b604051611494601f8501601f191660200182611436565b8091508381528484840111156114a957600080fd5b83836020830137600060208583010152509392505050565b6000602082840312156114d357600080fd5b813567ffffffffffffffff8111156114ea57600080fd5b8201601f810184136114fb57600080fd5b61150a84823560208401611463565b949350505050565b60006020828403121561152457600080fd5b5035919050565b6000815180845260005b8181101561155157602081850181015186830182015201611535565b81811115611563576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611419602083018461152b565b600067ffffffffffffffff8211156115a5576115a5611420565b5060051b60200190565b600082601f8301126115c057600080fd5b813560206115cd8261158b565b6040516115da8282611436565b83815260059390931b85018201928281019150868411156115fa57600080fd5b8286015b8481101561161557803583529183019183016115fe565b509695505050505050565b600082601f83011261163157600080fd5b61141983833560208501611463565b6000806000806080858703121561165657600080fd5b61165f856113a0565b9350602085013567ffffffffffffffff8082111561167c57600080fd5b611688888389016115af565b9450604087013591508082111561169e57600080fd5b6116aa888389016115af565b935060608701359150808211156116c057600080fd5b506116cd87828801611620565b91505092959194509250565b600080600080600060a086880312156116f157600080fd5b6116fa866113a0565b9450611708602087016113a0565b9350604086013567ffffffffffffffff8082111561172557600080fd5b61173189838a016115af565b9450606088013591508082111561174757600080fd5b61175389838a016115af565b9350608088013591508082111561176957600080fd5b5061177688828901611620565b9150509295509295909350565b6000806040838503121561179657600080fd5b823567ffffffffffffffff808211156117ae57600080fd5b818501915085601f8301126117c257600080fd5b813560206117cf8261158b565b6040516117dc8282611436565b83815260059390931b85018201928281019150898411156117fc57600080fd5b948201945b8386101561182157611812866113a0565b82529482019490820190611801565b9650508601359250508082111561183757600080fd5b50611844858286016115af565b9150509250929050565b600081518084526020808501945080840160005b8381101561187e57815187529582019590820190600101611862565b509495945050505050565b602081526000611419602083018461184e565b6000806000606084860312156118b157600080fd5b6118ba846113a0565b9250602084013567ffffffffffffffff808211156118d757600080fd5b6118e3878388016115af565b935060408601359150808211156118f957600080fd5b50611906868287016115af565b9150509250925092565b6000806000806080858703121561192657600080fd5b61192f856113a0565b93506020850135925060408501359150606085013567ffffffffffffffff81111561195957600080fd5b6116cd87828801611620565b6000806040838503121561197857600080fd5b611981836113a0565b91506020830135801515811461199657600080fd5b809150509250929050565b600080604083850312156119b457600080fd5b6119bd836113a0565b91506119cb602084016113a0565b90509250929050565b600080600080600060a086880312156119ec57600080fd5b6119f5866113a0565b9450611a03602087016113a0565b93506040860135925060608601359150608086013567ffffffffffffffff811115611a2d57600080fd5b61177688828901611620565b600080600060608486031215611a4e57600080fd5b611a57846113a0565b95602085013595506040909401359392505050565b600181811c90821680611a8057607f821691505b602082108103611aa057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611ae457611ae4611abc565b5060010190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60008219821115611b8757611b87611abc565b500190565b604081526000611b9f604083018561184e565b8281036020840152611bb1818561184e565b95945050505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b0386811682528516602082015260a060408201819052600090611cfc9083018661184e565b8281036060840152611d0e818661184e565b90508281036080840152611d22818561152b565b98975050505050505050565b600060208284031215611d4057600080fd5b8151611419816113e6565b600060033d1115611d645760046000803e5060005160e01c5b90565b600060443d1015611d755790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715611da557505050505090565b8285019150815181811115611dbd5750505050505090565b843d8701016020828501011115611dd75750505050505090565b611de660208286010187611436565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611e739083018461152b565b97965050505050505056fea264697066735822122063d23e339f7273a10df3fe322c77cb83cf36d1cbc34aaa0c531ab676e975925d64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "uri", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Paused", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TransferBatch", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TransferSingle", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "URI", "inputs": [{"name": "value", "type": "string", "internalType": "string", "indexed": false}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Unpaused", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfBatch", "stateMutability": "view", "inputs": [{"name": "accounts", "type": "address[]", "internalType": "address[]"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": [{"name": "", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "burnBatch", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": []}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "mintBatch", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "pause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "paused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "safeBatchTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "setURI", "stateMutability": "nonpayable", "inputs": [{"name": "newuri", "type": "string", "internalType": "string"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "unpause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "uri", "stateMutability": "view", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"balanceOf(address,uint256)": {"details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."}, "balanceOfBatch(address[],uint256[])": {"details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."}, "isApprovedForAll(address,address)": {"details": "See {IERC1155-isApprovedForAll}."}, "paused()": {"details": "Returns true if the contract is paused, and false otherwise."}, "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {"details": "See {IERC1155-safeBatchTransferFrom}."}, "safeTransferFrom(address,address,uint256,uint256,bytes)": {"details": "See {IERC1155-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC1155-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "uri(uint256)": {"details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}}, "version": 1}}, "ERC1155ReceiverMock": {"contractName": "ERC1155ReceiverMock", "sourceId": "mocks/ERC1155ReceiverMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506040516106df3803806106df83398101604081905261002f916100bd565b6000805491151569010000000000000000000260ff60481b1960e094851c65010000000000021664ffffffffff60281b199515156401000000000264ffffffffff199094169690941c95909517919091179290921617919091179055610111565b80516001600160e01b0319811681146100a857600080fd5b919050565b805180151581146100a857600080fd5b600080600080608085870312156100d357600080fd5b6100dc85610090565b93506100ea602086016100ad565b92506100f860408601610090565b9150610106606086016100ad565b905092959194509250565b6105bf806101206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806301ffc9a714610046578063bc197c811461007f578063f23a6e61146100ab575b600080fd5b61006a610054366004610261565b6001600160e01b0319166301ffc9a760e01b1490565b60405190151581526020015b60405180910390f35b61009261008d36600461033c565b6100be565b6040516001600160e01b03199091168152602001610076565b6100926100b93660046103f7565b61019f565b600080546901000000000000000000900460ff161561013c5760405162461bcd60e51b815260206004820152602f60248201527f4552433131353552656365697665724d6f636b3a20726576657274696e67206f60448201526e6e206261746368207265636569766560881b60648201526084015b60405180910390fd5b7f0bcad9224ba33b574e9c85298de2f44b4c80015a21aa5df474896444909863d889898989898989895a60405161017b999897969594939291906104ce565b60405180910390a15060005465010000000000900460e01b98975050505050505050565b60008054640100000000900460ff161561020d5760405162461bcd60e51b815260206004820152602960248201527f4552433131353552656365697665724d6f636b3a20726576657274696e67206f6044820152686e207265636569766560b81b6064820152608401610133565b7f20dfa9f79060c8c4d7fe892c97c71bcf6e3b63d1dcf66fea7aefc0211628cf298787878787875a604051610248979695949392919061053a565b60405180910390a15060005460e01b9695505050505050565b60006020828403121561027357600080fd5b81356001600160e01b03198116811461028b57600080fd5b9392505050565b80356001600160a01b03811681146102a957600080fd5b919050565b60008083601f8401126102c057600080fd5b50813567ffffffffffffffff8111156102d857600080fd5b6020830191508360208260051b85010111156102f357600080fd5b9250929050565b60008083601f84011261030c57600080fd5b50813567ffffffffffffffff81111561032457600080fd5b6020830191508360208285010111156102f357600080fd5b60008060008060008060008060a0898b03121561035857600080fd5b61036189610292565b975061036f60208a01610292565b9650604089013567ffffffffffffffff8082111561038c57600080fd5b6103988c838d016102ae565b909850965060608b01359150808211156103b157600080fd5b6103bd8c838d016102ae565b909650945060808b01359150808211156103d657600080fd5b506103e38b828c016102fa565b999c989b5096995094979396929594505050565b60008060008060008060a0878903121561041057600080fd5b61041987610292565b955061042760208801610292565b94506040870135935060608701359250608087013567ffffffffffffffff81111561045157600080fd5b61045d89828a016102fa565b979a9699509497509295939492505050565b81835260006001600160fb1b0383111561048857600080fd5b8260051b8083602087013760009401602001938452509192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038a811682528916602082015260c0604082018190526000906104fb908301898b61046f565b828103606084015261050e81888a61046f565b905082810360808401526105238186886104a5565b9150508260a08301529a9950505050505050505050565b6001600160a01b03888116825287166020820152604081018690526060810185905260c06080820181905260009061057590830185876104a5565b90508260a08301529897505050505050505056fea26469706673582212208097a2823a79c7ddffd227071988a810da6bd96d9bc5f17a1a54afb0425534b464736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806301ffc9a714610046578063bc197c811461007f578063f23a6e61146100ab575b600080fd5b61006a610054366004610261565b6001600160e01b0319166301ffc9a760e01b1490565b60405190151581526020015b60405180910390f35b61009261008d36600461033c565b6100be565b6040516001600160e01b03199091168152602001610076565b6100926100b93660046103f7565b61019f565b600080546901000000000000000000900460ff161561013c5760405162461bcd60e51b815260206004820152602f60248201527f4552433131353552656365697665724d6f636b3a20726576657274696e67206f60448201526e6e206261746368207265636569766560881b60648201526084015b60405180910390fd5b7f0bcad9224ba33b574e9c85298de2f44b4c80015a21aa5df474896444909863d889898989898989895a60405161017b999897969594939291906104ce565b60405180910390a15060005465010000000000900460e01b98975050505050505050565b60008054640100000000900460ff161561020d5760405162461bcd60e51b815260206004820152602960248201527f4552433131353552656365697665724d6f636b3a20726576657274696e67206f6044820152686e207265636569766560b81b6064820152608401610133565b7f20dfa9f79060c8c4d7fe892c97c71bcf6e3b63d1dcf66fea7aefc0211628cf298787878787875a604051610248979695949392919061053a565b60405180910390a15060005460e01b9695505050505050565b60006020828403121561027357600080fd5b81356001600160e01b03198116811461028b57600080fd5b9392505050565b80356001600160a01b03811681146102a957600080fd5b919050565b60008083601f8401126102c057600080fd5b50813567ffffffffffffffff8111156102d857600080fd5b6020830191508360208260051b85010111156102f357600080fd5b9250929050565b60008083601f84011261030c57600080fd5b50813567ffffffffffffffff81111561032457600080fd5b6020830191508360208285010111156102f357600080fd5b60008060008060008060008060a0898b03121561035857600080fd5b61036189610292565b975061036f60208a01610292565b9650604089013567ffffffffffffffff8082111561038c57600080fd5b6103988c838d016102ae565b909850965060608b01359150808211156103b157600080fd5b6103bd8c838d016102ae565b909650945060808b01359150808211156103d657600080fd5b506103e38b828c016102fa565b999c989b5096995094979396929594505050565b60008060008060008060a0878903121561041057600080fd5b61041987610292565b955061042760208801610292565b94506040870135935060608701359250608087013567ffffffffffffffff81111561045157600080fd5b61045d89828a016102fa565b979a9699509497509295939492505050565b81835260006001600160fb1b0383111561048857600080fd5b8260051b8083602087013760009401602001938452509192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038a811682528916602082015260c0604082018190526000906104fb908301898b61046f565b828103606084015261050e81888a61046f565b905082810360808401526105238186886104a5565b9150508260a08301529a9950505050505050505050565b6001600160a01b03888116825287166020820152604081018690526060810185905260c06080820181905260009061057590830185876104a5565b90508260a08301529897505050505050505056fea26469706673582212208097a2823a79c7ddffd227071988a810da6bd96d9bc5f17a1a54afb0425534b464736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "recRetval", "type": "bytes4", "internalType": "bytes4"}, {"name": "recReverts", "type": "bool", "internalType": "bool"}, {"name": "batRetval", "type": "bytes4", "internalType": "bytes4"}, {"name": "batReverts", "type": "bool", "internalType": "bool"}]}, {"type": "event", "name": "BatchReceived", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": false}, {"name": "from", "type": "address", "internalType": "address", "indexed": false}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "gas", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Received", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": false}, {"name": "from", "type": "address", "internalType": "address", "indexed": false}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "gas", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "onERC1155BatchReceived", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}, {"type": "function", "name": "onERC1155Received", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {"details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).", "params": {"data": "Additional data with no specified format", "from": "The address which previously owned the token", "ids": "An array containing ids of each token being transferred (order and length must match values array)", "operator": "The address which initiated the batch transfer (i.e. msg.sender)", "values": "An array containing amounts of each token being transferred (order and length must match ids array)"}, "returns": {"_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"}}, "onERC1155Received(address,address,uint256,uint256,bytes)": {"details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).", "params": {"data": "Additional data with no specified format", "from": "The address which previously owned the token", "id": "The ID of the token being transferred", "operator": "The address which initiated the transfer (i.e. msg.sender)", "value": "The amount of tokens being transferred"}, "returns": {"_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"}}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}}, "version": 1}}, "ERC1155SupplyMock": {"contractName": "ERC1155SupplyMock", "sourceId": "mocks/ERC1155SupplyMock.sol", "deploymentBytecode": {"bytecode": "0x60806040523480156200001157600080fd5b50604051620020b2380380620020b283398101604081905262000034916200011f565b808062000041816200004a565b50505062000237565b80516200005f90600290602084019062000063565b5050565b8280546200007190620001fb565b90600052602060002090601f016020900481019282620000955760008555620000e0565b82601f10620000b057805160ff1916838001178555620000e0565b82800160010185558215620000e0579182015b82811115620000e0578251825591602001919060010190620000c3565b50620000ee929150620000f2565b5090565b5b80821115620000ee5760008155600101620000f3565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200013357600080fd5b82516001600160401b03808211156200014b57600080fd5b818501915085601f8301126200016057600080fd5b81518181111562000175576200017562000109565b604051601f8201601f19908116603f01168101908382118183101715620001a057620001a062000109565b816040528281528886848701011115620001b957600080fd5b600093505b82841015620001dd5784840186015181850187015292850192620001be565b82841115620001ef5760008684830101525b98975050505050505050565b600181811c908216806200021057607f821691505b6020821081036200023157634e487b7160e01b600052602260045260246000fd5b50919050565b611e6b80620002476000396000f3fe608060405234801561001057600080fd5b50600436106100f45760003560e01c80634f558e7911610097578063bd85b03911610066578063bd85b03914610218578063e985e9c514610238578063f242432a14610274578063f5298aca1461028757600080fd5b80634f558e79146101bd5780636b20c454146101df578063731133e9146101f2578063a22cb4651461020557600080fd5b80630e89341c116100d35780630e89341c146101575780631f7fdffa146101775780632eb2c2d61461018a5780634e1273f41461019d57600080fd5b8062fdd58e146100f957806301ffc9a71461011f57806302fe530514610142575b600080fd5b61010c61010736600461135c565b61029a565b6040519081526020015b60405180910390f35b61013261012d36600461139c565b610331565b6040519015158152602001610116565b610155610150366004611461565b610383565b005b61016a6101653660046114b2565b61038f565b6040516101169190611518565b6101556101853660046115e0565b610423565b610155610198366004611679565b610435565b6101b06101ab366004611723565b6104cc565b6040516101169190611829565b6101326101cb3660046114b2565b600090815260036020526040902054151590565b6101556101ed36600461183c565b6105f6565b6101556102003660046118b0565b610606565b610155610213366004611905565b610612565b61010c6102263660046114b2565b60009081526003602052604090205490565b610132610246366004611941565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b610155610282366004611974565b610621565b6101556102953660046119d9565b6106a8565b60006001600160a01b03831661030b5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061036257506001600160e01b031982166303a24d0760e21b145b8061037d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61038c816106b3565b50565b60606002805461039e90611a0c565b80601f01602080910402602001604051908101604052809291908181526020018280546103ca90611a0c565b80156104175780601f106103ec57610100808354040283529160200191610417565b820191906000526020600020905b8154815290600101906020018083116103fa57829003601f168201915b50505050509050919050565b61042f848484846106c6565b50505050565b6001600160a01b03851633148061045157506104518533610246565b6104b85760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610302565b6104c58585858585610820565b5050505050565b606081518351146105315760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610302565b6000835167ffffffffffffffff81111561054d5761054d6113c0565b604051908082528060200260200182016040528015610576578160200160208202803683370190505b50905060005b84518110156105ee576105c185828151811061059a5761059a611a46565b60200260200101518583815181106105b4576105b4611a46565b602002602001015161029a565b8282815181106105d3576105d3611a46565b60209081029190910101526105e781611a72565b905061057c565b509392505050565b6106018383836109ca565b505050565b61042f84848484610b58565b61061d338383610c2e565b5050565b6001600160a01b03851633148061063d575061063d8533610246565b61069b5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610302565b6104c58585858585610d0e565b610601838383610e2b565b805161061d9060029060208401906112a7565b6001600160a01b0384166106ec5760405162461bcd60e51b815260040161030290611a8b565b815183511461070d5760405162461bcd60e51b815260040161030290611acc565b3361071d81600087878787610f2c565b60005b84518110156107b85783818151811061073b5761073b611a46565b602002602001015160008087848151811061075857610758611a46565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546107a09190611b14565b909155508190506107b081611a72565b915050610720565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610809929190611b2c565b60405180910390a46104c581600087878787610f3a565b81518351146108415760405162461bcd60e51b815260040161030290611acc565b6001600160a01b0384166108675760405162461bcd60e51b815260040161030290611b5a565b33610876818787878787610f2c565b60005b845181101561095c57600085828151811061089657610896611a46565b6020026020010151905060008583815181106108b4576108b4611a46565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156109045760405162461bcd60e51b815260040161030290611b9f565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610941908490611b14565b925050819055505050508061095590611a72565b9050610879565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516109ac929190611b2c565b60405180910390a46109c2818787878787610f3a565b505050505050565b6001600160a01b0383166109f05760405162461bcd60e51b815260040161030290611be9565b8051825114610a115760405162461bcd60e51b815260040161030290611acc565b6000339050610a3481856000868660405180602001604052806000815250610f2c565b60005b8351811015610af9576000848281518110610a5457610a54611a46565b602002602001015190506000848381518110610a7257610a72611a46565b602090810291909101810151600084815280835260408082206001600160a01b038c168352909352919091205490915081811015610ac25760405162461bcd60e51b815260040161030290611c2c565b6000928352602083815260408085206001600160a01b038b1686529091529092209103905580610af181611a72565b915050610a37565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051610b4a929190611b2c565b60405180910390a450505050565b6001600160a01b038416610b7e5760405162461bcd60e51b815260040161030290611a8b565b33610b9e81600087610b8f88611095565b610b9888611095565b87610f2c565b6000848152602081815260408083206001600160a01b038916845290915281208054859290610bce908490611b14565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46104c5816000878787876110e0565b816001600160a01b0316836001600160a01b031603610ca15760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610302565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416610d345760405162461bcd60e51b815260040161030290611b5a565b33610d44818787610b8f88611095565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015610d855760405162461bcd60e51b815260040161030290611b9f565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290610dc2908490611b14565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610e228288888888886110e0565b50505050505050565b6001600160a01b038316610e515760405162461bcd60e51b815260040161030290611be9565b33610e8081856000610e6287611095565b610e6b87611095565b60405180602001604052806000815250610f2c565b6000838152602081815260408083206001600160a01b038816845290915290205482811015610ec15760405162461bcd60e51b815260040161030290611c2c565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6109c286868686868661119b565b6001600160a01b0384163b156109c25760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610f7e9089908990889088908890600401611c70565b6020604051808303816000875af1925050508015610fb9575060408051601f3d908101601f19168201909252610fb691810190611cce565b60015b61106557610fc5611ceb565b806308c379a003610ffe5750610fd9611d07565b80610fe45750611000565b8060405162461bcd60e51b81526004016103029190611518565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610302565b6001600160e01b0319811663bc197c8160e01b14610e225760405162461bcd60e51b815260040161030290611d91565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106110cf576110cf611a46565b602090810291909101015292915050565b6001600160a01b0384163b156109c25760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906111249089908990889088908890600401611dd9565b6020604051808303816000875af192505050801561115f575060408051601f3d908101601f1916820190925261115c91810190611cce565b60015b61116b57610fc5611ceb565b6001600160e01b0319811663f23a6e6160e01b14610e225760405162461bcd60e51b815260040161030290611d91565b6001600160a01b0385166112225760005b8351811015611220578281815181106111c7576111c7611a46565b6020026020010151600360008684815181106111e5576111e5611a46565b60200260200101518152602001908152602001600020600082825461120a9190611b14565b90915550611219905081611a72565b90506111ac565b505b6001600160a01b0384166109c25760005b8351811015610e225782818151811061124e5761124e611a46565b60200260200101516003600086848151811061126c5761126c611a46565b6020026020010151815260200190815260200160002060008282546112919190611e1e565b909155506112a0905081611a72565b9050611233565b8280546112b390611a0c565b90600052602060002090601f0160209004810192826112d5576000855561131b565b82601f106112ee57805160ff191683800117855561131b565b8280016001018555821561131b579182015b8281111561131b578251825591602001919060010190611300565b5061132792915061132b565b5090565b5b80821115611327576000815560010161132c565b80356001600160a01b038116811461135757600080fd5b919050565b6000806040838503121561136f57600080fd5b61137883611340565b946020939093013593505050565b6001600160e01b03198116811461038c57600080fd5b6000602082840312156113ae57600080fd5b81356113b981611386565b9392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156113fc576113fc6113c0565b6040525050565b600067ffffffffffffffff83111561141d5761141d6113c0565b604051611434601f8501601f1916602001826113d6565b80915083815284848401111561144957600080fd5b83836020830137600060208583010152509392505050565b60006020828403121561147357600080fd5b813567ffffffffffffffff81111561148a57600080fd5b8201601f8101841361149b57600080fd5b6114aa84823560208401611403565b949350505050565b6000602082840312156114c457600080fd5b5035919050565b6000815180845260005b818110156114f1576020818501810151868301820152016114d5565b81811115611503576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006113b960208301846114cb565b600067ffffffffffffffff821115611545576115456113c0565b5060051b60200190565b600082601f83011261156057600080fd5b8135602061156d8261152b565b60405161157a82826113d6565b83815260059390931b850182019282810191508684111561159a57600080fd5b8286015b848110156115b5578035835291830191830161159e565b509695505050505050565b600082601f8301126115d157600080fd5b6113b983833560208501611403565b600080600080608085870312156115f657600080fd5b6115ff85611340565b9350602085013567ffffffffffffffff8082111561161c57600080fd5b6116288883890161154f565b9450604087013591508082111561163e57600080fd5b61164a8883890161154f565b9350606087013591508082111561166057600080fd5b5061166d878288016115c0565b91505092959194509250565b600080600080600060a0868803121561169157600080fd5b61169a86611340565b94506116a860208701611340565b9350604086013567ffffffffffffffff808211156116c557600080fd5b6116d189838a0161154f565b945060608801359150808211156116e757600080fd5b6116f389838a0161154f565b9350608088013591508082111561170957600080fd5b50611716888289016115c0565b9150509295509295909350565b6000806040838503121561173657600080fd5b823567ffffffffffffffff8082111561174e57600080fd5b818501915085601f83011261176257600080fd5b8135602061176f8261152b565b60405161177c82826113d6565b83815260059390931b850182019282810191508984111561179c57600080fd5b948201945b838610156117c1576117b286611340565b825294820194908201906117a1565b965050860135925050808211156117d757600080fd5b506117e48582860161154f565b9150509250929050565b600081518084526020808501945080840160005b8381101561181e57815187529582019590820190600101611802565b509495945050505050565b6020815260006113b960208301846117ee565b60008060006060848603121561185157600080fd5b61185a84611340565b9250602084013567ffffffffffffffff8082111561187757600080fd5b6118838783880161154f565b9350604086013591508082111561189957600080fd5b506118a68682870161154f565b9150509250925092565b600080600080608085870312156118c657600080fd5b6118cf85611340565b93506020850135925060408501359150606085013567ffffffffffffffff8111156118f957600080fd5b61166d878288016115c0565b6000806040838503121561191857600080fd5b61192183611340565b91506020830135801515811461193657600080fd5b809150509250929050565b6000806040838503121561195457600080fd5b61195d83611340565b915061196b60208401611340565b90509250929050565b600080600080600060a0868803121561198c57600080fd5b61199586611340565b94506119a360208701611340565b93506040860135925060608601359150608086013567ffffffffffffffff8111156119cd57600080fd5b611716888289016115c0565b6000806000606084860312156119ee57600080fd5b6119f784611340565b95602085013595506040909401359392505050565b600181811c90821680611a2057607f821691505b602082108103611a4057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611a8457611a84611a5c565b5060010190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60008219821115611b2757611b27611a5c565b500190565b604081526000611b3f60408301856117ee565b8281036020840152611b5181856117ee565b95945050505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b0386811682528516602082015260a060408201819052600090611c9c908301866117ee565b8281036060840152611cae81866117ee565b90508281036080840152611cc281856114cb565b98975050505050505050565b600060208284031215611ce057600080fd5b81516113b981611386565b600060033d1115611d045760046000803e5060005160e01c5b90565b600060443d1015611d155790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715611d4557505050505090565b8285019150815181811115611d5d5750505050505090565b843d8701016020828501011115611d775750505050505090565b611d86602082860101876113d6565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611e13908301846114cb565b979650505050505050565b600082821015611e3057611e30611a5c565b50039056fea2646970667358221220daf05056ed879395c5df4e9f3ccd6f366f6122d9d61331713af221661e5369d964736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100f45760003560e01c80634f558e7911610097578063bd85b03911610066578063bd85b03914610218578063e985e9c514610238578063f242432a14610274578063f5298aca1461028757600080fd5b80634f558e79146101bd5780636b20c454146101df578063731133e9146101f2578063a22cb4651461020557600080fd5b80630e89341c116100d35780630e89341c146101575780631f7fdffa146101775780632eb2c2d61461018a5780634e1273f41461019d57600080fd5b8062fdd58e146100f957806301ffc9a71461011f57806302fe530514610142575b600080fd5b61010c61010736600461135c565b61029a565b6040519081526020015b60405180910390f35b61013261012d36600461139c565b610331565b6040519015158152602001610116565b610155610150366004611461565b610383565b005b61016a6101653660046114b2565b61038f565b6040516101169190611518565b6101556101853660046115e0565b610423565b610155610198366004611679565b610435565b6101b06101ab366004611723565b6104cc565b6040516101169190611829565b6101326101cb3660046114b2565b600090815260036020526040902054151590565b6101556101ed36600461183c565b6105f6565b6101556102003660046118b0565b610606565b610155610213366004611905565b610612565b61010c6102263660046114b2565b60009081526003602052604090205490565b610132610246366004611941565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b610155610282366004611974565b610621565b6101556102953660046119d9565b6106a8565b60006001600160a01b03831661030b5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061036257506001600160e01b031982166303a24d0760e21b145b8061037d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61038c816106b3565b50565b60606002805461039e90611a0c565b80601f01602080910402602001604051908101604052809291908181526020018280546103ca90611a0c565b80156104175780601f106103ec57610100808354040283529160200191610417565b820191906000526020600020905b8154815290600101906020018083116103fa57829003601f168201915b50505050509050919050565b61042f848484846106c6565b50505050565b6001600160a01b03851633148061045157506104518533610246565b6104b85760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610302565b6104c58585858585610820565b5050505050565b606081518351146105315760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610302565b6000835167ffffffffffffffff81111561054d5761054d6113c0565b604051908082528060200260200182016040528015610576578160200160208202803683370190505b50905060005b84518110156105ee576105c185828151811061059a5761059a611a46565b60200260200101518583815181106105b4576105b4611a46565b602002602001015161029a565b8282815181106105d3576105d3611a46565b60209081029190910101526105e781611a72565b905061057c565b509392505050565b6106018383836109ca565b505050565b61042f84848484610b58565b61061d338383610c2e565b5050565b6001600160a01b03851633148061063d575061063d8533610246565b61069b5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610302565b6104c58585858585610d0e565b610601838383610e2b565b805161061d9060029060208401906112a7565b6001600160a01b0384166106ec5760405162461bcd60e51b815260040161030290611a8b565b815183511461070d5760405162461bcd60e51b815260040161030290611acc565b3361071d81600087878787610f2c565b60005b84518110156107b85783818151811061073b5761073b611a46565b602002602001015160008087848151811061075857610758611a46565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546107a09190611b14565b909155508190506107b081611a72565b915050610720565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610809929190611b2c565b60405180910390a46104c581600087878787610f3a565b81518351146108415760405162461bcd60e51b815260040161030290611acc565b6001600160a01b0384166108675760405162461bcd60e51b815260040161030290611b5a565b33610876818787878787610f2c565b60005b845181101561095c57600085828151811061089657610896611a46565b6020026020010151905060008583815181106108b4576108b4611a46565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156109045760405162461bcd60e51b815260040161030290611b9f565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610941908490611b14565b925050819055505050508061095590611a72565b9050610879565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516109ac929190611b2c565b60405180910390a46109c2818787878787610f3a565b505050505050565b6001600160a01b0383166109f05760405162461bcd60e51b815260040161030290611be9565b8051825114610a115760405162461bcd60e51b815260040161030290611acc565b6000339050610a3481856000868660405180602001604052806000815250610f2c565b60005b8351811015610af9576000848281518110610a5457610a54611a46565b602002602001015190506000848381518110610a7257610a72611a46565b602090810291909101810151600084815280835260408082206001600160a01b038c168352909352919091205490915081811015610ac25760405162461bcd60e51b815260040161030290611c2c565b6000928352602083815260408085206001600160a01b038b1686529091529092209103905580610af181611a72565b915050610a37565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051610b4a929190611b2c565b60405180910390a450505050565b6001600160a01b038416610b7e5760405162461bcd60e51b815260040161030290611a8b565b33610b9e81600087610b8f88611095565b610b9888611095565b87610f2c565b6000848152602081815260408083206001600160a01b038916845290915281208054859290610bce908490611b14565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46104c5816000878787876110e0565b816001600160a01b0316836001600160a01b031603610ca15760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610302565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416610d345760405162461bcd60e51b815260040161030290611b5a565b33610d44818787610b8f88611095565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015610d855760405162461bcd60e51b815260040161030290611b9f565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290610dc2908490611b14565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610e228288888888886110e0565b50505050505050565b6001600160a01b038316610e515760405162461bcd60e51b815260040161030290611be9565b33610e8081856000610e6287611095565b610e6b87611095565b60405180602001604052806000815250610f2c565b6000838152602081815260408083206001600160a01b038816845290915290205482811015610ec15760405162461bcd60e51b815260040161030290611c2c565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6109c286868686868661119b565b6001600160a01b0384163b156109c25760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610f7e9089908990889088908890600401611c70565b6020604051808303816000875af1925050508015610fb9575060408051601f3d908101601f19168201909252610fb691810190611cce565b60015b61106557610fc5611ceb565b806308c379a003610ffe5750610fd9611d07565b80610fe45750611000565b8060405162461bcd60e51b81526004016103029190611518565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610302565b6001600160e01b0319811663bc197c8160e01b14610e225760405162461bcd60e51b815260040161030290611d91565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106110cf576110cf611a46565b602090810291909101015292915050565b6001600160a01b0384163b156109c25760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906111249089908990889088908890600401611dd9565b6020604051808303816000875af192505050801561115f575060408051601f3d908101601f1916820190925261115c91810190611cce565b60015b61116b57610fc5611ceb565b6001600160e01b0319811663f23a6e6160e01b14610e225760405162461bcd60e51b815260040161030290611d91565b6001600160a01b0385166112225760005b8351811015611220578281815181106111c7576111c7611a46565b6020026020010151600360008684815181106111e5576111e5611a46565b60200260200101518152602001908152602001600020600082825461120a9190611b14565b90915550611219905081611a72565b90506111ac565b505b6001600160a01b0384166109c25760005b8351811015610e225782818151811061124e5761124e611a46565b60200260200101516003600086848151811061126c5761126c611a46565b6020026020010151815260200190815260200160002060008282546112919190611e1e565b909155506112a0905081611a72565b9050611233565b8280546112b390611a0c565b90600052602060002090601f0160209004810192826112d5576000855561131b565b82601f106112ee57805160ff191683800117855561131b565b8280016001018555821561131b579182015b8281111561131b578251825591602001919060010190611300565b5061132792915061132b565b5090565b5b80821115611327576000815560010161132c565b80356001600160a01b038116811461135757600080fd5b919050565b6000806040838503121561136f57600080fd5b61137883611340565b946020939093013593505050565b6001600160e01b03198116811461038c57600080fd5b6000602082840312156113ae57600080fd5b81356113b981611386565b9392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156113fc576113fc6113c0565b6040525050565b600067ffffffffffffffff83111561141d5761141d6113c0565b604051611434601f8501601f1916602001826113d6565b80915083815284848401111561144957600080fd5b83836020830137600060208583010152509392505050565b60006020828403121561147357600080fd5b813567ffffffffffffffff81111561148a57600080fd5b8201601f8101841361149b57600080fd5b6114aa84823560208401611403565b949350505050565b6000602082840312156114c457600080fd5b5035919050565b6000815180845260005b818110156114f1576020818501810151868301820152016114d5565b81811115611503576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006113b960208301846114cb565b600067ffffffffffffffff821115611545576115456113c0565b5060051b60200190565b600082601f83011261156057600080fd5b8135602061156d8261152b565b60405161157a82826113d6565b83815260059390931b850182019282810191508684111561159a57600080fd5b8286015b848110156115b5578035835291830191830161159e565b509695505050505050565b600082601f8301126115d157600080fd5b6113b983833560208501611403565b600080600080608085870312156115f657600080fd5b6115ff85611340565b9350602085013567ffffffffffffffff8082111561161c57600080fd5b6116288883890161154f565b9450604087013591508082111561163e57600080fd5b61164a8883890161154f565b9350606087013591508082111561166057600080fd5b5061166d878288016115c0565b91505092959194509250565b600080600080600060a0868803121561169157600080fd5b61169a86611340565b94506116a860208701611340565b9350604086013567ffffffffffffffff808211156116c557600080fd5b6116d189838a0161154f565b945060608801359150808211156116e757600080fd5b6116f389838a0161154f565b9350608088013591508082111561170957600080fd5b50611716888289016115c0565b9150509295509295909350565b6000806040838503121561173657600080fd5b823567ffffffffffffffff8082111561174e57600080fd5b818501915085601f83011261176257600080fd5b8135602061176f8261152b565b60405161177c82826113d6565b83815260059390931b850182019282810191508984111561179c57600080fd5b948201945b838610156117c1576117b286611340565b825294820194908201906117a1565b965050860135925050808211156117d757600080fd5b506117e48582860161154f565b9150509250929050565b600081518084526020808501945080840160005b8381101561181e57815187529582019590820190600101611802565b509495945050505050565b6020815260006113b960208301846117ee565b60008060006060848603121561185157600080fd5b61185a84611340565b9250602084013567ffffffffffffffff8082111561187757600080fd5b6118838783880161154f565b9350604086013591508082111561189957600080fd5b506118a68682870161154f565b9150509250925092565b600080600080608085870312156118c657600080fd5b6118cf85611340565b93506020850135925060408501359150606085013567ffffffffffffffff8111156118f957600080fd5b61166d878288016115c0565b6000806040838503121561191857600080fd5b61192183611340565b91506020830135801515811461193657600080fd5b809150509250929050565b6000806040838503121561195457600080fd5b61195d83611340565b915061196b60208401611340565b90509250929050565b600080600080600060a0868803121561198c57600080fd5b61199586611340565b94506119a360208701611340565b93506040860135925060608601359150608086013567ffffffffffffffff8111156119cd57600080fd5b611716888289016115c0565b6000806000606084860312156119ee57600080fd5b6119f784611340565b95602085013595506040909401359392505050565b600181811c90821680611a2057607f821691505b602082108103611a4057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611a8457611a84611a5c565b5060010190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60008219821115611b2757611b27611a5c565b500190565b604081526000611b3f60408301856117ee565b8281036020840152611b5181856117ee565b95945050505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b0386811682528516602082015260a060408201819052600090611c9c908301866117ee565b8281036060840152611cae81866117ee565b90508281036080840152611cc281856114cb565b98975050505050505050565b600060208284031215611ce057600080fd5b81516113b981611386565b600060033d1115611d045760046000803e5060005160e01c5b90565b600060443d1015611d155790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715611d4557505050505090565b8285019150815181811115611d5d5750505050505090565b843d8701016020828501011115611d775750505050505090565b611d86602082860101876113d6565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611e13908301846114cb565b979650505050505050565b600082821015611e3057611e30611a5c565b50039056fea2646970667358221220daf05056ed879395c5df4e9f3ccd6f366f6122d9d61331713af221661e5369d964736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "uri", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TransferBatch", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TransferSingle", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "URI", "inputs": [{"name": "value", "type": "string", "internalType": "string", "indexed": false}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfBatch", "stateMutability": "view", "inputs": [{"name": "accounts", "type": "address[]", "internalType": "address[]"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": [{"name": "", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "burnBatch", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": []}, {"type": "function", "name": "exists", "stateMutability": "view", "inputs": [{"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "mintBatch", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeBatchTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "setURI", "stateMutability": "nonpayable", "inputs": [{"name": "newuri", "type": "string", "internalType": "string"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [{"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "uri", "stateMutability": "view", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"balanceOf(address,uint256)": {"details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."}, "balanceOfBatch(address[],uint256[])": {"details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."}, "exists(uint256)": {"details": "Indicates whether any token exist with a given id, or not."}, "isApprovedForAll(address,address)": {"details": "See {IERC1155-isApprovedForAll}."}, "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {"details": "See {IERC1155-safeBatchTransferFrom}."}, "safeTransferFrom(address,address,uint256,uint256,bytes)": {"details": "See {IERC1155-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC1155-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "totalSupply(uint256)": {"details": "Total amount of tokens in with a given id."}, "uri(uint256)": {"details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}}, "version": 1}}, "ERC1271WalletMock": {"contractName": "ERC1271WalletMock", "sourceId": "mocks/ERC1271WalletMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506040516108cc3803806108cc83398101604081905261002f91610167565b61003833610047565b61004181610097565b50610197565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146100f65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b03811661015b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100ed565b61016481610047565b50565b60006020828403121561017957600080fd5b81516001600160a01b038116811461019057600080fd5b9392505050565b610726806101a66000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631626ba7e14610051578063715018a6146100825780638da5cb5b1461008c578063f2fde38b146100a7575b600080fd5b61006461005f3660046105f6565b6100ba565b6040516001600160e01b031990911681526020015b60405180910390f35b61008a6100f6565b005b6000546040516001600160a01b039091168152602001610079565b61008a6100b53660046106b1565b610161565b600080546001600160a01b03166100d1848461022c565b6001600160a01b0316146100e65760006100ef565b630b135d3f60e11b5b9392505050565b6000546001600160a01b031633146101555760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61015f6000610250565b565b6000546001600160a01b031633146101bb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161014c565b6001600160a01b0381166102205760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161014c565b61022981610250565b50565b600080600061023b85856102a0565b915091506102488161030e565b509392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008082516041036102d65760208301516040840151606085015160001a6102ca878285856104c4565b94509450505050610307565b82516040036102ff57602083015160408401516102f48683836105b1565b935093505050610307565b506000905060025b9250929050565b6000816004811115610322576103226106da565b0361032a5750565b600181600481111561033e5761033e6106da565b0361038b5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161014c565b600281600481111561039f5761039f6106da565b036103ec5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161014c565b6003816004811115610400576104006106da565b036104585760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161014c565b600481600481111561046c5761046c6106da565b036102295760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161014c565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156104fb57506000905060036105a8565b8460ff16601b1415801561051357508460ff16601c14155b1561052457506000905060046105a8565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610578573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166105a1576000600192509250506105a8565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b016105d2878288856104c4565b935093505050935093915050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561060957600080fd5b82359150602083013567ffffffffffffffff8082111561062857600080fd5b818501915085601f83011261063c57600080fd5b81358181111561064e5761064e6105e0565b604051601f8201601f19908116603f01168101908382118183101715610676576106766105e0565b8160405282815288602084870101111561068f57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156106c357600080fd5b81356001600160a01b03811681146100ef57600080fd5b634e487b7160e01b600052602160045260246000fdfea2646970667358221220ea32098d7ab76e3bade084b535b8391f67395d0b299ab56e5213cb18faf5a48864736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80631626ba7e14610051578063715018a6146100825780638da5cb5b1461008c578063f2fde38b146100a7575b600080fd5b61006461005f3660046105f6565b6100ba565b6040516001600160e01b031990911681526020015b60405180910390f35b61008a6100f6565b005b6000546040516001600160a01b039091168152602001610079565b61008a6100b53660046106b1565b610161565b600080546001600160a01b03166100d1848461022c565b6001600160a01b0316146100e65760006100ef565b630b135d3f60e11b5b9392505050565b6000546001600160a01b031633146101555760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61015f6000610250565b565b6000546001600160a01b031633146101bb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161014c565b6001600160a01b0381166102205760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161014c565b61022981610250565b50565b600080600061023b85856102a0565b915091506102488161030e565b509392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008082516041036102d65760208301516040840151606085015160001a6102ca878285856104c4565b94509450505050610307565b82516040036102ff57602083015160408401516102f48683836105b1565b935093505050610307565b506000905060025b9250929050565b6000816004811115610322576103226106da565b0361032a5750565b600181600481111561033e5761033e6106da565b0361038b5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161014c565b600281600481111561039f5761039f6106da565b036103ec5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161014c565b6003816004811115610400576104006106da565b036104585760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161014c565b600481600481111561046c5761046c6106da565b036102295760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161014c565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156104fb57506000905060036105a8565b8460ff16601b1415801561051357508460ff16601c14155b1561052457506000905060046105a8565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610578573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166105a1576000600192509250506105a8565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b016105d2878288856104c4565b935093505050935093915050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561060957600080fd5b82359150602083013567ffffffffffffffff8082111561062857600080fd5b818501915085601f83011261063c57600080fd5b81358181111561064e5761064e6105e0565b604051601f8201601f19908116603f01168101908382118183101715610676576106766105e0565b8160405282815288602084870101111561068f57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156106c357600080fd5b81356001600160a01b03811681146100ef57600080fd5b634e487b7160e01b600052602160045260246000fdfea2646970667358221220ea32098d7ab76e3bade084b535b8391f67395d0b299ab56e5213cb18faf5a48864736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "originalOwner", "type": "address", "internalType": "address"}]}, {"type": "event", "name": "OwnershipTransferred", "inputs": [{"name": "previousOwner", "type": "address", "internalType": "address", "indexed": true}, {"name": "newOwner", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "function", "name": "isValidSignature", "stateMutability": "view", "inputs": [{"name": "hash", "type": "bytes32", "internalType": "bytes32"}, {"name": "signature", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "magicValue", "type": "bytes4", "internalType": "bytes4"}]}, {"type": "function", "name": "owner", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "renounceOwnership", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "transferOwnership", "stateMutability": "nonpayable", "inputs": [{"name": "newOwner", "type": "address", "internalType": "address"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"isValidSignature(bytes32,bytes)": {"details": "Should return whether the signature provided is valid for the provided data", "params": {"hash": "Hash of the data to be signed", "signature": "Signature byte array associated with _data"}}, "owner()": {"details": "Returns the address of the current owner."}, "renounceOwnership()": {"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."}, "transferOwnership(address)": {"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}, "version": 1}}, "ERC165InterfacesSupported": {"contractName": "ERC165InterfacesSupported", "sourceId": "mocks/ERC165/ERC165InterfacesSupported.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5060405161036a38038061036a83398101604081905261002f9161015a565b61003f6301ffc9a760e01b61008c565b60005b8151811015610085576100738282815181106100605761006061021e565b602002602001015161008c60201b60201c565b8061007d81610234565b915050610042565b505061025b565b6001600160e01b031980821690036101025760405162461bcd60e51b815260206004820152602f60248201527f455243313635496e7465726661636573537570706f727465643a20696e76616c60448201526e1a59081a5b9d195c999858d9481a59608a1b606482015260840160405180910390fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b634e487b7160e01b600052604160045260246000fd5b80516001600160e01b03198116811461015557600080fd5b919050565b6000602080838503121561016d57600080fd5b82516001600160401b038082111561018457600080fd5b818501915085601f83011261019857600080fd5b8151818111156101aa576101aa610127565b8060051b604051601f19603f830116810181811085821117156101cf576101cf610127565b6040529182528482019250838101850191888311156101ed57600080fd5b938501935b82851015610212576102038561013d565b845293850193928501926101f2565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006001820161025457634e487b7160e01b600052601160045260246000fd5b5060010190565b6101008061026a6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806301ffc9a714603757806334d7006c146076575b600080fd5b60616042366004609b565b6001600160e01b03191660009081526020819052604090205460ff1690565b60405190151581526020015b60405180910390f35b60836301ffc9a760e01b81565b6040516001600160e01b03199091168152602001606d565b60006020828403121560ac57600080fd5b81356001600160e01b03198116811460c357600080fd5b939250505056fea2646970667358221220b038b2326b5b72f5c1e8bd6616f5c8c4c9926a03855e2cf8ff1eb7265de9838d64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052348015600f57600080fd5b506004361060325760003560e01c806301ffc9a714603757806334d7006c146076575b600080fd5b60616042366004609b565b6001600160e01b03191660009081526020819052604090205460ff1690565b60405190151581526020015b60405180910390f35b60836301ffc9a760e01b81565b6040516001600160e01b03199091168152602001606d565b60006020828403121560ac57600080fd5b81356001600160e01b03198116811460c357600080fd5b939250505056fea2646970667358221220b038b2326b5b72f5c1e8bd6616f5c8c4c9926a03855e2cf8ff1eb7265de9838d64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "interfaceIds", "type": "bytes4[]", "internalType": "bytes4[]"}]}, {"type": "function", "name": "INTERFACE_ID_ERC165", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"supportsInterface(bytes4)": {"details": "Implement supportsInterface(bytes4) using a lookup table."}}, "version": 1}}, "SupportsInterfaceWithLookupMock": {"contractName": "SupportsInterfaceWithLookupMock", "sourceId": "mocks/ERC165/ERC165InterfacesSupported.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506100216301ffc9a760e01b610026565b6100c1565b6001600160e01b0319808216900361009c5760405162461bcd60e51b815260206004820152602f60248201527f455243313635496e7465726661636573537570706f727465643a20696e76616c60448201526e1a59081a5b9d195c999858d9481a59608a1b606482015260840160405180910390fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b610100806100d06000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806301ffc9a714603757806334d7006c146076575b600080fd5b60616042366004609b565b6001600160e01b03191660009081526020819052604090205460ff1690565b60405190151581526020015b60405180910390f35b60836301ffc9a760e01b81565b6040516001600160e01b03199091168152602001606d565b60006020828403121560ac57600080fd5b81356001600160e01b03198116811460c357600080fd5b939250505056fea2646970667358221220e661492d33119f72ed696283aa4bf7727559d90003dd7decb3e728df4b1de45464736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052348015600f57600080fd5b506004361060325760003560e01c806301ffc9a714603757806334d7006c146076575b600080fd5b60616042366004609b565b6001600160e01b03191660009081526020819052604090205460ff1690565b60405190151581526020015b60405180910390f35b60836301ffc9a760e01b81565b6040516001600160e01b03199091168152602001606d565b60006020828403121560ac57600080fd5b81356001600160e01b03198116811460c357600080fd5b939250505056fea2646970667358221220e661492d33119f72ed696283aa4bf7727559d90003dd7decb3e728df4b1de45464736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": []}, {"type": "function", "name": "INTERFACE_ID_ERC165", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "notice": "https://eips.ethereum.org/EIPS/eip-214#specification From the specification: > Any attempts to make state-changing operations inside an execution instance with STATIC set to true will instead throw an exception. > These operations include [...], LOG0, LOG1, LOG2, [...] therefore, because this contract is staticcall'd we need to not emit events (which is how solidity-coverage works) solidity-coverage ignores the /mocks folder, so we duplicate its implementation here to avoid instrumenting it", "version": 1}, "devdoc": {"kind": "dev", "methods": {"constructor": {"details": "A contract implementing SupportsInterfaceWithLookup implement ERC165 itself."}, "supportsInterface(bytes4)": {"details": "Implement supportsInterface(bytes4) using a lookup table."}}, "stateVariables": {"_supportedInterfaces": {"details": "A mapping of interface id to whether or not it's supported."}}, "version": 1}}, "ERC165MissingData": {"contractName": "ERC165MissingData", "sourceId": "mocks/ERC165/ERC165MissingData.sol", "deploymentBytecode": {"bytecode": "0x6080604052348015600f57600080fd5b5060a28061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806301ffc9a714602d575b600080fd5b603b6038366004603d565b50565b005b600060208284031215604e57600080fd5b81356001600160e01b031981168114606557600080fd5b939250505056fea2646970667358221220e64ab964d302e6854faddc41f385feb7deab60da66a57a025db77973316123ac64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052348015600f57600080fd5b506004361060285760003560e01c806301ffc9a714602d575b600080fd5b603b6038366004603d565b50565b005b600060208284031215604e57600080fd5b81356001600160e01b031981168114606557600080fd5b939250505056fea2646970667358221220e64ab964d302e6854faddc41f385feb7deab60da66a57a025db77973316123ac64736f6c634300080d0033"}, "abi": [{"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ERC165NotSupported": {"contractName": "ERC165NotSupported", "sourceId": "mocks/ERC165/ERC165NotSupported.sol", "deploymentBytecode": {"bytecode": "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220ba164e6f53c0c34a58b5c42a889d0cd567154a2f73bce75293a3124702011f4564736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052600080fdfea2646970667358221220ba164e6f53c0c34a58b5c42a889d0cd567154a2f73bce75293a3124702011f4564736f6c634300080d0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ERC165CheckerMock": {"contractName": "ERC165CheckerMock", "sourceId": "mocks/ERC165CheckerMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506105fb806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634b9dd9041461005157806377e6b4cc14610079578063c398a92514610099578063d9057007146100ac575b600080fd5b61006461005f3660046103bf565b6100bf565b60405190151581526020015b60405180910390f35b61008c6100873660046103bf565b6100dd565b6040516100709190610497565b6100646100a73660046104dd565b6100f2565b6100646100ba3660046104f8565b610106565b60006100d46001600160a01b0384168361011b565b90505b92915050565b60606100d46001600160a01b0384168361018b565b60006100d7826001600160a01b0316610241565b60006100d46001600160a01b03841683610274565b600061012683610241565b610132575060006100d7565b60005b825181101561018157610161848483815181106101545761015461052b565b602002602001015161028c565b61016f5760009150506100d7565b8061017981610541565b915050610135565b5060019392505050565b60606000825167ffffffffffffffff8111156101a9576101a9610391565b6040519080825280602002602001820160405280156101d2578160200160208202803683370190505b5090506101de84610241565b156100d45760005b835181101561023957610205858583815181106101545761015461052b565b8282815181106102175761021761052b565b911515602092830291909101909101528061023181610541565b9150506101e6565b509392505050565b6000610254826301ffc9a760e01b61028c565b80156100d7575061026d826001600160e01b031961028c565b1592915050565b600061027f83610241565b80156100d457506100d483835b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b03871690617530906102f3908690610568565b6000604051808303818686fa925050503d806000811461032f576040519150601f19603f3d011682016040523d82523d6000602084013e610334565b606091505b509150915060208151101561034f57600093505050506100d7565b81801561036b57508080602001905181019061036b91906105a3565b9695505050505050565b80356001600160a01b038116811461038c57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b80356001600160e01b03198116811461038c57600080fd5b600080604083850312156103d257600080fd5b6103db83610375565b915060208084013567ffffffffffffffff808211156103f957600080fd5b818601915086601f83011261040d57600080fd5b81358181111561041f5761041f610391565b8060051b604051601f19603f8301168101818110858211171561044457610444610391565b60405291825284820192508381018501918983111561046257600080fd5b938501935b8285101561048757610478856103a7565b84529385019392850192610467565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b818110156104d15783511515835292840192918401916001016104b3565b50909695505050505050565b6000602082840312156104ef57600080fd5b6100d482610375565b6000806040838503121561050b57600080fd5b61051483610375565b9150610522602084016103a7565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b60006001820161056157634e487b7160e01b600052601160045260246000fd5b5060010190565b6000825160005b81811015610589576020818601810151858301520161056f565b81811115610598576000828501525b509190910192915050565b6000602082840312156105b557600080fd5b815180151581146100d457600080fdfea2646970667358221220b303a421562e9acf6877cb941aa961b1607c6d417212d80d0e7d05b73a12d69c64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80634b9dd9041461005157806377e6b4cc14610079578063c398a92514610099578063d9057007146100ac575b600080fd5b61006461005f3660046103bf565b6100bf565b60405190151581526020015b60405180910390f35b61008c6100873660046103bf565b6100dd565b6040516100709190610497565b6100646100a73660046104dd565b6100f2565b6100646100ba3660046104f8565b610106565b60006100d46001600160a01b0384168361011b565b90505b92915050565b60606100d46001600160a01b0384168361018b565b60006100d7826001600160a01b0316610241565b60006100d46001600160a01b03841683610274565b600061012683610241565b610132575060006100d7565b60005b825181101561018157610161848483815181106101545761015461052b565b602002602001015161028c565b61016f5760009150506100d7565b8061017981610541565b915050610135565b5060019392505050565b60606000825167ffffffffffffffff8111156101a9576101a9610391565b6040519080825280602002602001820160405280156101d2578160200160208202803683370190505b5090506101de84610241565b156100d45760005b835181101561023957610205858583815181106101545761015461052b565b8282815181106102175761021761052b565b911515602092830291909101909101528061023181610541565b9150506101e6565b509392505050565b6000610254826301ffc9a760e01b61028c565b80156100d7575061026d826001600160e01b031961028c565b1592915050565b600061027f83610241565b80156100d457506100d483835b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b03871690617530906102f3908690610568565b6000604051808303818686fa925050503d806000811461032f576040519150601f19603f3d011682016040523d82523d6000602084013e610334565b606091505b509150915060208151101561034f57600093505050506100d7565b81801561036b57508080602001905181019061036b91906105a3565b9695505050505050565b80356001600160a01b038116811461038c57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b80356001600160e01b03198116811461038c57600080fd5b600080604083850312156103d257600080fd5b6103db83610375565b915060208084013567ffffffffffffffff808211156103f957600080fd5b818601915086601f83011261040d57600080fd5b81358181111561041f5761041f610391565b8060051b604051601f19603f8301168101818110858211171561044457610444610391565b60405291825284820192508381018501918983111561046257600080fd5b938501935b8285101561048757610478856103a7565b84529385019392850192610467565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b818110156104d15783511515835292840192918401916001016104b3565b50909695505050505050565b6000602082840312156104ef57600080fd5b6100d482610375565b6000806040838503121561050b57600080fd5b61051483610375565b9150610522602084016103a7565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b60006001820161056157634e487b7160e01b600052601160045260246000fd5b5060010190565b6000825160005b81811015610589576020818601810151858301520161056f565b81811115610598576000828501525b509190910192915050565b6000602082840312156105b557600080fd5b815180151581146100d457600080fdfea2646970667358221220b303a421562e9acf6877cb941aa961b1607c6d417212d80d0e7d05b73a12d69c64736f6c634300080d0033"}, "abi": [{"type": "function", "name": "getSupportedInterfaces", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "interfaceIds", "type": "bytes4[]", "internalType": "bytes4[]"}], "outputs": [{"name": "", "type": "bool[]", "internalType": "bool[]"}]}, {"type": "function", "name": "supportsAllInterfaces", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "interfaceIds", "type": "bytes4[]", "internalType": "bytes4[]"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "supportsERC165", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ERC165Mock": {"contractName": "ERC165Mock", "sourceId": "mocks/ERC165Mock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5060c78061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806301ffc9a714602d575b600080fd5b604e60383660046062565b6001600160e01b0319166301ffc9a760e01b1490565b604051901515815260200160405180910390f35b600060208284031215607357600080fd5b81356001600160e01b031981168114608a57600080fd5b939250505056fea26469706673582212207512bd65d3d3edfd4977a3f655fd1b656e88a8cccc412d1a49e24250ebadfc1d64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052348015600f57600080fd5b506004361060285760003560e01c806301ffc9a714602d575b600080fd5b604e60383660046062565b6001600160e01b0319166301ffc9a760e01b1490565b604051901515815260200160405180910390f35b600060208284031215607357600080fd5b81356001600160e01b031981168114608a57600080fd5b939250505056fea26469706673582212207512bd65d3d3edfd4977a3f655fd1b656e88a8cccc412d1a49e24250ebadfc1d64736f6c634300080d0033"}, "abi": [{"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}}, "version": 1}}, "ERC165StorageMock": {"contractName": "ERC165StorageMock", "sourceId": "mocks/ERC165StorageMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506101ad806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b578063214cdb8014610062575b600080fd5b61004e610049366004610146565b610077565b604051901515815260200160405180910390f35b610075610070366004610146565b6100b7565b005b60006301ffc9a760e01b6001600160e01b0319831614806100b157506001600160e01b0319821660009081526020819052604090205460ff165b92915050565b6100c0816100c3565b50565b6001600160e01b031980821690036101215760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015260640160405180910390fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b60006020828403121561015857600080fd5b81356001600160e01b03198116811461017057600080fd5b939250505056fea2646970667358221220501741e03a87f04ffd74a3a4b672e9bde7f2dfd4b8e2c0138a61c13765cf53a764736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b578063214cdb8014610062575b600080fd5b61004e610049366004610146565b610077565b604051901515815260200160405180910390f35b610075610070366004610146565b6100b7565b005b60006301ffc9a760e01b6001600160e01b0319831614806100b157506001600160e01b0319821660009081526020819052604090205460ff165b92915050565b6100c0816100c3565b50565b6001600160e01b031980821690036101215760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015260640160405180910390fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b60006020828403121561015857600080fd5b81356001600160e01b03198116811461017057600080fd5b939250505056fea2646970667358221220501741e03a87f04ffd74a3a4b672e9bde7f2dfd4b8e2c0138a61c13765cf53a764736f6c634300080d0033"}, "abi": [{"type": "function", "name": "registerInterface", "stateMutability": "nonpayable", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}}, "version": 1}}, "ERC1820ImplementerMock": {"contractName": "ERC1820ImplementerMock", "sourceId": "mocks/ERC1820ImplementerMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50610169806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063249cb3fa1461003b5780635536e45d14610060575b600080fd5b61004e6100493660046100f7565b61009f565b60405190815260200160405180910390f35b61009d61006e3660046100f7565b6000918252602082815260408084206001600160a01b039390931684529190529020805460ff19166001179055565b005b6000828152602081815260408083206001600160a01b038516845290915281205460ff166100ce5760006100f0565b7fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b9392505050565b6000806040838503121561010a57600080fd5b8235915060208301356001600160a01b038116811461012857600080fd5b80915050925092905056fea2646970667358221220840e332fd3aa8d19b0c56abfa5c677dad039592658c50527de306d912c50bce164736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063249cb3fa1461003b5780635536e45d14610060575b600080fd5b61004e6100493660046100f7565b61009f565b60405190815260200160405180910390f35b61009d61006e3660046100f7565b6000918252602082815260408084206001600160a01b039390931684529190529020805460ff19166001179055565b005b6000828152602081815260408083206001600160a01b038516845290915281205460ff166100ce5760006100f0565b7fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b9392505050565b6000806040838503121561010a57600080fd5b8235915060208301356001600160a01b038116811461012857600080fd5b80915050925092905056fea2646970667358221220840e332fd3aa8d19b0c56abfa5c677dad039592658c50527de306d912c50bce164736f6c634300080d0033"}, "abi": [{"type": "function", "name": "canImplementInterfaceForAddress", "stateMutability": "view", "inputs": [{"name": "interfaceHash", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "registerInterfaceForAddress", "stateMutability": "nonpayable", "inputs": [{"name": "interfaceHash", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"canImplementInterfaceForAddress(bytes32,address)": {"details": "See {IERC1820Implementer-canImplementInterfaceForAddress}."}}, "version": 1}}, "ERC20BurnableMock": {"contractName": "ERC20BurnableMock", "sourceId": "mocks/ERC20BurnableMock.sol", "deploymentBytecode": {"bytecode": "0x60806040523480156200001157600080fd5b5060405162000f0d38038062000f0d8339810160408190526200003491620002dd565b8351849084906200004d9060039060208501906200016a565b508051620000639060049060208401906200016a565b5050506200007882826200008260201b60201c565b50505050620003d3565b6001600160a01b038216620000dd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620000f1919062000370565b90915550506001600160a01b038216600090815260208190526040812080548392906200012090849062000370565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001789062000397565b90600052602060002090601f0160209004810192826200019c5760008555620001e7565b82601f10620001b757805160ff1916838001178555620001e7565b82800160010185558215620001e7579182015b82811115620001e7578251825591602001919060010190620001ca565b50620001f5929150620001f9565b5090565b5b80821115620001f55760008155600101620001fa565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200023857600080fd5b81516001600160401b038082111562000255576200025562000210565b604051601f8301601f19908116603f0116810190828211818310171562000280576200028062000210565b816040528381526020925086838588010111156200029d57600080fd5b600091505b83821015620002c15785820183015181830184015290820190620002a2565b83821115620002d35760008385830101525b9695505050505050565b60008060008060808587031215620002f457600080fd5b84516001600160401b03808211156200030c57600080fd5b6200031a8883890162000226565b955060208701519150808211156200033157600080fd5b50620003408782880162000226565b604087015190945090506001600160a01b03811681146200036057600080fd5b6060959095015193969295505050565b600082198211156200039257634e487b7160e01b600052601160045260246000fd5b500190565b600181811c90821680620003ac57607f821691505b602082108103620003cd57634e487b7160e01b600052602260045260246000fd5b50919050565b610b2a80620003e36000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806342966c681161008c57806395d89b411161006657806395d89b41146101ad578063a457c2d7146101b5578063a9059cbb146101c8578063dd62ed3e146101db57600080fd5b806342966c681461015c57806370a082311461017157806379cc67901461019a57600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd14610127578063313ce5671461013a5780633950935114610149575b600080fd5b6100dc610214565b6040516100e99190610930565b60405180910390f35b6101056101003660046109a1565b6102a6565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b6101056101353660046109cb565b6102bc565b604051601281526020016100e9565b6101056101573660046109a1565b61036b565b61016f61016a366004610a07565b6103a7565b005b61011961017f366004610a20565b6001600160a01b031660009081526020819052604090205490565b61016f6101a83660046109a1565b6103b4565b6100dc61043a565b6101056101c33660046109a1565b610449565b6101056101d63660046109a1565b6104e2565b6101196101e9366004610a42565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461022390610a75565b80601f016020809104026020016040519081016040528092919081815260200182805461024f90610a75565b801561029c5780601f106102715761010080835404028352916020019161029c565b820191906000526020600020905b81548152906001019060200180831161027f57829003601f168201915b5050505050905090565b60006102b33384846104ef565b50600192915050565b60006102c9848484610613565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103535760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61036085338584036104ef565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102b39185906103a2908690610ac5565b6104ef565b6103b133826107e2565b50565b60006103c083336101e9565b90508181101561041e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77604482015263616e636560e01b606482015260840161034a565b61042b83338484036104ef565b61043583836107e2565b505050565b60606004805461022390610a75565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104cb5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161034a565b6104d833858584036104ef565b5060019392505050565b60006102b3338484610613565b6001600160a01b0383166105515760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161034a565b6001600160a01b0382166105b25760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161034a565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166106775760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161034a565b6001600160a01b0382166106d95760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161034a565b6001600160a01b038316600090815260208190526040902054818110156107515760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161034a565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610788908490610ac5565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107d491815260200190565b60405180910390a350505050565b6001600160a01b0382166108425760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161034a565b6001600160a01b038216600090815260208190526040902054818110156108b65760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161034a565b6001600160a01b03831660009081526020819052604081208383039055600280548492906108e5908490610add565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b600060208083528351808285015260005b8181101561095d57858101830151858201604001528201610941565b8181111561096f576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461099c57600080fd5b919050565b600080604083850312156109b457600080fd5b6109bd83610985565b946020939093013593505050565b6000806000606084860312156109e057600080fd5b6109e984610985565b92506109f760208501610985565b9150604084013590509250925092565b600060208284031215610a1957600080fd5b5035919050565b600060208284031215610a3257600080fd5b610a3b82610985565b9392505050565b60008060408385031215610a5557600080fd5b610a5e83610985565b9150610a6c60208401610985565b90509250929050565b600181811c90821680610a8957607f821691505b602082108103610aa957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610ad857610ad8610aaf565b500190565b600082821015610aef57610aef610aaf565b50039056fea26469706673582212200667917b47770647dacf678ccdeaf386590e5deb05c4327f6338dd117dc53cee64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806342966c681161008c57806395d89b411161006657806395d89b41146101ad578063a457c2d7146101b5578063a9059cbb146101c8578063dd62ed3e146101db57600080fd5b806342966c681461015c57806370a082311461017157806379cc67901461019a57600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd14610127578063313ce5671461013a5780633950935114610149575b600080fd5b6100dc610214565b6040516100e99190610930565b60405180910390f35b6101056101003660046109a1565b6102a6565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b6101056101353660046109cb565b6102bc565b604051601281526020016100e9565b6101056101573660046109a1565b61036b565b61016f61016a366004610a07565b6103a7565b005b61011961017f366004610a20565b6001600160a01b031660009081526020819052604090205490565b61016f6101a83660046109a1565b6103b4565b6100dc61043a565b6101056101c33660046109a1565b610449565b6101056101d63660046109a1565b6104e2565b6101196101e9366004610a42565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461022390610a75565b80601f016020809104026020016040519081016040528092919081815260200182805461024f90610a75565b801561029c5780601f106102715761010080835404028352916020019161029c565b820191906000526020600020905b81548152906001019060200180831161027f57829003601f168201915b5050505050905090565b60006102b33384846104ef565b50600192915050565b60006102c9848484610613565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103535760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61036085338584036104ef565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102b39185906103a2908690610ac5565b6104ef565b6103b133826107e2565b50565b60006103c083336101e9565b90508181101561041e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77604482015263616e636560e01b606482015260840161034a565b61042b83338484036104ef565b61043583836107e2565b505050565b60606004805461022390610a75565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104cb5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161034a565b6104d833858584036104ef565b5060019392505050565b60006102b3338484610613565b6001600160a01b0383166105515760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161034a565b6001600160a01b0382166105b25760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161034a565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166106775760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161034a565b6001600160a01b0382166106d95760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161034a565b6001600160a01b038316600090815260208190526040902054818110156107515760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161034a565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610788908490610ac5565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107d491815260200190565b60405180910390a350505050565b6001600160a01b0382166108425760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161034a565b6001600160a01b038216600090815260208190526040902054818110156108b65760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161034a565b6001600160a01b03831660009081526020819052604081208383039055600280548492906108e5908490610add565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b600060208083528351808285015260005b8181101561095d57858101830151858201604001528201610941565b8181111561096f576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461099c57600080fd5b919050565b600080604083850312156109b457600080fd5b6109bd83610985565b946020939093013593505050565b6000806000606084860312156109e057600080fd5b6109e984610985565b92506109f760208501610985565b9150604084013590509250925092565b600060208284031215610a1957600080fd5b5035919050565b600060208284031215610a3257600080fd5b610a3b82610985565b9392505050565b60008060408385031215610a5557600080fd5b610a5e83610985565b9150610a6c60208401610985565b90509250929050565b600181811c90821680610a8957607f821691505b602082108103610aa957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610ad857610ad8610aaf565b500190565b600082821015610aef57610aef610aaf565b50039056fea26469706673582212200667917b47770647dacf678ccdeaf386590e5deb05c4327f6338dd117dc53cee64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}, {"name": "initialAccount", "type": "address", "internalType": "address"}, {"name": "initialBalance", "type": "uint256", "internalType": "uint256"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "burnFrom", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "burn(uint256)": {"details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."}, "burnFrom(address,uint256)": {"details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20CappedMock": {"contractName": "ERC20CappedMock", "sourceId": "mocks/ERC20CappedMock.sol", "deploymentBytecode": {"bytecode": "0x60a06040523480156200001157600080fd5b5060405162000da838038062000da883398101604081905262000034916200023d565b80838381600390805190602001906200004f929190620000ca565b50805162000065906004906020840190620000ca565b50505060008111620000bd5760405162461bcd60e51b815260206004820152601560248201527f45524332304361707065643a2063617020697320300000000000000000000000604482015260640160405180910390fd5b60805250620002ec915050565b828054620000d890620002b0565b90600052602060002090601f016020900481019282620000fc576000855562000147565b82601f106200011757805160ff191683800117855562000147565b8280016001018555821562000147579182015b82811115620001475782518255916020019190600101906200012a565b506200015592915062000159565b5090565b5b808211156200015557600081556001016200015a565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200019857600080fd5b81516001600160401b0380821115620001b557620001b562000170565b604051601f8301601f19908116603f01168101908282118183101715620001e057620001e062000170565b81604052838152602092508683858801011115620001fd57600080fd5b600091505b8382101562000221578582018301518183018401529082019062000202565b83821115620002335760008385830101525b9695505050505050565b6000806000606084860312156200025357600080fd5b83516001600160401b03808211156200026b57600080fd5b620002798783880162000186565b945060208601519150808211156200029057600080fd5b506200029f8682870162000186565b925050604084015190509250925092565b600181811c90821680620002c557607f821691505b602082108103620002e657634e487b7160e01b600052602260045260246000fd5b50919050565b608051610a996200030f6000396000818161014b01526107720152610a996000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c57806395d89b411161006657806395d89b41146101c0578063a457c2d7146101c8578063a9059cbb146101db578063dd62ed3e146101ee57600080fd5b8063395093511461016f57806340c10f191461018257806370a082311461019757600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd14610127578063313ce5671461013a578063355274ea14610149575b600080fd5b6100dc610227565b6040516100e991906108d7565b60405180910390f35b610105610100366004610948565b6102b9565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b610105610135366004610972565b6102cf565b604051601281526020016100e9565b7f0000000000000000000000000000000000000000000000000000000000000000610119565b61010561017d366004610948565b61037e565b610195610190366004610948565b6103ba565b005b6101196101a53660046109ae565b6001600160a01b031660009081526020819052604090205490565b6100dc6103c8565b6101056101d6366004610948565b6103d7565b6101056101e9366004610948565b610470565b6101196101fc3660046109d0565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461023690610a03565b80601f016020809104026020016040519081016040528092919081815260200182805461026290610a03565b80156102af5780601f10610284576101008083540402835291602001916102af565b820191906000526020600020905b81548152906001019060200180831161029257829003601f168201915b5050505050905090565b60006102c633848461047d565b50600192915050565b60006102dc8484846105a1565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103665760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610373853385840361047d565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102c69185906103b5908690610a3d565b61047d565b6103c48282610770565b5050565b60606004805461023690610a03565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104595760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161035d565b610466338585840361047d565b5060019392505050565b60006102c63384846105a1565b6001600160a01b0383166104df5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161035d565b6001600160a01b0382166105405760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161035d565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166106055760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161035d565b6001600160a01b0382166106675760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161035d565b6001600160a01b038316600090815260208190526040902054818110156106df5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161035d565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610716908490610a3d565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161076291815260200190565b60405180910390a350505050565b7f00000000000000000000000000000000000000000000000000000000000000008161079b60025490565b6107a59190610a3d565b11156107f35760405162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015260640161035d565b6103c482826001600160a01b03821661084e5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161035d565b80600260008282546108609190610a3d565b90915550506001600160a01b0382166000908152602081905260408120805483929061088d908490610a3d565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060208083528351808285015260005b81811015610904578581018301518582016040015282016108e8565b81811115610916576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461094357600080fd5b919050565b6000806040838503121561095b57600080fd5b6109648361092c565b946020939093013593505050565b60008060006060848603121561098757600080fd5b6109908461092c565b925061099e6020850161092c565b9150604084013590509250925092565b6000602082840312156109c057600080fd5b6109c98261092c565b9392505050565b600080604083850312156109e357600080fd5b6109ec8361092c565b91506109fa6020840161092c565b90509250929050565b600181811c90821680610a1757607f821691505b602082108103610a3757634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610a5e57634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212204087cc95bf3d6bc88fc6c4814a1781a061ed87b53915bd3383f57dd50dd89ac864736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c57806395d89b411161006657806395d89b41146101c0578063a457c2d7146101c8578063a9059cbb146101db578063dd62ed3e146101ee57600080fd5b8063395093511461016f57806340c10f191461018257806370a082311461019757600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd14610127578063313ce5671461013a578063355274ea14610149575b600080fd5b6100dc610227565b6040516100e991906108d7565b60405180910390f35b610105610100366004610948565b6102b9565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b610105610135366004610972565b6102cf565b604051601281526020016100e9565b7f0000000000000000000000000000000000000000000000000000000000000000610119565b61010561017d366004610948565b61037e565b610195610190366004610948565b6103ba565b005b6101196101a53660046109ae565b6001600160a01b031660009081526020819052604090205490565b6100dc6103c8565b6101056101d6366004610948565b6103d7565b6101056101e9366004610948565b610470565b6101196101fc3660046109d0565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461023690610a03565b80601f016020809104026020016040519081016040528092919081815260200182805461026290610a03565b80156102af5780601f10610284576101008083540402835291602001916102af565b820191906000526020600020905b81548152906001019060200180831161029257829003601f168201915b5050505050905090565b60006102c633848461047d565b50600192915050565b60006102dc8484846105a1565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103665760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610373853385840361047d565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102c69185906103b5908690610a3d565b61047d565b6103c48282610770565b5050565b60606004805461023690610a03565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104595760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161035d565b610466338585840361047d565b5060019392505050565b60006102c63384846105a1565b6001600160a01b0383166104df5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161035d565b6001600160a01b0382166105405760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161035d565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166106055760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161035d565b6001600160a01b0382166106675760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161035d565b6001600160a01b038316600090815260208190526040902054818110156106df5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161035d565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610716908490610a3d565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161076291815260200190565b60405180910390a350505050565b7f00000000000000000000000000000000000000000000000000000000000000008161079b60025490565b6107a59190610a3d565b11156107f35760405162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015260640161035d565b6103c482826001600160a01b03821661084e5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161035d565b80600260008282546108609190610a3d565b90915550506001600160a01b0382166000908152602081905260408120805483929061088d908490610a3d565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060208083528351808285015260005b81811015610904578581018301518582016040015282016108e8565b81811115610916576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461094357600080fd5b919050565b6000806040838503121561095b57600080fd5b6109648361092c565b946020939093013593505050565b60008060006060848603121561098757600080fd5b6109908461092c565b925061099e6020850161092c565b9150604084013590509250925092565b6000602082840312156109c057600080fd5b6109c98261092c565b9392505050565b600080604083850312156109e357600080fd5b6109ec8361092c565b91506109fa6020840161092c565b90509250929050565b600181811c90821680610a1757607f821691505b602082108103610a3757634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610a5e57634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212204087cc95bf3d6bc88fc6c4814a1781a061ed87b53915bd3383f57dd50dd89ac864736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}, {"name": "cap", "type": "uint256", "internalType": "uint256"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "cap", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "cap()": {"details": "Returns the cap on the token's total supply."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20DecimalsMock": {"contractName": "ERC20DecimalsMock", "sourceId": "mocks/ERC20DecimalsMock.sol", "deploymentBytecode": {"bytecode": "0x60a06040523480156200001157600080fd5b5060405162000baa38038062000baa8339810160408190526200003491620001e8565b8251839083906200004d90600390602085019062000075565b5080516200006390600490602084019062000075565b50505060ff1660805250620002a99050565b82805462000083906200026d565b90600052602060002090601f016020900481019282620000a75760008555620000f2565b82601f10620000c257805160ff1916838001178555620000f2565b82800160010185558215620000f2579182015b82811115620000f2578251825591602001919060010190620000d5565b506200010092915062000104565b5090565b5b8082111562000100576000815560010162000105565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200014357600080fd5b81516001600160401b03808211156200016057620001606200011b565b604051601f8301601f19908116603f011681019082821181831017156200018b576200018b6200011b565b81604052838152602092508683858801011115620001a857600080fd5b600091505b83821015620001cc5785820183015181830184015290820190620001ad565b83821115620001de5760008385830101525b9695505050505050565b600080600060608486031215620001fe57600080fd5b83516001600160401b03808211156200021657600080fd5b620002248783880162000131565b945060208601519150808211156200023b57600080fd5b506200024a8682870162000131565b925050604084015160ff811681146200026257600080fd5b809150509250925092565b600181811c908216806200028257607f821691505b602082108103620002a357634e487b7160e01b600052602260045260246000fd5b50919050565b6080516108e5620002c5600039600061011b01526108e56000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461014557806370a082311461015857806395d89b4114610181578063a457c2d714610189578063a9059cbb1461019c578063dd62ed3e146101af57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101e8565b6040516100c39190610723565b60405180910390f35b6100df6100da366004610794565b61027a565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f3660046107be565b610290565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016100c3565b6100df610153366004610794565b61033f565b6100f36101663660046107fa565b6001600160a01b031660009081526020819052604090205490565b6100b661037b565b6100df610197366004610794565b61038a565b6100df6101aa366004610794565b610423565b6100f36101bd36600461081c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101f79061084f565b80601f01602080910402602001604051908101604052809291908181526020018280546102239061084f565b80156102705780601f1061024557610100808354040283529160200191610270565b820191906000526020600020905b81548152906001019060200180831161025357829003601f168201915b5050505050905090565b6000610287338484610430565b50600192915050565b600061029d848484610554565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103275760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103348533858403610430565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610287918590610376908690610889565b610430565b6060600480546101f79061084f565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561040c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161031e565b6104193385858403610430565b5060019392505050565b6000610287338484610554565b6001600160a01b0383166104925760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161031e565b6001600160a01b0382166104f35760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161031e565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166105b85760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161031e565b6001600160a01b03821661061a5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161031e565b6001600160a01b038316600090815260208190526040902054818110156106925760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161031e565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106c9908490610889565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161071591815260200190565b60405180910390a350505050565b600060208083528351808285015260005b8181101561075057858101830151858201604001528201610734565b81811115610762576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461078f57600080fd5b919050565b600080604083850312156107a757600080fd5b6107b083610778565b946020939093013593505050565b6000806000606084860312156107d357600080fd5b6107dc84610778565b92506107ea60208501610778565b9150604084013590509250925092565b60006020828403121561080c57600080fd5b61081582610778565b9392505050565b6000806040838503121561082f57600080fd5b61083883610778565b915061084660208401610778565b90509250929050565b600181811c9082168061086357607f821691505b60208210810361088357634e487b7160e01b600052602260045260246000fd5b50919050565b600082198211156108aa57634e487b7160e01b600052601160045260246000fd5b50019056fea264697066735822122088a590bb1a4d6762557fb7703c582425c7a310d2bc9fc09138a8bbaaf37ed41164736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461014557806370a082311461015857806395d89b4114610181578063a457c2d714610189578063a9059cbb1461019c578063dd62ed3e146101af57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101e8565b6040516100c39190610723565b60405180910390f35b6100df6100da366004610794565b61027a565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f3660046107be565b610290565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016100c3565b6100df610153366004610794565b61033f565b6100f36101663660046107fa565b6001600160a01b031660009081526020819052604090205490565b6100b661037b565b6100df610197366004610794565b61038a565b6100df6101aa366004610794565b610423565b6100f36101bd36600461081c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101f79061084f565b80601f01602080910402602001604051908101604052809291908181526020018280546102239061084f565b80156102705780601f1061024557610100808354040283529160200191610270565b820191906000526020600020905b81548152906001019060200180831161025357829003601f168201915b5050505050905090565b6000610287338484610430565b50600192915050565b600061029d848484610554565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103275760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103348533858403610430565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610287918590610376908690610889565b610430565b6060600480546101f79061084f565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561040c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161031e565b6104193385858403610430565b5060019392505050565b6000610287338484610554565b6001600160a01b0383166104925760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161031e565b6001600160a01b0382166104f35760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161031e565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166105b85760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161031e565b6001600160a01b03821661061a5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161031e565b6001600160a01b038316600090815260208190526040902054818110156106925760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161031e565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106c9908490610889565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161071591815260200190565b60405180910390a350505050565b600060208083528351808285015260005b8181101561075057858101830151858201604001528201610734565b81811115610762576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461078f57600080fd5b919050565b600080604083850312156107a757600080fd5b6107b083610778565b946020939093013593505050565b6000806000606084860312156107d357600080fd5b6107dc84610778565b92506107ea60208501610778565b9150604084013590509250925092565b60006020828403121561080c57600080fd5b61081582610778565b9392505050565b6000806040838503121561082f57600080fd5b61083883610778565b915061084660208401610778565b90509250929050565b600181811c9082168061086357607f821691505b60208210810361088357634e487b7160e01b600052602260045260246000fd5b50919050565b600082198211156108aa57634e487b7160e01b600052601160045260246000fd5b50019056fea264697066735822122088a590bb1a4d6762557fb7703c582425c7a310d2bc9fc09138a8bbaaf37ed41164736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name_", "type": "string", "internalType": "string"}, {"name": "symbol_", "type": "string", "internalType": "string"}, {"name": "decimals_", "type": "uint8", "internalType": "uint8"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20FlashMintMock": {"contractName": "ERC20FlashMintMock", "sourceId": "mocks/ERC20FlashMintMock.sol", "deploymentBytecode": {"bytecode": "0x60806040523480156200001157600080fd5b50604051620012f2380380620012f28339810160408190526200003491620002dd565b8351849084906200004d9060039060208501906200016a565b508051620000639060049060208401906200016a565b5050506200007882826200008260201b60201c565b50505050620003d3565b6001600160a01b038216620000dd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620000f1919062000370565b90915550506001600160a01b038216600090815260208190526040812080548392906200012090849062000370565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001789062000397565b90600052602060002090601f0160209004810192826200019c5760008555620001e7565b82601f10620001b757805160ff1916838001178555620001e7565b82800160010185558215620001e7579182015b82811115620001e7578251825591602001919060010190620001ca565b50620001f5929150620001f9565b5090565b5b80821115620001f55760008155600101620001fa565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200023857600080fd5b81516001600160401b038082111562000255576200025562000210565b604051601f8301601f19908116603f0116810190828211818310171562000280576200028062000210565b816040528381526020925086838588010111156200029d57600080fd5b600091505b83821015620002c15785820183015181830184015290820190620002a2565b83821115620002d35760008385830101525b9695505050505050565b60008060008060808587031215620002f457600080fd5b84516001600160401b03808211156200030c57600080fd5b6200031a8883890162000226565b955060208701519150808211156200033157600080fd5b50620003408782880162000226565b604087015190945090506001600160a01b03811681146200036057600080fd5b6060959095015193969295505050565b600082198211156200039257634e487b7160e01b600052601160045260246000fd5b500190565b600181811c90821680620003ac57607f821691505b602082108103620003cd57634e487b7160e01b600052602260045260246000fd5b50919050565b610f0f80620003e36000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063613255ab1161008c578063a457c2d711610066578063a457c2d7146101ce578063a9059cbb146101e1578063d9d98ce4146101f4578063dd62ed3e1461020757600080fd5b8063613255ab1461018a57806370a082311461019d57806395d89b41146101c657600080fd5b806323b872dd116100c857806323b872dd14610142578063313ce5671461015557806339509351146101645780635cffe9de1461017757600080fd5b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610130575b600080fd5b6100f7610240565b6040516101049190610c0f565b60405180910390f35b61012061011b366004610c7c565b6102d2565b6040519015158152602001610104565b6002545b604051908152602001610104565b610120610150366004610ca8565b6102e8565b60405160128152602001610104565b610120610172366004610c7c565b610397565b610120610185366004610ce9565b6103d3565b610134610198366004610d88565b6105b0565b6101346101ab366004610d88565b6001600160a01b031660009081526020819052604090205490565b6100f76105de565b6101206101dc366004610c7c565b6105ed565b6101206101ef366004610c7c565b610686565b610134610202366004610c7c565b610693565b610134610215366004610dac565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461024f90610de5565b80601f016020809104026020016040519081016040528092919081815260200182805461027b90610de5565b80156102c85780601f1061029d576101008083540402835291602001916102c8565b820191906000526020600020905b8154815290600101906020018083116102ab57829003601f168201915b5050505050905090565b60006102df3384846106f6565b50600192915050565b60006102f584848461081b565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561037f5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61038c85338584036106f6565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102df9185906103ce908690610e35565b6106f6565b6000806103e08686610693565b90506103ec87866109ea565b6040516323e30c8b60e01b81527f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9906001600160a01b038916906323e30c8b906104449033908b908b9088908c908c90600401610e4d565b6020604051808303816000875af1158015610463573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104879190610ea9565b146104e05760405162461bcd60e51b8152602060048201526024808201527f4552433230466c6173684d696e743a20696e76616c69642072657475726e2076604482015263616c756560e01b6064820152608401610376565b6001600160a01b038716600090815260016020908152604080832030845290915290205461050e8287610e35565b8110156105755760405162461bcd60e51b815260206004820152602f60248201527f4552433230466c6173684d696e743a20616c6c6f77616e636520646f6573206e60448201526e1bdd08185b1b1bddc81c99599d5b99608a1b6064820152608401610376565b61058f8830846105858a86610ec2565b6103ce9190610ec2565b6105a28861059d8489610e35565b610ac9565b506001979650505050505050565b60006001600160a01b03821630146105c95760006105d8565b6002546105d890600019610ec2565b92915050565b60606004805461024f90610de5565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561066f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610376565b61067c33858584036106f6565b5060019392505050565b60006102df33848461081b565b60006001600160a01b03831630146106ed5760405162461bcd60e51b815260206004820152601b60248201527f4552433230466c6173684d696e743a2077726f6e6720746f6b656e00000000006044820152606401610376565b50600092915050565b6001600160a01b0383166107585760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610376565b6001600160a01b0382166107b95760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610376565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03831661087f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610376565b6001600160a01b0382166108e15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610376565b6001600160a01b038316600090815260208190526040902054818110156109595760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610376565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610990908490610e35565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516109dc91815260200190565b60405180910390a350505050565b6001600160a01b038216610a405760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610376565b8060026000828254610a529190610e35565b90915550506001600160a01b03821660009081526020819052604081208054839290610a7f908490610e35565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610b295760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610376565b6001600160a01b03821660009081526020819052604090205481811015610b9d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610376565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610bcc908490610ec2565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161080e565b600060208083528351808285015260005b81811015610c3c57858101830151858201604001528201610c20565b81811115610c4e576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b0381168114610c7957600080fd5b50565b60008060408385031215610c8f57600080fd5b8235610c9a81610c64565b946020939093013593505050565b600080600060608486031215610cbd57600080fd5b8335610cc881610c64565b92506020840135610cd881610c64565b929592945050506040919091013590565b600080600080600060808688031215610d0157600080fd5b8535610d0c81610c64565b94506020860135610d1c81610c64565b935060408601359250606086013567ffffffffffffffff80821115610d4057600080fd5b818801915088601f830112610d5457600080fd5b813581811115610d6357600080fd5b896020828501011115610d7557600080fd5b9699959850939650602001949392505050565b600060208284031215610d9a57600080fd5b8135610da581610c64565b9392505050565b60008060408385031215610dbf57600080fd5b8235610dca81610c64565b91506020830135610dda81610c64565b809150509250929050565b600181811c90821680610df957607f821691505b602082108103610e1957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610e4857610e48610e1f565b500190565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290526000828460c0840137600060c0848401015260c0601f19601f8501168301019050979650505050505050565b600060208284031215610ebb57600080fd5b5051919050565b600082821015610ed457610ed4610e1f565b50039056fea26469706673582212202447df61f59cc3ba898d467f66f15ce8af9827da77a0132dd6854d0dd011fbdc64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063613255ab1161008c578063a457c2d711610066578063a457c2d7146101ce578063a9059cbb146101e1578063d9d98ce4146101f4578063dd62ed3e1461020757600080fd5b8063613255ab1461018a57806370a082311461019d57806395d89b41146101c657600080fd5b806323b872dd116100c857806323b872dd14610142578063313ce5671461015557806339509351146101645780635cffe9de1461017757600080fd5b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610130575b600080fd5b6100f7610240565b6040516101049190610c0f565b60405180910390f35b61012061011b366004610c7c565b6102d2565b6040519015158152602001610104565b6002545b604051908152602001610104565b610120610150366004610ca8565b6102e8565b60405160128152602001610104565b610120610172366004610c7c565b610397565b610120610185366004610ce9565b6103d3565b610134610198366004610d88565b6105b0565b6101346101ab366004610d88565b6001600160a01b031660009081526020819052604090205490565b6100f76105de565b6101206101dc366004610c7c565b6105ed565b6101206101ef366004610c7c565b610686565b610134610202366004610c7c565b610693565b610134610215366004610dac565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461024f90610de5565b80601f016020809104026020016040519081016040528092919081815260200182805461027b90610de5565b80156102c85780601f1061029d576101008083540402835291602001916102c8565b820191906000526020600020905b8154815290600101906020018083116102ab57829003601f168201915b5050505050905090565b60006102df3384846106f6565b50600192915050565b60006102f584848461081b565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561037f5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61038c85338584036106f6565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102df9185906103ce908690610e35565b6106f6565b6000806103e08686610693565b90506103ec87866109ea565b6040516323e30c8b60e01b81527f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9906001600160a01b038916906323e30c8b906104449033908b908b9088908c908c90600401610e4d565b6020604051808303816000875af1158015610463573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104879190610ea9565b146104e05760405162461bcd60e51b8152602060048201526024808201527f4552433230466c6173684d696e743a20696e76616c69642072657475726e2076604482015263616c756560e01b6064820152608401610376565b6001600160a01b038716600090815260016020908152604080832030845290915290205461050e8287610e35565b8110156105755760405162461bcd60e51b815260206004820152602f60248201527f4552433230466c6173684d696e743a20616c6c6f77616e636520646f6573206e60448201526e1bdd08185b1b1bddc81c99599d5b99608a1b6064820152608401610376565b61058f8830846105858a86610ec2565b6103ce9190610ec2565b6105a28861059d8489610e35565b610ac9565b506001979650505050505050565b60006001600160a01b03821630146105c95760006105d8565b6002546105d890600019610ec2565b92915050565b60606004805461024f90610de5565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561066f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610376565b61067c33858584036106f6565b5060019392505050565b60006102df33848461081b565b60006001600160a01b03831630146106ed5760405162461bcd60e51b815260206004820152601b60248201527f4552433230466c6173684d696e743a2077726f6e6720746f6b656e00000000006044820152606401610376565b50600092915050565b6001600160a01b0383166107585760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610376565b6001600160a01b0382166107b95760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610376565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03831661087f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610376565b6001600160a01b0382166108e15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610376565b6001600160a01b038316600090815260208190526040902054818110156109595760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610376565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610990908490610e35565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516109dc91815260200190565b60405180910390a350505050565b6001600160a01b038216610a405760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610376565b8060026000828254610a529190610e35565b90915550506001600160a01b03821660009081526020819052604081208054839290610a7f908490610e35565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610b295760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610376565b6001600160a01b03821660009081526020819052604090205481811015610b9d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610376565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610bcc908490610ec2565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161080e565b600060208083528351808285015260005b81811015610c3c57858101830151858201604001528201610c20565b81811115610c4e576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b0381168114610c7957600080fd5b50565b60008060408385031215610c8f57600080fd5b8235610c9a81610c64565b946020939093013593505050565b600080600060608486031215610cbd57600080fd5b8335610cc881610c64565b92506020840135610cd881610c64565b929592945050506040919091013590565b600080600080600060808688031215610d0157600080fd5b8535610d0c81610c64565b94506020860135610d1c81610c64565b935060408601359250606086013567ffffffffffffffff80821115610d4057600080fd5b818801915088601f830112610d5457600080fd5b813581811115610d6357600080fd5b896020828501011115610d7557600080fd5b9699959850939650602001949392505050565b600060208284031215610d9a57600080fd5b8135610da581610c64565b9392505050565b60008060408385031215610dbf57600080fd5b8235610dca81610c64565b91506020830135610dda81610c64565b809150509250929050565b600181811c90821680610df957607f821691505b602082108103610e1957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610e4857610e48610e1f565b500190565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290526000828460c0840137600060c0848401015260c0601f19601f8501168301019050979650505050505050565b600060208284031215610ebb57600080fd5b5051919050565b600082821015610ed457610ed4610e1f565b50039056fea26469706673582212202447df61f59cc3ba898d467f66f15ce8af9827da77a0132dd6854d0dd011fbdc64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}, {"name": "initialAccount", "type": "address", "internalType": "address"}, {"name": "initialBalance", "type": "uint256", "internalType": "uint256"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "flashFee", "stateMutability": "view", "inputs": [{"name": "token", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "flashLoan", "stateMutability": "nonpayable", "inputs": [{"name": "receiver", "type": "address", "internalType": "contract IERC3156FlashBorrower"}, {"name": "token", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "maxFlashLoan", "stateMutability": "view", "inputs": [{"name": "token", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "flashFee(address,uint256)": {"details": "Returns the fee applied when doing flash loans. By default this implementation has 0 fees. This function can be overloaded to make the flash loan mechanism deflationary.", "params": {"amount": "The amount of tokens to be loaned.", "token": "The token to be flash loaned."}, "returns": {"_0": "The fees applied to the corresponding flash loan."}}, "flashLoan(address,address,uint256,bytes)": {"details": "Performs a flash loan. New tokens are minted and sent to the `receiver`, who is required to implement the {IERC3156FlashBorrower} interface. By the end of the flash loan, the receiver is expected to own amount + fee tokens and have them approved back to the token contract itself so they can be burned.", "params": {"amount": "The amount of tokens to be loaned.", "data": "An arbitrary datafield that is passed to the receiver.", "receiver": "The receiver of the flash loan. Should implement the {IERC3156FlashBorrower.onFlashLoan} interface.", "token": "The token to be flash loaned. Only `address(this)` is supported."}, "returns": {"_0": "`true` is the flash loan was successful."}}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "maxFlashLoan(address)": {"details": "Returns the maximum amount of tokens available for loan.", "params": {"token": "The address of the token that is requested."}, "returns": {"_0": "The amont of token that can be loaned."}}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20Mock": {"contractName": "ERC20Mock", "sourceId": "mocks/ERC20Mock.sol", "deploymentBytecode": {"bytecode": "0x608060405260405162000fb138038062000fb18339810160408190526200002691620002cf565b8351849084906200003f9060039060208501906200015c565b508051620000559060049060208401906200015c565b5050506200006a82826200007460201b60201c565b50505050620003c5565b6001600160a01b038216620000cf5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620000e3919062000362565b90915550506001600160a01b038216600090815260208190526040812080548392906200011290849062000362565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b8280546200016a9062000389565b90600052602060002090601f0160209004810192826200018e5760008555620001d9565b82601f10620001a957805160ff1916838001178555620001d9565b82800160010185558215620001d9579182015b82811115620001d9578251825591602001919060010190620001bc565b50620001e7929150620001eb565b5090565b5b80821115620001e75760008155600101620001ec565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200022a57600080fd5b81516001600160401b038082111562000247576200024762000202565b604051601f8301601f19908116603f0116810190828211818310171562000272576200027262000202565b816040528381526020925086838588010111156200028f57600080fd5b600091505b83821015620002b3578582018301518183018401529082019062000294565b83821115620002c55760008385830101525b9695505050505050565b60008060008060808587031215620002e657600080fd5b84516001600160401b0380821115620002fe57600080fd5b6200030c8883890162000218565b955060208701519150808211156200032357600080fd5b50620003328782880162000218565b604087015190945090506001600160a01b03811681146200035257600080fd5b6060959095015193969295505050565b600082198211156200038457634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806200039e57607f821691505b602082108103620003bf57634e487b7160e01b600052602260045260246000fd5b50919050565b610bdc80620003d56000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806340c10f19116100975780639dc29fac116100665780639dc29fac146101ee578063a457c2d714610201578063a9059cbb14610214578063dd62ed3e1461022757600080fd5b806340c10f191461019757806356189cb4146101aa57806370a08231146101bd57806395d89b41146101e657600080fd5b8063222f5be0116100d3578063222f5be01461014d57806323b872dd14610162578063313ce56714610175578063395093511461018457600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013b575b600080fd5b610102610260565b60405161010f91906109fb565b60405180910390f35b61012b610126366004610a6c565b6102f2565b604051901515815260200161010f565b6002545b60405190815260200161010f565b61016061015b366004610a96565b610308565b005b61012b610170366004610a96565b610318565b6040516012815260200161010f565b61012b610192366004610a6c565b6103c7565b6101606101a5366004610a6c565b610403565b6101606101b8366004610a96565b610411565b61013f6101cb366004610ad2565b6001600160a01b031660009081526020819052604090205490565b61010261041c565b6101606101fc366004610a6c565b61042b565b61012b61020f366004610a6c565b610435565b61012b610222366004610a6c565b6104ce565b61013f610235366004610af4565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461026f90610b27565b80601f016020809104026020016040519081016040528092919081815260200182805461029b90610b27565b80156102e85780601f106102bd576101008083540402835291602001916102e8565b820191906000526020600020905b8154815290600101906020018083116102cb57829003601f168201915b5050505050905090565b60006102ff3384846104db565b50600192915050565b6103138383836105ff565b505050565b60006103258484846105ff565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103af5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103bc85338584036104db565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102ff9185906103fe908690610b77565b6104db565b61040d82826107ce565b5050565b6103138383836104db565b60606004805461026f90610b27565b61040d82826108ad565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104b75760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103a6565b6104c433858584036104db565b5060019392505050565b60006102ff3384846105ff565b6001600160a01b03831661053d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103a6565b6001600160a01b03821661059e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103a6565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166106635760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103a6565b6001600160a01b0382166106c55760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103a6565b6001600160a01b0383166000908152602081905260409020548181101561073d5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103a6565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610774908490610b77565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107c091815260200190565b60405180910390a350505050565b6001600160a01b0382166108245760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103a6565b80600260008282546108369190610b77565b90915550506001600160a01b03821660009081526020819052604081208054839290610863908490610b77565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b03821661090d5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103a6565b6001600160a01b038216600090815260208190526040902054818110156109815760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103a6565b6001600160a01b03831660009081526020819052604081208383039055600280548492906109b0908490610b8f565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b600060208083528351808285015260005b81811015610a2857858101830151858201604001528201610a0c565b81811115610a3a576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610a6757600080fd5b919050565b60008060408385031215610a7f57600080fd5b610a8883610a50565b946020939093013593505050565b600080600060608486031215610aab57600080fd5b610ab484610a50565b9250610ac260208501610a50565b9150604084013590509250925092565b600060208284031215610ae457600080fd5b610aed82610a50565b9392505050565b60008060408385031215610b0757600080fd5b610b1083610a50565b9150610b1e60208401610a50565b90509250929050565b600181811c90821680610b3b57607f821691505b602082108103610b5b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610b8a57610b8a610b61565b500190565b600082821015610ba157610ba1610b61565b50039056fea2646970667358221220053e3500e5cbe6e2605fbf1f333201f845c5a1d551b37a62fc8d32b593a5832264736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806340c10f19116100975780639dc29fac116100665780639dc29fac146101ee578063a457c2d714610201578063a9059cbb14610214578063dd62ed3e1461022757600080fd5b806340c10f191461019757806356189cb4146101aa57806370a08231146101bd57806395d89b41146101e657600080fd5b8063222f5be0116100d3578063222f5be01461014d57806323b872dd14610162578063313ce56714610175578063395093511461018457600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013b575b600080fd5b610102610260565b60405161010f91906109fb565b60405180910390f35b61012b610126366004610a6c565b6102f2565b604051901515815260200161010f565b6002545b60405190815260200161010f565b61016061015b366004610a96565b610308565b005b61012b610170366004610a96565b610318565b6040516012815260200161010f565b61012b610192366004610a6c565b6103c7565b6101606101a5366004610a6c565b610403565b6101606101b8366004610a96565b610411565b61013f6101cb366004610ad2565b6001600160a01b031660009081526020819052604090205490565b61010261041c565b6101606101fc366004610a6c565b61042b565b61012b61020f366004610a6c565b610435565b61012b610222366004610a6c565b6104ce565b61013f610235366004610af4565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461026f90610b27565b80601f016020809104026020016040519081016040528092919081815260200182805461029b90610b27565b80156102e85780601f106102bd576101008083540402835291602001916102e8565b820191906000526020600020905b8154815290600101906020018083116102cb57829003601f168201915b5050505050905090565b60006102ff3384846104db565b50600192915050565b6103138383836105ff565b505050565b60006103258484846105ff565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103af5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103bc85338584036104db565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102ff9185906103fe908690610b77565b6104db565b61040d82826107ce565b5050565b6103138383836104db565b60606004805461026f90610b27565b61040d82826108ad565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104b75760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103a6565b6104c433858584036104db565b5060019392505050565b60006102ff3384846105ff565b6001600160a01b03831661053d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103a6565b6001600160a01b03821661059e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103a6565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166106635760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103a6565b6001600160a01b0382166106c55760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103a6565b6001600160a01b0383166000908152602081905260409020548181101561073d5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103a6565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610774908490610b77565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107c091815260200190565b60405180910390a350505050565b6001600160a01b0382166108245760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103a6565b80600260008282546108369190610b77565b90915550506001600160a01b03821660009081526020819052604081208054839290610863908490610b77565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b03821661090d5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103a6565b6001600160a01b038216600090815260208190526040902054818110156109815760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103a6565b6001600160a01b03831660009081526020819052604081208383039055600280548492906109b0908490610b8f565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b600060208083528351808285015260005b81811015610a2857858101830151858201604001528201610a0c565b81811115610a3a576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610a6757600080fd5b919050565b60008060408385031215610a7f57600080fd5b610a8883610a50565b946020939093013593505050565b600080600060608486031215610aab57600080fd5b610ab484610a50565b9250610ac260208501610a50565b9150604084013590509250925092565b600060208284031215610ae457600080fd5b610aed82610a50565b9392505050565b60008060408385031215610b0757600080fd5b610b1083610a50565b9150610b1e60208401610a50565b90509250929050565b600181811c90821680610b3b57607f821691505b602082108103610b5b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610b8a57610b8a610b61565b500190565b600082821015610ba157610ba1610b61565b50039056fea2646970667358221220053e3500e5cbe6e2605fbf1f333201f845c5a1d551b37a62fc8d32b593a5832264736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "payable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}, {"name": "initialAccount", "type": "address", "internalType": "address"}, {"name": "initialBalance", "type": "uint256", "internalType": "uint256"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "approveInternal", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferInternal", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20PausableMock": {"contractName": "ERC20PausableMock", "sourceId": "mocks/ERC20PausableMock.sol", "deploymentBytecode": {"bytecode": "0x60806040523480156200001157600080fd5b50604051620011ea380380620011ea833981016040819052620000349162000375565b8351849084906200004d90600390602085019062000202565b5080516200006390600490602084019062000202565b50506005805460ff19169055506200007c828262000086565b505050506200046b565b6001600160a01b038216620000e25760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064015b60405180910390fd5b620000f0600083836200017d565b806002600082825462000104919062000408565b90915550506001600160a01b038216600090815260208190526040812080548392906200013390849062000408565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b62000195838383620001fd60201b620004d21760201c565b60055460ff1615620001fd5760405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e736665722077686044820152691a5b19481c185d5cd95960b21b6064820152608401620000d9565b505050565b82805462000210906200042f565b90600052602060002090601f0160209004810192826200023457600085556200027f565b82601f106200024f57805160ff19168380011785556200027f565b828001600101855582156200027f579182015b828111156200027f57825182559160200191906001019062000262565b506200028d92915062000291565b5090565b5b808211156200028d576000815560010162000292565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620002d057600080fd5b81516001600160401b0380821115620002ed57620002ed620002a8565b604051601f8301601f19908116603f01168101908282118183101715620003185762000318620002a8565b816040528381526020925086838588010111156200033557600080fd5b600091505b838210156200035957858201830151818301840152908201906200033a565b838211156200036b5760008385830101525b9695505050505050565b600080600080608085870312156200038c57600080fd5b84516001600160401b0380821115620003a457600080fd5b620003b288838901620002be565b95506020870151915080821115620003c957600080fd5b50620003d887828801620002be565b604087015190945090506001600160a01b0381168114620003f857600080fd5b6060959095015193969295505050565b600082198211156200042a57634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806200044457607f821691505b6020821081036200046557634e487b7160e01b600052602260045260246000fd5b50919050565b610d6f806200047b6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80635c975abb116100975780639dc29fac116100665780639dc29fac146101ee578063a457c2d714610201578063a9059cbb14610214578063dd62ed3e1461022757600080fd5b80635c975abb146101aa57806370a08231146101b55780638456cb59146101de57806395d89b41146101e657600080fd5b8063313ce567116100d3578063313ce5671461016b578063395093511461017a5780633f4ba83a1461018d57806340c10f191461019757600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806323b872dd14610158575b600080fd5b61010d610260565b60405161011a9190610b8e565b60405180910390f35b610136610131366004610bff565b6102f2565b604051901515815260200161011a565b6002545b60405190815260200161011a565b610136610166366004610c29565b610308565b6040516012815260200161011a565b610136610188366004610bff565b6103b7565b6101956103f3565b005b6101956101a5366004610bff565b6103fd565b60055460ff16610136565b61014a6101c3366004610c65565b6001600160a01b031660009081526020819052604090205490565b61019561040b565b61010d610413565b6101956101fc366004610bff565b610422565b61013661020f366004610bff565b61042c565b610136610222366004610bff565b6104c5565b61014a610235366004610c87565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461026f90610cba565b80601f016020809104026020016040519081016040528092919081815260200182805461029b90610cba565b80156102e85780601f106102bd576101008083540402835291602001916102e8565b820191906000526020600020905b8154815290600101906020018083116102cb57829003601f168201915b5050505050905090565b60006102ff3384846104d7565b50600192915050565b60006103158484846105fb565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561039f5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103ac85338584036104d7565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102ff9185906103ee908690610d0a565b6104d7565b6103fb6107d5565b565b6104078282610868565b5050565b6103fb610953565b60606004805461026f90610cba565b61040782826109ce565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104ae5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610396565b6104bb33858584036104d7565b5060019392505050565b60006102ff3384846105fb565b505050565b6001600160a01b0383166105395760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610396565b6001600160a01b03821661059a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610396565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831661065f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610396565b6001600160a01b0382166106c15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610396565b6106cc838383610b28565b6001600160a01b038316600090815260208190526040902054818110156107445760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610396565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061077b908490610d0a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107c791815260200190565b60405180910390a350505050565b60055460ff1661081e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610396565b6005805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0382166108be5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610396565b6108ca60008383610b28565b80600260008282546108dc9190610d0a565b90915550506001600160a01b03821660009081526020819052604081208054839290610909908490610d0a565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60055460ff16156109995760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610396565b6005805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861084b3390565b6001600160a01b038216610a2e5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610396565b610a3a82600083610b28565b6001600160a01b03821660009081526020819052604090205481811015610aae5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610396565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610add908490610d22565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60055460ff16156104d25760405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e736665722077686044820152691a5b19481c185d5cd95960b21b6064820152608401610396565b600060208083528351808285015260005b81811015610bbb57858101830151858201604001528201610b9f565b81811115610bcd576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610bfa57600080fd5b919050565b60008060408385031215610c1257600080fd5b610c1b83610be3565b946020939093013593505050565b600080600060608486031215610c3e57600080fd5b610c4784610be3565b9250610c5560208501610be3565b9150604084013590509250925092565b600060208284031215610c7757600080fd5b610c8082610be3565b9392505050565b60008060408385031215610c9a57600080fd5b610ca383610be3565b9150610cb160208401610be3565b90509250929050565b600181811c90821680610cce57607f821691505b602082108103610cee57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610d1d57610d1d610cf4565b500190565b600082821015610d3457610d34610cf4565b50039056fea2646970667358221220afd6f6f63fdb85e78cec4942972edb4d4326c5edea23274992f2fd82780d22f164736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80635c975abb116100975780639dc29fac116100665780639dc29fac146101ee578063a457c2d714610201578063a9059cbb14610214578063dd62ed3e1461022757600080fd5b80635c975abb146101aa57806370a08231146101b55780638456cb59146101de57806395d89b41146101e657600080fd5b8063313ce567116100d3578063313ce5671461016b578063395093511461017a5780633f4ba83a1461018d57806340c10f191461019757600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806323b872dd14610158575b600080fd5b61010d610260565b60405161011a9190610b8e565b60405180910390f35b610136610131366004610bff565b6102f2565b604051901515815260200161011a565b6002545b60405190815260200161011a565b610136610166366004610c29565b610308565b6040516012815260200161011a565b610136610188366004610bff565b6103b7565b6101956103f3565b005b6101956101a5366004610bff565b6103fd565b60055460ff16610136565b61014a6101c3366004610c65565b6001600160a01b031660009081526020819052604090205490565b61019561040b565b61010d610413565b6101956101fc366004610bff565b610422565b61013661020f366004610bff565b61042c565b610136610222366004610bff565b6104c5565b61014a610235366004610c87565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461026f90610cba565b80601f016020809104026020016040519081016040528092919081815260200182805461029b90610cba565b80156102e85780601f106102bd576101008083540402835291602001916102e8565b820191906000526020600020905b8154815290600101906020018083116102cb57829003601f168201915b5050505050905090565b60006102ff3384846104d7565b50600192915050565b60006103158484846105fb565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561039f5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103ac85338584036104d7565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102ff9185906103ee908690610d0a565b6104d7565b6103fb6107d5565b565b6104078282610868565b5050565b6103fb610953565b60606004805461026f90610cba565b61040782826109ce565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104ae5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610396565b6104bb33858584036104d7565b5060019392505050565b60006102ff3384846105fb565b505050565b6001600160a01b0383166105395760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610396565b6001600160a01b03821661059a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610396565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831661065f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610396565b6001600160a01b0382166106c15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610396565b6106cc838383610b28565b6001600160a01b038316600090815260208190526040902054818110156107445760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610396565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061077b908490610d0a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107c791815260200190565b60405180910390a350505050565b60055460ff1661081e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610396565b6005805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0382166108be5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610396565b6108ca60008383610b28565b80600260008282546108dc9190610d0a565b90915550506001600160a01b03821660009081526020819052604081208054839290610909908490610d0a565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60055460ff16156109995760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610396565b6005805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861084b3390565b6001600160a01b038216610a2e5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610396565b610a3a82600083610b28565b6001600160a01b03821660009081526020819052604090205481811015610aae5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610396565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610add908490610d22565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60055460ff16156104d25760405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e736665722077686044820152691a5b19481c185d5cd95960b21b6064820152608401610396565b600060208083528351808285015260005b81811015610bbb57858101830151858201604001528201610b9f565b81811115610bcd576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610bfa57600080fd5b919050565b60008060408385031215610c1257600080fd5b610c1b83610be3565b946020939093013593505050565b600080600060608486031215610c3e57600080fd5b610c4784610be3565b9250610c5560208501610be3565b9150604084013590509250925092565b600060208284031215610c7757600080fd5b610c8082610be3565b9392505050565b60008060408385031215610c9a57600080fd5b610ca383610be3565b9150610cb160208401610be3565b90509250929050565b600181811c90821680610cce57607f821691505b602082108103610cee57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610d1d57610d1d610cf4565b500190565b600082821015610d3457610d34610cf4565b50039056fea2646970667358221220afd6f6f63fdb85e78cec4942972edb4d4326c5edea23274992f2fd82780d22f164736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}, {"name": "initialAccount", "type": "address", "internalType": "address"}, {"name": "initialBalance", "type": "uint256", "internalType": "uint256"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Paused", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Unpaused", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "pause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "paused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "unpause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "paused()": {"details": "Returns true if the contract is paused, and false otherwise."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20PermitMock": {"contractName": "ERC20PermitMock", "sourceId": "mocks/ERC20PermitMock.sol", "deploymentBytecode": {"bytecode": "0x6101606040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c961014090815250604051620014b7380380620014b78339810160408190526200004f91620003a0565b8380604051806040016040528060018152602001603160f81b81525086868160039080519060200190620000859291906200022d565b5080516200009b9060049060208401906200022d565b5050825160209384012082519284019290922060e08390526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818901819052818301979097526060810194909452608080850193909352308483018190528151808603909301835260c09485019091528151919096012090529290925261012052506200013b9050828262000145565b5050505062000496565b6001600160a01b038216620001a05760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620001b4919062000433565b90915550506001600160a01b03821660009081526020819052604081208054839290620001e390849062000433565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b8280546200023b906200045a565b90600052602060002090601f0160209004810192826200025f5760008555620002aa565b82601f106200027a57805160ff1916838001178555620002aa565b82800160010185558215620002aa579182015b82811115620002aa5782518255916020019190600101906200028d565b50620002b8929150620002bc565b5090565b5b80821115620002b85760008155600101620002bd565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620002fb57600080fd5b81516001600160401b0380821115620003185762000318620002d3565b604051601f8301601f19908116603f01168101908282118183101715620003435762000343620002d3565b816040528381526020925086838588010111156200036057600080fd5b600091505b8382101562000384578582018301518183018401529082019062000365565b83821115620003965760008385830101525b9695505050505050565b60008060008060808587031215620003b757600080fd5b84516001600160401b0380821115620003cf57600080fd5b620003dd88838901620002e9565b95506020870151915080821115620003f457600080fd5b506200040387828801620002e9565b604087015190945090506001600160a01b03811681146200042357600080fd5b6060959095015193969295505050565b600082198211156200045557634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806200046f57607f821691505b6020821081036200049057634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051610100516101205161014051610fc6620004f16000396000610513015260006109a0015260006109ef015260006109ca015260006109230152600061094d015260006109770152610fc66000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80633950935111610097578063a457c2d711610066578063a457c2d7146101d4578063a9059cbb146101e7578063d505accf146101fa578063dd62ed3e1461020f57600080fd5b8063395093511461017d57806370a08231146101905780637ecebe00146101b957806395d89b41146101cc57600080fd5b806323b872dd116100d357806323b872dd1461014d578063313ce567146101605780633408e4701461016f5780633644e5151461017557600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013b575b600080fd5b610102610248565b60405161010f9190610d81565b60405180910390f35b61012b610126366004610df2565b6102da565b604051901515815260200161010f565b6002545b60405190815260200161010f565b61012b61015b366004610e1c565b6102f0565b6040516012815260200161010f565b4661013f565b61013f61039f565b61012b61018b366004610df2565b6103ae565b61013f61019e366004610e58565b6001600160a01b031660009081526020819052604090205490565b61013f6101c7366004610e58565b6103ea565b61010261040a565b61012b6101e2366004610df2565b610419565b61012b6101f5366004610df2565b6104b2565b61020d610208366004610e7a565b6104bf565b005b61013f61021d366004610eed565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461025790610f20565b80601f016020809104026020016040519081016040528092919081815260200182805461028390610f20565b80156102d05780601f106102a5576101008083540402835291602001916102d0565b820191906000526020600020905b8154815290600101906020018083116102b357829003601f168201915b5050505050905090565b60006102e7338484610623565b50600192915050565b60006102fd848484610747565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103875760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103948533858403610623565b506001949350505050565b60006103a9610916565b905090565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102e79185906103e5908690610f54565b610623565b6001600160a01b0381166000908152600560205260408120545b92915050565b60606004805461025790610f20565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561049b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161037e565b6104a83385858403610623565b5060019392505050565b60006102e7338484610747565b8342111561050f5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015260640161037e565b60007f000000000000000000000000000000000000000000000000000000000000000088888861053e8c610a3d565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061059982610a65565b905060006105a982878787610ab3565b9050896001600160a01b0316816001600160a01b03161461060c5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015260640161037e565b6106178a8a8a610623565b50505050505050505050565b6001600160a01b0383166106855760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161037e565b6001600160a01b0382166106e65760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161037e565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166107ab5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161037e565b6001600160a01b03821661080d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161037e565b6001600160a01b038316600090815260208190526040902054818110156108855760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161037e565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906108bc908490610f54565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161090891815260200190565b60405180910390a350505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561096f57507f000000000000000000000000000000000000000000000000000000000000000046145b1561099957507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b6000610404610a72610916565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000610ac487878787610adb565b91509150610ad181610bc8565b5095945050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610b125750600090506003610bbf565b8460ff16601b14158015610b2a57508460ff16601c14155b15610b3b5750600090506004610bbf565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610b8f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610bb857600060019250925050610bbf565b9150600090505b94509492505050565b6000816004811115610bdc57610bdc610f7a565b03610be45750565b6001816004811115610bf857610bf8610f7a565b03610c455760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161037e565b6002816004811115610c5957610c59610f7a565b03610ca65760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161037e565b6003816004811115610cba57610cba610f7a565b03610d125760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161037e565b6004816004811115610d2657610d26610f7a565b03610d7e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161037e565b50565b600060208083528351808285015260005b81811015610dae57858101830151858201604001528201610d92565b81811115610dc0576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610ded57600080fd5b919050565b60008060408385031215610e0557600080fd5b610e0e83610dd6565b946020939093013593505050565b600080600060608486031215610e3157600080fd5b610e3a84610dd6565b9250610e4860208501610dd6565b9150604084013590509250925092565b600060208284031215610e6a57600080fd5b610e7382610dd6565b9392505050565b600080600080600080600060e0888a031215610e9557600080fd5b610e9e88610dd6565b9650610eac60208901610dd6565b95506040880135945060608801359350608088013560ff81168114610ed057600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610f0057600080fd5b610f0983610dd6565b9150610f1760208401610dd6565b90509250929050565b600181811c90821680610f3457607f821691505b602082108103610a5f57634e487b7160e01b600052602260045260246000fd5b60008219821115610f7557634e487b7160e01b600052601160045260246000fd5b500190565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220007bf4e7329ca44c14aa2b822fbb96f4354378e5c903e38f7b91bcec643a164a64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80633950935111610097578063a457c2d711610066578063a457c2d7146101d4578063a9059cbb146101e7578063d505accf146101fa578063dd62ed3e1461020f57600080fd5b8063395093511461017d57806370a08231146101905780637ecebe00146101b957806395d89b41146101cc57600080fd5b806323b872dd116100d357806323b872dd1461014d578063313ce567146101605780633408e4701461016f5780633644e5151461017557600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013b575b600080fd5b610102610248565b60405161010f9190610d81565b60405180910390f35b61012b610126366004610df2565b6102da565b604051901515815260200161010f565b6002545b60405190815260200161010f565b61012b61015b366004610e1c565b6102f0565b6040516012815260200161010f565b4661013f565b61013f61039f565b61012b61018b366004610df2565b6103ae565b61013f61019e366004610e58565b6001600160a01b031660009081526020819052604090205490565b61013f6101c7366004610e58565b6103ea565b61010261040a565b61012b6101e2366004610df2565b610419565b61012b6101f5366004610df2565b6104b2565b61020d610208366004610e7a565b6104bf565b005b61013f61021d366004610eed565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461025790610f20565b80601f016020809104026020016040519081016040528092919081815260200182805461028390610f20565b80156102d05780601f106102a5576101008083540402835291602001916102d0565b820191906000526020600020905b8154815290600101906020018083116102b357829003601f168201915b5050505050905090565b60006102e7338484610623565b50600192915050565b60006102fd848484610747565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103875760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103948533858403610623565b506001949350505050565b60006103a9610916565b905090565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102e79185906103e5908690610f54565b610623565b6001600160a01b0381166000908152600560205260408120545b92915050565b60606004805461025790610f20565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561049b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161037e565b6104a83385858403610623565b5060019392505050565b60006102e7338484610747565b8342111561050f5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015260640161037e565b60007f000000000000000000000000000000000000000000000000000000000000000088888861053e8c610a3d565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061059982610a65565b905060006105a982878787610ab3565b9050896001600160a01b0316816001600160a01b03161461060c5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015260640161037e565b6106178a8a8a610623565b50505050505050505050565b6001600160a01b0383166106855760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161037e565b6001600160a01b0382166106e65760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161037e565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166107ab5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161037e565b6001600160a01b03821661080d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161037e565b6001600160a01b038316600090815260208190526040902054818110156108855760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161037e565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906108bc908490610f54565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161090891815260200190565b60405180910390a350505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561096f57507f000000000000000000000000000000000000000000000000000000000000000046145b1561099957507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b6000610404610a72610916565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000610ac487878787610adb565b91509150610ad181610bc8565b5095945050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610b125750600090506003610bbf565b8460ff16601b14158015610b2a57508460ff16601c14155b15610b3b5750600090506004610bbf565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610b8f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610bb857600060019250925050610bbf565b9150600090505b94509492505050565b6000816004811115610bdc57610bdc610f7a565b03610be45750565b6001816004811115610bf857610bf8610f7a565b03610c455760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161037e565b6002816004811115610c5957610c59610f7a565b03610ca65760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161037e565b6003816004811115610cba57610cba610f7a565b03610d125760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161037e565b6004816004811115610d2657610d26610f7a565b03610d7e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161037e565b50565b600060208083528351808285015260005b81811015610dae57858101830151858201604001528201610d92565b81811115610dc0576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610ded57600080fd5b919050565b60008060408385031215610e0557600080fd5b610e0e83610dd6565b946020939093013593505050565b600080600060608486031215610e3157600080fd5b610e3a84610dd6565b9250610e4860208501610dd6565b9150604084013590509250925092565b600060208284031215610e6a57600080fd5b610e7382610dd6565b9392505050565b600080600080600080600060e0888a031215610e9557600080fd5b610e9e88610dd6565b9650610eac60208901610dd6565b95506040880135945060608801359350608088013560ff81168114610ed057600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610f0057600080fd5b610f0983610dd6565b9150610f1760208401610dd6565b90509250929050565b600181811c90821680610f3457607f821691505b602082108103610a5f57634e487b7160e01b600052602260045260246000fd5b60008219821115610f7557634e487b7160e01b600052601160045260246000fd5b500190565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220007bf4e7329ca44c14aa2b822fbb96f4354378e5c903e38f7b91bcec643a164a64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "payable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}, {"name": "initialAccount", "type": "address", "internalType": "address"}, {"name": "initialBalance", "type": "uint256", "internalType": "uint256"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "DOMAIN_SEPARATOR", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "getChainId", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "nonces", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "permit", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "deadline", "type": "uint256", "internalType": "uint256"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"DOMAIN_SEPARATOR()": {"details": "See {IERC20Permit-DOMAIN_SEPARATOR}."}, "allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "nonces(address)": {"details": "See {IERC20Permit-nonces}."}, "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {"details": "See {IERC20Permit-permit}."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20SnapshotMock": {"contractName": "ERC20SnapshotMock", "sourceId": "mocks/ERC20SnapshotMock.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806370a08231116100975780639dc29fac116100665780639dc29fac14610201578063a457c2d714610214578063a9059cbb14610227578063dd62ed3e1461023a57600080fd5b806370a08231146101b557806395d89b41146101de5780639711715a146101e6578063981b24d0146101ee57600080fd5b8063313ce567116100d3578063313ce5671461016b578063395093511461017a57806340c10f191461018d5780634ee2cd7e146101a257600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806323b872dd14610158575b600080fd5b61010d610273565b60405161011a9190610e14565b60405180910390f35b610136610131366004610e80565b610305565b604051901515815260200161011a565b6002545b60405190815260200161011a565b610136610166366004610eaa565b61031c565b6040516012815260200161011a565b610136610188366004610e80565b6103cb565b6101a061019b366004610e80565b610407565b005b61014a6101b0366004610e80565b610415565b61014a6101c3366004610ee6565b6001600160a01b031660009081526020819052604090205490565b61010d61046e565b6101a061047d565b61014a6101fc366004610f01565b610488565b6101a061020f366004610e80565b6104b3565b610136610222366004610e80565b6104bd565b610136610235366004610e80565b610556565b61014a610248366004610f1a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461028290610f4d565b80601f01602080910402602001604051908101604052809291908181526020018280546102ae90610f4d565b80156102fb5780601f106102d0576101008083540402835291602001916102fb565b820191906000526020600020905b8154815290600101906020018083116102de57829003601f168201915b5050505050905090565b600061031233848461056c565b5060015b92915050565b6000610329848484610690565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103b35760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103c0853385840361056c565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610312918590610402908690610f9d565b61056c565b610411828261086a565b5050565b6001600160a01b03821660009081526005602052604081208190819061043c908590610955565b9150915081610463576001600160a01b038516600090815260208190526040902054610465565b805b95945050505050565b60606004805461028290610f4d565b610485610a4b565b50565b6000806000610498846006610955565b91509150816104a9576002546104ab565b805b949350505050565b6104118282610aa5565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561053f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103aa565b61054c338585840361056c565b5060019392505050565b6000610312338484610690565b505050565b5490565b6001600160a01b0383166105ce5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103aa565b6001600160a01b03821661062f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103aa565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166106f45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103aa565b6001600160a01b0382166107565760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103aa565b610761838383610bff565b6001600160a01b038316600090815260208190526040902054818110156107d95760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103aa565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610810908490610f9d565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161085c91815260200190565b60405180910390a350505050565b6001600160a01b0382166108c05760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103aa565b6108cc60008383610bff565b80600260008282546108de9190610f9d565b90915550506001600160a01b0382166000908152602081905260408120805483929061090b908490610f9d565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600080600084116109a15760405162461bcd60e51b815260206004820152601660248201527504552433230536e617073686f743a20696420697320360541b60448201526064016103aa565b6109a9610c47565b8411156109f85760405162461bcd60e51b815260206004820152601d60248201527f4552433230536e617073686f743a206e6f6e6578697374656e7420696400000060448201526064016103aa565b6000610a048486610c57565b84549091508103610a1c576000809250925050610a44565b6001846001018281548110610a3357610a33610fb5565b906000526020600020015492509250505b9250929050565b6000610a5b600880546001019055565b6000610a65610c47565b90507f8030e83b04d87bef53480e26263266d6ca66863aa8506aca6f2559d18aa1cb6781604051610a9891815260200190565b60405180910390a1919050565b6001600160a01b038216610b055760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103aa565b610b1182600083610bff565b6001600160a01b03821660009081526020819052604090205481811015610b855760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103aa565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610bb4908490610fcb565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6001600160a01b038316610c1e57610c1682610d1c565b610563610d4e565b6001600160a01b038216610c3557610c1683610d1c565b610c3e83610d1c565b61056382610d1c565b6000610c5260085490565b905090565b81546000908103610c6a57506000610316565b82546000905b80821015610cc6576000610c848383610d5e565b905084868281548110610c9957610c99610fb5565b90600052602060002001541115610cb257809150610cc0565b610cbd816001610f9d565b92505b50610c70565b600082118015610cfb57508385610cde600185610fcb565b81548110610cee57610cee610fb5565b9060005260206000200154145b15610d1457610d0b600183610fcb565b92505050610316565b509050610316565b6001600160a01b038116600090815260056020908152604080832091839052909120546104859190610d80565b610d80565b610d5c6006610d4960025490565b565b6000610d6d6002848418610fe2565b610d7990848416610f9d565b9392505050565b6000610d8a610c47565b905080610d9684610dca565b1015610563578254600180820185556000858152602080822090930193909355938401805494850181558252902090910155565b80546000908103610ddd57506000919050565b81548290610ded90600190610fcb565b81548110610dfd57610dfd610fb5565b90600052602060002001549050919050565b919050565b600060208083528351808285015260005b81811015610e4157858101830151858201604001528201610e25565b81811115610e53576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610e0f57600080fd5b60008060408385031215610e9357600080fd5b610e9c83610e69565b946020939093013593505050565b600080600060608486031215610ebf57600080fd5b610ec884610e69565b9250610ed660208501610e69565b9150604084013590509250925092565b600060208284031215610ef857600080fd5b610d7982610e69565b600060208284031215610f1357600080fd5b5035919050565b60008060408385031215610f2d57600080fd5b610f3683610e69565b9150610f4460208401610e69565b90509250929050565b600181811c90821680610f6157607f821691505b602082108103610f8157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610fb057610fb0610f87565b500190565b634e487b7160e01b600052603260045260246000fd5b600082821015610fdd57610fdd610f87565b500390565b600082610fff57634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212200e22734691813c3e5e797086f7b60403171e2c321e1835782fca60efa4093db364736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}, {"name": "initialAccount", "type": "address", "internalType": "address"}, {"name": "initialBalance", "type": "uint256", "internalType": "uint256"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Snapshot", "inputs": [{"name": "id", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfAt", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "snapshotId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "snapshot", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "totalSupplyAt", "stateMutability": "view", "inputs": [{"name": "snapshotId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "balanceOfAt(address,uint256)": {"details": "Retrieves the balance of `account` at the time `snapshotId` was created."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "totalSupplyAt(uint256)": {"details": "Retrieves the total supply at the time `snapshotId` was created."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20VotesCompMock": {"contractName": "ERC20VotesCompMock", "sourceId": "mocks/ERC20VotesCompMock.sol", "deploymentBytecode": {"bytecode": "0x6101606040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610140523480156200003757600080fd5b50604051620022a1380380620022a18339810160408190526200005a91620002b7565b8180604051806040016040528060018152602001603160f81b815250848481600390805190602001906200009092919062000144565b508051620000a690600490602084019062000144565b5050825160208085019190912083518483012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c0019052805194019390932091935091906080523060c05261012052506200035d95505050505050565b828054620001529062000321565b90600052602060002090601f016020900481019282620001765760008555620001c1565b82601f106200019157805160ff1916838001178555620001c1565b82800160010185558215620001c1579182015b82811115620001c1578251825591602001919060010190620001a4565b50620001cf929150620001d3565b5090565b5b80821115620001cf5760008155600101620001d4565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200021257600080fd5b81516001600160401b03808211156200022f576200022f620001ea565b604051601f8301601f19908116603f011681019082821181831017156200025a576200025a620001ea565b816040528381526020925086838588010111156200027757600080fd5b600091505b838210156200029b57858201830151818301840152908201906200027c565b83821115620002ad5760008385830101525b9695505050505050565b60008060408385031215620002cb57600080fd5b82516001600160401b0380821115620002e357600080fd5b620002f18683870162000200565b935060208501519150808211156200030857600080fd5b50620003178582860162000200565b9150509250929050565b600181811c908216806200033657607f821691505b6020821081036200035757634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051610100516101205161014051611ee9620003b86000396000610a3301526000610f4f01526000610f9e01526000610f7901526000610ed201526000610efc01526000610f260152611ee96000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806370a08231116100f9578063a457c2d711610097578063c3cda52011610071578063c3cda520146103cc578063d505accf146103df578063dd62ed3e146103f2578063f1127ed81461042b57600080fd5b8063a457c2d714610393578063a9059cbb146103a6578063b4b5ea57146103b957600080fd5b80638e539e8c116100d35780638e539e8c1461035257806395d89b41146103655780639ab24eb01461036d5780639dc29fac1461038057600080fd5b806370a08231146102eb578063782d6fe1146103145780637ecebe001461033f57600080fd5b80633644e5151161016657806340c10f191161014057806340c10f1914610257578063587cde1e1461026c5780635c19a95c146102b05780636fcfff45146102c357600080fd5b80633644e5151461022957806339509351146102315780633a46b1a81461024457600080fd5b806306fdde03146101ae578063095ea7b3146101cc57806318160ddd146101ef57806323b872dd14610201578063313ce567146102145780633408e47014610223575b600080fd5b6101b6610468565b6040516101c39190611b9b565b60405180910390f35b6101df6101da366004611c0c565b6104fa565b60405190151581526020016101c3565b6002545b6040519081526020016101c3565b6101df61020f366004611c36565b610510565b604051601281526020016101c3565b466101f3565b6101f36105bf565b6101df61023f366004611c0c565b6105ce565b6101f3610252366004611c0c565b61060a565b61026a610265366004611c0c565b610684565b005b61029861027a366004611c72565b6001600160a01b039081166000908152600660205260409020541690565b6040516001600160a01b0390911681526020016101c3565b61026a6102be366004611c72565b610692565b6102d66102d1366004611c72565b61069f565b60405163ffffffff90911681526020016101c3565b6101f36102f9366004611c72565b6001600160a01b031660009081526020819052604090205490565b610327610322366004611c0c565b6106c7565b6040516001600160601b0390911681526020016101c3565b6101f361034d366004611c72565b6106db565b6101f3610360366004611c8d565b6106f9565b6101b6610755565b6101f361037b366004611c72565b610764565b61026a61038e366004611c0c565b6107eb565b6101df6103a1366004611c0c565b6107f5565b6101df6103b4366004611c0c565b61088e565b6103276103c7366004611c72565b61089b565b61026a6103da366004611cb7565b6108a9565b61026a6103ed366004611d0f565b6109df565b6101f3610400366004611d79565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61043e610439366004611dac565b610b43565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016101c3565b60606003805461047790611dec565b80601f01602080910402602001604051908101604052809291908181526020018280546104a390611dec565b80156104f05780601f106104c5576101008083540402835291602001916104f0565b820191906000526020600020905b8154815290600101906020018083116104d357829003601f168201915b5050505050905090565b6000610507338484610bc7565b50600192915050565b600061051d848484610ceb565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156105a75760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6105b48533858403610bc7565b506001949350505050565b60006105c9610ec5565b905090565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610507918590610605908690611e36565b610bc7565b600043821061065b5760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604482015260640161059e565b6001600160a01b038316600090815260076020526040902061067d9083610fec565b9392505050565b61068e82826110a9565b5050565b61069c3382611133565b50565b6001600160a01b0381166000908152600760205260408120546106c1906111ac565b92915050565b600061067d6106d6848461060a565b611215565b6001600160a01b0381166000908152600560205260408120546106c1565b600043821061074a5760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604482015260640161059e565b6106c1600883610fec565b60606004805461047790611dec565b6001600160a01b03811660009081526007602052604081205480156107d8576001600160a01b03831660009081526007602052604090206107a6600183611e4e565b815481106107b6576107b6611e65565b60009182526020909120015464010000000090046001600160e01b03166107db565b60005b6001600160e01b03169392505050565b61068e828261127d565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156108775760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161059e565b6108843385858403610bc7565b5060019392505050565b6000610507338484610ceb565b60006106c16106d683610764565b834211156108f95760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e61747572652065787069726564000000604482015260640161059e565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b0388169181019190915260608101869052608081018590526000906109739061096b9060a00160405160208183030381529060405280519060200120611295565b8585856112e3565b905061097e8161130b565b86146109cc5760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e636500000000000000604482015260640161059e565b6109d68188611133565b50505050505050565b83421115610a2f5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015260640161059e565b60007f0000000000000000000000000000000000000000000000000000000000000000888888610a5e8c61130b565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610ab982611295565b90506000610ac9828787876112e3565b9050896001600160a01b0316816001600160a01b031614610b2c5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015260640161059e565b610b378a8a8a610bc7565b50505050505050505050565b60408051808201909152600080825260208201526001600160a01b0383166000908152600760205260409020805463ffffffff8416908110610b8757610b87611e65565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b6001600160a01b038316610c295760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161059e565b6001600160a01b038216610c8a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161059e565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610d4f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161059e565b6001600160a01b038216610db15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161059e565b6001600160a01b03831660009081526020819052604090205481811015610e295760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161059e565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610e60908490611e36565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610eac91815260200190565b60405180910390a3610ebf848484611338565b50505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610f1e57507f000000000000000000000000000000000000000000000000000000000000000046145b15610f4857507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b8154600090815b81811015611050576000611007828461136a565b90508486828154811061101c5761101c611e65565b60009182526020909120015463ffffffff16111561103c5780925061104a565b611047816001611e36565b91505b50610ff3565b81156110945784611062600184611e4e565b8154811061107257611072611e65565b60009182526020909120015464010000000090046001600160e01b0316611097565b60005b6001600160e01b031695945050505050565b6110b38282611385565b6002546001600160601b0310156111255760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b606482015260840161059e565b610ebf600861146c83611478565b6001600160a01b038281166000818152600660208181526040808420805485845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610ebf8284836115f1565b600063ffffffff8211156112115760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840161059e565b5090565b60006001600160601b038211156112115760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203960448201526536206269747360d01b606482015260840161059e565b611287828261172e565b610ebf600861188383611478565b60006106c16112a2610ec5565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006112f48787878761188f565b915091506113018161197c565b5095945050505050565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b505050565b6001600160a01b03838116600090815260066020526040808220548584168352912054611333929182169116836115f1565b60006113796002848418611e7b565b61067d90848416611e36565b6001600160a01b0382166113db5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161059e565b80600260008282546113ed9190611e36565b90915550506001600160a01b0382166000908152602081905260408120805483929061141a908490611e36565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a361068e60008383611338565b600061067d8284611e36565b8254600090819080156114c35785611491600183611e4e565b815481106114a1576114a1611e65565b60009182526020909120015464010000000090046001600160e01b03166114c6565b60005b6001600160e01b031692506114df83858763ffffffff16565b915060008111801561151d575043866114f9600184611e4e565b8154811061150957611509611e65565b60009182526020909120015463ffffffff16145b1561157d5761152b82611b32565b86611537600184611e4e565b8154811061154757611547611e65565b9060005260206000200160000160046101000a8154816001600160e01b0302191690836001600160e01b031602179055506115e8565b856040518060400160405280611592436111ac565b63ffffffff1681526020016115a685611b32565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b50935093915050565b816001600160a01b0316836001600160a01b0316141580156116135750600081115b15611333576001600160a01b038316156116a1576001600160a01b0383166000908152600760205260408120819061164e9061188385611478565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611696929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615611333576001600160a01b038216600090815260076020526040812081906116d79061146c85611478565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724838360405161171f929190918252602082015260400190565b60405180910390a25050505050565b6001600160a01b03821661178e5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161059e565b6001600160a01b038216600090815260208190526040902054818110156118025760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161059e565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611831908490611e4e565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a361133383600084611338565b600061067d8284611e4e565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156118c65750600090506003611973565b8460ff16601b141580156118de57508460ff16601c14155b156118ef5750600090506004611973565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611943573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661196c57600060019250925050611973565b9150600090505b94509492505050565b600081600481111561199057611990611e9d565b036119985750565b60018160048111156119ac576119ac611e9d565b036119f95760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161059e565b6002816004811115611a0d57611a0d611e9d565b03611a5a5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161059e565b6003816004811115611a6e57611a6e611e9d565b03611ac65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161059e565b6004816004811115611ada57611ada611e9d565b0361069c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161059e565b60006001600160e01b038211156112115760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b606482015260840161059e565b600060208083528351808285015260005b81811015611bc857858101830151858201604001528201611bac565b81811115611bda576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114611c0757600080fd5b919050565b60008060408385031215611c1f57600080fd5b611c2883611bf0565b946020939093013593505050565b600080600060608486031215611c4b57600080fd5b611c5484611bf0565b9250611c6260208501611bf0565b9150604084013590509250925092565b600060208284031215611c8457600080fd5b61067d82611bf0565b600060208284031215611c9f57600080fd5b5035919050565b803560ff81168114611c0757600080fd5b60008060008060008060c08789031215611cd057600080fd5b611cd987611bf0565b95506020870135945060408701359350611cf560608801611ca6565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a031215611d2a57600080fd5b611d3388611bf0565b9650611d4160208901611bf0565b95506040880135945060608801359350611d5d60808901611ca6565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215611d8c57600080fd5b611d9583611bf0565b9150611da360208401611bf0565b90509250929050565b60008060408385031215611dbf57600080fd5b611dc883611bf0565b9150602083013563ffffffff81168114611de157600080fd5b809150509250929050565b600181811c90821680611e0057607f821691505b60208210810361132d57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115611e4957611e49611e20565b500190565b600082821015611e6057611e60611e20565b500390565b634e487b7160e01b600052603260045260246000fd5b600082611e9857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fdfea26469706673582212202c623732d3283830c00eeefde63b0a35b5d8b41b98a4e64636c31e77ecbe962664736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c806370a08231116100f9578063a457c2d711610097578063c3cda52011610071578063c3cda520146103cc578063d505accf146103df578063dd62ed3e146103f2578063f1127ed81461042b57600080fd5b8063a457c2d714610393578063a9059cbb146103a6578063b4b5ea57146103b957600080fd5b80638e539e8c116100d35780638e539e8c1461035257806395d89b41146103655780639ab24eb01461036d5780639dc29fac1461038057600080fd5b806370a08231146102eb578063782d6fe1146103145780637ecebe001461033f57600080fd5b80633644e5151161016657806340c10f191161014057806340c10f1914610257578063587cde1e1461026c5780635c19a95c146102b05780636fcfff45146102c357600080fd5b80633644e5151461022957806339509351146102315780633a46b1a81461024457600080fd5b806306fdde03146101ae578063095ea7b3146101cc57806318160ddd146101ef57806323b872dd14610201578063313ce567146102145780633408e47014610223575b600080fd5b6101b6610468565b6040516101c39190611b9b565b60405180910390f35b6101df6101da366004611c0c565b6104fa565b60405190151581526020016101c3565b6002545b6040519081526020016101c3565b6101df61020f366004611c36565b610510565b604051601281526020016101c3565b466101f3565b6101f36105bf565b6101df61023f366004611c0c565b6105ce565b6101f3610252366004611c0c565b61060a565b61026a610265366004611c0c565b610684565b005b61029861027a366004611c72565b6001600160a01b039081166000908152600660205260409020541690565b6040516001600160a01b0390911681526020016101c3565b61026a6102be366004611c72565b610692565b6102d66102d1366004611c72565b61069f565b60405163ffffffff90911681526020016101c3565b6101f36102f9366004611c72565b6001600160a01b031660009081526020819052604090205490565b610327610322366004611c0c565b6106c7565b6040516001600160601b0390911681526020016101c3565b6101f361034d366004611c72565b6106db565b6101f3610360366004611c8d565b6106f9565b6101b6610755565b6101f361037b366004611c72565b610764565b61026a61038e366004611c0c565b6107eb565b6101df6103a1366004611c0c565b6107f5565b6101df6103b4366004611c0c565b61088e565b6103276103c7366004611c72565b61089b565b61026a6103da366004611cb7565b6108a9565b61026a6103ed366004611d0f565b6109df565b6101f3610400366004611d79565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61043e610439366004611dac565b610b43565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016101c3565b60606003805461047790611dec565b80601f01602080910402602001604051908101604052809291908181526020018280546104a390611dec565b80156104f05780601f106104c5576101008083540402835291602001916104f0565b820191906000526020600020905b8154815290600101906020018083116104d357829003601f168201915b5050505050905090565b6000610507338484610bc7565b50600192915050565b600061051d848484610ceb565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156105a75760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6105b48533858403610bc7565b506001949350505050565b60006105c9610ec5565b905090565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610507918590610605908690611e36565b610bc7565b600043821061065b5760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604482015260640161059e565b6001600160a01b038316600090815260076020526040902061067d9083610fec565b9392505050565b61068e82826110a9565b5050565b61069c3382611133565b50565b6001600160a01b0381166000908152600760205260408120546106c1906111ac565b92915050565b600061067d6106d6848461060a565b611215565b6001600160a01b0381166000908152600560205260408120546106c1565b600043821061074a5760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604482015260640161059e565b6106c1600883610fec565b60606004805461047790611dec565b6001600160a01b03811660009081526007602052604081205480156107d8576001600160a01b03831660009081526007602052604090206107a6600183611e4e565b815481106107b6576107b6611e65565b60009182526020909120015464010000000090046001600160e01b03166107db565b60005b6001600160e01b03169392505050565b61068e828261127d565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156108775760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161059e565b6108843385858403610bc7565b5060019392505050565b6000610507338484610ceb565b60006106c16106d683610764565b834211156108f95760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e61747572652065787069726564000000604482015260640161059e565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b0388169181019190915260608101869052608081018590526000906109739061096b9060a00160405160208183030381529060405280519060200120611295565b8585856112e3565b905061097e8161130b565b86146109cc5760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e636500000000000000604482015260640161059e565b6109d68188611133565b50505050505050565b83421115610a2f5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015260640161059e565b60007f0000000000000000000000000000000000000000000000000000000000000000888888610a5e8c61130b565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610ab982611295565b90506000610ac9828787876112e3565b9050896001600160a01b0316816001600160a01b031614610b2c5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015260640161059e565b610b378a8a8a610bc7565b50505050505050505050565b60408051808201909152600080825260208201526001600160a01b0383166000908152600760205260409020805463ffffffff8416908110610b8757610b87611e65565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b6001600160a01b038316610c295760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161059e565b6001600160a01b038216610c8a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161059e565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610d4f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161059e565b6001600160a01b038216610db15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161059e565b6001600160a01b03831660009081526020819052604090205481811015610e295760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161059e565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610e60908490611e36565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610eac91815260200190565b60405180910390a3610ebf848484611338565b50505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610f1e57507f000000000000000000000000000000000000000000000000000000000000000046145b15610f4857507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b8154600090815b81811015611050576000611007828461136a565b90508486828154811061101c5761101c611e65565b60009182526020909120015463ffffffff16111561103c5780925061104a565b611047816001611e36565b91505b50610ff3565b81156110945784611062600184611e4e565b8154811061107257611072611e65565b60009182526020909120015464010000000090046001600160e01b0316611097565b60005b6001600160e01b031695945050505050565b6110b38282611385565b6002546001600160601b0310156111255760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b606482015260840161059e565b610ebf600861146c83611478565b6001600160a01b038281166000818152600660208181526040808420805485845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610ebf8284836115f1565b600063ffffffff8211156112115760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840161059e565b5090565b60006001600160601b038211156112115760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203960448201526536206269747360d01b606482015260840161059e565b611287828261172e565b610ebf600861188383611478565b60006106c16112a2610ec5565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006112f48787878761188f565b915091506113018161197c565b5095945050505050565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b505050565b6001600160a01b03838116600090815260066020526040808220548584168352912054611333929182169116836115f1565b60006113796002848418611e7b565b61067d90848416611e36565b6001600160a01b0382166113db5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161059e565b80600260008282546113ed9190611e36565b90915550506001600160a01b0382166000908152602081905260408120805483929061141a908490611e36565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a361068e60008383611338565b600061067d8284611e36565b8254600090819080156114c35785611491600183611e4e565b815481106114a1576114a1611e65565b60009182526020909120015464010000000090046001600160e01b03166114c6565b60005b6001600160e01b031692506114df83858763ffffffff16565b915060008111801561151d575043866114f9600184611e4e565b8154811061150957611509611e65565b60009182526020909120015463ffffffff16145b1561157d5761152b82611b32565b86611537600184611e4e565b8154811061154757611547611e65565b9060005260206000200160000160046101000a8154816001600160e01b0302191690836001600160e01b031602179055506115e8565b856040518060400160405280611592436111ac565b63ffffffff1681526020016115a685611b32565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b50935093915050565b816001600160a01b0316836001600160a01b0316141580156116135750600081115b15611333576001600160a01b038316156116a1576001600160a01b0383166000908152600760205260408120819061164e9061188385611478565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611696929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615611333576001600160a01b038216600090815260076020526040812081906116d79061146c85611478565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724838360405161171f929190918252602082015260400190565b60405180910390a25050505050565b6001600160a01b03821661178e5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161059e565b6001600160a01b038216600090815260208190526040902054818110156118025760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161059e565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611831908490611e4e565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a361133383600084611338565b600061067d8284611e4e565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156118c65750600090506003611973565b8460ff16601b141580156118de57508460ff16601c14155b156118ef5750600090506004611973565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611943573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661196c57600060019250925050611973565b9150600090505b94509492505050565b600081600481111561199057611990611e9d565b036119985750565b60018160048111156119ac576119ac611e9d565b036119f95760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161059e565b6002816004811115611a0d57611a0d611e9d565b03611a5a5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161059e565b6003816004811115611a6e57611a6e611e9d565b03611ac65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161059e565b6004816004811115611ada57611ada611e9d565b0361069c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161059e565b60006001600160e01b038211156112115760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b606482015260840161059e565b600060208083528351808285015260005b81811015611bc857858101830151858201604001528201611bac565b81811115611bda576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114611c0757600080fd5b919050565b60008060408385031215611c1f57600080fd5b611c2883611bf0565b946020939093013593505050565b600080600060608486031215611c4b57600080fd5b611c5484611bf0565b9250611c6260208501611bf0565b9150604084013590509250925092565b600060208284031215611c8457600080fd5b61067d82611bf0565b600060208284031215611c9f57600080fd5b5035919050565b803560ff81168114611c0757600080fd5b60008060008060008060c08789031215611cd057600080fd5b611cd987611bf0565b95506020870135945060408701359350611cf560608801611ca6565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a031215611d2a57600080fd5b611d3388611bf0565b9650611d4160208901611bf0565b95506040880135945060608801359350611d5d60808901611ca6565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215611d8c57600080fd5b611d9583611bf0565b9150611da360208401611bf0565b90509250929050565b60008060408385031215611dbf57600080fd5b611dc883611bf0565b9150602083013563ffffffff81168114611de157600080fd5b809150509250929050565b600181811c90821680611e0057607f821691505b60208210810361132d57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115611e4957611e49611e20565b500190565b600082821015611e6057611e60611e20565b500390565b634e487b7160e01b600052603260045260246000fd5b600082611e9857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fdfea26469706673582212202c623732d3283830c00eeefde63b0a35b5d8b41b98a4e64636c31e77ecbe962664736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "DelegateChanged", "inputs": [{"name": "delegator", "type": "address", "internalType": "address", "indexed": true}, {"name": "fromDelegate", "type": "address", "internalType": "address", "indexed": true}, {"name": "toDelegate", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "DelegateVotesChanged", "inputs": [{"name": "delegate", "type": "address", "internalType": "address", "indexed": true}, {"name": "previousBalance", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newBalance", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "DOMAIN_SEPARATOR", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "checkpoints", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "pos", "type": "uint32", "internalType": "uint32"}], "outputs": [{"name": "", "type": "tuple", "components": [{"name": "fromBlock", "type": "uint32", "internalType": "uint32"}, {"name": "votes", "type": "uint224", "internalType": "uint224"}], "internalType": "struct ERC20Votes.Checkpoint"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "delegate", "stateMutability": "nonpayable", "inputs": [{"name": "delegatee", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "delegateBySig", "stateMutability": "nonpayable", "inputs": [{"name": "delegatee", "type": "address", "internalType": "address"}, {"name": "nonce", "type": "uint256", "internalType": "uint256"}, {"name": "expiry", "type": "uint256", "internalType": "uint256"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "delegates", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getChainId", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getCurrentVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint96", "internalType": "uint96"}]}, {"type": "function", "name": "getPastTotalSupply", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getPastVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getPriorVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint96", "internalType": "uint96"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "nonces", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "numCheckpoints", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint32", "internalType": "uint32"}]}, {"type": "function", "name": "permit", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "deadline", "type": "uint256", "internalType": "uint256"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"DOMAIN_SEPARATOR()": {"details": "See {IERC20Permit-DOMAIN_SEPARATOR}."}, "allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "checkpoints(address,uint32)": {"details": "Get the `pos`-th checkpoint for `account`."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "delegate(address)": {"details": "Delegate votes from the sender to `delegatee`."}, "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {"details": "Delegates votes from signer to `delegatee`"}, "delegates(address)": {"details": "Get the address `account` is currently delegating to."}, "getCurrentVotes(address)": {"details": "Comp version of the {getVotes} accessor, with `uint96` return type."}, "getPastTotalSupply(uint256)": {"details": "Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances. It is but NOT the sum of all the delegated votes! Requirements: - `blockNumber` must have been already mined"}, "getPastVotes(address,uint256)": {"details": "Retrieve the number of votes for `account` at the end of `blockNumber`. Requirements: - `blockNumber` must have been already mined"}, "getPriorVotes(address,uint256)": {"details": "Comp version of the {getPastVotes} accessor, with `uint96` return type."}, "getVotes(address)": {"details": "Gets the current votes balance for `account`"}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "nonces(address)": {"details": "See {IERC20Permit-nonces}."}, "numCheckpoints(address)": {"details": "Get number of checkpoints for `account`."}, "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {"details": "See {IERC20Permit-permit}."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20VotesMock": {"contractName": "ERC20VotesMock", "sourceId": "mocks/ERC20VotesMock.sol", "deploymentBytecode": {"bytecode": "0x6101606040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610140523480156200003757600080fd5b50604051620021a3380380620021a38339810160408190526200005a91620002b7565b8180604051806040016040528060018152602001603160f81b815250848481600390805190602001906200009092919062000144565b508051620000a690600490602084019062000144565b5050825160208085019190912083518483012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c0019052805194019390932091935091906080523060c05261012052506200035d95505050505050565b828054620001529062000321565b90600052602060002090601f016020900481019282620001765760008555620001c1565b82601f106200019157805160ff1916838001178555620001c1565b82800160010185558215620001c1579182015b82811115620001c1578251825591602001919060010190620001a4565b50620001cf929150620001d3565b5090565b5b80821115620001cf5760008155600101620001d4565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200021257600080fd5b81516001600160401b03808211156200022f576200022f620001ea565b604051601f8301601f19908116603f011681019082821181831017156200025a576200025a620001ea565b816040528381526020925086838588010111156200027757600080fd5b600091505b838210156200029b57858201830151818301840152908201906200027c565b83821115620002ad5760008385830101525b9695505050505050565b60008060408385031215620002cb57600080fd5b82516001600160401b0380821115620002e357600080fd5b620002f18683870162000200565b935060208501519150808211156200030857600080fd5b50620003178582860162000200565b9150509250929050565b600181811c908216806200033657607f821691505b6020821081036200035757634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051610100516101205161014051611deb620003b8600039600061099d01526000610eb901526000610f0801526000610ee301526000610e3c01526000610e6601526000610e900152611deb6000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80636fcfff45116100de5780639dc29fac11610097578063c3cda52011610071578063c3cda52014610358578063d505accf1461036b578063dd62ed3e1461037e578063f1127ed8146103b757600080fd5b80639dc29fac1461031f578063a457c2d714610332578063a9059cbb1461034557600080fd5b80636fcfff451461028d57806370a08231146102b55780637ecebe00146102de5780638e539e8c146102f157806395d89b41146103045780639ab24eb01461030c57600080fd5b80633644e515116101305780633644e515146101f357806339509351146101fb5780633a46b1a81461020e57806340c10f1914610221578063587cde1e146102365780635c19a95c1461027a57600080fd5b806306fdde0314610178578063095ea7b31461019657806318160ddd146101b957806323b872dd146101cb578063313ce567146101de5780633408e470146101ed575b600080fd5b6101806103f4565b60405161018d9190611a9d565b60405180910390f35b6101a96101a4366004611b0e565b610486565b604051901515815260200161018d565b6002545b60405190815260200161018d565b6101a96101d9366004611b38565b61049c565b6040516012815260200161018d565b466101bd565b6101bd61054b565b6101a9610209366004611b0e565b61055a565b6101bd61021c366004611b0e565b610596565b61023461022f366004611b0e565b610610565b005b610262610244366004611b74565b6001600160a01b039081166000908152600660205260409020541690565b6040516001600160a01b03909116815260200161018d565b610234610288366004611b74565b61061e565b6102a061029b366004611b74565b61062b565b60405163ffffffff909116815260200161018d565b6101bd6102c3366004611b74565b6001600160a01b031660009081526020819052604090205490565b6101bd6102ec366004611b74565b610653565b6101bd6102ff366004611b8f565b610671565b6101806106cd565b6101bd61031a366004611b74565b6106dc565b61023461032d366004611b0e565b610763565b6101a9610340366004611b0e565b61076d565b6101a9610353366004611b0e565b610806565b610234610366366004611bb9565b610813565b610234610379366004611c11565b610949565b6101bd61038c366004611c7b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6103ca6103c5366004611cae565b610aad565b60408051825163ffffffff1681526020928301516001600160e01b0316928101929092520161018d565b60606003805461040390611cee565b80601f016020809104026020016040519081016040528092919081815260200182805461042f90611cee565b801561047c5780601f106104515761010080835404028352916020019161047c565b820191906000526020600020905b81548152906001019060200180831161045f57829003601f168201915b5050505050905090565b6000610493338484610b31565b50600192915050565b60006104a9848484610c55565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156105335760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6105408533858403610b31565b506001949350505050565b6000610555610e2f565b905090565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610493918590610591908690611d38565b610b31565b60004382106105e75760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604482015260640161052a565b6001600160a01b03831660009081526007602052604090206106099083610f56565b9392505050565b61061a8282611013565b5050565b610628338261109d565b50565b6001600160a01b03811660009081526007602052604081205461064d90611116565b92915050565b6001600160a01b03811660009081526005602052604081205461064d565b60004382106106c25760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604482015260640161052a565b61064d600883610f56565b60606004805461040390611cee565b6001600160a01b0381166000908152600760205260408120548015610750576001600160a01b038316600090815260076020526040902061071e600183611d50565b8154811061072e5761072e611d67565b60009182526020909120015464010000000090046001600160e01b0316610753565b60005b6001600160e01b03169392505050565b61061a828261117f565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156107ef5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161052a565b6107fc3385858403610b31565b5060019392505050565b6000610493338484610c55565b834211156108635760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e61747572652065787069726564000000604482015260640161052a565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b0388169181019190915260608101869052608081018590526000906108dd906108d59060a00160405160208183030381529060405280519060200120611197565b8585856111e5565b90506108e88161120d565b86146109365760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e636500000000000000604482015260640161052a565b610940818861109d565b50505050505050565b834211156109995760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015260640161052a565b60007f00000000000000000000000000000000000000000000000000000000000000008888886109c88c61120d565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610a2382611197565b90506000610a33828787876111e5565b9050896001600160a01b0316816001600160a01b031614610a965760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015260640161052a565b610aa18a8a8a610b31565b50505050505050505050565b60408051808201909152600080825260208201526001600160a01b0383166000908152600760205260409020805463ffffffff8416908110610af157610af1611d67565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b6001600160a01b038316610b935760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161052a565b6001600160a01b038216610bf45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161052a565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610cb95760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161052a565b6001600160a01b038216610d1b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161052a565b6001600160a01b03831660009081526020819052604090205481811015610d935760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161052a565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610dca908490611d38565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610e1691815260200190565b60405180910390a3610e2984848461123a565b50505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610e8857507f000000000000000000000000000000000000000000000000000000000000000046145b15610eb257507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b8154600090815b81811015610fba576000610f71828461126c565b905084868281548110610f8657610f86611d67565b60009182526020909120015463ffffffff161115610fa657809250610fb4565b610fb1816001611d38565b91505b50610f5d565b8115610ffe5784610fcc600184611d50565b81548110610fdc57610fdc611d67565b60009182526020909120015464010000000090046001600160e01b0316611001565b60005b6001600160e01b031695945050505050565b61101d8282611287565b6002546001600160e01b03101561108f5760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b606482015260840161052a565b610e29600861136e8361137a565b6001600160a01b038281166000818152600660208181526040808420805485845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610e298284836114f3565b600063ffffffff82111561117b5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840161052a565b5090565b6111898282611630565b610e2960086117858361137a565b600061064d6111a4610e2f565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006111f687878787611791565b915091506112038161187e565b5095945050505050565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b505050565b6001600160a01b03838116600090815260066020526040808220548584168352912054611235929182169116836114f3565b600061127b6002848418611d7d565b61060990848416611d38565b6001600160a01b0382166112dd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161052a565b80600260008282546112ef9190611d38565b90915550506001600160a01b0382166000908152602081905260408120805483929061131c908490611d38565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a361061a6000838361123a565b60006106098284611d38565b8254600090819080156113c55785611393600183611d50565b815481106113a3576113a3611d67565b60009182526020909120015464010000000090046001600160e01b03166113c8565b60005b6001600160e01b031692506113e183858763ffffffff16565b915060008111801561141f575043866113fb600184611d50565b8154811061140b5761140b611d67565b60009182526020909120015463ffffffff16145b1561147f5761142d82611a34565b86611439600184611d50565b8154811061144957611449611d67565b9060005260206000200160000160046101000a8154816001600160e01b0302191690836001600160e01b031602179055506114ea565b85604051806040016040528061149443611116565b63ffffffff1681526020016114a885611a34565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b50935093915050565b816001600160a01b0316836001600160a01b0316141580156115155750600081115b15611235576001600160a01b038316156115a3576001600160a01b03831660009081526007602052604081208190611550906117858561137a565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611598929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615611235576001600160a01b038216600090815260076020526040812081906115d99061136e8561137a565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611621929190918252602082015260400190565b60405180910390a25050505050565b6001600160a01b0382166116905760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161052a565b6001600160a01b038216600090815260208190526040902054818110156117045760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161052a565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611733908490611d50565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36112358360008461123a565b60006106098284611d50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156117c85750600090506003611875565b8460ff16601b141580156117e057508460ff16601c14155b156117f15750600090506004611875565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611845573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661186e57600060019250925050611875565b9150600090505b94509492505050565b600081600481111561189257611892611d9f565b0361189a5750565b60018160048111156118ae576118ae611d9f565b036118fb5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161052a565b600281600481111561190f5761190f611d9f565b0361195c5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161052a565b600381600481111561197057611970611d9f565b036119c85760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161052a565b60048160048111156119dc576119dc611d9f565b036106285760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161052a565b60006001600160e01b0382111561117b5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b606482015260840161052a565b600060208083528351808285015260005b81811015611aca57858101830151858201604001528201611aae565b81811115611adc576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114611b0957600080fd5b919050565b60008060408385031215611b2157600080fd5b611b2a83611af2565b946020939093013593505050565b600080600060608486031215611b4d57600080fd5b611b5684611af2565b9250611b6460208501611af2565b9150604084013590509250925092565b600060208284031215611b8657600080fd5b61060982611af2565b600060208284031215611ba157600080fd5b5035919050565b803560ff81168114611b0957600080fd5b60008060008060008060c08789031215611bd257600080fd5b611bdb87611af2565b95506020870135945060408701359350611bf760608801611ba8565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a031215611c2c57600080fd5b611c3588611af2565b9650611c4360208901611af2565b95506040880135945060608801359350611c5f60808901611ba8565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215611c8e57600080fd5b611c9783611af2565b9150611ca560208401611af2565b90509250929050565b60008060408385031215611cc157600080fd5b611cca83611af2565b9150602083013563ffffffff81168114611ce357600080fd5b809150509250929050565b600181811c90821680611d0257607f821691505b60208210810361122f57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115611d4b57611d4b611d22565b500190565b600082821015611d6257611d62611d22565b500390565b634e487b7160e01b600052603260045260246000fd5b600082611d9a57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220d30d39e09bbfbe56fa102a322c6a50a8a925dee0418389ab5dd0f46d060953bb64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c80636fcfff45116100de5780639dc29fac11610097578063c3cda52011610071578063c3cda52014610358578063d505accf1461036b578063dd62ed3e1461037e578063f1127ed8146103b757600080fd5b80639dc29fac1461031f578063a457c2d714610332578063a9059cbb1461034557600080fd5b80636fcfff451461028d57806370a08231146102b55780637ecebe00146102de5780638e539e8c146102f157806395d89b41146103045780639ab24eb01461030c57600080fd5b80633644e515116101305780633644e515146101f357806339509351146101fb5780633a46b1a81461020e57806340c10f1914610221578063587cde1e146102365780635c19a95c1461027a57600080fd5b806306fdde0314610178578063095ea7b31461019657806318160ddd146101b957806323b872dd146101cb578063313ce567146101de5780633408e470146101ed575b600080fd5b6101806103f4565b60405161018d9190611a9d565b60405180910390f35b6101a96101a4366004611b0e565b610486565b604051901515815260200161018d565b6002545b60405190815260200161018d565b6101a96101d9366004611b38565b61049c565b6040516012815260200161018d565b466101bd565b6101bd61054b565b6101a9610209366004611b0e565b61055a565b6101bd61021c366004611b0e565b610596565b61023461022f366004611b0e565b610610565b005b610262610244366004611b74565b6001600160a01b039081166000908152600660205260409020541690565b6040516001600160a01b03909116815260200161018d565b610234610288366004611b74565b61061e565b6102a061029b366004611b74565b61062b565b60405163ffffffff909116815260200161018d565b6101bd6102c3366004611b74565b6001600160a01b031660009081526020819052604090205490565b6101bd6102ec366004611b74565b610653565b6101bd6102ff366004611b8f565b610671565b6101806106cd565b6101bd61031a366004611b74565b6106dc565b61023461032d366004611b0e565b610763565b6101a9610340366004611b0e565b61076d565b6101a9610353366004611b0e565b610806565b610234610366366004611bb9565b610813565b610234610379366004611c11565b610949565b6101bd61038c366004611c7b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6103ca6103c5366004611cae565b610aad565b60408051825163ffffffff1681526020928301516001600160e01b0316928101929092520161018d565b60606003805461040390611cee565b80601f016020809104026020016040519081016040528092919081815260200182805461042f90611cee565b801561047c5780601f106104515761010080835404028352916020019161047c565b820191906000526020600020905b81548152906001019060200180831161045f57829003601f168201915b5050505050905090565b6000610493338484610b31565b50600192915050565b60006104a9848484610c55565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156105335760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6105408533858403610b31565b506001949350505050565b6000610555610e2f565b905090565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610493918590610591908690611d38565b610b31565b60004382106105e75760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604482015260640161052a565b6001600160a01b03831660009081526007602052604090206106099083610f56565b9392505050565b61061a8282611013565b5050565b610628338261109d565b50565b6001600160a01b03811660009081526007602052604081205461064d90611116565b92915050565b6001600160a01b03811660009081526005602052604081205461064d565b60004382106106c25760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604482015260640161052a565b61064d600883610f56565b60606004805461040390611cee565b6001600160a01b0381166000908152600760205260408120548015610750576001600160a01b038316600090815260076020526040902061071e600183611d50565b8154811061072e5761072e611d67565b60009182526020909120015464010000000090046001600160e01b0316610753565b60005b6001600160e01b03169392505050565b61061a828261117f565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156107ef5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161052a565b6107fc3385858403610b31565b5060019392505050565b6000610493338484610c55565b834211156108635760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e61747572652065787069726564000000604482015260640161052a565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b0388169181019190915260608101869052608081018590526000906108dd906108d59060a00160405160208183030381529060405280519060200120611197565b8585856111e5565b90506108e88161120d565b86146109365760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e636500000000000000604482015260640161052a565b610940818861109d565b50505050505050565b834211156109995760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015260640161052a565b60007f00000000000000000000000000000000000000000000000000000000000000008888886109c88c61120d565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610a2382611197565b90506000610a33828787876111e5565b9050896001600160a01b0316816001600160a01b031614610a965760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015260640161052a565b610aa18a8a8a610b31565b50505050505050505050565b60408051808201909152600080825260208201526001600160a01b0383166000908152600760205260409020805463ffffffff8416908110610af157610af1611d67565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b6001600160a01b038316610b935760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161052a565b6001600160a01b038216610bf45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161052a565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610cb95760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161052a565b6001600160a01b038216610d1b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161052a565b6001600160a01b03831660009081526020819052604090205481811015610d935760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161052a565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610dca908490611d38565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610e1691815260200190565b60405180910390a3610e2984848461123a565b50505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610e8857507f000000000000000000000000000000000000000000000000000000000000000046145b15610eb257507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b8154600090815b81811015610fba576000610f71828461126c565b905084868281548110610f8657610f86611d67565b60009182526020909120015463ffffffff161115610fa657809250610fb4565b610fb1816001611d38565b91505b50610f5d565b8115610ffe5784610fcc600184611d50565b81548110610fdc57610fdc611d67565b60009182526020909120015464010000000090046001600160e01b0316611001565b60005b6001600160e01b031695945050505050565b61101d8282611287565b6002546001600160e01b03101561108f5760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b606482015260840161052a565b610e29600861136e8361137a565b6001600160a01b038281166000818152600660208181526040808420805485845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610e298284836114f3565b600063ffffffff82111561117b5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840161052a565b5090565b6111898282611630565b610e2960086117858361137a565b600061064d6111a4610e2f565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006111f687878787611791565b915091506112038161187e565b5095945050505050565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b505050565b6001600160a01b03838116600090815260066020526040808220548584168352912054611235929182169116836114f3565b600061127b6002848418611d7d565b61060990848416611d38565b6001600160a01b0382166112dd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161052a565b80600260008282546112ef9190611d38565b90915550506001600160a01b0382166000908152602081905260408120805483929061131c908490611d38565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a361061a6000838361123a565b60006106098284611d38565b8254600090819080156113c55785611393600183611d50565b815481106113a3576113a3611d67565b60009182526020909120015464010000000090046001600160e01b03166113c8565b60005b6001600160e01b031692506113e183858763ffffffff16565b915060008111801561141f575043866113fb600184611d50565b8154811061140b5761140b611d67565b60009182526020909120015463ffffffff16145b1561147f5761142d82611a34565b86611439600184611d50565b8154811061144957611449611d67565b9060005260206000200160000160046101000a8154816001600160e01b0302191690836001600160e01b031602179055506114ea565b85604051806040016040528061149443611116565b63ffffffff1681526020016114a885611a34565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b50935093915050565b816001600160a01b0316836001600160a01b0316141580156115155750600081115b15611235576001600160a01b038316156115a3576001600160a01b03831660009081526007602052604081208190611550906117858561137a565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611598929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615611235576001600160a01b038216600090815260076020526040812081906115d99061136e8561137a565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611621929190918252602082015260400190565b60405180910390a25050505050565b6001600160a01b0382166116905760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161052a565b6001600160a01b038216600090815260208190526040902054818110156117045760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161052a565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611733908490611d50565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36112358360008461123a565b60006106098284611d50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156117c85750600090506003611875565b8460ff16601b141580156117e057508460ff16601c14155b156117f15750600090506004611875565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611845573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661186e57600060019250925050611875565b9150600090505b94509492505050565b600081600481111561189257611892611d9f565b0361189a5750565b60018160048111156118ae576118ae611d9f565b036118fb5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161052a565b600281600481111561190f5761190f611d9f565b0361195c5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161052a565b600381600481111561197057611970611d9f565b036119c85760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161052a565b60048160048111156119dc576119dc611d9f565b036106285760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161052a565b60006001600160e01b0382111561117b5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b606482015260840161052a565b600060208083528351808285015260005b81811015611aca57858101830151858201604001528201611aae565b81811115611adc576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114611b0957600080fd5b919050565b60008060408385031215611b2157600080fd5b611b2a83611af2565b946020939093013593505050565b600080600060608486031215611b4d57600080fd5b611b5684611af2565b9250611b6460208501611af2565b9150604084013590509250925092565b600060208284031215611b8657600080fd5b61060982611af2565b600060208284031215611ba157600080fd5b5035919050565b803560ff81168114611b0957600080fd5b60008060008060008060c08789031215611bd257600080fd5b611bdb87611af2565b95506020870135945060408701359350611bf760608801611ba8565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a031215611c2c57600080fd5b611c3588611af2565b9650611c4360208901611af2565b95506040880135945060608801359350611c5f60808901611ba8565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215611c8e57600080fd5b611c9783611af2565b9150611ca560208401611af2565b90509250929050565b60008060408385031215611cc157600080fd5b611cca83611af2565b9150602083013563ffffffff81168114611ce357600080fd5b809150509250929050565b600181811c90821680611d0257607f821691505b60208210810361122f57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115611d4b57611d4b611d22565b500190565b600082821015611d6257611d62611d22565b500390565b634e487b7160e01b600052603260045260246000fd5b600082611d9a57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220d30d39e09bbfbe56fa102a322c6a50a8a925dee0418389ab5dd0f46d060953bb64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "DelegateChanged", "inputs": [{"name": "delegator", "type": "address", "internalType": "address", "indexed": true}, {"name": "fromDelegate", "type": "address", "internalType": "address", "indexed": true}, {"name": "toDelegate", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "DelegateVotesChanged", "inputs": [{"name": "delegate", "type": "address", "internalType": "address", "indexed": true}, {"name": "previousBalance", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newBalance", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "DOMAIN_SEPARATOR", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "checkpoints", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "pos", "type": "uint32", "internalType": "uint32"}], "outputs": [{"name": "", "type": "tuple", "components": [{"name": "fromBlock", "type": "uint32", "internalType": "uint32"}, {"name": "votes", "type": "uint224", "internalType": "uint224"}], "internalType": "struct ERC20Votes.Checkpoint"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "delegate", "stateMutability": "nonpayable", "inputs": [{"name": "delegatee", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "delegateBySig", "stateMutability": "nonpayable", "inputs": [{"name": "delegatee", "type": "address", "internalType": "address"}, {"name": "nonce", "type": "uint256", "internalType": "uint256"}, {"name": "expiry", "type": "uint256", "internalType": "uint256"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "delegates", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getChainId", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getPastTotalSupply", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getPastVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "nonces", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "numCheckpoints", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint32", "internalType": "uint32"}]}, {"type": "function", "name": "permit", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "deadline", "type": "uint256", "internalType": "uint256"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"DOMAIN_SEPARATOR()": {"details": "See {IERC20Permit-DOMAIN_SEPARATOR}."}, "allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "checkpoints(address,uint32)": {"details": "Get the `pos`-th checkpoint for `account`."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "delegate(address)": {"details": "Delegate votes from the sender to `delegatee`."}, "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {"details": "Delegates votes from signer to `delegatee`"}, "delegates(address)": {"details": "Get the address `account` is currently delegating to."}, "getPastTotalSupply(uint256)": {"details": "Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances. It is but NOT the sum of all the delegated votes! Requirements: - `blockNumber` must have been already mined"}, "getPastVotes(address,uint256)": {"details": "Retrieve the number of votes for `account` at the end of `blockNumber`. Requirements: - `blockNumber` must have been already mined"}, "getVotes(address)": {"details": "Gets the current votes balance for `account`"}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "nonces(address)": {"details": "See {IERC20Permit-nonces}."}, "numCheckpoints(address)": {"details": "Get number of checkpoints for `account`."}, "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {"details": "See {IERC20Permit-permit}."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20WrapperMock": {"contractName": "ERC20WrapperMock", "sourceId": "mocks/ERC20WrapperMock.sol", "deploymentBytecode": {"bytecode": "0x60a06040523480156200001157600080fd5b5060405162001329380380620013298339810160408190526200003491620001f1565b82828281600390805190602001906200004f9291906200007e565b508051620000659060049060208401906200007e565b5050506001600160a01b031660805250620002b7915050565b8280546200008c906200027b565b90600052602060002090601f016020900481019282620000b05760008555620000fb565b82601f10620000cb57805160ff1916838001178555620000fb565b82800160010185558215620000fb579182015b82811115620000fb578251825591602001919060010190620000de565b50620001099291506200010d565b5090565b5b808211156200010957600081556001016200010e565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200014c57600080fd5b81516001600160401b038082111562000169576200016962000124565b604051601f8301601f19908116603f0116810190828211818310171562000194576200019462000124565b81604052838152602092508683858801011115620001b157600080fd5b600091505b83821015620001d55785820183015181830184015290820190620001b6565b83821115620001e75760008385830101525b9695505050505050565b6000806000606084860312156200020757600080fd5b83516001600160a01b03811681146200021f57600080fd5b60208501519093506001600160401b03808211156200023d57600080fd5b6200024b878388016200013a565b935060408601519150808211156200026257600080fd5b5062000271868287016200013a565b9150509250925092565b600181811c908216806200029057607f821691505b602082108103620002b157634e487b7160e01b600052602260045260246000fd5b50919050565b608051611041620002e8600039600081816101c40152818161035801528181610436015261069e01526110416000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063313ce5671161009757806395d89b411161006657806395d89b4114610227578063a457c2d71461022f578063a9059cbb14610242578063dd62ed3e1461025557600080fd5b8063313ce5671461019d57806339509351146101ac5780636f307dc3146101bf57806370a08231146101fe57600080fd5b806318160ddd116100d357806318160ddd1461015c578063205c28781461016457806323b872dd146101775780632f4f21e21461018a57600080fd5b806306fdde03146100fa578063095ea7b3146101185780630cd865ec1461013b575b600080fd5b61010261028e565b60405161010f9190610e32565b60405180910390f35b61012b610126366004610e81565b610320565b604051901515815260200161010f565b61014e610149366004610eab565b610336565b60405190815260200161010f565b60025461014e565b61012b610172366004610e81565b610347565b61012b610185366004610ec6565b61037e565b61012b610198366004610e81565b61042f565b6040516012815260200161010f565b61012b6101ba366004610e81565b610467565b6101e67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161010f565b61014e61020c366004610eab565b6001600160a01b031660009081526020819052604090205490565b6101026104a3565b61012b61023d366004610e81565b6104b2565b61012b610250366004610e81565b61054b565b61014e610263366004610f02565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461029d90610f35565b80601f01602080910402602001604051908101604052809291908181526020018280546102c990610f35565b80156103165780601f106102eb57610100808354040283529160200191610316565b820191906000526020600020905b8154815290600101906020018083116102f957829003601f168201915b5050505050905090565b600061032d338484610558565b50600192915050565b60006103418261067d565b92915050565b60006103533383610727565b61032d7f00000000000000000000000000000000000000000000000000000000000000008484610872565b600061038b8484846108d5565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156104155760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6104228533858403610558565b60019150505b9392505050565b600061045d7f0000000000000000000000000000000000000000000000000000000000000000333085610aa5565b61032d8383610add565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161032d91859061049e908690610f85565b610558565b60606004805461029d90610f35565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156105345760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161040c565b6105413385858403610558565b5060019392505050565b600061032d3384846108d5565b6001600160a01b0383166105ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161040c565b6001600160a01b03821661061b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161040c565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60008061068960025490565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156106ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107119190610f9d565b61071b9190610fb6565b90506103418382610add565b6001600160a01b0382166107875760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161040c565b6001600160a01b038216600090815260208190526040902054818110156107fb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161040c565b6001600160a01b038316600090815260208190526040812083830390556002805484929061082a908490610fb6565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610670565b505050565b6040516001600160a01b03831660248201526044810182905261086d90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610bbc565b6001600160a01b0383166109395760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161040c565b6001600160a01b03821661099b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161040c565b6001600160a01b03831660009081526020819052604090205481811015610a135760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161040c565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610a4a908490610f85565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a9691815260200190565b60405180910390a35b50505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610a9f9085906323b872dd60e01b9060840161089e565b6001600160a01b038216610b335760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161040c565b8060026000828254610b459190610f85565b90915550506001600160a01b03821660009081526020819052604081208054839290610b72908490610f85565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000610c11826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610c8e9092919063ffffffff16565b80519091501561086d5780806020019051810190610c2f9190610fcd565b61086d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161040c565b6060610c9d8484600085610ca5565b949350505050565b606082471015610d065760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161040c565b843b610d545760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161040c565b600080866001600160a01b03168587604051610d709190610fef565b60006040518083038185875af1925050503d8060008114610dad576040519150601f19603f3d011682016040523d82523d6000602084013e610db2565b606091505b5091509150610dc2828286610dcd565b979650505050505050565b60608315610ddc575081610428565b825115610dec5782518084602001fd5b8160405162461bcd60e51b815260040161040c9190610e32565b60005b83811015610e21578181015183820152602001610e09565b83811115610a9f5750506000910152565b6020815260008251806020840152610e51816040850160208701610e06565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610e7c57600080fd5b919050565b60008060408385031215610e9457600080fd5b610e9d83610e65565b946020939093013593505050565b600060208284031215610ebd57600080fd5b61042882610e65565b600080600060608486031215610edb57600080fd5b610ee484610e65565b9250610ef260208501610e65565b9150604084013590509250925092565b60008060408385031215610f1557600080fd5b610f1e83610e65565b9150610f2c60208401610e65565b90509250929050565b600181811c90821680610f4957607f821691505b602082108103610f6957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610f9857610f98610f6f565b500190565b600060208284031215610faf57600080fd5b5051919050565b600082821015610fc857610fc8610f6f565b500390565b600060208284031215610fdf57600080fd5b8151801515811461042857600080fd5b60008251611001818460208701610e06565b919091019291505056fea2646970667358221220e36e49c4fe4caf7424a8393f40f5777fa00b063fd445fbad24e5955efb796ce864736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063313ce5671161009757806395d89b411161006657806395d89b4114610227578063a457c2d71461022f578063a9059cbb14610242578063dd62ed3e1461025557600080fd5b8063313ce5671461019d57806339509351146101ac5780636f307dc3146101bf57806370a08231146101fe57600080fd5b806318160ddd116100d357806318160ddd1461015c578063205c28781461016457806323b872dd146101775780632f4f21e21461018a57600080fd5b806306fdde03146100fa578063095ea7b3146101185780630cd865ec1461013b575b600080fd5b61010261028e565b60405161010f9190610e32565b60405180910390f35b61012b610126366004610e81565b610320565b604051901515815260200161010f565b61014e610149366004610eab565b610336565b60405190815260200161010f565b60025461014e565b61012b610172366004610e81565b610347565b61012b610185366004610ec6565b61037e565b61012b610198366004610e81565b61042f565b6040516012815260200161010f565b61012b6101ba366004610e81565b610467565b6101e67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161010f565b61014e61020c366004610eab565b6001600160a01b031660009081526020819052604090205490565b6101026104a3565b61012b61023d366004610e81565b6104b2565b61012b610250366004610e81565b61054b565b61014e610263366004610f02565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461029d90610f35565b80601f01602080910402602001604051908101604052809291908181526020018280546102c990610f35565b80156103165780601f106102eb57610100808354040283529160200191610316565b820191906000526020600020905b8154815290600101906020018083116102f957829003601f168201915b5050505050905090565b600061032d338484610558565b50600192915050565b60006103418261067d565b92915050565b60006103533383610727565b61032d7f00000000000000000000000000000000000000000000000000000000000000008484610872565b600061038b8484846108d5565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156104155760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6104228533858403610558565b60019150505b9392505050565b600061045d7f0000000000000000000000000000000000000000000000000000000000000000333085610aa5565b61032d8383610add565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161032d91859061049e908690610f85565b610558565b60606004805461029d90610f35565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156105345760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161040c565b6105413385858403610558565b5060019392505050565b600061032d3384846108d5565b6001600160a01b0383166105ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161040c565b6001600160a01b03821661061b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161040c565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60008061068960025490565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156106ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107119190610f9d565b61071b9190610fb6565b90506103418382610add565b6001600160a01b0382166107875760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161040c565b6001600160a01b038216600090815260208190526040902054818110156107fb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161040c565b6001600160a01b038316600090815260208190526040812083830390556002805484929061082a908490610fb6565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610670565b505050565b6040516001600160a01b03831660248201526044810182905261086d90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610bbc565b6001600160a01b0383166109395760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161040c565b6001600160a01b03821661099b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161040c565b6001600160a01b03831660009081526020819052604090205481811015610a135760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161040c565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610a4a908490610f85565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a9691815260200190565b60405180910390a35b50505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610a9f9085906323b872dd60e01b9060840161089e565b6001600160a01b038216610b335760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161040c565b8060026000828254610b459190610f85565b90915550506001600160a01b03821660009081526020819052604081208054839290610b72908490610f85565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000610c11826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610c8e9092919063ffffffff16565b80519091501561086d5780806020019051810190610c2f9190610fcd565b61086d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161040c565b6060610c9d8484600085610ca5565b949350505050565b606082471015610d065760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161040c565b843b610d545760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161040c565b600080866001600160a01b03168587604051610d709190610fef565b60006040518083038185875af1925050503d8060008114610dad576040519150601f19603f3d011682016040523d82523d6000602084013e610db2565b606091505b5091509150610dc2828286610dcd565b979650505050505050565b60608315610ddc575081610428565b825115610dec5782518084602001fd5b8160405162461bcd60e51b815260040161040c9190610e32565b60005b83811015610e21578181015183820152602001610e09565b83811115610a9f5750506000910152565b6020815260008251806020840152610e51816040850160208701610e06565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610e7c57600080fd5b919050565b60008060408385031215610e9457600080fd5b610e9d83610e65565b946020939093013593505050565b600060208284031215610ebd57600080fd5b61042882610e65565b600080600060608486031215610edb57600080fd5b610ee484610e65565b9250610ef260208501610e65565b9150604084013590509250925092565b60008060408385031215610f1557600080fd5b610f1e83610e65565b9150610f2c60208401610e65565b90509250929050565b600181811c90821680610f4957607f821691505b602082108103610f6957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610f9857610f98610f6f565b500190565b600060208284031215610faf57600080fd5b5051919050565b600082821015610fc857610fc8610f6f565b500390565b600060208284031215610fdf57600080fd5b8151801515811461042857600080fd5b60008251611001818460208701610e06565b919091019291505056fea2646970667358221220e36e49c4fe4caf7424a8393f40f5777fa00b063fd445fbad24e5955efb796ce864736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "_underlyingToken", "type": "address", "internalType": "contract IERC20"}, {"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "depositFor", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "recover", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "underlying", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "contract IERC20"}]}, {"type": "function", "name": "withdrawTo", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "depositFor(address,uint256)": {"details": "Allow a user to deposit underlying tokens and mint the corresponding number of wrapped tokens."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}, "withdrawTo(address,uint256)": {"details": "Allow a user to burn a number of wrapped tokens and withdraw the corresponding number of underlying tokens."}}, "version": 1}}, "ERC2771ContextMock": {"contractName": "ERC2771ContextMock", "sourceId": "mocks/ERC2771ContextMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5060405161044838038061044883398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6103b5806100936000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063376bf26214610046578063572b6c051461005b578063d737d0c714610091575b600080fd5b6100596100543660046101bd565b610099565b005b61007d610069366004610278565b6000546001600160a01b0391821691161490565b604051901515815260200160405180910390f35b6100596100e0565b7faf235354a0a47c91ee171961326335cb2d1a8e55b8a89859b0e61eb049e50ea06100c2610126565b84846040516100d494939291906102a8565b60405180910390a15050565b7fd6558c3ed910d959271054471fd1c326679d9fece99c5091b00ed89627cf2bfc610109610139565b6040516001600160a01b03909116815260200160405180910390a1565b366000610131610148565b915091509091565b6000610143610182565b905090565b600080543691906001600160a01b0316330361017a576000803661016d601482610330565b9261013193929190610355565b600036610131565b600080546001600160a01b031633036101a2575060131936013560601c90565b503390565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156101d057600080fd5b82359150602083013567ffffffffffffffff808211156101ef57600080fd5b818501915085601f83011261020357600080fd5b813581811115610215576102156101a7565b604051601f8201601f19908116603f0116810190838211818310171561023d5761023d6101a7565b8160405282815288602084870101111561025657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561028a57600080fd5b81356001600160a01b03811681146102a157600080fd5b9392505050565b60608152836060820152838560808301376000608085830101526000601f1980601f8701168301602086818601526080858303016040860152855180608084015260005b818110156103085787810183015184820160a0015282016102ec565b8181111561031a57600060a083860101525b50601f019092160160a001979650505050505050565b60008282101561035057634e487b7160e01b600052601160045260246000fd5b500390565b6000808585111561036557600080fd5b8386111561037257600080fd5b505082019391909203915056fea264697066735822122020d82525349ab70b3dd2c7cc565853e2526cfcc9be24f20f23e9be8bcded6efe64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063376bf26214610046578063572b6c051461005b578063d737d0c714610091575b600080fd5b6100596100543660046101bd565b610099565b005b61007d610069366004610278565b6000546001600160a01b0391821691161490565b604051901515815260200160405180910390f35b6100596100e0565b7faf235354a0a47c91ee171961326335cb2d1a8e55b8a89859b0e61eb049e50ea06100c2610126565b84846040516100d494939291906102a8565b60405180910390a15050565b7fd6558c3ed910d959271054471fd1c326679d9fece99c5091b00ed89627cf2bfc610109610139565b6040516001600160a01b03909116815260200160405180910390a1565b366000610131610148565b915091509091565b6000610143610182565b905090565b600080543691906001600160a01b0316330361017a576000803661016d601482610330565b9261013193929190610355565b600036610131565b600080546001600160a01b031633036101a2575060131936013560601c90565b503390565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156101d057600080fd5b82359150602083013567ffffffffffffffff808211156101ef57600080fd5b818501915085601f83011261020357600080fd5b813581811115610215576102156101a7565b604051601f8201601f19908116603f0116810190838211818310171561023d5761023d6101a7565b8160405282815288602084870101111561025657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561028a57600080fd5b81356001600160a01b03811681146102a157600080fd5b9392505050565b60608152836060820152838560808301376000608085830101526000601f1980601f8701168301602086818601526080858303016040860152855180608084015260005b818110156103085787810183015184820160a0015282016102ec565b8181111561031a57600060a083860101525b50601f019092160160a001979650505050505050565b60008282101561035057634e487b7160e01b600052601160045260246000fd5b500390565b6000808585111561036557600080fd5b8386111561037257600080fd5b505082019391909203915056fea264697066735822122020d82525349ab70b3dd2c7cc565853e2526cfcc9be24f20f23e9be8bcded6efe64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "trustedForwarder", "type": "address", "internalType": "address"}]}, {"type": "event", "name": "Data", "inputs": [{"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "integerValue", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "stringValue", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Sender", "inputs": [{"name": "sender", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "function", "name": "isTrustedForwarder", "stateMutability": "view", "inputs": [{"name": "forwarder", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "msgData", "stateMutability": "nonpayable", "inputs": [{"name": "integerValue", "type": "uint256", "internalType": "uint256"}, {"name": "stringValue", "type": "string", "internalType": "string"}], "outputs": []}, {"type": "function", "name": "msgSender", "stateMutability": "nonpayable", "inputs": [], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ERC3156FlashBorrowerMock": {"contractName": "ERC3156FlashBorrowerMock", "sourceId": "mocks/ERC3156FlashBorrowerMock.sol", "deploymentBytecode": {"bytecode": "0x60c060405234801561001057600080fd5b5060405161075538038061075583398101604081905261002f91610053565b1515608052151560a052610086565b8051801515811461004e57600080fd5b919050565b6000806040838503121561006657600080fd5b61006f8361003e565b915061007d6020840161003e565b90509250929050565b60805160a0516106aa6100ab60003960006102c50152600061021401526106aa6000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806323e30c8b14610030575b600080fd5b61004361003e3660046104ee565b610055565b60405190815260200160405180910390f35b6000336001600160a01b0387161461006c57600080fd5b6040516370a0823160e01b815230600482018190527f6ff2acfcb07917b1e80e53f0fe390b467b1151d15b38730a6e08397799c05a8b918891906001600160a01b038316906370a0823190602401602060405180830381865afa1580156100d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb9190610594565b604080516001600160a01b0394851681529390921660208401529082015260600160405180910390a17f7249fd4c03cce09b30a13d77804b198e2647c0ccd59eadf4de4e7c16099badc586876001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a89190610594565b604080516001600160a01b03909316835260208301919091520160405180910390a18115610212576102108684848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061031c92505050565b505b7f0000000000000000000000000000000000000000000000000000000000000000156102c3576001600160a01b03861663095ea7b38761025287896105ad565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801561029d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c191906105d3565b505b7f00000000000000000000000000000000000000000000000000000000000000006102ef576000610311565b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd95b979650505050505050565b606061035e83836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250610365565b9392505050565b6060610374848460008561037c565b949350505050565b6060824710156103e25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084015b60405180910390fd5b843b6104305760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103d9565b600080866001600160a01b0316858760405161044c9190610625565b60006040518083038185875af1925050503d8060008114610489576040519150601f19603f3d011682016040523d82523d6000602084013e61048e565b606091505b5091509150610311828286606083156104a857508161035e565b8251156104b85782518084602001fd5b8160405162461bcd60e51b81526004016103d99190610641565b80356001600160a01b03811681146104e957600080fd5b919050565b60008060008060008060a0878903121561050757600080fd5b610510876104d2565b955061051e602088016104d2565b94506040870135935060608701359250608087013567ffffffffffffffff8082111561054957600080fd5b818901915089601f83011261055d57600080fd5b81358181111561056c57600080fd5b8a602082850101111561057e57600080fd5b6020830194508093505050509295509295509295565b6000602082840312156105a657600080fd5b5051919050565b600082198211156105ce57634e487b7160e01b600052601160045260246000fd5b500190565b6000602082840312156105e557600080fd5b8151801515811461035e57600080fd5b60005b838110156106105781810151838201526020016105f8565b8381111561061f576000848401525b50505050565b600082516106378184602087016105f5565b9190910192915050565b60208152600082518060208401526106608160408501602087016105f5565b601f01601f1916919091016040019291505056fea264697066735822122064d4bc380a23414e58d914af53a01ef0f8fa553f7aff73a62eaa4d4deaf455ef64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806323e30c8b14610030575b600080fd5b61004361003e3660046104ee565b610055565b60405190815260200160405180910390f35b6000336001600160a01b0387161461006c57600080fd5b6040516370a0823160e01b815230600482018190527f6ff2acfcb07917b1e80e53f0fe390b467b1151d15b38730a6e08397799c05a8b918891906001600160a01b038316906370a0823190602401602060405180830381865afa1580156100d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb9190610594565b604080516001600160a01b0394851681529390921660208401529082015260600160405180910390a17f7249fd4c03cce09b30a13d77804b198e2647c0ccd59eadf4de4e7c16099badc586876001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a89190610594565b604080516001600160a01b03909316835260208301919091520160405180910390a18115610212576102108684848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061031c92505050565b505b7f0000000000000000000000000000000000000000000000000000000000000000156102c3576001600160a01b03861663095ea7b38761025287896105ad565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801561029d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c191906105d3565b505b7f00000000000000000000000000000000000000000000000000000000000000006102ef576000610311565b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd95b979650505050505050565b606061035e83836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250610365565b9392505050565b6060610374848460008561037c565b949350505050565b6060824710156103e25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084015b60405180910390fd5b843b6104305760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103d9565b600080866001600160a01b0316858760405161044c9190610625565b60006040518083038185875af1925050503d8060008114610489576040519150601f19603f3d011682016040523d82523d6000602084013e61048e565b606091505b5091509150610311828286606083156104a857508161035e565b8251156104b85782518084602001fd5b8160405162461bcd60e51b81526004016103d99190610641565b80356001600160a01b03811681146104e957600080fd5b919050565b60008060008060008060a0878903121561050757600080fd5b610510876104d2565b955061051e602088016104d2565b94506040870135935060608701359250608087013567ffffffffffffffff8082111561054957600080fd5b818901915089601f83011261055d57600080fd5b81358181111561056c57600080fd5b8a602082850101111561057e57600080fd5b6020830194508093505050509295509295509295565b6000602082840312156105a657600080fd5b5051919050565b600082198211156105ce57634e487b7160e01b600052601160045260246000fd5b500190565b6000602082840312156105e557600080fd5b8151801515811461035e57600080fd5b60005b838110156106105781810151838201526020016105f8565b8381111561061f576000848401525b50505050565b600082516106378184602087016105f5565b9190910192915050565b60208152600082518060208401526106608160408501602087016105f5565b601f01601f1916919091016040019291505056fea264697066735822122064d4bc380a23414e58d914af53a01ef0f8fa553f7aff73a62eaa4d4deaf455ef64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "enableReturn", "type": "bool", "internalType": "bool"}, {"name": "enableApprove", "type": "bool", "internalType": "bool"}]}, {"type": "event", "name": "BalanceOf", "inputs": [{"name": "token", "type": "address", "internalType": "address", "indexed": false}, {"name": "account", "type": "address", "internalType": "address", "indexed": false}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TotalSupply", "inputs": [{"name": "token", "type": "address", "internalType": "address", "indexed": false}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "onFlashLoan", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "token", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "fee", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "WARNING: this IERC3156FlashBorrower mock implementation is for testing purposes ONLY. Writing a secure flash lock borrower is not an easy task, and should be done with the utmost care. This is not an example of how it should be done, and no pattern present in this mock should be considered secure. Following best practices, always have your contract properly audited before using them to manipulate important funds on live networks.", "kind": "dev", "methods": {}, "version": 1}}, "ERC721BurnableMock": {"contractName": "ERC721BurnableMock", "sourceId": "mocks/ERC721BurnableMock.sol", "deploymentBytecode": {"bytecode": "0x60806040523480156200001157600080fd5b50604051620018de380380620018de8339810160408190526200003491620001e1565b8151829082906200004d9060009060208501906200006e565b508051620000639060019060208401906200006e565b505050505062000287565b8280546200007c906200024b565b90600052602060002090601f016020900481019282620000a05760008555620000eb565b82601f10620000bb57805160ff1916838001178555620000eb565b82800160010185558215620000eb579182015b82811115620000eb578251825591602001919060010190620000ce565b50620000f9929150620000fd565b5090565b5b80821115620000f95760008155600101620000fe565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013c57600080fd5b81516001600160401b038082111562000159576200015962000114565b604051601f8301601f19908116603f0116810190828211818310171562000184576200018462000114565b81604052838152602092508683858801011115620001a157600080fd5b600091505b83821015620001c55785820183015181830184015290820190620001a6565b83821115620001d75760008385830101525b9695505050505050565b60008060408385031215620001f557600080fd5b82516001600160401b03808211156200020d57600080fd5b6200021b868387016200012a565b935060208501519150808211156200023257600080fd5b5062000241858286016200012a565b9150509250929050565b600181811c908216806200026057607f821691505b6020821081036200028157634e487b7160e01b600052602260045260246000fd5b50919050565b61164780620002976000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80636352211e116100a2578063a144819411610071578063a144819414610246578063a22cb46514610259578063b88d4fde1461026c578063c87b56dd1461027f578063e985e9c51461029257600080fd5b80636352211e146101f757806370a082311461020a5780638832e6e31461022b57806395d89b411461023e57600080fd5b806323b872dd116100e957806323b872dd1461019857806340c10f19146101ab57806342842e0e146101be57806342966c68146101d15780634f558e79146101e457600080fd5b806301ffc9a71461011b57806306fdde0314610143578063081812fc14610158578063095ea7b314610183575b600080fd5b61012e6101293660046110ea565b6102ce565b60405190151581526020015b60405180910390f35b61014b610320565b60405161013a919061115f565b61016b610166366004611172565b6103b2565b6040516001600160a01b03909116815260200161013a565b6101966101913660046111a7565b61044c565b005b6101966101a63660046111d1565b610561565b6101966101b93660046111a7565b610593565b6101966101cc3660046111d1565b6105a1565b6101966101df366004611172565b6105bc565b61012e6101f2366004611172565b610636565b61016b610205366004611172565b610655565b61021d61021836600461120d565b6106cc565b60405190815260200161013a565b6101966102393660046112cb565b610753565b61014b61075e565b6101966102543660046111a7565b61076d565b610196610267366004611322565b610777565b61019661027a36600461135e565b610782565b61014b61028d366004611172565b6107ba565b61012e6102a03660046113c6565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b14806102ff57506001600160e01b03198216635b5e139f60e01b145b8061031a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461032f906113f9565b80601f016020809104026020016040519081016040528092919081815260200182805461035b906113f9565b80156103a85780601f1061037d576101008083540402835291602001916103a8565b820191906000526020600020905b81548152906001019060200180831161038b57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104305760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061045782610655565b9050806001600160a01b0316836001600160a01b0316036104c45760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610427565b336001600160a01b03821614806104e057506104e081336102a0565b6105525760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610427565b61055c83836108a2565b505050565b61056c335b82610910565b6105885760405162461bcd60e51b815260040161042790611433565b61055c838383610a07565b61059d8282610ba7565b5050565b61055c83838360405180602001604052806000815250610782565b6105c533610566565b61062a5760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b6064820152608401610427565b61063381610ce9565b50565b6000818152600260205260408120546001600160a01b0316151561031a565b6000818152600260205260408120546001600160a01b03168061031a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610427565b60006001600160a01b0382166107375760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610427565b506001600160a01b031660009081526003602052604090205490565b61055c838383610d84565b60606001805461032f906113f9565b61059d8282610db7565b61059d338383610dd1565b61078c3383610910565b6107a85760405162461bcd60e51b815260040161042790611433565b6107b484848484610e9f565b50505050565b6000818152600260205260409020546060906001600160a01b03166108395760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610427565b600061085060408051602081019091526000815290565b90506000815111610870576040518060200160405280600081525061089b565b8061087a84610ed2565b60405160200161088b929190611484565b6040516020818303038152906040525b9392505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906108d782610655565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166109895760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610427565b600061099483610655565b9050806001600160a01b0316846001600160a01b031614806109cf5750836001600160a01b03166109c4846103b2565b6001600160a01b0316145b806109ff57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316610a1a82610655565b6001600160a01b031614610a825760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610427565b6001600160a01b038216610ae45760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610427565b610aef6000826108a2565b6001600160a01b0383166000908152600360205260408120805460019290610b189084906114c9565b90915550506001600160a01b0382166000908152600360205260408120805460019290610b469084906114e0565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216610bfd5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610427565b6000818152600260205260409020546001600160a01b031615610c625760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610427565b6001600160a01b0382166000908152600360205260408120805460019290610c8b9084906114e0565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000610cf482610655565b9050610d016000836108a2565b6001600160a01b0381166000908152600360205260408120805460019290610d2a9084906114c9565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b610d8e8383610ba7565b610d9b6000848484610fd3565b61055c5760405162461bcd60e51b8152600401610427906114f8565b61059d828260405180602001604052806000815250610d84565b816001600160a01b0316836001600160a01b031603610e325760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610427565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610eaa848484610a07565b610eb684848484610fd3565b6107b45760405162461bcd60e51b8152600401610427906114f8565b606081600003610ef95750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610f235780610f0d8161154a565b9150610f1c9050600a83611579565b9150610efd565b60008167ffffffffffffffff811115610f3e57610f3e611228565b6040519080825280601f01601f191660200182016040528015610f68576020820181803683370190505b5090505b84156109ff57610f7d6001836114c9565b9150610f8a600a8661158d565b610f959060306114e0565b60f81b818381518110610faa57610faa6115a1565b60200101906001600160f81b031916908160001a905350610fcc600a86611579565b9450610f6c565b60006001600160a01b0384163b156110c957604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906110179033908990889088906004016115b7565b6020604051808303816000875af1925050508015611052575060408051601f3d908101601f1916820190925261104f918101906115f4565b60015b6110af573d808015611080576040519150601f19603f3d011682016040523d82523d6000602084013e611085565b606091505b5080516000036110a75760405162461bcd60e51b8152600401610427906114f8565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506109ff565b506001949350505050565b6001600160e01b03198116811461063357600080fd5b6000602082840312156110fc57600080fd5b813561089b816110d4565b60005b8381101561112257818101518382015260200161110a565b838111156107b45750506000910152565b6000815180845261114b816020860160208601611107565b601f01601f19169290920160200192915050565b60208152600061089b6020830184611133565b60006020828403121561118457600080fd5b5035919050565b80356001600160a01b03811681146111a257600080fd5b919050565b600080604083850312156111ba57600080fd5b6111c38361118b565b946020939093013593505050565b6000806000606084860312156111e657600080fd5b6111ef8461118b565b92506111fd6020850161118b565b9150604084013590509250925092565b60006020828403121561121f57600080fd5b61089b8261118b565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261124f57600080fd5b813567ffffffffffffffff8082111561126a5761126a611228565b604051601f8301601f19908116603f0116810190828211818310171561129257611292611228565b816040528381528660208588010111156112ab57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156112e057600080fd5b6112e98461118b565b925060208401359150604084013567ffffffffffffffff81111561130c57600080fd5b6113188682870161123e565b9150509250925092565b6000806040838503121561133557600080fd5b61133e8361118b565b91506020830135801515811461135357600080fd5b809150509250929050565b6000806000806080858703121561137457600080fd5b61137d8561118b565b935061138b6020860161118b565b925060408501359150606085013567ffffffffffffffff8111156113ae57600080fd5b6113ba8782880161123e565b91505092959194509250565b600080604083850312156113d957600080fd5b6113e28361118b565b91506113f06020840161118b565b90509250929050565b600181811c9082168061140d57607f821691505b60208210810361142d57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008351611496818460208801611107565b8351908301906114aa818360208801611107565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156114db576114db6114b3565b500390565b600082198211156114f3576114f36114b3565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60006001820161155c5761155c6114b3565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261158857611588611563565b500490565b60008261159c5761159c611563565b500690565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906115ea90830184611133565b9695505050505050565b60006020828403121561160657600080fd5b815161089b816110d456fea2646970667358221220dcc0d60d401ad10686a21e37b29f59115a34f7e64853066ebe275b78f28e5b4364736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80636352211e116100a2578063a144819411610071578063a144819414610246578063a22cb46514610259578063b88d4fde1461026c578063c87b56dd1461027f578063e985e9c51461029257600080fd5b80636352211e146101f757806370a082311461020a5780638832e6e31461022b57806395d89b411461023e57600080fd5b806323b872dd116100e957806323b872dd1461019857806340c10f19146101ab57806342842e0e146101be57806342966c68146101d15780634f558e79146101e457600080fd5b806301ffc9a71461011b57806306fdde0314610143578063081812fc14610158578063095ea7b314610183575b600080fd5b61012e6101293660046110ea565b6102ce565b60405190151581526020015b60405180910390f35b61014b610320565b60405161013a919061115f565b61016b610166366004611172565b6103b2565b6040516001600160a01b03909116815260200161013a565b6101966101913660046111a7565b61044c565b005b6101966101a63660046111d1565b610561565b6101966101b93660046111a7565b610593565b6101966101cc3660046111d1565b6105a1565b6101966101df366004611172565b6105bc565b61012e6101f2366004611172565b610636565b61016b610205366004611172565b610655565b61021d61021836600461120d565b6106cc565b60405190815260200161013a565b6101966102393660046112cb565b610753565b61014b61075e565b6101966102543660046111a7565b61076d565b610196610267366004611322565b610777565b61019661027a36600461135e565b610782565b61014b61028d366004611172565b6107ba565b61012e6102a03660046113c6565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b14806102ff57506001600160e01b03198216635b5e139f60e01b145b8061031a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461032f906113f9565b80601f016020809104026020016040519081016040528092919081815260200182805461035b906113f9565b80156103a85780601f1061037d576101008083540402835291602001916103a8565b820191906000526020600020905b81548152906001019060200180831161038b57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104305760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061045782610655565b9050806001600160a01b0316836001600160a01b0316036104c45760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610427565b336001600160a01b03821614806104e057506104e081336102a0565b6105525760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610427565b61055c83836108a2565b505050565b61056c335b82610910565b6105885760405162461bcd60e51b815260040161042790611433565b61055c838383610a07565b61059d8282610ba7565b5050565b61055c83838360405180602001604052806000815250610782565b6105c533610566565b61062a5760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b6064820152608401610427565b61063381610ce9565b50565b6000818152600260205260408120546001600160a01b0316151561031a565b6000818152600260205260408120546001600160a01b03168061031a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610427565b60006001600160a01b0382166107375760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610427565b506001600160a01b031660009081526003602052604090205490565b61055c838383610d84565b60606001805461032f906113f9565b61059d8282610db7565b61059d338383610dd1565b61078c3383610910565b6107a85760405162461bcd60e51b815260040161042790611433565b6107b484848484610e9f565b50505050565b6000818152600260205260409020546060906001600160a01b03166108395760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610427565b600061085060408051602081019091526000815290565b90506000815111610870576040518060200160405280600081525061089b565b8061087a84610ed2565b60405160200161088b929190611484565b6040516020818303038152906040525b9392505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906108d782610655565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166109895760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610427565b600061099483610655565b9050806001600160a01b0316846001600160a01b031614806109cf5750836001600160a01b03166109c4846103b2565b6001600160a01b0316145b806109ff57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316610a1a82610655565b6001600160a01b031614610a825760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610427565b6001600160a01b038216610ae45760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610427565b610aef6000826108a2565b6001600160a01b0383166000908152600360205260408120805460019290610b189084906114c9565b90915550506001600160a01b0382166000908152600360205260408120805460019290610b469084906114e0565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216610bfd5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610427565b6000818152600260205260409020546001600160a01b031615610c625760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610427565b6001600160a01b0382166000908152600360205260408120805460019290610c8b9084906114e0565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000610cf482610655565b9050610d016000836108a2565b6001600160a01b0381166000908152600360205260408120805460019290610d2a9084906114c9565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b610d8e8383610ba7565b610d9b6000848484610fd3565b61055c5760405162461bcd60e51b8152600401610427906114f8565b61059d828260405180602001604052806000815250610d84565b816001600160a01b0316836001600160a01b031603610e325760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610427565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610eaa848484610a07565b610eb684848484610fd3565b6107b45760405162461bcd60e51b8152600401610427906114f8565b606081600003610ef95750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610f235780610f0d8161154a565b9150610f1c9050600a83611579565b9150610efd565b60008167ffffffffffffffff811115610f3e57610f3e611228565b6040519080825280601f01601f191660200182016040528015610f68576020820181803683370190505b5090505b84156109ff57610f7d6001836114c9565b9150610f8a600a8661158d565b610f959060306114e0565b60f81b818381518110610faa57610faa6115a1565b60200101906001600160f81b031916908160001a905350610fcc600a86611579565b9450610f6c565b60006001600160a01b0384163b156110c957604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906110179033908990889088906004016115b7565b6020604051808303816000875af1925050508015611052575060408051601f3d908101601f1916820190925261104f918101906115f4565b60015b6110af573d808015611080576040519150601f19603f3d011682016040523d82523d6000602084013e611085565b606091505b5080516000036110a75760405162461bcd60e51b8152600401610427906114f8565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506109ff565b506001949350505050565b6001600160e01b03198116811461063357600080fd5b6000602082840312156110fc57600080fd5b813561089b816110d4565b60005b8381101561112257818101518382015260200161110a565b838111156107b45750506000910152565b6000815180845261114b816020860160208601611107565b601f01601f19169290920160200192915050565b60208152600061089b6020830184611133565b60006020828403121561118457600080fd5b5035919050565b80356001600160a01b03811681146111a257600080fd5b919050565b600080604083850312156111ba57600080fd5b6111c38361118b565b946020939093013593505050565b6000806000606084860312156111e657600080fd5b6111ef8461118b565b92506111fd6020850161118b565b9150604084013590509250925092565b60006020828403121561121f57600080fd5b61089b8261118b565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261124f57600080fd5b813567ffffffffffffffff8082111561126a5761126a611228565b604051601f8301601f19908116603f0116810190828211818310171561129257611292611228565b816040528381528660208588010111156112ab57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156112e057600080fd5b6112e98461118b565b925060208401359150604084013567ffffffffffffffff81111561130c57600080fd5b6113188682870161123e565b9150509250925092565b6000806040838503121561133557600080fd5b61133e8361118b565b91506020830135801515811461135357600080fd5b809150509250929050565b6000806000806080858703121561137457600080fd5b61137d8561118b565b935061138b6020860161118b565b925060408501359150606085013567ffffffffffffffff8111156113ae57600080fd5b6113ba8782880161123e565b91505092959194509250565b600080604083850312156113d957600080fd5b6113e28361118b565b91506113f06020840161118b565b90509250929050565b600181811c9082168061140d57607f821691505b60208210810361142d57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008351611496818460208801611107565b8351908301906114aa818360208801611107565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156114db576114db6114b3565b500390565b600082198211156114f3576114f36114b3565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60006001820161155c5761155c6114b3565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261158857611588611563565b500490565b60008261159c5761159c611563565b500690565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906115ea90830184611133565b9695505050505050565b60006020828403121561160657600080fd5b815161089b816110d456fea2646970667358221220dcc0d60d401ad10686a21e37b29f59115a34f7e64853066ebe275b78f28e5b4364736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "exists", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "safeMint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeMint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "tokenURI", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"approve(address,uint256)": {"details": "See {IERC721-approve}."}, "balanceOf(address)": {"details": "See {IERC721-balanceOf}."}, "burn(uint256)": {"details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."}, "getApproved(uint256)": {"details": "See {IERC721-getApproved}."}, "isApprovedForAll(address,address)": {"details": "See {IERC721-isApprovedForAll}."}, "name()": {"details": "See {IERC721Metadata-name}."}, "ownerOf(uint256)": {"details": "See {IERC721-ownerOf}."}, "safeTransferFrom(address,address,uint256)": {"details": "See {IERC721-safeTransferFrom}."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "See {IERC721-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC721-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "symbol()": {"details": "See {IERC721Metadata-symbol}."}, "tokenURI(uint256)": {"details": "See {IERC721Metadata-tokenURI}."}, "transferFrom(address,address,uint256)": {"details": "See {IERC721-transferFrom}."}}, "version": 1}}, "ERC721EnumerableMock": {"contractName": "ERC721EnumerableMock", "sourceId": "mocks/ERC721EnumerableMock.sol", "deploymentBytecode": {"bytecode": "0x60806040523480156200001157600080fd5b5060405162001de638038062001de68339810160408190526200003491620001e1565b8151829082906200004d9060009060208501906200006e565b508051620000639060019060208401906200006e565b505050505062000287565b8280546200007c906200024b565b90600052602060002090601f016020900481019282620000a05760008555620000eb565b82601f10620000bb57805160ff1916838001178555620000eb565b82800160010185558215620000eb579182015b82811115620000eb578251825591602001919060010190620000ce565b50620000f9929150620000fd565b5090565b5b80821115620000f95760008155600101620000fe565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013c57600080fd5b81516001600160401b038082111562000159576200015962000114565b604051601f8301601f19908116603f0116810190828211818310171562000184576200018462000114565b81604052838152602092508683858801011115620001a157600080fd5b600091505b83821015620001c55785820183015181830184015290820190620001a6565b83821115620001d75760008385830101525b9695505050505050565b60008060408385031215620001f557600080fd5b82516001600160401b03808211156200020d57600080fd5b6200021b868387016200012a565b935060208501519150808211156200023257600080fd5b5062000241858286016200012a565b9150509250929050565b600181811c908216806200026057607f821691505b6020821081036200028157634e487b7160e01b600052602260045260246000fd5b50919050565b611b4f80620002976000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80634f6ccce7116100c357806395d89b411161007c57806395d89b41146102ba578063a1448194146102c2578063a22cb465146102d5578063b88d4fde146102e8578063c87b56dd146102fb578063e985e9c51461030e57600080fd5b80634f6ccce71461025357806355f804b3146102665780636352211e146102795780636c0360eb1461028c57806370a08231146102945780638832e6e3146102a757600080fd5b806323b872dd1161011557806323b872dd146101e15780632f745c59146101f457806340c10f191461020757806342842e0e1461021a57806342966c681461022d5780634f558e791461024057600080fd5b806301ffc9a71461015257806306fdde031461017a578063081812fc1461018f578063095ea7b3146101ba57806318160ddd146101cf575b600080fd5b61016561016036600461156a565b61034a565b60405190151581526020015b60405180910390f35b610182610375565b60405161017191906115df565b6101a261019d3660046115f2565b610407565b6040516001600160a01b039091168152602001610171565b6101cd6101c8366004611627565b6104a1565b005b6008545b604051908152602001610171565b6101cd6101ef366004611651565b6105b6565b6101d3610202366004611627565b6105e7565b6101cd610215366004611627565b61067d565b6101cd610228366004611651565b61068b565b6101cd61023b3660046115f2565b6106a6565b61016561024e3660046115f2565b6106b2565b6101d36102613660046115f2565b6106d1565b6101cd61027436600461168d565b610764565b6101a26102873660046115f2565b610770565b6101826107e7565b6101d36102a23660046116ff565b6107f6565b6101cd6102b53660046117bd565b61087d565b610182610888565b6101cd6102d0366004611627565b610897565b6101cd6102e3366004611814565b6108a1565b6101cd6102f6366004611850565b6108ac565b6101826103093660046115f2565b6108e4565b61016561031c3660046118b8565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b0319821663780e9d6360e01b148061036f575061036f826109bf565b92915050565b606060008054610384906118eb565b80601f01602080910402602001604051908101604052809291908181526020018280546103b0906118eb565b80156103fd5780601f106103d2576101008083540402835291602001916103fd565b820191906000526020600020905b8154815290600101906020018083116103e057829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104855760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006104ac82610770565b9050806001600160a01b0316836001600160a01b0316036105195760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161047c565b336001600160a01b03821614806105355750610535813361031c565b6105a75760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161047c565b6105b18383610a0f565b505050565b6105c03382610a7d565b6105dc5760405162461bcd60e51b815260040161047c90611925565b6105b1838383610b74565b60006105f2836107f6565b82106106545760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161047c565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6106878282610d1f565b5050565b6105b1838383604051806020016040528060008152506108ac565b6106af81610e6d565b50565b6000818152600260205260408120546001600160a01b0316151561036f565b60006106dc60085490565b821061073f5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161047c565b6008828154811061075257610752611976565b90600052602060002001549050919050565b6105b1600a83836114bb565b6000818152600260205260408120546001600160a01b03168061036f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161047c565b60606107f1610f14565b905090565b60006001600160a01b0382166108615760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161047c565b506001600160a01b031660009081526003602052604090205490565b6105b1838383610f23565b606060018054610384906118eb565b6106878282610f56565b610687338383610f70565b6108b63383610a7d565b6108d25760405162461bcd60e51b815260040161047c90611925565b6108de8484848461103e565b50505050565b6000818152600260205260409020546060906001600160a01b03166109635760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161047c565b600061096d610f14565b9050600081511161098d57604051806020016040528060008152506109b8565b8061099784611071565b6040516020016109a892919061198c565b6040516020818303038152906040525b9392505050565b60006001600160e01b031982166380ac58cd60e01b14806109f057506001600160e01b03198216635b5e139f60e01b145b8061036f57506301ffc9a760e01b6001600160e01b031983161461036f565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610a4482610770565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316610af65760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161047c565b6000610b0183610770565b9050806001600160a01b0316846001600160a01b03161480610b3c5750836001600160a01b0316610b3184610407565b6001600160a01b0316145b80610b6c57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316610b8782610770565b6001600160a01b031614610bef5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161047c565b6001600160a01b038216610c515760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161047c565b610c5c838383611172565b610c67600082610a0f565b6001600160a01b0383166000908152600360205260408120805460019290610c909084906119d1565b90915550506001600160a01b0382166000908152600360205260408120805460019290610cbe9084906119e8565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216610d755760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161047c565b6000818152600260205260409020546001600160a01b031615610dda5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161047c565b610de660008383611172565b6001600160a01b0382166000908152600360205260408120805460019290610e0f9084906119e8565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000610e7882610770565b9050610e8681600084611172565b610e91600083610a0f565b6001600160a01b0381166000908152600360205260408120805460019290610eba9084906119d1565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6060600a8054610384906118eb565b610f2d8383610d1f565b610f3a600084848461122a565b6105b15760405162461bcd60e51b815260040161047c90611a00565b610687828260405180602001604052806000815250610f23565b816001600160a01b0316836001600160a01b031603610fd15760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161047c565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611049848484610b74565b6110558484848461122a565b6108de5760405162461bcd60e51b815260040161047c90611a00565b6060816000036110985750506040805180820190915260018152600360fc1b602082015290565b8160005b81156110c257806110ac81611a52565b91506110bb9050600a83611a81565b915061109c565b60008167ffffffffffffffff8111156110dd576110dd61171a565b6040519080825280601f01601f191660200182016040528015611107576020820181803683370190505b5090505b8415610b6c5761111c6001836119d1565b9150611129600a86611a95565b6111349060306119e8565b60f81b81838151811061114957611149611976565b60200101906001600160f81b031916908160001a90535061116b600a86611a81565b945061110b565b6001600160a01b0383166111cd576111c881600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6111f0565b816001600160a01b0316836001600160a01b0316146111f0576111f0838261132b565b6001600160a01b038216611207576105b1816113c8565b826001600160a01b0316826001600160a01b0316146105b1576105b18282611477565b60006001600160a01b0384163b1561132057604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061126e903390899088908890600401611aa9565b6020604051808303816000875af19250505080156112a9575060408051601f3d908101601f191682019092526112a691810190611ae6565b60015b611306573d8080156112d7576040519150601f19603f3d011682016040523d82523d6000602084013e6112dc565b606091505b5080516000036112fe5760405162461bcd60e51b815260040161047c90611a00565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610b6c565b506001949350505050565b60006001611338846107f6565b61134291906119d1565b600083815260076020526040902054909150808214611395576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906113da906001906119d1565b6000838152600960205260408120546008805493945090928490811061140257611402611976565b90600052602060002001549050806008838154811061142357611423611976565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061145b5761145b611b03565b6001900381819060005260206000200160009055905550505050565b6000611482836107f6565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b8280546114c7906118eb565b90600052602060002090601f0160209004810192826114e9576000855561152f565b82601f106115025782800160ff1982351617855561152f565b8280016001018555821561152f579182015b8281111561152f578235825591602001919060010190611514565b5061153b92915061153f565b5090565b5b8082111561153b5760008155600101611540565b6001600160e01b0319811681146106af57600080fd5b60006020828403121561157c57600080fd5b81356109b881611554565b60005b838110156115a257818101518382015260200161158a565b838111156108de5750506000910152565b600081518084526115cb816020860160208601611587565b601f01601f19169290920160200192915050565b6020815260006109b860208301846115b3565b60006020828403121561160457600080fd5b5035919050565b80356001600160a01b038116811461162257600080fd5b919050565b6000806040838503121561163a57600080fd5b6116438361160b565b946020939093013593505050565b60008060006060848603121561166657600080fd5b61166f8461160b565b925061167d6020850161160b565b9150604084013590509250925092565b600080602083850312156116a057600080fd5b823567ffffffffffffffff808211156116b857600080fd5b818501915085601f8301126116cc57600080fd5b8135818111156116db57600080fd5b8660208285010111156116ed57600080fd5b60209290920196919550909350505050565b60006020828403121561171157600080fd5b6109b88261160b565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261174157600080fd5b813567ffffffffffffffff8082111561175c5761175c61171a565b604051601f8301601f19908116603f011681019082821181831017156117845761178461171a565b8160405283815286602085880101111561179d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156117d257600080fd5b6117db8461160b565b925060208401359150604084013567ffffffffffffffff8111156117fe57600080fd5b61180a86828701611730565b9150509250925092565b6000806040838503121561182757600080fd5b6118308361160b565b91506020830135801515811461184557600080fd5b809150509250929050565b6000806000806080858703121561186657600080fd5b61186f8561160b565b935061187d6020860161160b565b925060408501359150606085013567ffffffffffffffff8111156118a057600080fd5b6118ac87828801611730565b91505092959194509250565b600080604083850312156118cb57600080fd5b6118d48361160b565b91506118e26020840161160b565b90509250929050565b600181811c908216806118ff57607f821691505b60208210810361191f57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000835161199e818460208801611587565b8351908301906119b2818360208801611587565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156119e3576119e36119bb565b500390565b600082198211156119fb576119fb6119bb565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600060018201611a6457611a646119bb565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611a9057611a90611a6b565b500490565b600082611aa457611aa4611a6b565b500690565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611adc908301846115b3565b9695505050505050565b600060208284031215611af857600080fd5b81516109b881611554565b634e487b7160e01b600052603160045260246000fdfea26469706673582212204751ee4ad4e83a24720af69223431d472e0fe9c22b072c812356cd366db1777864736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "baseURI", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "exists", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "safeMint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeMint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "setBaseURI", "stateMutability": "nonpayable", "inputs": [{"name": "newBaseTokenURI", "type": "string", "internalType": "string"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "tokenByIndex", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenOfOwnerByIndex", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenURI", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"approve(address,uint256)": {"details": "See {IERC721-approve}."}, "balanceOf(address)": {"details": "See {IERC721-balanceOf}."}, "getApproved(uint256)": {"details": "See {IERC721-getApproved}."}, "isApprovedForAll(address,address)": {"details": "See {IERC721-isApprovedForAll}."}, "name()": {"details": "See {IERC721Metadata-name}."}, "ownerOf(uint256)": {"details": "See {IERC721-ownerOf}."}, "safeTransferFrom(address,address,uint256)": {"details": "See {IERC721-safeTransferFrom}."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "See {IERC721-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC721-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "symbol()": {"details": "See {IERC721Metadata-symbol}."}, "tokenByIndex(uint256)": {"details": "See {IERC721Enumerable-tokenByIndex}."}, "tokenOfOwnerByIndex(address,uint256)": {"details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."}, "tokenURI(uint256)": {"details": "See {IERC721Metadata-tokenURI}."}, "totalSupply()": {"details": "See {IERC721Enumerable-totalSupply}."}, "transferFrom(address,address,uint256)": {"details": "See {IERC721-transferFrom}."}}, "title": "ERC721Mock This mock just provides a public safeMint, mint, and burn functions for testing purposes", "version": 1}}, "ERC721Mock": {"contractName": "ERC721Mock", "sourceId": "mocks/ERC721Mock.sol", "deploymentBytecode": {"bytecode": "0x60806040523480156200001157600080fd5b506040516200189e3803806200189e8339810160408190526200003491620001e1565b8151829082906200004d9060009060208501906200006e565b508051620000639060019060208401906200006e565b505050505062000287565b8280546200007c906200024b565b90600052602060002090601f016020900481019282620000a05760008555620000eb565b82601f10620000bb57805160ff1916838001178555620000eb565b82800160010185558215620000eb579182015b82811115620000eb578251825591602001919060010190620000ce565b50620000f9929150620000fd565b5090565b5b80821115620000f95760008155600101620000fe565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013c57600080fd5b81516001600160401b038082111562000159576200015962000114565b604051601f8301601f19908116603f0116810190828211818310171562000184576200018462000114565b81604052838152602092508683858801011115620001a157600080fd5b600091505b83821015620001c55785820183015181830184015290820190620001a6565b83821115620001d75760008385830101525b9695505050505050565b60008060408385031215620001f557600080fd5b82516001600160401b03808211156200020d57600080fd5b6200021b868387016200012a565b935060208501519150808211156200023257600080fd5b5062000241858286016200012a565b9150509250929050565b600181811c908216806200026057607f821691505b6020821081036200028157634e487b7160e01b600052602260045260246000fd5b50919050565b61160780620002976000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80636352211e116100ad578063a144819411610071578063a144819414610259578063a22cb4651461026c578063b88d4fde1461027f578063c87b56dd14610292578063e985e9c5146102a557600080fd5b80636352211e146102025780636c0360eb1461021557806370a082311461021d5780638832e6e31461023e57806395d89b411461025157600080fd5b806323b872dd116100f457806323b872dd146101a357806340c10f19146101b657806342842e0e146101c957806342966c68146101dc5780634f558e79146101ef57600080fd5b806301ffc9a71461012657806306fdde031461014e578063081812fc14610163578063095ea7b31461018e575b600080fd5b6101396101343660046110aa565b6102e1565b60405190151581526020015b60405180910390f35b610156610333565b604051610145919061111f565b610176610171366004611132565b6103c5565b6040516001600160a01b039091168152602001610145565b6101a161019c366004611167565b61045f565b005b6101a16101b1366004611191565b610574565b6101a16101c4366004611167565b6105a5565b6101a16101d7366004611191565b6105b3565b6101a16101ea366004611132565b6105ce565b6101396101fd366004611132565b6105da565b610176610210366004611132565b6105f9565b610156610670565b61023061022b3660046111cd565b61068c565b604051908152602001610145565b6101a161024c36600461128b565b610713565b61015661071e565b6101a1610267366004611167565b61072d565b6101a161027a3660046112e2565b610737565b6101a161028d36600461131e565b610742565b6101566102a0366004611132565b61077a565b6101396102b3366004611386565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061031257506001600160e01b03198216635b5e139f60e01b145b8061032d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060008054610342906113b9565b80601f016020809104026020016040519081016040528092919081815260200182805461036e906113b9565b80156103bb5780601f10610390576101008083540402835291602001916103bb565b820191906000526020600020905b81548152906001019060200180831161039e57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104435760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061046a826105f9565b9050806001600160a01b0316836001600160a01b0316036104d75760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161043a565b336001600160a01b03821614806104f357506104f381336102b3565b6105655760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161043a565b61056f8383610862565b505050565b61057e33826108d0565b61059a5760405162461bcd60e51b815260040161043a906113f3565b61056f8383836109c7565b6105af8282610b67565b5050565b61056f83838360405180602001604052806000815250610742565b6105d781610ca9565b50565b6000818152600260205260408120546001600160a01b0316151561032d565b6000818152600260205260408120546001600160a01b03168061032d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161043a565b606061068760408051602081019091526000815290565b905090565b60006001600160a01b0382166106f75760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161043a565b506001600160a01b031660009081526003602052604090205490565b61056f838383610d44565b606060018054610342906113b9565b6105af8282610d77565b6105af338383610d91565b61074c33836108d0565b6107685760405162461bcd60e51b815260040161043a906113f3565b61077484848484610e5f565b50505050565b6000818152600260205260409020546060906001600160a01b03166107f95760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161043a565b600061081060408051602081019091526000815290565b90506000815111610830576040518060200160405280600081525061085b565b8061083a84610e92565b60405160200161084b929190611444565b6040516020818303038152906040525b9392505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610897826105f9565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166109495760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161043a565b6000610954836105f9565b9050806001600160a01b0316846001600160a01b0316148061098f5750836001600160a01b0316610984846103c5565b6001600160a01b0316145b806109bf57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166109da826105f9565b6001600160a01b031614610a425760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161043a565b6001600160a01b038216610aa45760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161043a565b610aaf600082610862565b6001600160a01b0383166000908152600360205260408120805460019290610ad8908490611489565b90915550506001600160a01b0382166000908152600360205260408120805460019290610b069084906114a0565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216610bbd5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161043a565b6000818152600260205260409020546001600160a01b031615610c225760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161043a565b6001600160a01b0382166000908152600360205260408120805460019290610c4b9084906114a0565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000610cb4826105f9565b9050610cc1600083610862565b6001600160a01b0381166000908152600360205260408120805460019290610cea908490611489565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b610d4e8383610b67565b610d5b6000848484610f93565b61056f5760405162461bcd60e51b815260040161043a906114b8565b6105af828260405180602001604052806000815250610d44565b816001600160a01b0316836001600160a01b031603610df25760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161043a565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610e6a8484846109c7565b610e7684848484610f93565b6107745760405162461bcd60e51b815260040161043a906114b8565b606081600003610eb95750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610ee35780610ecd8161150a565b9150610edc9050600a83611539565b9150610ebd565b60008167ffffffffffffffff811115610efe57610efe6111e8565b6040519080825280601f01601f191660200182016040528015610f28576020820181803683370190505b5090505b84156109bf57610f3d600183611489565b9150610f4a600a8661154d565b610f559060306114a0565b60f81b818381518110610f6a57610f6a611561565b60200101906001600160f81b031916908160001a905350610f8c600a86611539565b9450610f2c565b60006001600160a01b0384163b1561108957604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610fd7903390899088908890600401611577565b6020604051808303816000875af1925050508015611012575060408051601f3d908101601f1916820190925261100f918101906115b4565b60015b61106f573d808015611040576040519150601f19603f3d011682016040523d82523d6000602084013e611045565b606091505b5080516000036110675760405162461bcd60e51b815260040161043a906114b8565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506109bf565b506001949350505050565b6001600160e01b0319811681146105d757600080fd5b6000602082840312156110bc57600080fd5b813561085b81611094565b60005b838110156110e25781810151838201526020016110ca565b838111156107745750506000910152565b6000815180845261110b8160208601602086016110c7565b601f01601f19169290920160200192915050565b60208152600061085b60208301846110f3565b60006020828403121561114457600080fd5b5035919050565b80356001600160a01b038116811461116257600080fd5b919050565b6000806040838503121561117a57600080fd5b6111838361114b565b946020939093013593505050565b6000806000606084860312156111a657600080fd5b6111af8461114b565b92506111bd6020850161114b565b9150604084013590509250925092565b6000602082840312156111df57600080fd5b61085b8261114b565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261120f57600080fd5b813567ffffffffffffffff8082111561122a5761122a6111e8565b604051601f8301601f19908116603f01168101908282118183101715611252576112526111e8565b8160405283815286602085880101111561126b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156112a057600080fd5b6112a98461114b565b925060208401359150604084013567ffffffffffffffff8111156112cc57600080fd5b6112d8868287016111fe565b9150509250925092565b600080604083850312156112f557600080fd5b6112fe8361114b565b91506020830135801515811461131357600080fd5b809150509250929050565b6000806000806080858703121561133457600080fd5b61133d8561114b565b935061134b6020860161114b565b925060408501359150606085013567ffffffffffffffff81111561136e57600080fd5b61137a878288016111fe565b91505092959194509250565b6000806040838503121561139957600080fd5b6113a28361114b565b91506113b06020840161114b565b90509250929050565b600181811c908216806113cd57607f821691505b6020821081036113ed57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600083516114568184602088016110c7565b83519083019061146a8183602088016110c7565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561149b5761149b611473565b500390565b600082198211156114b3576114b3611473565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60006001820161151c5761151c611473565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261154857611548611523565b500490565b60008261155c5761155c611523565b500690565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906115aa908301846110f3565b9695505050505050565b6000602082840312156115c657600080fd5b815161085b8161109456fea26469706673582212205bb14e1c54f8d419d65dbee8059b88bdbdeccfe7c22b3b6b0f7b427cc6c302dc64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80636352211e116100ad578063a144819411610071578063a144819414610259578063a22cb4651461026c578063b88d4fde1461027f578063c87b56dd14610292578063e985e9c5146102a557600080fd5b80636352211e146102025780636c0360eb1461021557806370a082311461021d5780638832e6e31461023e57806395d89b411461025157600080fd5b806323b872dd116100f457806323b872dd146101a357806340c10f19146101b657806342842e0e146101c957806342966c68146101dc5780634f558e79146101ef57600080fd5b806301ffc9a71461012657806306fdde031461014e578063081812fc14610163578063095ea7b31461018e575b600080fd5b6101396101343660046110aa565b6102e1565b60405190151581526020015b60405180910390f35b610156610333565b604051610145919061111f565b610176610171366004611132565b6103c5565b6040516001600160a01b039091168152602001610145565b6101a161019c366004611167565b61045f565b005b6101a16101b1366004611191565b610574565b6101a16101c4366004611167565b6105a5565b6101a16101d7366004611191565b6105b3565b6101a16101ea366004611132565b6105ce565b6101396101fd366004611132565b6105da565b610176610210366004611132565b6105f9565b610156610670565b61023061022b3660046111cd565b61068c565b604051908152602001610145565b6101a161024c36600461128b565b610713565b61015661071e565b6101a1610267366004611167565b61072d565b6101a161027a3660046112e2565b610737565b6101a161028d36600461131e565b610742565b6101566102a0366004611132565b61077a565b6101396102b3366004611386565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061031257506001600160e01b03198216635b5e139f60e01b145b8061032d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060008054610342906113b9565b80601f016020809104026020016040519081016040528092919081815260200182805461036e906113b9565b80156103bb5780601f10610390576101008083540402835291602001916103bb565b820191906000526020600020905b81548152906001019060200180831161039e57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104435760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061046a826105f9565b9050806001600160a01b0316836001600160a01b0316036104d75760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161043a565b336001600160a01b03821614806104f357506104f381336102b3565b6105655760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161043a565b61056f8383610862565b505050565b61057e33826108d0565b61059a5760405162461bcd60e51b815260040161043a906113f3565b61056f8383836109c7565b6105af8282610b67565b5050565b61056f83838360405180602001604052806000815250610742565b6105d781610ca9565b50565b6000818152600260205260408120546001600160a01b0316151561032d565b6000818152600260205260408120546001600160a01b03168061032d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161043a565b606061068760408051602081019091526000815290565b905090565b60006001600160a01b0382166106f75760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161043a565b506001600160a01b031660009081526003602052604090205490565b61056f838383610d44565b606060018054610342906113b9565b6105af8282610d77565b6105af338383610d91565b61074c33836108d0565b6107685760405162461bcd60e51b815260040161043a906113f3565b61077484848484610e5f565b50505050565b6000818152600260205260409020546060906001600160a01b03166107f95760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161043a565b600061081060408051602081019091526000815290565b90506000815111610830576040518060200160405280600081525061085b565b8061083a84610e92565b60405160200161084b929190611444565b6040516020818303038152906040525b9392505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610897826105f9565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166109495760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161043a565b6000610954836105f9565b9050806001600160a01b0316846001600160a01b0316148061098f5750836001600160a01b0316610984846103c5565b6001600160a01b0316145b806109bf57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166109da826105f9565b6001600160a01b031614610a425760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161043a565b6001600160a01b038216610aa45760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161043a565b610aaf600082610862565b6001600160a01b0383166000908152600360205260408120805460019290610ad8908490611489565b90915550506001600160a01b0382166000908152600360205260408120805460019290610b069084906114a0565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216610bbd5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161043a565b6000818152600260205260409020546001600160a01b031615610c225760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161043a565b6001600160a01b0382166000908152600360205260408120805460019290610c4b9084906114a0565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000610cb4826105f9565b9050610cc1600083610862565b6001600160a01b0381166000908152600360205260408120805460019290610cea908490611489565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b610d4e8383610b67565b610d5b6000848484610f93565b61056f5760405162461bcd60e51b815260040161043a906114b8565b6105af828260405180602001604052806000815250610d44565b816001600160a01b0316836001600160a01b031603610df25760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161043a565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610e6a8484846109c7565b610e7684848484610f93565b6107745760405162461bcd60e51b815260040161043a906114b8565b606081600003610eb95750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610ee35780610ecd8161150a565b9150610edc9050600a83611539565b9150610ebd565b60008167ffffffffffffffff811115610efe57610efe6111e8565b6040519080825280601f01601f191660200182016040528015610f28576020820181803683370190505b5090505b84156109bf57610f3d600183611489565b9150610f4a600a8661154d565b610f559060306114a0565b60f81b818381518110610f6a57610f6a611561565b60200101906001600160f81b031916908160001a905350610f8c600a86611539565b9450610f2c565b60006001600160a01b0384163b1561108957604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610fd7903390899088908890600401611577565b6020604051808303816000875af1925050508015611012575060408051601f3d908101601f1916820190925261100f918101906115b4565b60015b61106f573d808015611040576040519150601f19603f3d011682016040523d82523d6000602084013e611045565b606091505b5080516000036110675760405162461bcd60e51b815260040161043a906114b8565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506109bf565b506001949350505050565b6001600160e01b0319811681146105d757600080fd5b6000602082840312156110bc57600080fd5b813561085b81611094565b60005b838110156110e25781810151838201526020016110ca565b838111156107745750506000910152565b6000815180845261110b8160208601602086016110c7565b601f01601f19169290920160200192915050565b60208152600061085b60208301846110f3565b60006020828403121561114457600080fd5b5035919050565b80356001600160a01b038116811461116257600080fd5b919050565b6000806040838503121561117a57600080fd5b6111838361114b565b946020939093013593505050565b6000806000606084860312156111a657600080fd5b6111af8461114b565b92506111bd6020850161114b565b9150604084013590509250925092565b6000602082840312156111df57600080fd5b61085b8261114b565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261120f57600080fd5b813567ffffffffffffffff8082111561122a5761122a6111e8565b604051601f8301601f19908116603f01168101908282118183101715611252576112526111e8565b8160405283815286602085880101111561126b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156112a057600080fd5b6112a98461114b565b925060208401359150604084013567ffffffffffffffff8111156112cc57600080fd5b6112d8868287016111fe565b9150509250925092565b600080604083850312156112f557600080fd5b6112fe8361114b565b91506020830135801515811461131357600080fd5b809150509250929050565b6000806000806080858703121561133457600080fd5b61133d8561114b565b935061134b6020860161114b565b925060408501359150606085013567ffffffffffffffff81111561136e57600080fd5b61137a878288016111fe565b91505092959194509250565b6000806040838503121561139957600080fd5b6113a28361114b565b91506113b06020840161114b565b90509250929050565b600181811c908216806113cd57607f821691505b6020821081036113ed57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600083516114568184602088016110c7565b83519083019061146a8183602088016110c7565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561149b5761149b611473565b500390565b600082198211156114b3576114b3611473565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60006001820161151c5761151c611473565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261154857611548611523565b500490565b60008261155c5761155c611523565b500690565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906115aa908301846110f3565b9695505050505050565b6000602082840312156115c657600080fd5b815161085b8161109456fea26469706673582212205bb14e1c54f8d419d65dbee8059b88bdbdeccfe7c22b3b6b0f7b427cc6c302dc64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "baseURI", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "exists", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "safeMint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeMint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "tokenURI", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"approve(address,uint256)": {"details": "See {IERC721-approve}."}, "balanceOf(address)": {"details": "See {IERC721-balanceOf}."}, "getApproved(uint256)": {"details": "See {IERC721-getApproved}."}, "isApprovedForAll(address,address)": {"details": "See {IERC721-isApprovedForAll}."}, "name()": {"details": "See {IERC721Metadata-name}."}, "ownerOf(uint256)": {"details": "See {IERC721-ownerOf}."}, "safeTransferFrom(address,address,uint256)": {"details": "See {IERC721-safeTransferFrom}."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "See {IERC721-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC721-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "symbol()": {"details": "See {IERC721Metadata-symbol}."}, "tokenURI(uint256)": {"details": "See {IERC721Metadata-tokenURI}."}, "transferFrom(address,address,uint256)": {"details": "See {IERC721-transferFrom}."}}, "title": "ERC721Mock This mock just provides a public safeMint, mint, and burn functions for testing purposes", "version": 1}}, "ERC721PausableMock": {"contractName": "ERC721PausableMock", "sourceId": "mocks/ERC721PausableMock.sol", "deploymentBytecode": {"bytecode": "0x60806040523480156200001157600080fd5b5060405162001a6038038062001a608339810160408190526200003491620001ec565b8151829082906200004d90600090602085019062000079565b5080516200006390600190602084019062000079565b50506006805460ff191690555062000292915050565b828054620000879062000256565b90600052602060002090601f016020900481019282620000ab5760008555620000f6565b82601f10620000c657805160ff1916838001178555620000f6565b82800160010185558215620000f6579182015b82811115620000f6578251825591602001919060010190620000d9565b506200010492915062000108565b5090565b5b8082111562000104576000815560010162000109565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200014757600080fd5b81516001600160401b03808211156200016457620001646200011f565b604051601f8301601f19908116603f011681019082821181831017156200018f576200018f6200011f565b81604052838152602092508683858801011115620001ac57600080fd5b600091505b83821015620001d05785820183015181830184015290820190620001b1565b83821115620001e25760008385830101525b9695505050505050565b600080604083850312156200020057600080fd5b82516001600160401b03808211156200021857600080fd5b620002268683870162000135565b935060208501519150808211156200023d57600080fd5b506200024c8582860162000135565b9150509250929050565b600181811c908216806200026b57607f821691505b6020821081036200028c57634e487b7160e01b600052602260045260246000fd5b50919050565b6117be80620002a26000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80635c975abb116100b857806395d89b411161007c57806395d89b411461027a578063a144819414610282578063a22cb46514610295578063b88d4fde146102a8578063c87b56dd146102bb578063e985e9c5146102ce57600080fd5b80635c975abb146102205780636352211e1461022b57806370a082311461023e5780638456cb591461025f5780638832e6e31461026757600080fd5b80633f4ba83a116100ff5780633f4ba83a146101cc57806340c10f19146101d457806342842e0e146101e757806342966c68146101fa5780634f558e791461020d57600080fd5b806301ffc9a71461013c57806306fdde0314610164578063081812fc14610179578063095ea7b3146101a457806323b872dd146101b9575b600080fd5b61014f61014a366004611261565b61030a565b60405190151581526020015b60405180910390f35b61016c61035c565b60405161015b91906112d6565b61018c6101873660046112e9565b6103ee565b6040516001600160a01b03909116815260200161015b565b6101b76101b236600461131e565b610488565b005b6101b76101c7366004611348565b61059d565b6101b76105ce565b6101b76101e236600461131e565b6105d8565b6101b76101f5366004611348565b6105e6565b6101b76102083660046112e9565b610601565b61014f61021b3660046112e9565b61060d565b60065460ff1661014f565b61018c6102393660046112e9565b61062c565b61025161024c366004611384565b6106a3565b60405190815260200161015b565b6101b761072a565b6101b7610275366004611442565b610732565b61016c61073d565b6101b761029036600461131e565b61074c565b6101b76102a3366004611499565b610756565b6101b76102b63660046114d5565b610761565b61016c6102c93660046112e9565b610799565b61014f6102dc36600461153d565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061033b57506001600160e01b03198216635b5e139f60e01b145b8061035657506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461036b90611570565b80601f016020809104026020016040519081016040528092919081815260200182805461039790611570565b80156103e45780601f106103b9576101008083540402835291602001916103e4565b820191906000526020600020905b8154815290600101906020018083116103c757829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661046c5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006104938261062c565b9050806001600160a01b0316836001600160a01b0316036105005760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610463565b336001600160a01b038216148061051c575061051c81336102dc565b61058e5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610463565b6105988383610881565b505050565b6105a733826108ef565b6105c35760405162461bcd60e51b8152600401610463906115aa565b6105988383836109e6565b6105d6610b91565b565b6105e28282610c24565b5050565b61059883838360405180602001604052806000815250610761565b61060a81610d72565b50565b6000818152600260205260408120546001600160a01b03161515610356565b6000818152600260205260408120546001600160a01b0316806103565760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610463565b60006001600160a01b03821661070e5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610463565b506001600160a01b031660009081526003602052604090205490565b6105d6610e19565b610598838383610e94565b60606001805461036b90611570565b6105e28282610ec7565b6105e2338383610ee1565b61076b33836108ef565b6107875760405162461bcd60e51b8152600401610463906115aa565b61079384848484610faf565b50505050565b6000818152600260205260409020546060906001600160a01b03166108185760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610463565b600061082f60408051602081019091526000815290565b9050600081511161084f576040518060200160405280600081525061087a565b8061085984610fe2565b60405160200161086a9291906115fb565b6040516020818303038152906040525b9392505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906108b68261062c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166109685760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610463565b60006109738361062c565b9050806001600160a01b0316846001600160a01b031614806109ae5750836001600160a01b03166109a3846103ee565b6001600160a01b0316145b806109de57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166109f98261062c565b6001600160a01b031614610a615760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610463565b6001600160a01b038216610ac35760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610463565b610ace8383836110e3565b610ad9600082610881565b6001600160a01b0383166000908152600360205260408120805460019290610b02908490611640565b90915550506001600160a01b0382166000908152600360205260408120805460019290610b30908490611657565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60065460ff16610bda5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610463565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038216610c7a5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610463565b6000818152600260205260409020546001600160a01b031615610cdf5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610463565b610ceb600083836110e3565b6001600160a01b0382166000908152600360205260408120805460019290610d14908490611657565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000610d7d8261062c565b9050610d8b816000846110e3565b610d96600083610881565b6001600160a01b0381166000908152600360205260408120805460019290610dbf908490611640565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60065460ff1615610e5f5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610463565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610c073390565b610e9e8383610c24565b610eab600084848461114a565b6105985760405162461bcd60e51b81526004016104639061166f565b6105e2828260405180602001604052806000815250610e94565b816001600160a01b0316836001600160a01b031603610f425760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610463565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610fba8484846109e6565b610fc68484848461114a565b6107935760405162461bcd60e51b81526004016104639061166f565b6060816000036110095750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611033578061101d816116c1565b915061102c9050600a836116f0565b915061100d565b60008167ffffffffffffffff81111561104e5761104e61139f565b6040519080825280601f01601f191660200182016040528015611078576020820181803683370190505b5090505b84156109de5761108d600183611640565b915061109a600a86611704565b6110a5906030611657565b60f81b8183815181106110ba576110ba611718565b60200101906001600160f81b031916908160001a9053506110dc600a866116f0565b945061107c565b60065460ff16156105985760405162461bcd60e51b815260206004820152602b60248201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760448201526a1a1a5b19481c185d5cd95960aa1b6064820152608401610463565b60006001600160a01b0384163b1561124057604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061118e90339089908890889060040161172e565b6020604051808303816000875af19250505080156111c9575060408051601f3d908101601f191682019092526111c69181019061176b565b60015b611226573d8080156111f7576040519150601f19603f3d011682016040523d82523d6000602084013e6111fc565b606091505b50805160000361121e5760405162461bcd60e51b81526004016104639061166f565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506109de565b506001949350505050565b6001600160e01b03198116811461060a57600080fd5b60006020828403121561127357600080fd5b813561087a8161124b565b60005b83811015611299578181015183820152602001611281565b838111156107935750506000910152565b600081518084526112c281602086016020860161127e565b601f01601f19169290920160200192915050565b60208152600061087a60208301846112aa565b6000602082840312156112fb57600080fd5b5035919050565b80356001600160a01b038116811461131957600080fd5b919050565b6000806040838503121561133157600080fd5b61133a83611302565b946020939093013593505050565b60008060006060848603121561135d57600080fd5b61136684611302565b925061137460208501611302565b9150604084013590509250925092565b60006020828403121561139657600080fd5b61087a82611302565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126113c657600080fd5b813567ffffffffffffffff808211156113e1576113e161139f565b604051601f8301601f19908116603f011681019082821181831017156114095761140961139f565b8160405283815286602085880101111561142257600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561145757600080fd5b61146084611302565b925060208401359150604084013567ffffffffffffffff81111561148357600080fd5b61148f868287016113b5565b9150509250925092565b600080604083850312156114ac57600080fd5b6114b583611302565b9150602083013580151581146114ca57600080fd5b809150509250929050565b600080600080608085870312156114eb57600080fd5b6114f485611302565b935061150260208601611302565b925060408501359150606085013567ffffffffffffffff81111561152557600080fd5b611531878288016113b5565b91505092959194509250565b6000806040838503121561155057600080fd5b61155983611302565b915061156760208401611302565b90509250929050565b600181811c9082168061158457607f821691505b6020821081036115a457634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000835161160d81846020880161127e565b83519083019061162181836020880161127e565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156116525761165261162a565b500390565b6000821982111561166a5761166a61162a565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000600182016116d3576116d361162a565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826116ff576116ff6116da565b500490565b600082611713576117136116da565b500690565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611761908301846112aa565b9695505050505050565b60006020828403121561177d57600080fd5b815161087a8161124b56fea26469706673582212203a86839039205906fbb7c6252e08c6eae4eb9c80321a5a4ad4a87a842b01e1fc64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80635c975abb116100b857806395d89b411161007c57806395d89b411461027a578063a144819414610282578063a22cb46514610295578063b88d4fde146102a8578063c87b56dd146102bb578063e985e9c5146102ce57600080fd5b80635c975abb146102205780636352211e1461022b57806370a082311461023e5780638456cb591461025f5780638832e6e31461026757600080fd5b80633f4ba83a116100ff5780633f4ba83a146101cc57806340c10f19146101d457806342842e0e146101e757806342966c68146101fa5780634f558e791461020d57600080fd5b806301ffc9a71461013c57806306fdde0314610164578063081812fc14610179578063095ea7b3146101a457806323b872dd146101b9575b600080fd5b61014f61014a366004611261565b61030a565b60405190151581526020015b60405180910390f35b61016c61035c565b60405161015b91906112d6565b61018c6101873660046112e9565b6103ee565b6040516001600160a01b03909116815260200161015b565b6101b76101b236600461131e565b610488565b005b6101b76101c7366004611348565b61059d565b6101b76105ce565b6101b76101e236600461131e565b6105d8565b6101b76101f5366004611348565b6105e6565b6101b76102083660046112e9565b610601565b61014f61021b3660046112e9565b61060d565b60065460ff1661014f565b61018c6102393660046112e9565b61062c565b61025161024c366004611384565b6106a3565b60405190815260200161015b565b6101b761072a565b6101b7610275366004611442565b610732565b61016c61073d565b6101b761029036600461131e565b61074c565b6101b76102a3366004611499565b610756565b6101b76102b63660046114d5565b610761565b61016c6102c93660046112e9565b610799565b61014f6102dc36600461153d565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061033b57506001600160e01b03198216635b5e139f60e01b145b8061035657506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461036b90611570565b80601f016020809104026020016040519081016040528092919081815260200182805461039790611570565b80156103e45780601f106103b9576101008083540402835291602001916103e4565b820191906000526020600020905b8154815290600101906020018083116103c757829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661046c5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006104938261062c565b9050806001600160a01b0316836001600160a01b0316036105005760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610463565b336001600160a01b038216148061051c575061051c81336102dc565b61058e5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610463565b6105988383610881565b505050565b6105a733826108ef565b6105c35760405162461bcd60e51b8152600401610463906115aa565b6105988383836109e6565b6105d6610b91565b565b6105e28282610c24565b5050565b61059883838360405180602001604052806000815250610761565b61060a81610d72565b50565b6000818152600260205260408120546001600160a01b03161515610356565b6000818152600260205260408120546001600160a01b0316806103565760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610463565b60006001600160a01b03821661070e5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610463565b506001600160a01b031660009081526003602052604090205490565b6105d6610e19565b610598838383610e94565b60606001805461036b90611570565b6105e28282610ec7565b6105e2338383610ee1565b61076b33836108ef565b6107875760405162461bcd60e51b8152600401610463906115aa565b61079384848484610faf565b50505050565b6000818152600260205260409020546060906001600160a01b03166108185760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610463565b600061082f60408051602081019091526000815290565b9050600081511161084f576040518060200160405280600081525061087a565b8061085984610fe2565b60405160200161086a9291906115fb565b6040516020818303038152906040525b9392505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906108b68261062c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166109685760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610463565b60006109738361062c565b9050806001600160a01b0316846001600160a01b031614806109ae5750836001600160a01b03166109a3846103ee565b6001600160a01b0316145b806109de57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166109f98261062c565b6001600160a01b031614610a615760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610463565b6001600160a01b038216610ac35760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610463565b610ace8383836110e3565b610ad9600082610881565b6001600160a01b0383166000908152600360205260408120805460019290610b02908490611640565b90915550506001600160a01b0382166000908152600360205260408120805460019290610b30908490611657565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60065460ff16610bda5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610463565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038216610c7a5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610463565b6000818152600260205260409020546001600160a01b031615610cdf5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610463565b610ceb600083836110e3565b6001600160a01b0382166000908152600360205260408120805460019290610d14908490611657565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000610d7d8261062c565b9050610d8b816000846110e3565b610d96600083610881565b6001600160a01b0381166000908152600360205260408120805460019290610dbf908490611640565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60065460ff1615610e5f5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610463565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610c073390565b610e9e8383610c24565b610eab600084848461114a565b6105985760405162461bcd60e51b81526004016104639061166f565b6105e2828260405180602001604052806000815250610e94565b816001600160a01b0316836001600160a01b031603610f425760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610463565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610fba8484846109e6565b610fc68484848461114a565b6107935760405162461bcd60e51b81526004016104639061166f565b6060816000036110095750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611033578061101d816116c1565b915061102c9050600a836116f0565b915061100d565b60008167ffffffffffffffff81111561104e5761104e61139f565b6040519080825280601f01601f191660200182016040528015611078576020820181803683370190505b5090505b84156109de5761108d600183611640565b915061109a600a86611704565b6110a5906030611657565b60f81b8183815181106110ba576110ba611718565b60200101906001600160f81b031916908160001a9053506110dc600a866116f0565b945061107c565b60065460ff16156105985760405162461bcd60e51b815260206004820152602b60248201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760448201526a1a1a5b19481c185d5cd95960aa1b6064820152608401610463565b60006001600160a01b0384163b1561124057604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061118e90339089908890889060040161172e565b6020604051808303816000875af19250505080156111c9575060408051601f3d908101601f191682019092526111c69181019061176b565b60015b611226573d8080156111f7576040519150601f19603f3d011682016040523d82523d6000602084013e6111fc565b606091505b50805160000361121e5760405162461bcd60e51b81526004016104639061166f565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506109de565b506001949350505050565b6001600160e01b03198116811461060a57600080fd5b60006020828403121561127357600080fd5b813561087a8161124b565b60005b83811015611299578181015183820152602001611281565b838111156107935750506000910152565b600081518084526112c281602086016020860161127e565b601f01601f19169290920160200192915050565b60208152600061087a60208301846112aa565b6000602082840312156112fb57600080fd5b5035919050565b80356001600160a01b038116811461131957600080fd5b919050565b6000806040838503121561133157600080fd5b61133a83611302565b946020939093013593505050565b60008060006060848603121561135d57600080fd5b61136684611302565b925061137460208501611302565b9150604084013590509250925092565b60006020828403121561139657600080fd5b61087a82611302565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126113c657600080fd5b813567ffffffffffffffff808211156113e1576113e161139f565b604051601f8301601f19908116603f011681019082821181831017156114095761140961139f565b8160405283815286602085880101111561142257600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561145757600080fd5b61146084611302565b925060208401359150604084013567ffffffffffffffff81111561148357600080fd5b61148f868287016113b5565b9150509250925092565b600080604083850312156114ac57600080fd5b6114b583611302565b9150602083013580151581146114ca57600080fd5b809150509250929050565b600080600080608085870312156114eb57600080fd5b6114f485611302565b935061150260208601611302565b925060408501359150606085013567ffffffffffffffff81111561152557600080fd5b611531878288016113b5565b91505092959194509250565b6000806040838503121561155057600080fd5b61155983611302565b915061156760208401611302565b90509250929050565b600181811c9082168061158457607f821691505b6020821081036115a457634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000835161160d81846020880161127e565b83519083019061162181836020880161127e565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156116525761165261162a565b500390565b6000821982111561166a5761166a61162a565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000600182016116d3576116d361162a565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826116ff576116ff6116da565b500490565b600082611713576117136116da565b500690565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611761908301846112aa565b9695505050505050565b60006020828403121561177d57600080fd5b815161087a8161124b56fea26469706673582212203a86839039205906fbb7c6252e08c6eae4eb9c80321a5a4ad4a87a842b01e1fc64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Paused", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Unpaused", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "exists", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "pause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "paused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "safeMint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeMint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "tokenURI", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "unpause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"approve(address,uint256)": {"details": "See {IERC721-approve}."}, "balanceOf(address)": {"details": "See {IERC721-balanceOf}."}, "getApproved(uint256)": {"details": "See {IERC721-getApproved}."}, "isApprovedForAll(address,address)": {"details": "See {IERC721-isApprovedForAll}."}, "name()": {"details": "See {IERC721Metadata-name}."}, "ownerOf(uint256)": {"details": "See {IERC721-ownerOf}."}, "paused()": {"details": "Returns true if the contract is paused, and false otherwise."}, "safeTransferFrom(address,address,uint256)": {"details": "See {IERC721-safeTransferFrom}."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "See {IERC721-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC721-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "symbol()": {"details": "See {IERC721Metadata-symbol}."}, "tokenURI(uint256)": {"details": "See {IERC721Metadata-tokenURI}."}, "transferFrom(address,address,uint256)": {"details": "See {IERC721-transferFrom}."}}, "title": "ERC721PausableMock This mock just provides a public mint, burn and exists functions for testing purposes", "version": 1}}, "ERC721ReceiverMock": {"contractName": "ERC721ReceiverMock", "sourceId": "mocks/ERC721ReceiverMock.sol", "deploymentBytecode": {"bytecode": "0x60c060405234801561001057600080fd5b506040516104d23803806104d283398101604081905261002f9161006e565b6001600160e01b0319821660805280600381111561004f5761004f6100b9565b60a0816003811115610063576100636100b9565b8152505050506100cf565b6000806040838503121561008157600080fd5b82516001600160e01b03198116811461009957600080fd5b6020840151909250600481106100ae57600080fd5b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b60805160a0516103d26101006000396000818160660152818160eb0152610129015260006101af01526103d26000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b61004361003e366004610208565b610060565b6040516001600160e01b0319909116815260200160405180910390f35b600060017f00000000000000000000000000000000000000000000000000000000000000006003811115610096576100966102e4565b036100e75760405162461bcd60e51b815260206004820152601d60248201527f45524337323152656365697665724d6f636b3a20726576657274696e67000000604482015260640160405180910390fd5b60027f0000000000000000000000000000000000000000000000000000000000000000600381111561011b5761011b6102e4565b0361012557600080fd5b60037f00000000000000000000000000000000000000000000000000000000000000006003811115610159576101596102e4565b0361016d57600061016a81806102fa565b50505b7f28fa6e16458f9c24aa59ddd4085264573006dbe30304837873c7deafc702b038858585855a6040516101a495949392919061031c565b60405180910390a1507f0000000000000000000000000000000000000000000000000000000000000000949350505050565b80356001600160a01b03811681146101ed57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561021e57600080fd5b610227856101d6565b9350610235602086016101d6565b925060408501359150606085013567ffffffffffffffff8082111561025957600080fd5b818701915087601f83011261026d57600080fd5b81358181111561027f5761027f6101f2565b604051601f8201601f19908116603f011681019083821181831017156102a7576102a76101f2565b816040528281528a60208487010111156102c057600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b634e487b7160e01b600052602160045260246000fd5b60008261031757634e487b7160e01b600052601260045260246000fd5b500490565b600060018060a01b03808816835260208188168185015286604085015260a06060850152855191508160a085015260005b828110156103695786810182015185820160c00152810161034d565b8281111561037b57600060c084870101525b5050608083019390935250601f91909101601f19160160c00194935050505056fea264697066735822122071c5b65e38bc6ec57567cb93f42ce0b9bbce7049ab673062b65607cf45a4569364736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b61004361003e366004610208565b610060565b6040516001600160e01b0319909116815260200160405180910390f35b600060017f00000000000000000000000000000000000000000000000000000000000000006003811115610096576100966102e4565b036100e75760405162461bcd60e51b815260206004820152601d60248201527f45524337323152656365697665724d6f636b3a20726576657274696e67000000604482015260640160405180910390fd5b60027f0000000000000000000000000000000000000000000000000000000000000000600381111561011b5761011b6102e4565b0361012557600080fd5b60037f00000000000000000000000000000000000000000000000000000000000000006003811115610159576101596102e4565b0361016d57600061016a81806102fa565b50505b7f28fa6e16458f9c24aa59ddd4085264573006dbe30304837873c7deafc702b038858585855a6040516101a495949392919061031c565b60405180910390a1507f0000000000000000000000000000000000000000000000000000000000000000949350505050565b80356001600160a01b03811681146101ed57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561021e57600080fd5b610227856101d6565b9350610235602086016101d6565b925060408501359150606085013567ffffffffffffffff8082111561025957600080fd5b818701915087601f83011261026d57600080fd5b81358181111561027f5761027f6101f2565b604051601f8201601f19908116603f011681019083821181831017156102a7576102a76101f2565b816040528281528a60208487010111156102c057600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b634e487b7160e01b600052602160045260246000fd5b60008261031757634e487b7160e01b600052601260045260246000fd5b500490565b600060018060a01b03808816835260208188168185015286604085015260a06060850152855191508160a085015260005b828110156103695786810182015185820160c00152810161034d565b8281111561037b57600060c084870101525b5050608083019390935250601f91909101601f19160160c00194935050505056fea264697066735822122071c5b65e38bc6ec57567cb93f42ce0b9bbce7049ab673062b65607cf45a4569364736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "retval", "type": "bytes4", "internalType": "bytes4"}, {"name": "error", "type": "uint8", "internalType": "enum ERC721ReceiverMock.Error"}]}, {"type": "event", "name": "Received", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": false}, {"name": "from", "type": "address", "internalType": "address", "indexed": false}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "gas", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "onERC721Received", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"onERC721Received(address,address,uint256,bytes)": {"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`."}}, "version": 1}}, "ERC721URIStorageMock": {"contractName": "ERC721URIStorageMock", "sourceId": "mocks/ERC721URIStorageMock.sol", "deploymentBytecode": {"bytecode": "0x60806040523480156200001157600080fd5b5060405162001cfe38038062001cfe8339810160408190526200003491620001e1565b8151829082906200004d9060009060208501906200006e565b508051620000639060019060208401906200006e565b505050505062000287565b8280546200007c906200024b565b90600052602060002090601f016020900481019282620000a05760008555620000eb565b82601f10620000bb57805160ff1916838001178555620000eb565b82800160010185558215620000eb579182015b82811115620000eb578251825591602001919060010190620000ce565b50620000f9929150620000fd565b5090565b5b80821115620000f95760008155600101620000fe565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013c57600080fd5b81516001600160401b038082111562000159576200015962000114565b604051601f8301601f19908116603f0116810190828211818310171562000184576200018462000114565b81604052838152602092508683858801011115620001a157600080fd5b600091505b83821015620001c55785820183015181830184015290820190620001a6565b83821115620001d75760008385830101525b9695505050505050565b60008060408385031215620001f557600080fd5b82516001600160401b03808211156200020d57600080fd5b6200021b868387016200012a565b935060208501519150808211156200023257600080fd5b5062000241858286016200012a565b9150509250929050565b600181811c908216806200026057607f821691505b6020821081036200028157634e487b7160e01b600052602260045260246000fd5b50919050565b611a6780620002976000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806355f804b3116100b857806395d89b411161007c57806395d89b411461028d578063a144819414610295578063a22cb465146102a8578063b88d4fde146102bb578063c87b56dd146102ce578063e985e9c5146102e157600080fd5b806355f804b31461022b5780636352211e1461023e5780636c0360eb1461025157806370a08231146102595780638832e6e31461027a57600080fd5b806323b872dd116100ff57806323b872dd146101cc57806340c10f19146101df57806342842e0e146101f257806342966c68146102055780634f558e791461021857600080fd5b806301ffc9a71461013c57806306fdde0314610164578063081812fc14610179578063095ea7b3146101a4578063162094c4146101b9575b600080fd5b61014f61014a366004611434565b61031d565b60405190151581526020015b60405180910390f35b61016c61036f565b60405161015b91906114a9565b61018c6101873660046114bc565b610401565b6040516001600160a01b03909116815260200161015b565b6101b76101b23660046114f1565b61048e565b005b6101b76101c73660046115a7565b6105a3565b6101b76101da366004611602565b6105b1565b6101b76101ed3660046114f1565b6105e2565b6101b7610200366004611602565b6105ec565b6101b76102133660046114bc565b610607565b61014f6102263660046114bc565b610613565b6101b761023936600461163e565b61061e565b61018c61024c3660046114bc565b61062a565b61016c6106a1565b61026c6102673660046116b0565b6106b0565b60405190815260200161015b565b6101b76102883660046116eb565b610737565b61016c610742565b6101b76102a33660046114f1565b610751565b6101b76102b6366004611742565b61075b565b6101b76102c936600461177e565b610766565b61016c6102dc3660046114bc565b61079e565b61014f6102ef3660046117e6565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061034e57506001600160e01b03198216635b5e139f60e01b145b8061036957506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461037e90611819565b80601f01602080910402602001604051908101604052809291908181526020018280546103aa90611819565b80156103f75780601f106103cc576101008083540402835291602001916103f7565b820191906000526020600020905b8154815290600101906020018083116103da57829003601f168201915b5050505050905090565b600061040c82610907565b6104725760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006104998261062a565b9050806001600160a01b0316836001600160a01b0316036105065760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610469565b336001600160a01b0382161480610522575061052281336102ef565b6105945760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610469565b61059e8383610924565b505050565b6105ad8282610992565b5050565b6105bb3382610a1d565b6105d75760405162461bcd60e51b815260040161046990611853565b61059e838383610b03565b6105ad8282610ca3565b61059e83838360405180602001604052806000815250610766565b61061081610dd6565b50565b600061036982610907565b61059e600783836112db565b6000818152600260205260408120546001600160a01b0316806103695760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610469565b60606106ab610e16565b905090565b60006001600160a01b03821661071b5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610469565b506001600160a01b031660009081526003602052604090205490565b61059e838383610e25565b60606001805461037e90611819565b6105ad8282610e58565b6105ad338383610e72565b6107703383610a1d565b61078c5760405162461bcd60e51b815260040161046990611853565b61079884848484610f40565b50505050565b60606107a982610907565b61080f5760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610469565b6000828152600660205260408120805461082890611819565b80601f016020809104026020016040519081016040528092919081815260200182805461085490611819565b80156108a15780601f10610876576101008083540402835291602001916108a1565b820191906000526020600020905b81548152906001019060200180831161088457829003601f168201915b5050505050905060006108b2610e16565b905080516000036108c4575092915050565b8151156108f65780826040516020016108de9291906118a4565b60405160208183030381529060405292505050919050565b6108ff84610f73565b949350505050565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906109598261062a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61099b82610907565b6109fe5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610469565b6000828152600660209081526040909120825161059e9284019061135f565b6000610a2882610907565b610a895760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610469565b6000610a948361062a565b9050806001600160a01b0316846001600160a01b03161480610acf5750836001600160a01b0316610ac484610401565b6001600160a01b0316145b806108ff57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff166108ff565b826001600160a01b0316610b168261062a565b6001600160a01b031614610b7e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610469565b6001600160a01b038216610be05760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610469565b610beb600082610924565b6001600160a01b0383166000908152600360205260408120805460019290610c149084906118e9565b90915550506001600160a01b0382166000908152600360205260408120805460019290610c42908490611900565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216610cf95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610469565b610d0281610907565b15610d4f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610469565b6001600160a01b0382166000908152600360205260408120805460019290610d78908490611900565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b610ddf8161103e565b60008181526006602052604090208054610df890611819565b159050610610576000818152600660205260408120610610916113d3565b60606007805461037e90611819565b610e2f8383610ca3565b610e3c60008484846110d9565b61059e5760405162461bcd60e51b815260040161046990611918565b6105ad828260405180602001604052806000815250610e25565b816001600160a01b0316836001600160a01b031603610ed35760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610469565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610f4b848484610b03565b610f57848484846110d9565b6107985760405162461bcd60e51b815260040161046990611918565b6060610f7e82610907565b610fe25760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610469565b6000610fec610e16565b9050600081511161100c5760405180602001604052806000815250611037565b80611016846111da565b6040516020016110279291906118a4565b6040516020818303038152906040525b9392505050565b60006110498261062a565b9050611056600083610924565b6001600160a01b038116600090815260036020526040812080546001929061107f9084906118e9565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60006001600160a01b0384163b156111cf57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061111d90339089908890889060040161196a565b6020604051808303816000875af1925050508015611158575060408051601f3d908101601f19168201909252611155918101906119a7565b60015b6111b5573d808015611186576040519150601f19603f3d011682016040523d82523d6000602084013e61118b565b606091505b5080516000036111ad5760405162461bcd60e51b815260040161046990611918565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506108ff565b506001949350505050565b6060816000036112015750506040805180820190915260018152600360fc1b602082015290565b8160005b811561122b5780611215816119c4565b91506112249050600a836119f3565b9150611205565b60008167ffffffffffffffff8111156112465761124661151b565b6040519080825280601f01601f191660200182016040528015611270576020820181803683370190505b5090505b84156108ff576112856001836118e9565b9150611292600a86611a07565b61129d906030611900565b60f81b8183815181106112b2576112b2611a1b565b60200101906001600160f81b031916908160001a9053506112d4600a866119f3565b9450611274565b8280546112e790611819565b90600052602060002090601f016020900481019282611309576000855561134f565b82601f106113225782800160ff1982351617855561134f565b8280016001018555821561134f579182015b8281111561134f578235825591602001919060010190611334565b5061135b929150611409565b5090565b82805461136b90611819565b90600052602060002090601f01602090048101928261138d576000855561134f565b82601f106113a657805160ff191683800117855561134f565b8280016001018555821561134f579182015b8281111561134f5782518255916020019190600101906113b8565b5080546113df90611819565b6000825580601f106113ef575050565b601f01602090049060005260206000209081019061061091905b5b8082111561135b576000815560010161140a565b6001600160e01b03198116811461061057600080fd5b60006020828403121561144657600080fd5b81356110378161141e565b60005b8381101561146c578181015183820152602001611454565b838111156107985750506000910152565b60008151808452611495816020860160208601611451565b601f01601f19169290920160200192915050565b602081526000611037602083018461147d565b6000602082840312156114ce57600080fd5b5035919050565b80356001600160a01b03811681146114ec57600080fd5b919050565b6000806040838503121561150457600080fd5b61150d836114d5565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561154c5761154c61151b565b604051601f8501601f19908116603f011681019082821181831017156115745761157461151b565b8160405280935085815286868601111561158d57600080fd5b858560208301376000602087830101525050509392505050565b600080604083850312156115ba57600080fd5b82359150602083013567ffffffffffffffff8111156115d857600080fd5b8301601f810185136115e957600080fd5b6115f885823560208401611531565b9150509250929050565b60008060006060848603121561161757600080fd5b611620846114d5565b925061162e602085016114d5565b9150604084013590509250925092565b6000806020838503121561165157600080fd5b823567ffffffffffffffff8082111561166957600080fd5b818501915085601f83011261167d57600080fd5b81358181111561168c57600080fd5b86602082850101111561169e57600080fd5b60209290920196919550909350505050565b6000602082840312156116c257600080fd5b611037826114d5565b600082601f8301126116dc57600080fd5b61103783833560208501611531565b60008060006060848603121561170057600080fd5b611709846114d5565b925060208401359150604084013567ffffffffffffffff81111561172c57600080fd5b611738868287016116cb565b9150509250925092565b6000806040838503121561175557600080fd5b61175e836114d5565b91506020830135801515811461177357600080fd5b809150509250929050565b6000806000806080858703121561179457600080fd5b61179d856114d5565b93506117ab602086016114d5565b925060408501359150606085013567ffffffffffffffff8111156117ce57600080fd5b6117da878288016116cb565b91505092959194509250565b600080604083850312156117f957600080fd5b611802836114d5565b9150611810602084016114d5565b90509250929050565b600181811c9082168061182d57607f821691505b60208210810361184d57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600083516118b6818460208801611451565b8351908301906118ca818360208801611451565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156118fb576118fb6118d3565b500390565b60008219821115611913576119136118d3565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061199d9083018461147d565b9695505050505050565b6000602082840312156119b957600080fd5b81516110378161141e565b6000600182016119d6576119d66118d3565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611a0257611a026119dd565b500490565b600082611a1657611a166119dd565b500690565b634e487b7160e01b600052603260045260246000fdfea264697066735822122030498e9bc3aecc4e2ad1ddede51b820cc8f78e3e0ae0899dbc926b2b5988478464736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c806355f804b3116100b857806395d89b411161007c57806395d89b411461028d578063a144819414610295578063a22cb465146102a8578063b88d4fde146102bb578063c87b56dd146102ce578063e985e9c5146102e157600080fd5b806355f804b31461022b5780636352211e1461023e5780636c0360eb1461025157806370a08231146102595780638832e6e31461027a57600080fd5b806323b872dd116100ff57806323b872dd146101cc57806340c10f19146101df57806342842e0e146101f257806342966c68146102055780634f558e791461021857600080fd5b806301ffc9a71461013c57806306fdde0314610164578063081812fc14610179578063095ea7b3146101a4578063162094c4146101b9575b600080fd5b61014f61014a366004611434565b61031d565b60405190151581526020015b60405180910390f35b61016c61036f565b60405161015b91906114a9565b61018c6101873660046114bc565b610401565b6040516001600160a01b03909116815260200161015b565b6101b76101b23660046114f1565b61048e565b005b6101b76101c73660046115a7565b6105a3565b6101b76101da366004611602565b6105b1565b6101b76101ed3660046114f1565b6105e2565b6101b7610200366004611602565b6105ec565b6101b76102133660046114bc565b610607565b61014f6102263660046114bc565b610613565b6101b761023936600461163e565b61061e565b61018c61024c3660046114bc565b61062a565b61016c6106a1565b61026c6102673660046116b0565b6106b0565b60405190815260200161015b565b6101b76102883660046116eb565b610737565b61016c610742565b6101b76102a33660046114f1565b610751565b6101b76102b6366004611742565b61075b565b6101b76102c936600461177e565b610766565b61016c6102dc3660046114bc565b61079e565b61014f6102ef3660046117e6565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061034e57506001600160e01b03198216635b5e139f60e01b145b8061036957506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461037e90611819565b80601f01602080910402602001604051908101604052809291908181526020018280546103aa90611819565b80156103f75780601f106103cc576101008083540402835291602001916103f7565b820191906000526020600020905b8154815290600101906020018083116103da57829003601f168201915b5050505050905090565b600061040c82610907565b6104725760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006104998261062a565b9050806001600160a01b0316836001600160a01b0316036105065760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610469565b336001600160a01b0382161480610522575061052281336102ef565b6105945760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610469565b61059e8383610924565b505050565b6105ad8282610992565b5050565b6105bb3382610a1d565b6105d75760405162461bcd60e51b815260040161046990611853565b61059e838383610b03565b6105ad8282610ca3565b61059e83838360405180602001604052806000815250610766565b61061081610dd6565b50565b600061036982610907565b61059e600783836112db565b6000818152600260205260408120546001600160a01b0316806103695760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610469565b60606106ab610e16565b905090565b60006001600160a01b03821661071b5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610469565b506001600160a01b031660009081526003602052604090205490565b61059e838383610e25565b60606001805461037e90611819565b6105ad8282610e58565b6105ad338383610e72565b6107703383610a1d565b61078c5760405162461bcd60e51b815260040161046990611853565b61079884848484610f40565b50505050565b60606107a982610907565b61080f5760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610469565b6000828152600660205260408120805461082890611819565b80601f016020809104026020016040519081016040528092919081815260200182805461085490611819565b80156108a15780601f10610876576101008083540402835291602001916108a1565b820191906000526020600020905b81548152906001019060200180831161088457829003601f168201915b5050505050905060006108b2610e16565b905080516000036108c4575092915050565b8151156108f65780826040516020016108de9291906118a4565b60405160208183030381529060405292505050919050565b6108ff84610f73565b949350505050565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906109598261062a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61099b82610907565b6109fe5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610469565b6000828152600660209081526040909120825161059e9284019061135f565b6000610a2882610907565b610a895760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610469565b6000610a948361062a565b9050806001600160a01b0316846001600160a01b03161480610acf5750836001600160a01b0316610ac484610401565b6001600160a01b0316145b806108ff57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff166108ff565b826001600160a01b0316610b168261062a565b6001600160a01b031614610b7e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610469565b6001600160a01b038216610be05760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610469565b610beb600082610924565b6001600160a01b0383166000908152600360205260408120805460019290610c149084906118e9565b90915550506001600160a01b0382166000908152600360205260408120805460019290610c42908490611900565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216610cf95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610469565b610d0281610907565b15610d4f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610469565b6001600160a01b0382166000908152600360205260408120805460019290610d78908490611900565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b610ddf8161103e565b60008181526006602052604090208054610df890611819565b159050610610576000818152600660205260408120610610916113d3565b60606007805461037e90611819565b610e2f8383610ca3565b610e3c60008484846110d9565b61059e5760405162461bcd60e51b815260040161046990611918565b6105ad828260405180602001604052806000815250610e25565b816001600160a01b0316836001600160a01b031603610ed35760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610469565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610f4b848484610b03565b610f57848484846110d9565b6107985760405162461bcd60e51b815260040161046990611918565b6060610f7e82610907565b610fe25760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610469565b6000610fec610e16565b9050600081511161100c5760405180602001604052806000815250611037565b80611016846111da565b6040516020016110279291906118a4565b6040516020818303038152906040525b9392505050565b60006110498261062a565b9050611056600083610924565b6001600160a01b038116600090815260036020526040812080546001929061107f9084906118e9565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60006001600160a01b0384163b156111cf57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061111d90339089908890889060040161196a565b6020604051808303816000875af1925050508015611158575060408051601f3d908101601f19168201909252611155918101906119a7565b60015b6111b5573d808015611186576040519150601f19603f3d011682016040523d82523d6000602084013e61118b565b606091505b5080516000036111ad5760405162461bcd60e51b815260040161046990611918565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506108ff565b506001949350505050565b6060816000036112015750506040805180820190915260018152600360fc1b602082015290565b8160005b811561122b5780611215816119c4565b91506112249050600a836119f3565b9150611205565b60008167ffffffffffffffff8111156112465761124661151b565b6040519080825280601f01601f191660200182016040528015611270576020820181803683370190505b5090505b84156108ff576112856001836118e9565b9150611292600a86611a07565b61129d906030611900565b60f81b8183815181106112b2576112b2611a1b565b60200101906001600160f81b031916908160001a9053506112d4600a866119f3565b9450611274565b8280546112e790611819565b90600052602060002090601f016020900481019282611309576000855561134f565b82601f106113225782800160ff1982351617855561134f565b8280016001018555821561134f579182015b8281111561134f578235825591602001919060010190611334565b5061135b929150611409565b5090565b82805461136b90611819565b90600052602060002090601f01602090048101928261138d576000855561134f565b82601f106113a657805160ff191683800117855561134f565b8280016001018555821561134f579182015b8281111561134f5782518255916020019190600101906113b8565b5080546113df90611819565b6000825580601f106113ef575050565b601f01602090049060005260206000209081019061061091905b5b8082111561135b576000815560010161140a565b6001600160e01b03198116811461061057600080fd5b60006020828403121561144657600080fd5b81356110378161141e565b60005b8381101561146c578181015183820152602001611454565b838111156107985750506000910152565b60008151808452611495816020860160208601611451565b601f01601f19169290920160200192915050565b602081526000611037602083018461147d565b6000602082840312156114ce57600080fd5b5035919050565b80356001600160a01b03811681146114ec57600080fd5b919050565b6000806040838503121561150457600080fd5b61150d836114d5565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561154c5761154c61151b565b604051601f8501601f19908116603f011681019082821181831017156115745761157461151b565b8160405280935085815286868601111561158d57600080fd5b858560208301376000602087830101525050509392505050565b600080604083850312156115ba57600080fd5b82359150602083013567ffffffffffffffff8111156115d857600080fd5b8301601f810185136115e957600080fd5b6115f885823560208401611531565b9150509250929050565b60008060006060848603121561161757600080fd5b611620846114d5565b925061162e602085016114d5565b9150604084013590509250925092565b6000806020838503121561165157600080fd5b823567ffffffffffffffff8082111561166957600080fd5b818501915085601f83011261167d57600080fd5b81358181111561168c57600080fd5b86602082850101111561169e57600080fd5b60209290920196919550909350505050565b6000602082840312156116c257600080fd5b611037826114d5565b600082601f8301126116dc57600080fd5b61103783833560208501611531565b60008060006060848603121561170057600080fd5b611709846114d5565b925060208401359150604084013567ffffffffffffffff81111561172c57600080fd5b611738868287016116cb565b9150509250925092565b6000806040838503121561175557600080fd5b61175e836114d5565b91506020830135801515811461177357600080fd5b809150509250929050565b6000806000806080858703121561179457600080fd5b61179d856114d5565b93506117ab602086016114d5565b925060408501359150606085013567ffffffffffffffff8111156117ce57600080fd5b6117da878288016116cb565b91505092959194509250565b600080604083850312156117f957600080fd5b611802836114d5565b9150611810602084016114d5565b90509250929050565b600181811c9082168061182d57607f821691505b60208210810361184d57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600083516118b6818460208801611451565b8351908301906118ca818360208801611451565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156118fb576118fb6118d3565b500390565b60008219821115611913576119136118d3565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061199d9083018461147d565b9695505050505050565b6000602082840312156119b957600080fd5b81516110378161141e565b6000600182016119d6576119d66118d3565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611a0257611a026119dd565b500490565b600082611a1657611a166119dd565b500690565b634e487b7160e01b600052603260045260246000fdfea264697066735822122030498e9bc3aecc4e2ad1ddede51b820cc8f78e3e0ae0899dbc926b2b5988478464736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "baseURI", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "exists", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "safeMint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeMint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "setBaseURI", "stateMutability": "nonpayable", "inputs": [{"name": "newBaseTokenURI", "type": "string", "internalType": "string"}], "outputs": []}, {"type": "function", "name": "setTokenURI", "stateMutability": "nonpayable", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_tokenURI", "type": "string", "internalType": "string"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "tokenURI", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"approve(address,uint256)": {"details": "See {IERC721-approve}."}, "balanceOf(address)": {"details": "See {IERC721-balanceOf}."}, "getApproved(uint256)": {"details": "See {IERC721-getApproved}."}, "isApprovedForAll(address,address)": {"details": "See {IERC721-isApprovedForAll}."}, "name()": {"details": "See {IERC721Metadata-name}."}, "ownerOf(uint256)": {"details": "See {IERC721-ownerOf}."}, "safeTransferFrom(address,address,uint256)": {"details": "See {IERC721-safeTransferFrom}."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "See {IERC721-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC721-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "symbol()": {"details": "See {IERC721Metadata-symbol}."}, "tokenURI(uint256)": {"details": "See {IERC721Metadata-tokenURI}."}, "transferFrom(address,address,uint256)": {"details": "See {IERC721-transferFrom}."}}, "title": "ERC721Mock This mock just provides a public safeMint, mint, and burn functions for testing purposes", "version": 1}}, "ERC777Mock": {"contractName": "ERC777Mock", "sourceId": "mocks/ERC777Mock.sol", "deploymentBytecode": {"bytecode": "0x60806040523480156200001157600080fd5b5060405162002511380380620025118339810160408190526200003491620007ea565b82828282600290805190602001906200004f929190620005e3565b50815162000065906003906020850190620005e3565b5080516200007b90600490602084019062000672565b5060005b8151811015620000eb57600160056000848481518110620000a457620000a462000913565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620000e2816200093f565b9150506200007f565b506040516329965a1d60e01b815230600482018190527fac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce217705460248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b1580156200016657600080fd5b505af11580156200017b573d6000803e3d6000fd5b50506040516329965a1d60e01b815230600482018190527faea199e31a596269b42cdafd93407f14436db6e4cad65417994c2eb37381e05a60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad2492506329965a1d9150606401600060405180830381600087803b158015620001f957600080fd5b505af11580156200020e573d6000803e3d6000fd5b5050505050505062000247858560405180602001604052806000815250604051806020016040528060008152506200025260201b60201c565b505050505062000a9c565b6200026284848484600162000268565b50505050565b6001600160a01b038516620002c45760405162461bcd60e51b815260206004820181905260248201527f4552433737373a206d696e7420746f20746865207a65726f206164647265737360448201526064015b60405180910390fd5b33620002d48160008888620003c9565b8460016000828254620002e891906200095b565b90915550506001600160a01b03861660009081526020819052604081208054879290620003179084906200095b565b909155506200032f90508160008888888888620003f8565b856001600160a01b0316816001600160a01b03167f2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d8787876040516200037893929190620009a4565b60405180910390a36040518581526001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050505050565b6040517f52316ab8e8b0687ce803e403dfe429541bccd4f6c4683ec65d254d382f15a26590600090a150505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b6024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa1580156200047a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004a09190620009dd565b90506001600160a01b0381161562000522576040516223de2960e01b81526001600160a01b038216906223de2990620004e8908b908b908b908b908b908b9060040162000a02565b600060405180830381600087803b1580156200050357600080fd5b505af115801562000518573d6000803e3d6000fd5b50505050620005d3565b8115620005d35762000548866001600160a01b0316620005dd60201b62000a4c1760201c565b15620005d35760405162461bcd60e51b815260206004820152604d60248201527f4552433737373a20746f6b656e20726563697069656e7420636f6e747261637460448201527f20686173206e6f20696d706c656d656e74657220666f7220455243373737546f60648201526c1ad95b9cd49958da5c1a595b9d609a1b608482015260a401620002bb565b5050505050505050565b3b151590565b828054620005f19062000a60565b90600052602060002090601f01602090048101928262000615576000855562000660565b82601f106200063057805160ff191683800117855562000660565b8280016001018555821562000660579182015b828111156200066057825182559160200191906001019062000643565b506200066e929150620006ca565b5090565b82805482825590600052602060002090810192821562000660579160200282015b828111156200066057825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000693565b5b808211156200066e5760008155600101620006cb565b80516001600160a01b0381168114620006f957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200073f576200073f620006fe565b604052919050565b60005b83811015620007645781810151838201526020016200074a565b83811115620002625750506000910152565b600082601f8301126200078857600080fd5b81516001600160401b03811115620007a457620007a4620006fe565b620007b9601f8201601f191660200162000714565b818152846020838601011115620007cf57600080fd5b620007e282602083016020870162000747565b949350505050565b600080600080600060a086880312156200080357600080fd5b6200080e86620006e1565b60208781015160408901519297509550906001600160401b03808211156200083557600080fd5b620008438a838b0162000776565b955060608901519150808211156200085a57600080fd5b620008688a838b0162000776565b945060808901519150808211156200087f57600080fd5b818901915089601f8301126200089457600080fd5b815181811115620008a957620008a9620006fe565b8060051b9150620008bc84830162000714565b818152918301840191848101908c841115620008d757600080fd5b938501935b838510156200090057620008f085620006e1565b82529385019390850190620008dc565b8096505050505050509295509295909350565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820162000954576200095462000929565b5060010190565b6000821982111562000971576200097162000929565b500190565b600081518084526200099081602086016020860162000747565b601f01601f19169290920160200192915050565b838152606060208201526000620009bf606083018562000976565b8281036040840152620009d3818562000976565b9695505050505050565b600060208284031215620009f057600080fd5b620009fb82620006e1565b9392505050565b6001600160a01b0387811682528681166020830152851660408201526060810184905260c06080820181905260009062000a3f9083018562000976565b82810360a084015262000a53818562000976565b9998505050505050505050565b600181811c9082168062000a7557607f821691505b60208210810362000a9657634e487b7160e01b600052602260045260246000fd5b50919050565b611a658062000aac6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c8063959b8c3f116100b8578063cfbfab0b1161007c578063cfbfab0b14610272578063d95b637114610285578063dd62ed3e14610298578063fad8b32a146102d1578063fc673c4f146102e4578063fe9d9303146102f757600080fd5b8063959b8c3f1461021e57806395d89b41146102315780639bd9bbc614610239578063a9059cbb1461024c578063b1f0b5be1461025f57600080fd5b8063313ce567116100ff578063313ce567146101b7578063556f0dc7146101c657806356189cb4146101cd57806362ad1b83146101e257806370a08231146101f557600080fd5b806306e485381461013c57806306fdde031461015a578063095ea7b31461016f57806318160ddd1461019257806323b872dd146101a4575b600080fd5b61014461030a565b60405161015191906113fc565b60405180910390f35b61016261036c565b6040516101519190611496565b61018261017d3660046114c1565b6103f5565b6040519015158152602001610151565b6001545b604051908152602001610151565b6101826101b23660046114ed565b61040d565b60405160128152602001610151565b6001610196565b6101e06101db3660046114ed565b6105d6565b005b6101e06101f03660046115d1565b6105e6565b610196610203366004611664565b6001600160a01b031660009081526020819052604090205490565b6101e061022c366004611664565b610622565b61016261073f565b6101e0610247366004611681565b61074e565b61018261025a3660046114c1565b61076c565b6101e061026d3660046116da565b61081f565b6101e061028036600461175a565b610831565b6101826102933660046117f4565b61083e565b6101966102a63660046117f4565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b6101e06102df366004611664565b6108e0565b6101e06102f23660046116da565b6109fb565b6101e061030536600461182d565b610a2d565b6060600480548060200260200160405190810160405280929190818152602001828054801561036257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610344575b5050505050905090565b60606002805461037b90611874565b80601f01602080910402602001604051908101604052809291908181526020018280546103a790611874565b80156103625780601f106103c957610100808354040283529160200191610362565b820191906000526020600020905b8154815290600101906020018083116103d757509395945050505050565b600033610403818585610a52565b5060019392505050565b60006001600160a01b03831661043e5760405162461bcd60e51b8152600401610435906118ae565b60405180910390fd5b6001600160a01b0384166104a35760405162461bcd60e51b815260206004820152602660248201527f4552433737373a207472616e736665722066726f6d20746865207a65726f206160448201526564647265737360d01b6064820152608401610435565b60003390506104d4818686866040518060200160405280600081525060405180602001604052806000815250610b79565b610500818686866040518060200160405280600081525060405180602001604052806000815250610ca1565b6001600160a01b03808616600090815260086020908152604080832093851683529290522054838110156105885760405162461bcd60e51b815260206004820152602960248201527f4552433737373a207472616e7366657220616d6f756e74206578636565647320604482015268616c6c6f77616e636560b81b6064820152608401610435565b61059c86836105978785611908565b610a52565b6105ca8287878760405180602001604052806000815250604051806020016040528060008152506000610e13565b50600195945050505050565b6105e1838383610a52565b505050565b6105f0338661083e565b61060c5760405162461bcd60e51b81526004016104359061191f565b61061b85858585856001610fd8565b5050505050565b6001600160a01b03811633036106865760405162461bcd60e51b8152602060048201526024808201527f4552433737373a20617574686f72697a696e672073656c66206173206f70657260448201526330ba37b960e11b6064820152608401610435565b6001600160a01b03811660009081526005602052604090205460ff16156106d7573360009081526007602090815260408083206001600160a01b03851684529091529020805460ff19169055610706565b3360009081526006602090815260408083206001600160a01b03851684529091529020805460ff191660011790555b60405133906001600160a01b038316907ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f990600090a350565b60606003805461037b90611874565b6105e133848484604051806020016040528060008152506001610fd8565b60006001600160a01b0383166107945760405162461bcd60e51b8152600401610435906118ae565b60003390506107c5818286866040518060200160405280600081525060405180602001604052806000815250610b79565b6107f1818286866040518060200160405280600081525060405180602001604052806000815250610ca1565b6104038182868660405180602001604052806000815250604051806020016040528060008152506000610e13565b61082b848484846110bb565b50505050565b61061b85858585856110c5565b6000816001600160a01b0316836001600160a01b031614806108a957506001600160a01b03831660009081526005602052604090205460ff1680156108a957506001600160a01b0380831660009081526007602090815260408083209387168352929052205460ff16155b806108d957506001600160a01b0380831660009081526006602090815260408083209387168352929052205460ff165b9392505050565b336001600160a01b038216036109425760405162461bcd60e51b815260206004820152602160248201527f4552433737373a207265766f6b696e672073656c66206173206f70657261746f6044820152603960f91b6064820152608401610435565b6001600160a01b03811660009081526005602052604090205460ff1615610996573360009081526007602090815260408083206001600160a01b03851684529091529020805460ff191660011790556109c2565b3360009081526006602090815260408083206001600160a01b03851684529091529020805460ff191690555b60405133906001600160a01b038316907f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa190600090a350565b610a05338561083e565b610a215760405162461bcd60e51b81526004016104359061191f565b61082b84848484611217565b610a4833838360405180602001604052806000815250611217565b5050565b3b151590565b6001600160a01b038316610ab65760405162461bcd60e51b815260206004820152602560248201527f4552433737373a20617070726f76652066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610435565b6001600160a01b038216610b185760405162461bcd60e51b815260206004820152602360248201527f4552433737373a20617070726f766520746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610435565b6001600160a01b0383811660008181526008602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe8956024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa158015610bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1e919061196b565b90506001600160a01b03811615610c9857604051633ad5cbc160e11b81526001600160a01b038216906375ab978290610c65908a908a908a908a908a908a90600401611988565b600060405180830381600087803b158015610c7f57600080fd5b505af1158015610c93573d6000803e3d6000fd5b505050505b50505050505050565b610cad868686866113cd565b6001600160a01b03851660009081526020819052604090205483811015610d265760405162461bcd60e51b815260206004820152602760248201527f4552433737373a207472616e7366657220616d6f756e7420657863656564732060448201526662616c616e636560c81b6064820152608401610435565b6001600160a01b03808716600090815260208190526040808220878503905591871681529081208054869290610d5d9084906119e2565b92505081905550846001600160a01b0316866001600160a01b0316886001600160a01b03167f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc82614677987878787604051610db5939291906119fa565b60405180910390a4846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef86604051610e0291815260200190565b60405180910390a350505050505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b6024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa158015610e94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb8919061196b565b90506001600160a01b03811615610f34576040516223de2960e01b81526001600160a01b038216906223de2990610efd908b908b908b908b908b908b90600401611988565b600060405180830381600087803b158015610f1757600080fd5b505af1158015610f2b573d6000803e3d6000fd5b50505050610fce565b8115610fce576001600160a01b0386163b15610fce5760405162461bcd60e51b815260206004820152604d60248201527f4552433737373a20746f6b656e20726563697069656e7420636f6e747261637460448201527f20686173206e6f20696d706c656d656e74657220666f7220455243373737546f60648201526c1ad95b9cd49958da5c1a595b9d609a1b608482015260a401610435565b5050505050505050565b6001600160a01b0386166110395760405162461bcd60e51b815260206004820152602260248201527f4552433737373a2073656e642066726f6d20746865207a65726f206164647265604482015261737360f01b6064820152608401610435565b6001600160a01b03851661108f5760405162461bcd60e51b815260206004820181905260248201527f4552433737373a2073656e6420746f20746865207a65726f20616464726573736044820152606401610435565b3361109e818888888888610b79565b6110ac818888888888610ca1565b610c9881888888888888610e13565b61082b8484848460015b6001600160a01b03851661111b5760405162461bcd60e51b815260206004820181905260248201527f4552433737373a206d696e7420746f20746865207a65726f20616464726573736044820152606401610435565b3361112981600088886113cd565b846001600082825461113b91906119e2565b90915550506001600160a01b038616600090815260208190526040812080548792906111689084906119e2565b9091555061117e90508160008888888888610e13565b856001600160a01b0316816001600160a01b03167f2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d8787876040516111c5939291906119fa565b60405180910390a36040518581526001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a3505050505050565b6001600160a01b0384166112785760405162461bcd60e51b815260206004820152602260248201527f4552433737373a206275726e2066726f6d20746865207a65726f206164647265604482015261737360f01b6064820152608401610435565b3361128881866000878787610b79565b61129581866000876113cd565b6001600160a01b0385166000908152602081905260409020548481101561130a5760405162461bcd60e51b815260206004820152602360248201527f4552433737373a206275726e20616d6f756e7420657863656564732062616c616044820152626e636560e81b6064820152608401610435565b6001600160a01b0386166000908152602081905260408120868303905560018054879290611339908490611908565b92505081905550856001600160a01b0316826001600160a01b03167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a4098878787604051611387939291906119fa565b60405180910390a36040518581526000906001600160a01b038816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611207565b6040517f52316ab8e8b0687ce803e403dfe429541bccd4f6c4683ec65d254d382f15a26590600090a150505050565b6020808252825182820181905260009190848201906040850190845b8181101561143d5783516001600160a01b031683529284019291840191600101611418565b50909695505050505050565b6000815180845260005b8181101561146f57602081850181015186830182015201611453565b81811115611481576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006108d96020830184611449565b6001600160a01b03811681146114be57600080fd5b50565b600080604083850312156114d457600080fd5b82356114df816114a9565b946020939093013593505050565b60008060006060848603121561150257600080fd5b833561150d816114a9565b9250602084013561151d816114a9565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261155557600080fd5b813567ffffffffffffffff808211156115705761157061152e565b604051601f8301601f19908116603f011681019082821181831017156115985761159861152e565b816040528381528660208588010111156115b157600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a086880312156115e957600080fd5b85356115f4816114a9565b94506020860135611604816114a9565b935060408601359250606086013567ffffffffffffffff8082111561162857600080fd5b61163489838a01611544565b9350608088013591508082111561164a57600080fd5b5061165788828901611544565b9150509295509295909350565b60006020828403121561167657600080fd5b81356108d9816114a9565b60008060006060848603121561169657600080fd5b83356116a1816114a9565b925060208401359150604084013567ffffffffffffffff8111156116c457600080fd5b6116d086828701611544565b9150509250925092565b600080600080608085870312156116f057600080fd5b84356116fb816114a9565b935060208501359250604085013567ffffffffffffffff8082111561171f57600080fd5b61172b88838901611544565b9350606087013591508082111561174157600080fd5b5061174e87828801611544565b91505092959194509250565b600080600080600060a0868803121561177257600080fd5b853561177d816114a9565b945060208601359350604086013567ffffffffffffffff808211156117a157600080fd5b6117ad89838a01611544565b945060608801359150808211156117c357600080fd5b506117d088828901611544565b925050608086013580151581146117e657600080fd5b809150509295509295909350565b6000806040838503121561180757600080fd5b8235611812816114a9565b91506020830135611822816114a9565b809150509250929050565b6000806040838503121561184057600080fd5b82359150602083013567ffffffffffffffff81111561185e57600080fd5b61186a85828601611544565b9150509250929050565b600181811c9082168061188857607f821691505b6020821081036118a857634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526024908201527f4552433737373a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008282101561191a5761191a6118f2565b500390565b6020808252602c908201527f4552433737373a2063616c6c6572206973206e6f7420616e206f70657261746f60408201526b39103337b9103437b63232b960a11b606082015260800190565b60006020828403121561197d57600080fd5b81516108d9816114a9565b6001600160a01b0387811682528681166020830152851660408201526060810184905260c0608082018190526000906119c390830185611449565b82810360a08401526119d58185611449565b9998505050505050505050565b600082198211156119f5576119f56118f2565b500190565b838152606060208201526000611a136060830185611449565b8281036040840152611a258185611449565b969550505050505056fea26469706673582212200b5b547af6e3ea7f36f297ef51bca3ffca2f417ed353a799e9765f5b07e498eb64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c8063959b8c3f116100b8578063cfbfab0b1161007c578063cfbfab0b14610272578063d95b637114610285578063dd62ed3e14610298578063fad8b32a146102d1578063fc673c4f146102e4578063fe9d9303146102f757600080fd5b8063959b8c3f1461021e57806395d89b41146102315780639bd9bbc614610239578063a9059cbb1461024c578063b1f0b5be1461025f57600080fd5b8063313ce567116100ff578063313ce567146101b7578063556f0dc7146101c657806356189cb4146101cd57806362ad1b83146101e257806370a08231146101f557600080fd5b806306e485381461013c57806306fdde031461015a578063095ea7b31461016f57806318160ddd1461019257806323b872dd146101a4575b600080fd5b61014461030a565b60405161015191906113fc565b60405180910390f35b61016261036c565b6040516101519190611496565b61018261017d3660046114c1565b6103f5565b6040519015158152602001610151565b6001545b604051908152602001610151565b6101826101b23660046114ed565b61040d565b60405160128152602001610151565b6001610196565b6101e06101db3660046114ed565b6105d6565b005b6101e06101f03660046115d1565b6105e6565b610196610203366004611664565b6001600160a01b031660009081526020819052604090205490565b6101e061022c366004611664565b610622565b61016261073f565b6101e0610247366004611681565b61074e565b61018261025a3660046114c1565b61076c565b6101e061026d3660046116da565b61081f565b6101e061028036600461175a565b610831565b6101826102933660046117f4565b61083e565b6101966102a63660046117f4565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b6101e06102df366004611664565b6108e0565b6101e06102f23660046116da565b6109fb565b6101e061030536600461182d565b610a2d565b6060600480548060200260200160405190810160405280929190818152602001828054801561036257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610344575b5050505050905090565b60606002805461037b90611874565b80601f01602080910402602001604051908101604052809291908181526020018280546103a790611874565b80156103625780601f106103c957610100808354040283529160200191610362565b820191906000526020600020905b8154815290600101906020018083116103d757509395945050505050565b600033610403818585610a52565b5060019392505050565b60006001600160a01b03831661043e5760405162461bcd60e51b8152600401610435906118ae565b60405180910390fd5b6001600160a01b0384166104a35760405162461bcd60e51b815260206004820152602660248201527f4552433737373a207472616e736665722066726f6d20746865207a65726f206160448201526564647265737360d01b6064820152608401610435565b60003390506104d4818686866040518060200160405280600081525060405180602001604052806000815250610b79565b610500818686866040518060200160405280600081525060405180602001604052806000815250610ca1565b6001600160a01b03808616600090815260086020908152604080832093851683529290522054838110156105885760405162461bcd60e51b815260206004820152602960248201527f4552433737373a207472616e7366657220616d6f756e74206578636565647320604482015268616c6c6f77616e636560b81b6064820152608401610435565b61059c86836105978785611908565b610a52565b6105ca8287878760405180602001604052806000815250604051806020016040528060008152506000610e13565b50600195945050505050565b6105e1838383610a52565b505050565b6105f0338661083e565b61060c5760405162461bcd60e51b81526004016104359061191f565b61061b85858585856001610fd8565b5050505050565b6001600160a01b03811633036106865760405162461bcd60e51b8152602060048201526024808201527f4552433737373a20617574686f72697a696e672073656c66206173206f70657260448201526330ba37b960e11b6064820152608401610435565b6001600160a01b03811660009081526005602052604090205460ff16156106d7573360009081526007602090815260408083206001600160a01b03851684529091529020805460ff19169055610706565b3360009081526006602090815260408083206001600160a01b03851684529091529020805460ff191660011790555b60405133906001600160a01b038316907ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f990600090a350565b60606003805461037b90611874565b6105e133848484604051806020016040528060008152506001610fd8565b60006001600160a01b0383166107945760405162461bcd60e51b8152600401610435906118ae565b60003390506107c5818286866040518060200160405280600081525060405180602001604052806000815250610b79565b6107f1818286866040518060200160405280600081525060405180602001604052806000815250610ca1565b6104038182868660405180602001604052806000815250604051806020016040528060008152506000610e13565b61082b848484846110bb565b50505050565b61061b85858585856110c5565b6000816001600160a01b0316836001600160a01b031614806108a957506001600160a01b03831660009081526005602052604090205460ff1680156108a957506001600160a01b0380831660009081526007602090815260408083209387168352929052205460ff16155b806108d957506001600160a01b0380831660009081526006602090815260408083209387168352929052205460ff165b9392505050565b336001600160a01b038216036109425760405162461bcd60e51b815260206004820152602160248201527f4552433737373a207265766f6b696e672073656c66206173206f70657261746f6044820152603960f91b6064820152608401610435565b6001600160a01b03811660009081526005602052604090205460ff1615610996573360009081526007602090815260408083206001600160a01b03851684529091529020805460ff191660011790556109c2565b3360009081526006602090815260408083206001600160a01b03851684529091529020805460ff191690555b60405133906001600160a01b038316907f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa190600090a350565b610a05338561083e565b610a215760405162461bcd60e51b81526004016104359061191f565b61082b84848484611217565b610a4833838360405180602001604052806000815250611217565b5050565b3b151590565b6001600160a01b038316610ab65760405162461bcd60e51b815260206004820152602560248201527f4552433737373a20617070726f76652066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610435565b6001600160a01b038216610b185760405162461bcd60e51b815260206004820152602360248201527f4552433737373a20617070726f766520746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610435565b6001600160a01b0383811660008181526008602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe8956024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa158015610bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1e919061196b565b90506001600160a01b03811615610c9857604051633ad5cbc160e11b81526001600160a01b038216906375ab978290610c65908a908a908a908a908a908a90600401611988565b600060405180830381600087803b158015610c7f57600080fd5b505af1158015610c93573d6000803e3d6000fd5b505050505b50505050505050565b610cad868686866113cd565b6001600160a01b03851660009081526020819052604090205483811015610d265760405162461bcd60e51b815260206004820152602760248201527f4552433737373a207472616e7366657220616d6f756e7420657863656564732060448201526662616c616e636560c81b6064820152608401610435565b6001600160a01b03808716600090815260208190526040808220878503905591871681529081208054869290610d5d9084906119e2565b92505081905550846001600160a01b0316866001600160a01b0316886001600160a01b03167f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc82614677987878787604051610db5939291906119fa565b60405180910390a4846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef86604051610e0291815260200190565b60405180910390a350505050505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b6024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa158015610e94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb8919061196b565b90506001600160a01b03811615610f34576040516223de2960e01b81526001600160a01b038216906223de2990610efd908b908b908b908b908b908b90600401611988565b600060405180830381600087803b158015610f1757600080fd5b505af1158015610f2b573d6000803e3d6000fd5b50505050610fce565b8115610fce576001600160a01b0386163b15610fce5760405162461bcd60e51b815260206004820152604d60248201527f4552433737373a20746f6b656e20726563697069656e7420636f6e747261637460448201527f20686173206e6f20696d706c656d656e74657220666f7220455243373737546f60648201526c1ad95b9cd49958da5c1a595b9d609a1b608482015260a401610435565b5050505050505050565b6001600160a01b0386166110395760405162461bcd60e51b815260206004820152602260248201527f4552433737373a2073656e642066726f6d20746865207a65726f206164647265604482015261737360f01b6064820152608401610435565b6001600160a01b03851661108f5760405162461bcd60e51b815260206004820181905260248201527f4552433737373a2073656e6420746f20746865207a65726f20616464726573736044820152606401610435565b3361109e818888888888610b79565b6110ac818888888888610ca1565b610c9881888888888888610e13565b61082b8484848460015b6001600160a01b03851661111b5760405162461bcd60e51b815260206004820181905260248201527f4552433737373a206d696e7420746f20746865207a65726f20616464726573736044820152606401610435565b3361112981600088886113cd565b846001600082825461113b91906119e2565b90915550506001600160a01b038616600090815260208190526040812080548792906111689084906119e2565b9091555061117e90508160008888888888610e13565b856001600160a01b0316816001600160a01b03167f2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d8787876040516111c5939291906119fa565b60405180910390a36040518581526001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a3505050505050565b6001600160a01b0384166112785760405162461bcd60e51b815260206004820152602260248201527f4552433737373a206275726e2066726f6d20746865207a65726f206164647265604482015261737360f01b6064820152608401610435565b3361128881866000878787610b79565b61129581866000876113cd565b6001600160a01b0385166000908152602081905260409020548481101561130a5760405162461bcd60e51b815260206004820152602360248201527f4552433737373a206275726e20616d6f756e7420657863656564732062616c616044820152626e636560e81b6064820152608401610435565b6001600160a01b0386166000908152602081905260408120868303905560018054879290611339908490611908565b92505081905550856001600160a01b0316826001600160a01b03167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a4098878787604051611387939291906119fa565b60405180910390a36040518581526000906001600160a01b038816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611207565b6040517f52316ab8e8b0687ce803e403dfe429541bccd4f6c4683ec65d254d382f15a26590600090a150505050565b6020808252825182820181905260009190848201906040850190845b8181101561143d5783516001600160a01b031683529284019291840191600101611418565b50909695505050505050565b6000815180845260005b8181101561146f57602081850181015186830182015201611453565b81811115611481576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006108d96020830184611449565b6001600160a01b03811681146114be57600080fd5b50565b600080604083850312156114d457600080fd5b82356114df816114a9565b946020939093013593505050565b60008060006060848603121561150257600080fd5b833561150d816114a9565b9250602084013561151d816114a9565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261155557600080fd5b813567ffffffffffffffff808211156115705761157061152e565b604051601f8301601f19908116603f011681019082821181831017156115985761159861152e565b816040528381528660208588010111156115b157600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a086880312156115e957600080fd5b85356115f4816114a9565b94506020860135611604816114a9565b935060408601359250606086013567ffffffffffffffff8082111561162857600080fd5b61163489838a01611544565b9350608088013591508082111561164a57600080fd5b5061165788828901611544565b9150509295509295909350565b60006020828403121561167657600080fd5b81356108d9816114a9565b60008060006060848603121561169657600080fd5b83356116a1816114a9565b925060208401359150604084013567ffffffffffffffff8111156116c457600080fd5b6116d086828701611544565b9150509250925092565b600080600080608085870312156116f057600080fd5b84356116fb816114a9565b935060208501359250604085013567ffffffffffffffff8082111561171f57600080fd5b61172b88838901611544565b9350606087013591508082111561174157600080fd5b5061174e87828801611544565b91505092959194509250565b600080600080600060a0868803121561177257600080fd5b853561177d816114a9565b945060208601359350604086013567ffffffffffffffff808211156117a157600080fd5b6117ad89838a01611544565b945060608801359150808211156117c357600080fd5b506117d088828901611544565b925050608086013580151581146117e657600080fd5b809150509295509295909350565b6000806040838503121561180757600080fd5b8235611812816114a9565b91506020830135611822816114a9565b809150509250929050565b6000806040838503121561184057600080fd5b82359150602083013567ffffffffffffffff81111561185e57600080fd5b61186a85828601611544565b9150509250929050565b600181811c9082168061188857607f821691505b6020821081036118a857634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526024908201527f4552433737373a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008282101561191a5761191a6118f2565b500390565b6020808252602c908201527f4552433737373a2063616c6c6572206973206e6f7420616e206f70657261746f60408201526b39103337b9103437b63232b960a11b606082015260800190565b60006020828403121561197d57600080fd5b81516108d9816114a9565b6001600160a01b0387811682528681166020830152851660408201526060810184905260c0608082018190526000906119c390830185611449565b82810360a08401526119d58185611449565b9998505050505050505050565b600082198211156119f5576119f56118f2565b500190565b838152606060208201526000611a136060830185611449565b8281036040840152611a258185611449565b969550505050505056fea26469706673582212200b5b547af6e3ea7f36f297ef51bca3ffca2f417ed353a799e9765f5b07e498eb64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "initialHolder", "type": "address", "internalType": "address"}, {"name": "initialBalance", "type": "uint256", "internalType": "uint256"}, {"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}, {"name": "defaultOperators", "type": "address[]", "internalType": "address[]"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "AuthorizedOperator", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenHolder", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "BeforeTokenTransfer", "inputs": [], "anonymous": false}, {"type": "event", "name": "Burned", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "amount", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "operatorData", "type": "bytes", "internalType": "bytes", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Minted", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "amount", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "operatorData", "type": "bytes", "internalType": "bytes", "indexed": false}], "anonymous": false}, {"type": "event", "name": "RevokedOperator", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenHolder", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Sent", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "amount", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "operatorData", "type": "bytes", "internalType": "bytes", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "holder", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "approveInternal", "stateMutability": "nonpayable", "inputs": [{"name": "holder", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "authorizeOperator", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "tokenHolder", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "decimals", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "defaultOperators", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address[]", "internalType": "address[]"}]}, {"type": "function", "name": "granularity", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "isOperatorFor", "stateMutability": "view", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "tokenHolder", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mintInternal", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "userData", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "mintInternalExtended", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "userData", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}, {"name": "requireReceptionAck", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "operatorBurn", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "operatorSend", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "revokeOperator", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "send", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "holder", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}. Note that operator and allowance concepts are orthogonal: operators may not have allowance, and accounts with allowance may not be operators themselves."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Note that accounts cannot have allowance issued by their operators."}, "authorizeOperator(address)": {"details": "See {IERC777-authorizeOperator}."}, "balanceOf(address)": {"details": "Returns the amount of tokens owned by an account (`tokenHolder`)."}, "burn(uint256,bytes)": {"details": "See {IERC777-burn}. Also emits a {IERC20-Transfer} event for ERC20 compatibility."}, "decimals()": {"details": "See {ERC20-decimals}. Always returns 18, as per the [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility)."}, "defaultOperators()": {"details": "See {IERC777-defaultOperators}."}, "granularity()": {"details": "See {IERC777-granularity}. This implementation always returns `1`."}, "isOperatorFor(address,address)": {"details": "See {IERC777-isOperatorFor}."}, "name()": {"details": "See {IERC777-name}."}, "operatorBurn(address,uint256,bytes,bytes)": {"details": "See {IERC777-operatorBurn}. Emits {Burned} and {IERC20-Transfer} events."}, "operatorSend(address,address,uint256,bytes,bytes)": {"details": "See {IERC777-operatorSend}. Emits {Sent} and {IERC20-Transfer} events."}, "revokeOperator(address)": {"details": "See {IERC777-revokeOperator}."}, "send(address,uint256,bytes)": {"details": "See {IERC777-send}. Also emits a {IERC20-Transfer} event for ERC20 compatibility."}, "symbol()": {"details": "See {IERC777-symbol}."}, "totalSupply()": {"details": "See {IERC777-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient} interface if it is a contract. Also emits a {Sent} event."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Note that operator and allowance concepts are orthogonal: operators cannot call `transferFrom` (unless they have allowance), and accounts with allowance cannot call `operatorSend` (unless they are operators). Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events."}}, "version": 1}}, "ERC777SenderRecipientMock": {"contractName": "ERC777SenderRecipientMock", "sourceId": "mocks/ERC777SenderRecipientMock.sol", "deploymentBytecode": {"bytecode": "0x60806040526001805462010000600160b01b031916751820a4b7618bde71dce8cdc73aab6c95905fad24000017905534801561003a57600080fd5b50610b918061004a6000396000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c806375ab97821161007157806375ab97821461012e578063a8badaa514610141578063c97e18fc14610154578063d2de64741461017c578063e0eb21801461018f578063e1ecbd30146101a257600080fd5b806223de29146100ad578063249cb3fa146100c25780633836ef89146100e757806344d17187146100fa5780634e4ae5a51461010d575b600080fd5b6100c06100bb36600461077c565b6101b5565b005b6100d56100d036600461082d565b610307565b60405190815260200160405180910390f35b6100c06100f5366004610900565b61035f565b6100c061010836600461096c565b6103c7565b6100c061011b3660046109c5565b6001805460ff1916911515919091179055565b6100c061013c36600461077c565b61042c565b6100c061014f3660046109e7565b610564565b6100c06101623660046109c5565b600180549115156101000261ff0019909216919091179055565b6100c061018a3660046109e7565b6105fa565b6100c061019d3660046109e7565b610643565b6100c06101b03660046109e7565b610688565b600154610100900460ff16156101ca57600080fd5b6000336040516370a0823160e01b81526001600160a01b038a811660048301529192506000918316906370a0823190602401602060405180830381865afa158015610219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023d9190610a04565b6040516370a0823160e01b81526001600160a01b038a811660048301529192506000918416906370a0823190602401602060405180830381865afa158015610289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ad9190610a04565b90507f47e915878c47f3ec4d7ff646a2becb229f64fd2abe4d2b5e2bb4275b0cf50d4e8b8b8b8b8b8b8b8b8b8b8b6040516102f29b9a99989796959493929190610a46565b60405180910390a15050505050505050505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff16610336576000610358565b7fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b9392505050565b604051634decdde360e11b81526001600160a01b03851690639bd9bbc69061038f90869086908690600401610b0a565b600060405180830381600087803b1580156103a957600080fd5b505af11580156103bd573d6000803e3d6000fd5b5050505050505050565b60405163fe9d930360e01b81526001600160a01b0384169063fe9d9303906103f59085908590600401610b3a565b600060405180830381600087803b15801561040f57600080fd5b505af1158015610423573d6000803e3d6000fd5b50505050505050565b60015460ff161561043c57600080fd5b6000336040516370a0823160e01b81526001600160a01b038a811660048301529192506000918316906370a0823190602401602060405180830381865afa15801561048b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104af9190610a04565b6040516370a0823160e01b81526001600160a01b038a811660048301529192506000918416906370a0823190602401602060405180830381865afa1580156104fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051f9190610a04565b90507faa3e88aca472e90221daf7d3d601abafb62b120319089d7a2c2f63588da855298b8b8b8b8b8b8b8b8b8b8b6040516102f29b9a99989796959493929190610a46565b6001546040516329965a1d60e01b81523060048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248201526001600160a01b03838116604483015262010000909204909116906329965a1d906064015b600060405180830381600087803b1580156105df57600080fd5b505af11580156105f3573d6000803e3d6000fd5b5050505050565b6106247f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895826106ed565b306001600160a01b03821681900361063f5761063f81610688565b5050565b61066d7fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b826106ed565b306001600160a01b03821681900361063f5761063f81610564565b6001546040516329965a1d60e01b81523060048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe89560248201526001600160a01b03838116604483015262010000909204909116906329965a1d906064016105c5565b6000918252602082815260408084206001600160a01b0390931684529190529020805460ff19166001179055565b6001600160a01b038116811461073057600080fd5b50565b60008083601f84011261074557600080fd5b50813567ffffffffffffffff81111561075d57600080fd5b60208301915083602082850101111561077557600080fd5b9250929050565b60008060008060008060008060c0898b03121561079857600080fd5b88356107a38161071b565b975060208901356107b38161071b565b965060408901356107c38161071b565b955060608901359450608089013567ffffffffffffffff808211156107e757600080fd5b6107f38c838d01610733565b909650945060a08b013591508082111561080c57600080fd5b506108198b828c01610733565b999c989b5096995094979396929594505050565b6000806040838503121561084057600080fd5b8235915060208301356108528161071b565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261088457600080fd5b813567ffffffffffffffff8082111561089f5761089f61085d565b604051601f8301601f19908116603f011681019082821181831017156108c7576108c761085d565b816040528381528660208588010111156108e057600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561091657600080fd5b84356109218161071b565b935060208501356109318161071b565b925060408501359150606085013567ffffffffffffffff81111561095457600080fd5b61096087828801610873565b91505092959194509250565b60008060006060848603121561098157600080fd5b833561098c8161071b565b925060208401359150604084013567ffffffffffffffff8111156109af57600080fd5b6109bb86828701610873565b9150509250925092565b6000602082840312156109d757600080fd5b8135801515811461035857600080fd5b6000602082840312156109f957600080fd5b81356103588161071b565b600060208284031215610a1657600080fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038c811682528b811660208301528a81166040830152606082018a905261012060808301819052600091610a848483018b8d610a1d565b915083820360a0850152610a9982898b610a1d565b961660c0840152505060e08101929092526101009091015298975050505050505050565b6000815180845260005b81811015610ae357602081850181015186830182015201610ac7565b81811115610af5576000602083870101525b50601f01601f19169290920160200192915050565b60018060a01b0384168152826020820152606060408201526000610b316060830184610abd565b95945050505050565b828152604060208201526000610b536040830184610abd565b94935050505056fea26469706673582212207a29d3787c43540eb4b21341fecbf96b402de903364887e43cf188d69fe84f4a64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100a85760003560e01c806375ab97821161007157806375ab97821461012e578063a8badaa514610141578063c97e18fc14610154578063d2de64741461017c578063e0eb21801461018f578063e1ecbd30146101a257600080fd5b806223de29146100ad578063249cb3fa146100c25780633836ef89146100e757806344d17187146100fa5780634e4ae5a51461010d575b600080fd5b6100c06100bb36600461077c565b6101b5565b005b6100d56100d036600461082d565b610307565b60405190815260200160405180910390f35b6100c06100f5366004610900565b61035f565b6100c061010836600461096c565b6103c7565b6100c061011b3660046109c5565b6001805460ff1916911515919091179055565b6100c061013c36600461077c565b61042c565b6100c061014f3660046109e7565b610564565b6100c06101623660046109c5565b600180549115156101000261ff0019909216919091179055565b6100c061018a3660046109e7565b6105fa565b6100c061019d3660046109e7565b610643565b6100c06101b03660046109e7565b610688565b600154610100900460ff16156101ca57600080fd5b6000336040516370a0823160e01b81526001600160a01b038a811660048301529192506000918316906370a0823190602401602060405180830381865afa158015610219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023d9190610a04565b6040516370a0823160e01b81526001600160a01b038a811660048301529192506000918416906370a0823190602401602060405180830381865afa158015610289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ad9190610a04565b90507f47e915878c47f3ec4d7ff646a2becb229f64fd2abe4d2b5e2bb4275b0cf50d4e8b8b8b8b8b8b8b8b8b8b8b6040516102f29b9a99989796959493929190610a46565b60405180910390a15050505050505050505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff16610336576000610358565b7fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b9392505050565b604051634decdde360e11b81526001600160a01b03851690639bd9bbc69061038f90869086908690600401610b0a565b600060405180830381600087803b1580156103a957600080fd5b505af11580156103bd573d6000803e3d6000fd5b5050505050505050565b60405163fe9d930360e01b81526001600160a01b0384169063fe9d9303906103f59085908590600401610b3a565b600060405180830381600087803b15801561040f57600080fd5b505af1158015610423573d6000803e3d6000fd5b50505050505050565b60015460ff161561043c57600080fd5b6000336040516370a0823160e01b81526001600160a01b038a811660048301529192506000918316906370a0823190602401602060405180830381865afa15801561048b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104af9190610a04565b6040516370a0823160e01b81526001600160a01b038a811660048301529192506000918416906370a0823190602401602060405180830381865afa1580156104fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051f9190610a04565b90507faa3e88aca472e90221daf7d3d601abafb62b120319089d7a2c2f63588da855298b8b8b8b8b8b8b8b8b8b8b6040516102f29b9a99989796959493929190610a46565b6001546040516329965a1d60e01b81523060048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248201526001600160a01b03838116604483015262010000909204909116906329965a1d906064015b600060405180830381600087803b1580156105df57600080fd5b505af11580156105f3573d6000803e3d6000fd5b5050505050565b6106247f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895826106ed565b306001600160a01b03821681900361063f5761063f81610688565b5050565b61066d7fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b826106ed565b306001600160a01b03821681900361063f5761063f81610564565b6001546040516329965a1d60e01b81523060048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe89560248201526001600160a01b03838116604483015262010000909204909116906329965a1d906064016105c5565b6000918252602082815260408084206001600160a01b0390931684529190529020805460ff19166001179055565b6001600160a01b038116811461073057600080fd5b50565b60008083601f84011261074557600080fd5b50813567ffffffffffffffff81111561075d57600080fd5b60208301915083602082850101111561077557600080fd5b9250929050565b60008060008060008060008060c0898b03121561079857600080fd5b88356107a38161071b565b975060208901356107b38161071b565b965060408901356107c38161071b565b955060608901359450608089013567ffffffffffffffff808211156107e757600080fd5b6107f38c838d01610733565b909650945060a08b013591508082111561080c57600080fd5b506108198b828c01610733565b999c989b5096995094979396929594505050565b6000806040838503121561084057600080fd5b8235915060208301356108528161071b565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261088457600080fd5b813567ffffffffffffffff8082111561089f5761089f61085d565b604051601f8301601f19908116603f011681019082821181831017156108c7576108c761085d565b816040528381528660208588010111156108e057600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561091657600080fd5b84356109218161071b565b935060208501356109318161071b565b925060408501359150606085013567ffffffffffffffff81111561095457600080fd5b61096087828801610873565b91505092959194509250565b60008060006060848603121561098157600080fd5b833561098c8161071b565b925060208401359150604084013567ffffffffffffffff8111156109af57600080fd5b6109bb86828701610873565b9150509250925092565b6000602082840312156109d757600080fd5b8135801515811461035857600080fd5b6000602082840312156109f957600080fd5b81356103588161071b565b600060208284031215610a1657600080fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038c811682528b811660208301528a81166040830152606082018a905261012060808301819052600091610a848483018b8d610a1d565b915083820360a0850152610a9982898b610a1d565b961660c0840152505060e08101929092526101009091015298975050505050505050565b6000815180845260005b81811015610ae357602081850181015186830182015201610ac7565b81811115610af5576000602083870101525b50601f01601f19169290920160200192915050565b60018060a01b0384168152826020820152606060408201526000610b316060830184610abd565b95945050505050565b828152604060208201526000610b536040830184610abd565b94935050505056fea26469706673582212207a29d3787c43540eb4b21341fecbf96b402de903364887e43cf188d69fe84f4a64736f6c634300080d0033"}, "abi": [{"type": "event", "name": "BeforeTokenTransfer", "inputs": [], "anonymous": false}, {"type": "event", "name": "TokensReceivedCalled", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": false}, {"name": "from", "type": "address", "internalType": "address", "indexed": false}, {"name": "to", "type": "address", "internalType": "address", "indexed": false}, {"name": "amount", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "operatorData", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "token", "type": "address", "internalType": "address", "indexed": false}, {"name": "fromBalance", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "toBalance", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TokensToSendCalled", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": false}, {"name": "from", "type": "address", "internalType": "address", "indexed": false}, {"name": "to", "type": "address", "internalType": "address", "indexed": false}, {"name": "amount", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "operatorData", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "token", "type": "address", "internalType": "address", "indexed": false}, {"name": "fromBalance", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "toBalance", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "token", "type": "address", "internalType": "contract IERC777"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "canImplementInterfaceForAddress", "stateMutability": "view", "inputs": [{"name": "interfaceHash", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "recipientFor", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "registerRecipient", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "registerSender", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "send", "stateMutability": "nonpayable", "inputs": [{"name": "token", "type": "address", "internalType": "contract IERC777"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "senderFor", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "setShouldRevertReceive", "stateMutability": "nonpayable", "inputs": [{"name": "shouldRevert", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "setShouldRevertSend", "stateMutability": "nonpayable", "inputs": [{"name": "shouldRevert", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "tokensReceived", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "userData", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "tokensToSend", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "userData", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"canImplementInterfaceForAddress(bytes32,address)": {"details": "See {IERC1820Implementer-canImplementInterfaceForAddress}."}, "tokensReceived(address,address,address,uint256,bytes,bytes)": {"details": "Called by an {IERC777} token contract whenever tokens are being moved or created into a registered account (`to`). The type of operation is conveyed by `from` being the zero address or not. This call occurs _after_ the token contract's state is updated, so {IERC777-balanceOf}, etc., can be used to query the post-operation state. This function may revert to prevent the operation from being executed."}, "tokensToSend(address,address,address,uint256,bytes,bytes)": {"details": "Called by an {IERC777} token contract whenever a registered holder's (`from`) tokens are about to be moved or destroyed. The type of operation is conveyed by `to` being the zero address or not. This call occurs _before_ the token contract's state is updated, so {IERC777-balanceOf}, etc., can be used to query the pre-operation state. This function may revert to prevent the operation from being executed."}}, "version": 1}}, "EnumerableMapMock": {"contractName": "EnumerableMapMock", "sourceId": "mocks/EnumerableMapMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50610829806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639507d39a1161005b5780639507d39a14610102578063c051a3a61461012d578063c34052e014610140578063e0886f901461016357600080fd5b80631f7b6d321461008d5780632f30c6f6146100a85780634cc82215146100bd578063871394d9146100d0575b600080fd5b610095610193565b6040519081526020015b60405180910390f35b6100bb6100b636600461067c565b6101a4565b005b6100bb6100cb3660046106b8565b6101f3565b6100e36100de3660046106b8565b610240565b6040805192151583526001600160a01b0390911660208301520161009f565b6101156101103660046106b8565b610256565b6040516001600160a01b03909116815260200161009f565b61011561013b3660046106d1565b610268565b61015361014e3660046106b8565b6102b4565b604051901515815260200161009f565b6101766101713660046106b8565b6102c0565b604080519283526001600160a01b0390911660208301520161009f565b600061019f60006102cd565b905090565b60006101b18184846102d8565b90507fed9840e0775590557ad736875d96c95cf1458b766335f74339951a32c82a9e33816040516101e6911515815260200190565b60405180910390a1505050565b60006101ff81836102ee565b90507fed9840e0775590557ad736875d96c95cf1458b766335f74339951a32c82a9e3381604051610234911515815260200190565b60405180910390a15050565b60008061024d8184610301565b91509150915091565b6000610262818361031f565b92915050565b60006102ac8484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250949392505061032b9050565b949350505050565b60006102628183610338565b60008061024d8184610344565b600061026282610353565b60006102ac84846001600160a01b03851661035e565b60006102fa838361037b565b9392505050565b60008080806103108686610398565b909450925050505b9250929050565b60006102fa83836103d2565b60006102ac848484610447565b60006102fa8383610493565b6000808080610310868661049f565b6000610262826104ca565b600082815260028401602052604081208290556102ac84846104d4565b600081815260028301602052604081208190556102fa83836104e0565b60008181526002830160205260408120548190806103c7576103ba8585610493565b9250600091506103189050565b600192509050610318565b6000818152600283016020526040812054801515806103f657506103f68484610493565b6102fa5760405162461bcd60e51b815260206004820152601e60248201527f456e756d657261626c654d61703a206e6f6e6578697374656e74206b6579000060448201526064015b60405180910390fd5b60008281526002840160205260408120548015158061046b575061046b8585610493565b839061048a5760405162461bcd60e51b815260040161043e919061074d565b50949350505050565b60006102fa83836104ec565b600080806104ad8585610504565b600081815260029690960160205260409095205494959350505050565b6000610262825490565b60006102fa8383610510565b60006102fa838361055f565b600081815260018301602052604081205415156102fa565b60006102fa8383610652565b600081815260018301602052604081205461055757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610262565b506000610262565b600081815260018301602052604081205480156106485760006105836001836107a2565b8554909150600090610597906001906107a2565b90508181146105fc5760008660000182815481106105b7576105b76107c7565b90600052602060002001549050808760000184815481106105da576105da6107c7565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061060d5761060d6107dd565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610262565b6000915050610262565b6000826000018281548110610669576106696107c7565b9060005260206000200154905092915050565b6000806040838503121561068f57600080fd5b8235915060208301356001600160a01b03811681146106ad57600080fd5b809150509250929050565b6000602082840312156106ca57600080fd5b5035919050565b6000806000604084860312156106e657600080fd5b83359250602084013567ffffffffffffffff8082111561070557600080fd5b818601915086601f83011261071957600080fd5b81358181111561072857600080fd5b87602082850101111561073a57600080fd5b6020830194508093505050509250925092565b600060208083528351808285015260005b8181101561077a5785810183015185820160400152820161075e565b8181111561078c576000604083870101525b50601f01601f1916929092016040019392505050565b6000828210156107c257634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220a09d3a54b77d9dd2a60e1785d7e7ccd786dce73c8c4eaa1533ebf943d25047b564736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80639507d39a1161005b5780639507d39a14610102578063c051a3a61461012d578063c34052e014610140578063e0886f901461016357600080fd5b80631f7b6d321461008d5780632f30c6f6146100a85780634cc82215146100bd578063871394d9146100d0575b600080fd5b610095610193565b6040519081526020015b60405180910390f35b6100bb6100b636600461067c565b6101a4565b005b6100bb6100cb3660046106b8565b6101f3565b6100e36100de3660046106b8565b610240565b6040805192151583526001600160a01b0390911660208301520161009f565b6101156101103660046106b8565b610256565b6040516001600160a01b03909116815260200161009f565b61011561013b3660046106d1565b610268565b61015361014e3660046106b8565b6102b4565b604051901515815260200161009f565b6101766101713660046106b8565b6102c0565b604080519283526001600160a01b0390911660208301520161009f565b600061019f60006102cd565b905090565b60006101b18184846102d8565b90507fed9840e0775590557ad736875d96c95cf1458b766335f74339951a32c82a9e33816040516101e6911515815260200190565b60405180910390a1505050565b60006101ff81836102ee565b90507fed9840e0775590557ad736875d96c95cf1458b766335f74339951a32c82a9e3381604051610234911515815260200190565b60405180910390a15050565b60008061024d8184610301565b91509150915091565b6000610262818361031f565b92915050565b60006102ac8484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250949392505061032b9050565b949350505050565b60006102628183610338565b60008061024d8184610344565b600061026282610353565b60006102ac84846001600160a01b03851661035e565b60006102fa838361037b565b9392505050565b60008080806103108686610398565b909450925050505b9250929050565b60006102fa83836103d2565b60006102ac848484610447565b60006102fa8383610493565b6000808080610310868661049f565b6000610262826104ca565b600082815260028401602052604081208290556102ac84846104d4565b600081815260028301602052604081208190556102fa83836104e0565b60008181526002830160205260408120548190806103c7576103ba8585610493565b9250600091506103189050565b600192509050610318565b6000818152600283016020526040812054801515806103f657506103f68484610493565b6102fa5760405162461bcd60e51b815260206004820152601e60248201527f456e756d657261626c654d61703a206e6f6e6578697374656e74206b6579000060448201526064015b60405180910390fd5b60008281526002840160205260408120548015158061046b575061046b8585610493565b839061048a5760405162461bcd60e51b815260040161043e919061074d565b50949350505050565b60006102fa83836104ec565b600080806104ad8585610504565b600081815260029690960160205260409095205494959350505050565b6000610262825490565b60006102fa8383610510565b60006102fa838361055f565b600081815260018301602052604081205415156102fa565b60006102fa8383610652565b600081815260018301602052604081205461055757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610262565b506000610262565b600081815260018301602052604081205480156106485760006105836001836107a2565b8554909150600090610597906001906107a2565b90508181146105fc5760008660000182815481106105b7576105b76107c7565b90600052602060002001549050808760000184815481106105da576105da6107c7565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061060d5761060d6107dd565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610262565b6000915050610262565b6000826000018281548110610669576106696107c7565b9060005260206000200154905092915050565b6000806040838503121561068f57600080fd5b8235915060208301356001600160a01b03811681146106ad57600080fd5b809150509250929050565b6000602082840312156106ca57600080fd5b5035919050565b6000806000604084860312156106e657600080fd5b83359250602084013567ffffffffffffffff8082111561070557600080fd5b818601915086601f83011261071957600080fd5b81358181111561072857600080fd5b87602082850101111561073a57600080fd5b6020830194508093505050509250925092565b600060208083528351808285015260005b8181101561077a5785810183015185820160400152820161075e565b8181111561078c576000604083870101525b50601f01601f1916929092016040019392505050565b6000828210156107c257634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220a09d3a54b77d9dd2a60e1785d7e7ccd786dce73c8c4eaa1533ebf943d25047b564736f6c634300080d0033"}, "abi": [{"type": "event", "name": "OperationResult", "inputs": [{"name": "result", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "function", "name": "at", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "key", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "contains", "stateMutability": "view", "inputs": [{"name": "key", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "get", "stateMutability": "view", "inputs": [{"name": "key", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getWithMessage", "stateMutability": "view", "inputs": [{"name": "key", "type": "uint256", "internalType": "uint256"}, {"name": "errorMessage", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "length", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "remove", "stateMutability": "nonpayable", "inputs": [{"name": "key", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "set", "stateMutability": "nonpayable", "inputs": [{"name": "key", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "tryGet", "stateMutability": "view", "inputs": [{"name": "key", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}, {"name": "", "type": "address", "internalType": "address"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "EnumerableAddressSetMock": {"contractName": "EnumerableAddressSetMock", "sourceId": "mocks/EnumerableSetMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506104f5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630a3b0a4f146100675780631f7b6d321461007c57806329092d0e146100975780635dbe47e8146100aa578063971217b7146100cd578063e0886f90146100e2575b600080fd5b61007a6100753660046103df565b61010d565b005b61008461015a565b6040519081526020015b60405180910390f35b61007a6100a53660046103df565b61016b565b6100bd6100b83660046103df565b610177565b604051901515815260200161008e565b6100d5610189565b60405161008e9190610408565b6100f56100f0366004610455565b610195565b6040516001600160a01b03909116815260200161008e565b600061011981836101a1565b90507fed9840e0775590557ad736875d96c95cf1458b766335f74339951a32c82a9e338160405161014e911515815260200190565b60405180910390a15050565b600061016660006101bd565b905090565b600061011981836101c7565b600061018381836101dc565b92915050565b606061016660006101fe565b6000610183818361020b565b60006101b6836001600160a01b038416610217565b9392505050565b6000610183825490565b60006101b6836001600160a01b038416610266565b6001600160a01b038116600090815260018301602052604081205415156101b6565b606060006101b683610359565b60006101b683836103b5565b600081815260018301602052604081205461025e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610183565b506000610183565b6000818152600183016020526040812054801561034f57600061028a60018361046e565b855490915060009061029e9060019061046e565b90508181146103035760008660000182815481106102be576102be610493565b90600052602060002001549050808760000184815481106102e1576102e1610493565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610314576103146104a9565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610183565b6000915050610183565b6060816000018054806020026020016040519081016040528092919081815260200182805480156103a957602002820191906000526020600020905b815481526020019060010190808311610395575b50505050509050919050565b60008260000182815481106103cc576103cc610493565b9060005260206000200154905092915050565b6000602082840312156103f157600080fd5b81356001600160a01b03811681146101b657600080fd5b6020808252825182820181905260009190848201906040850190845b818110156104495783516001600160a01b031683529284019291840191600101610424565b50909695505050505050565b60006020828403121561046757600080fd5b5035919050565b60008282101561048e57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220a761293ab27094aac0f480ca47cc7bb222d914d5452e879779b2eb7e6eed98fe64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630a3b0a4f146100675780631f7b6d321461007c57806329092d0e146100975780635dbe47e8146100aa578063971217b7146100cd578063e0886f90146100e2575b600080fd5b61007a6100753660046103df565b61010d565b005b61008461015a565b6040519081526020015b60405180910390f35b61007a6100a53660046103df565b61016b565b6100bd6100b83660046103df565b610177565b604051901515815260200161008e565b6100d5610189565b60405161008e9190610408565b6100f56100f0366004610455565b610195565b6040516001600160a01b03909116815260200161008e565b600061011981836101a1565b90507fed9840e0775590557ad736875d96c95cf1458b766335f74339951a32c82a9e338160405161014e911515815260200190565b60405180910390a15050565b600061016660006101bd565b905090565b600061011981836101c7565b600061018381836101dc565b92915050565b606061016660006101fe565b6000610183818361020b565b60006101b6836001600160a01b038416610217565b9392505050565b6000610183825490565b60006101b6836001600160a01b038416610266565b6001600160a01b038116600090815260018301602052604081205415156101b6565b606060006101b683610359565b60006101b683836103b5565b600081815260018301602052604081205461025e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610183565b506000610183565b6000818152600183016020526040812054801561034f57600061028a60018361046e565b855490915060009061029e9060019061046e565b90508181146103035760008660000182815481106102be576102be610493565b90600052602060002001549050808760000184815481106102e1576102e1610493565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610314576103146104a9565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610183565b6000915050610183565b6060816000018054806020026020016040519081016040528092919081815260200182805480156103a957602002820191906000526020600020905b815481526020019060010190808311610395575b50505050509050919050565b60008260000182815481106103cc576103cc610493565b9060005260206000200154905092915050565b6000602082840312156103f157600080fd5b81356001600160a01b03811681146101b657600080fd5b6020808252825182820181905260009190848201906040850190845b818110156104495783516001600160a01b031683529284019291840191600101610424565b50909695505050505050565b60006020828403121561046757600080fd5b5035919050565b60008282101561048e57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220a761293ab27094aac0f480ca47cc7bb222d914d5452e879779b2eb7e6eed98fe64736f6c634300080d0033"}, "abi": [{"type": "event", "name": "OperationResult", "inputs": [{"name": "result", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "function", "name": "add", "stateMutability": "nonpayable", "inputs": [{"name": "value", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "at", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "contains", "stateMutability": "view", "inputs": [{"name": "value", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "length", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "remove", "stateMutability": "nonpayable", "inputs": [{"name": "value", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "values", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address[]", "internalType": "address[]"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "EnumerableBytes32SetMock": {"contractName": "EnumerableBytes32SetMock", "sourceId": "mocks/EnumerableSetMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50610489806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631d1a696d146100675780631f7b6d321461008f578063446bffba146100a557806395bc2673146100ba578063971217b7146100cd578063e0886f90146100e2575b600080fd5b61007a6100753660046103a5565b6100f5565b60405190151581526020015b60405180910390f35b610097610107565b604051908152602001610086565b6100b86100b33660046103a5565b610118565b005b6100b86100c83660046103a5565b610165565b6100d5610171565b60405161008691906103be565b6100976100f03660046103a5565b61017d565b60006101018183610189565b92915050565b600061011360006101a4565b905090565b600061012481836101ae565b90507fed9840e0775590557ad736875d96c95cf1458b766335f74339951a32c82a9e3381604051610159911515815260200190565b60405180910390a15050565b600061012481836101ba565b606061011360006101c6565b600061010181836101d1565b600081815260018301602052604081205415155b9392505050565b6000610101825490565b600061019d83836101dd565b600061019d838361022c565b60606101018261031f565b600061019d838361037b565b600081815260018301602052604081205461022457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610101565b506000610101565b60008181526001830160205260408120548015610315576000610250600183610402565b855490915060009061026490600190610402565b90508181146102c957600086600001828154811061028457610284610427565b90600052602060002001549050808760000184815481106102a7576102a7610427565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806102da576102da61043d565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610101565b6000915050610101565b60608160000180548060200260200160405190810160405280929190818152602001828054801561036f57602002820191906000526020600020905b81548152602001906001019080831161035b575b50505050509050919050565b600082600001828154811061039257610392610427565b9060005260206000200154905092915050565b6000602082840312156103b757600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156103f6578351835292840192918401916001016103da565b50909695505050505050565b60008282101561042257634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220524b0027ac7529da67ad7efab0e21e5175bcdb4753b06f08d31b8a0305331fda64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80631d1a696d146100675780631f7b6d321461008f578063446bffba146100a557806395bc2673146100ba578063971217b7146100cd578063e0886f90146100e2575b600080fd5b61007a6100753660046103a5565b6100f5565b60405190151581526020015b60405180910390f35b610097610107565b604051908152602001610086565b6100b86100b33660046103a5565b610118565b005b6100b86100c83660046103a5565b610165565b6100d5610171565b60405161008691906103be565b6100976100f03660046103a5565b61017d565b60006101018183610189565b92915050565b600061011360006101a4565b905090565b600061012481836101ae565b90507fed9840e0775590557ad736875d96c95cf1458b766335f74339951a32c82a9e3381604051610159911515815260200190565b60405180910390a15050565b600061012481836101ba565b606061011360006101c6565b600061010181836101d1565b600081815260018301602052604081205415155b9392505050565b6000610101825490565b600061019d83836101dd565b600061019d838361022c565b60606101018261031f565b600061019d838361037b565b600081815260018301602052604081205461022457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610101565b506000610101565b60008181526001830160205260408120548015610315576000610250600183610402565b855490915060009061026490600190610402565b90508181146102c957600086600001828154811061028457610284610427565b90600052602060002001549050808760000184815481106102a7576102a7610427565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806102da576102da61043d565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610101565b6000915050610101565b60608160000180548060200260200160405190810160405280929190818152602001828054801561036f57602002820191906000526020600020905b81548152602001906001019080831161035b575b50505050509050919050565b600082600001828154811061039257610392610427565b9060005260206000200154905092915050565b6000602082840312156103b757600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156103f6578351835292840192918401916001016103da565b50909695505050505050565b60008282101561042257634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220524b0027ac7529da67ad7efab0e21e5175bcdb4753b06f08d31b8a0305331fda64736f6c634300080d0033"}, "abi": [{"type": "event", "name": "OperationResult", "inputs": [{"name": "result", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "function", "name": "add", "stateMutability": "nonpayable", "inputs": [{"name": "value", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "at", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "contains", "stateMutability": "view", "inputs": [{"name": "value", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "length", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "remove", "stateMutability": "nonpayable", "inputs": [{"name": "value", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "values", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32[]", "internalType": "bytes32[]"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "EnumerableUintSetMock": {"contractName": "EnumerableUintSetMock", "sourceId": "mocks/EnumerableSetMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5061048f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631003e2d2146100675780631f7b6d321461007c5780634cc8221514610097578063971217b7146100aa578063c34052e0146100bf578063e0886f90146100e2575b600080fd5b61007a6100753660046103ab565b6100f5565b005b610084610142565b6040519081526020015b60405180910390f35b61007a6100a53660046103ab565b610153565b6100b261015f565b60405161008e91906103c4565b6100d26100cd3660046103ab565b61016b565b604051901515815260200161008e565b6100846100f03660046103ab565b61017d565b60006101018183610189565b90507fed9840e0775590557ad736875d96c95cf1458b766335f74339951a32c82a9e3381604051610136911515815260200190565b60405180910390a15050565b600061014e600061019c565b905090565b600061010181836101a6565b606061014e60006101b2565b600061017781836101bf565b92915050565b600061017781836101d7565b600061019583836101e3565b9392505050565b6000610177825490565b60006101958383610232565b6060600061019583610325565b60008181526001830160205260408120541515610195565b60006101958383610381565b600081815260018301602052604081205461022a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610177565b506000610177565b6000818152600183016020526040812054801561031b576000610256600183610408565b855490915060009061026a90600190610408565b90508181146102cf57600086600001828154811061028a5761028a61042d565b90600052602060002001549050808760000184815481106102ad576102ad61042d565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806102e0576102e0610443565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610177565b6000915050610177565b60608160000180548060200260200160405190810160405280929190818152602001828054801561037557602002820191906000526020600020905b815481526020019060010190808311610361575b50505050509050919050565b60008260000182815481106103985761039861042d565b9060005260206000200154905092915050565b6000602082840312156103bd57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156103fc578351835292840192918401916001016103e0565b50909695505050505050565b60008282101561042857634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea26469706673582212202f7de0cc87bc5fa4415d305d9b24d8f26dc2d5012807f21cfc393cf24a3de10664736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80631003e2d2146100675780631f7b6d321461007c5780634cc8221514610097578063971217b7146100aa578063c34052e0146100bf578063e0886f90146100e2575b600080fd5b61007a6100753660046103ab565b6100f5565b005b610084610142565b6040519081526020015b60405180910390f35b61007a6100a53660046103ab565b610153565b6100b261015f565b60405161008e91906103c4565b6100d26100cd3660046103ab565b61016b565b604051901515815260200161008e565b6100846100f03660046103ab565b61017d565b60006101018183610189565b90507fed9840e0775590557ad736875d96c95cf1458b766335f74339951a32c82a9e3381604051610136911515815260200190565b60405180910390a15050565b600061014e600061019c565b905090565b600061010181836101a6565b606061014e60006101b2565b600061017781836101bf565b92915050565b600061017781836101d7565b600061019583836101e3565b9392505050565b6000610177825490565b60006101958383610232565b6060600061019583610325565b60008181526001830160205260408120541515610195565b60006101958383610381565b600081815260018301602052604081205461022a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610177565b506000610177565b6000818152600183016020526040812054801561031b576000610256600183610408565b855490915060009061026a90600190610408565b90508181146102cf57600086600001828154811061028a5761028a61042d565b90600052602060002001549050808760000184815481106102ad576102ad61042d565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806102e0576102e0610443565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610177565b6000915050610177565b60608160000180548060200260200160405190810160405280929190818152602001828054801561037557602002820191906000526020600020905b815481526020019060010190808311610361575b50505050509050919050565b60008260000182815481106103985761039861042d565b9060005260206000200154905092915050565b6000602082840312156103bd57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156103fc578351835292840192918401916001016103e0565b50909695505050505050565b60008282101561042857634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea26469706673582212202f7de0cc87bc5fa4415d305d9b24d8f26dc2d5012807f21cfc393cf24a3de10664736f6c634300080d0033"}, "abi": [{"type": "event", "name": "OperationResult", "inputs": [{"name": "result", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "function", "name": "add", "stateMutability": "nonpayable", "inputs": [{"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "at", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "contains", "stateMutability": "view", "inputs": [{"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "length", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "remove", "stateMutability": "nonpayable", "inputs": [{"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "values", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256[]", "internalType": "uint256[]"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "EtherReceiverMock": {"contractName": "EtherReceiverMock", "sourceId": "mocks/EtherReceiverMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5060c08061001f6000396000f3fe60806040526004361060205760003560e01c80634fea120c14603957600080fd5b3660345760005460ff16603257600080fd5b005b600080fd5b348015604457600080fd5b50603260503660046063565b6000805460ff1916911515919091179055565b600060208284031215607457600080fd5b81358015158114608357600080fd5b939250505056fea2646970667358221220e7a5a952e38a0c06f0480279181fd1b76f0e165c5d2b778a87b7fa6aafa955d864736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x60806040526004361060205760003560e01c80634fea120c14603957600080fd5b3660345760005460ff16603257600080fd5b005b600080fd5b348015604457600080fd5b50603260503660046063565b6000805460ff1916911515919091179055565b600060208284031215607457600080fd5b81358015158114608357600080fd5b939250505056fea2646970667358221220e7a5a952e38a0c06f0480279181fd1b76f0e165c5d2b778a87b7fa6aafa955d864736f6c634300080d0033"}, "abi": [{"type": "function", "name": "setAcceptEther", "stateMutability": "nonpayable", "inputs": [{"name": "acceptEther", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "GovernorCompMock": {"contractName": "GovernorCompMock", "sourceId": "mocks/GovernorCompMock.sol", "deploymentBytecode": {"bytecode": "0x6101606040523480156200001257600080fd5b50604051620024b7380380620024b78339810160408190526200003591620001ee565b808280620000576040805180820190915260018152603160f81b602082015290565b815160208084019190912082518383012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c00190528051940193909320919290916080523060c0526101205250508251620000fd925060009150602084019062000115565b50506001600160a01b031661014052506200031b9050565b8280546200012390620002df565b90600052602060002090601f01602090048101928262000147576000855562000192565b82601f106200016257805160ff191683800117855562000192565b8280016001018555821562000192579182015b828111156200019257825182559160200191906001019062000175565b50620001a0929150620001a4565b5090565b5b80821115620001a05760008155600101620001a5565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620001e957600080fd5b919050565b600080604083850312156200020257600080fd5b82516001600160401b03808211156200021a57600080fd5b818501915085601f8301126200022f57600080fd5b815181811115620002445762000244620001bb565b604051601f8201601f19908116603f011681019083821181831017156200026f576200026f620001bb565b816040528281526020935088848487010111156200028c57600080fd5b600091505b82821015620002b0578482018401518183018501529083019062000291565b82821115620002c25760008484830101525b9550620002d4915050858201620001d1565b925050509250929050565b600181811c90821680620002f457607f821691505b6020821081036200031557634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516101405161213a6200037d600039600081816104c80152611171015260006112b601526000611305015260006112e001526000611239015260006112630152600061128d015261213a6000f3fe6080604052600436106101445760003560e01c806354fd4d50116100b6578063c59057e41161006f578063c59057e4146103db578063dd4e2ba5146103fb578063deaaa7cc14610441578063eb9019d414610475578063f8ce560a14610495578063fc0c546a146104b657600080fd5b806354fd4d501461031d57806356781388146103475780637b3c71d3146103675780637d5e81e214610387578063b58131b0146103a7578063c01f9e37146103bb57600080fd5b80633932abb1116101085780633932abb1146101f85780633bccf4fd1461020c5780633e4f49e61461022c5780634385963214610259578063452115d6146102a3578063544ffc9c146102c357600080fd5b806301ffc9a71461015057806302a251a31461018557806306fdde03146101a35780632656227d146101c55780632d63f693146101d857600080fd5b3661014b57005b600080fd5b34801561015c57600080fd5b5061017061016b36600461177a565b610502565b60405190151581526020015b60405180910390f35b34801561019157600080fd5b5060105b60405190815260200161017c565b3480156101af57600080fd5b506101b8610539565b60405161017c9190611800565b6101956101d3366004611a50565b6105cb565b3480156101e457600080fd5b506101956101f3366004611adf565b6106dd565b34801561020457600080fd5b506004610195565b34801561021857600080fd5b50610195610227366004611b09565b610714565b34801561023857600080fd5b5061024c610247366004611adf565b6107a8565b60405161017c9190611b6d565b34801561026557600080fd5b50610170610274366004611b95565b60008281526002602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b3480156102af57600080fd5b506101956102be366004611a50565b61090d565b3480156102cf57600080fd5b506103026102de366004611adf565b60008181526002602081905260409091208054600182015491909201549193909250565b6040805193845260208401929092529082015260600161017c565b34801561032957600080fd5b506040805180820190915260018152603160f81b60208201526101b8565b34801561035357600080fd5b50610195610362366004611bc1565b610924565b34801561037357600080fd5b50610195610382366004611be4565b61094d565b34801561039357600080fd5b506101956103a2366004611c6a565b61099f565b3480156103b357600080fd5b506000610195565b3480156103c757600080fd5b506101956103d6366004611adf565b610c6c565b3480156103e757600080fd5b506101956103f6366004611a50565b610c9b565b34801561040757600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e908201526101b8565b34801561044d57600080fd5b506101957f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b34801561048157600080fd5b50610195610490366004611d2a565b610cd5565b3480156104a157600080fd5b506101956104b0366004611adf565b50600090565b3480156104c257600080fd5b506104ea7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161017c565b60006001600160e01b0319821663bf26d89760e01b148061053357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461054890611d54565b80601f016020809104026020016040519081016040528092919081815260200182805461057490611d54565b80156105c15780601f10610596576101008083540402835291602001916105c1565b820191906000526020600020905b8154815290600101906020018083116105a457829003601f168201915b5050505050905090565b6000806105da86868686610c9b565b905060006105e7826107a8565b905060048160078111156105fd576105fd611b57565b148061061a5750600581600781111561061857610618611b57565b145b6106755760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756044820152601b60fa1b60648201526084015b60405180910390fd5b600082815260016020818152604092839020600201805460ff191690921790915590518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f910160405180910390a16106d38288888888610ce1565b5095945050505050565b60008181526001602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610780906107789060800160405160208183030381529060405280519060200120610de0565b868686610e2e565b905061079d87828860405180602001604052806000815250610e4c565b979650505050505050565b6000818152600160208181526040808420815160a08101835281546001600160401b0390811660808301908152825283518086018552958301541685529283019390935260029092015460ff8082161580159484019490945261010090910416151560608201529061081d5750600792915050565b8060600151156108305750600292915050565b80515143906001600160401b03161061084c5750600092915050565b4361085982602001515190565b6001600160401b0316106108705750600192915050565b61087d8160200151610f57565b156108bf5761088b83610f86565b80156108aa575060008381526002602052604090208054600190910154115b6108b55760036108b8565b60045b9392505050565b60405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c206964000000604482015260640161066c565b50919050565b600061091b85858585610fbe565b95945050505050565b60008033905061094584828560405180602001604052806000815250610e4c565b949350505050565b60008033905061099586828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e4c92505050565b9695505050505050565b6000806109b133610490600143611d9e565b1015610a315760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72436f6d7061746962696c697479427261766f3a2070726f7060448201527f6f73657220766f7465732062656c6f772070726f706f73616c207468726573686064820152621bdb1960ea1b608482015260a40161066c565b6000610a468686868680519060200120610c9b565b90508451865114610a695760405162461bcd60e51b815260040161066c90611db5565b8351865114610a8a5760405162461bcd60e51b815260040161066c90611db5565b6000865111610adb5760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c0000000000000000604482015260640161066c565b600081815260016020908152604091829020825191820190925281546001600160401b03169081905215610b5b5760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b606482015260840161066c565b6000610b6760046110dc565b610b70436110dc565b610b7a9190611df6565b90506000610b8860106110dc565b610b929083611df6565b835467ffffffffffffffff19166001600160401b038416178455905060018301805467ffffffffffffffff19166001600160401b0383161790557f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b03811115610c0a57610c0a611813565b604051908082528060200260200182016040528015610c3d57816020015b6060815260200190600190039081610c285790505b508c88888e604051610c5799989796959493929190611eea565b60405180910390a15091979650505050505050565b60008181526001602081815260408084208151928301909152909101546001600160401b031690819052610705565b600084848484604051602001610cb49493929190611fd9565b60408051601f19818403018152919052805160209091012095945050505050565b60006108b88383611148565b60006040518060600160405280602781526020016120de60279139905060005b8551811015610dd757600080878381518110610d1f57610d1f612024565b60200260200101516001600160a01b0316878481518110610d4257610d42612024565b6020026020010151878581518110610d5c57610d5c612024565b6020026020010151604051610d71919061203a565b60006040518083038185875af1925050503d8060008114610dae576040519150601f19603f3d011682016040523d82523d6000602084013e610db3565b606091505b5091509150610dc38282866111f3565b50505080610dd090612056565b9050610d01565b50505050505050565b6000610533610ded61122c565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000610e3f87878787611353565b915091506106d381611440565b6000848152600160208190526040822090610e66876107a8565b6007811115610e7757610e77611b57565b14610ed05760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b606482015260840161066c565b604080516020810190915281546001600160401b031690819052600090610ef8908790610cd5565b9050610f06878787846115f9565b856001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda488878488604051610f45949392919061206f565b60405180910390a29695505050505050565b6000610f6c82516001600160401b0316151590565b801561053357505051436001600160401b03909116111590565b60008181526002602081905260408220908101546001820154610fa99190612097565b610fb56104b0856106dd565b11159392505050565b600080610fcd86868686610c9b565b90506000610fda826107a8565b90506002816007811115610ff057610ff0611b57565b141580156110105750600681600781111561100d5761100d611b57565b14155b801561102e5750600781600781111561102b5761102b611b57565b14155b61107a5760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a2070726f706f73616c206e6f7420616374697665000000604482015260640161066c565b60008281526001602052604090819020600201805461ff001916610100179055517f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c906110ca9084815260200190565b60405180910390a15095945050505050565b60006001600160401b038211156111445760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b606482015260840161066c565b5090565b60405163782d6fe160e01b81526001600160a01b038381166004830152602482018390526000917f00000000000000000000000000000000000000000000000000000000000000009091169063782d6fe190604401602060405180830381865afa1580156111ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111de91906120af565b6bffffffffffffffffffffffff169392505050565b606083156112025750816108b8565b8251156112125782518084602001fd5b8160405162461bcd60e51b815260040161066c9190611800565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561128557507f000000000000000000000000000000000000000000000000000000000000000046145b156112af57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561138a5750600090506003611437565b8460ff16601b141580156113a257508460ff16601c14155b156113b35750600090506004611437565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611407573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661143057600060019250925050611437565b9150600090505b94509492505050565b600081600481111561145457611454611b57565b0361145c5750565b600181600481111561147057611470611b57565b036114bd5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161066c565b60028160048111156114d1576114d1611b57565b0361151e5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161066c565b600381600481111561153257611532611b57565b0361158a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161066c565b600481600481111561159e5761159e611b57565b036115f65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161066c565b50565b60008481526002602090815260408083206001600160a01b0387168452600381019092529091205460ff16156116815760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b606482015260840161066c565b6001600160a01b03841660009081526003820160205260409020805460ff1916600117905560ff83166116cd57818160000160008282546116c29190612097565b909155506117739050565b60001960ff8416016116ed57818160010160008282546116c29190612097565b60011960ff84160161170d57818160020160008282546116c29190612097565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b606482015260840161066c565b5050505050565b60006020828403121561178c57600080fd5b81356001600160e01b0319811681146108b857600080fd5b60005b838110156117bf5781810151838201526020016117a7565b838111156117ce576000848401525b50505050565b600081518084526117ec8160208601602086016117a4565b601f01601f19169290920160200192915050565b6020815260006108b860208301846117d4565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561185157611851611813565b604052919050565b60006001600160401b0382111561187257611872611813565b5060051b60200190565b80356001600160a01b038116811461189357600080fd5b919050565b600082601f8301126118a957600080fd5b813560206118be6118b983611859565b611829565b82815260059290921b840181019181810190868411156118dd57600080fd5b8286015b848110156118ff576118f28161187c565b83529183019183016118e1565b509695505050505050565b600082601f83011261191b57600080fd5b8135602061192b6118b983611859565b82815260059290921b8401810191818101908684111561194a57600080fd5b8286015b848110156118ff578035835291830191830161194e565b60006001600160401b0383111561197e5761197e611813565b611991601f8401601f1916602001611829565b90508281528383830111156119a557600080fd5b828260208301376000602084830101529392505050565b600082601f8301126119cd57600080fd5b813560206119dd6118b983611859565b82815260059290921b840181019181810190868411156119fc57600080fd5b8286015b848110156118ff5780356001600160401b03811115611a1f5760008081fd5b8701603f81018913611a315760008081fd5b611a42898683013560408401611965565b845250918301918301611a00565b60008060008060808587031215611a6657600080fd5b84356001600160401b0380821115611a7d57600080fd5b611a8988838901611898565b95506020870135915080821115611a9f57600080fd5b611aab8883890161190a565b94506040870135915080821115611ac157600080fd5b50611ace878288016119bc565b949793965093946060013593505050565b600060208284031215611af157600080fd5b5035919050565b803560ff8116811461189357600080fd5b600080600080600060a08688031215611b2157600080fd5b85359450611b3160208701611af8565b9350611b3f60408701611af8565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b6020810160088310611b8f57634e487b7160e01b600052602160045260246000fd5b91905290565b60008060408385031215611ba857600080fd5b82359150611bb86020840161187c565b90509250929050565b60008060408385031215611bd457600080fd5b82359150611bb860208401611af8565b60008060008060608587031215611bfa57600080fd5b84359350611c0a60208601611af8565b925060408501356001600160401b0380821115611c2657600080fd5b818701915087601f830112611c3a57600080fd5b813581811115611c4957600080fd5b886020828501011115611c5b57600080fd5b95989497505060200194505050565b60008060008060808587031215611c8057600080fd5b84356001600160401b0380821115611c9757600080fd5b611ca388838901611898565b95506020870135915080821115611cb957600080fd5b611cc58883890161190a565b94506040870135915080821115611cdb57600080fd5b611ce7888389016119bc565b93506060870135915080821115611cfd57600080fd5b508501601f81018713611d0f57600080fd5b611d1e87823560208401611965565b91505092959194509250565b60008060408385031215611d3d57600080fd5b611d468361187c565b946020939093013593505050565b600181811c90821680611d6857607f821691505b60208210810361090757634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015611db057611db0611d88565b500390565b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b03808316818516808303821115611e1857611e18611d88565b01949350505050565b600081518084526020808501945080840160005b83811015611e5a5781516001600160a01b031687529582019590820190600101611e35565b509495945050505050565b600081518084526020808501945080840160005b83811015611e5a57815187529582019590820190600101611e79565b600081518084526020808501808196508360051b8101915082860160005b85811015611edd578284038952611ecb8483516117d4565b98850198935090840190600101611eb3565b5091979650505050505050565b60006101208b8352602060018060a01b038c1681850152816040850152611f138285018c611e21565b91508382036060850152611f27828b611e65565b915083820360808501528189518084528284019150828160051b850101838c0160005b83811015611f7857601f19878403018552611f668383516117d4565b94860194925090850190600101611f4a565b505086810360a0880152611f8c818c611e95565b945050505050611fa760c08401876001600160401b03169052565b6001600160401b03851660e0840152828103610100840152611fc981856117d4565b9c9b505050505050505050505050565b608081526000611fec6080830187611e21565b8281036020840152611ffe8187611e65565b905082810360408401526120128186611e95565b91505082606083015295945050505050565b634e487b7160e01b600052603260045260246000fd5b6000825161204c8184602087016117a4565b9190910192915050565b60006001820161206857612068611d88565b5060010190565b84815260ff8416602082015282604082015260806060820152600061099560808301846117d4565b600082198211156120aa576120aa611d88565b500190565b6000602082840312156120c157600080fd5b81516bffffffffffffffffffffffff811681146108b857600080fdfe476f7665726e6f723a2063616c6c20726576657274656420776974686f7574206d657373616765a2646970667358221220e2bd6580b737b62dd970d1f3c658390d790c073dd80aa664fc8948ab0ff8b33364736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name_", "type": "string", "internalType": "string"}, {"name": "token_", "type": "address", "internalType": "contract ERC20VotesComp"}]}, {"type": "event", "name": "ProposalCanceled", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalCreated", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "proposer", "type": "address", "internalType": "address", "indexed": false}, {"name": "targets", "type": "address[]", "internalType": "address[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "signatures", "type": "string[]", "internalType": "string[]", "indexed": false}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]", "indexed": false}, {"name": "startBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "endBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "description", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalExecuted", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VoteCast", "inputs": [{"name": "voter", "type": "address", "internalType": "address", "indexed": true}, {"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "support", "type": "uint8", "internalType": "uint8", "indexed": false}, {"name": "weight", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "reason", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "function", "name": "BALLOT_TYPEHASH", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "COUNTING_MODE", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "cancel", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "salt", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVote", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteBySig", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteWithReason", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "reason", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "hasVoted", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "hashProposal", "stateMutability": "pure", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "proposalDeadline", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalSnapshot", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalThreshold", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalVotes", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "againstVotes", "type": "uint256", "internalType": "uint256"}, {"name": "forVotes", "type": "uint256", "internalType": "uint256"}, {"name": "abstainVotes", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorum", "stateMutability": "pure", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "enum IGovernor.ProposalState"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "token", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "contract ERC20VotesComp"}]}, {"type": "function", "name": "version", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "votingDelay", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "votingPeriod", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {"votingDelay()": {"notice": "module:user-config"}, "votingPeriod()": {"notice": "module:user-config"}}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"COUNTING_MODE()": {"details": "See {IGovernor-COUNTING_MODE}."}, "castVote(uint256,uint8)": {"details": "See {IGovernor-castVote}."}, "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {"details": "See {IGovernor-castVoteBySig}."}, "castVoteWithReason(uint256,uint8,string)": {"details": "See {IGovernor-castVoteWithReason}."}, "execute(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-execute}."}, "hasVoted(uint256,address)": {"details": "See {IGovernor-hasVoted}."}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."}, "name()": {"details": "See {IGovernor-name}."}, "proposalDeadline(uint256)": {"details": "See {IGovernor-proposalDeadline}."}, "proposalSnapshot(uint256)": {"details": "See {IGovernor-proposalSnapshot}."}, "proposalThreshold()": {"details": "Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_."}, "proposalVotes(uint256)": {"details": "Accessor to the internal vote counts."}, "propose(address[],uint256[],bytes[],string)": {"details": "See {IGovernor-propose}."}, "state(uint256)": {"details": "See {IGovernor-state}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "version()": {"details": "See {IGovernor-version}."}, "votingDelay()": {"details": "Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts."}, "votingPeriod()": {"details": "Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay."}}, "version": 1}}, "GovernorCompatibilityBravoMock": {"contractName": "GovernorCompatibilityBravoMock", "sourceId": "mocks/GovernorCompatibilityBravoMock.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": "0x6080604052600436106102295760003560e01c80637d5e81e211610123578063dd4e2ba5116100ab578063eb9019d41161006f578063eb9019d4146107eb578063ece40cc11461080b578063f8ce560a1461082b578063fc0c546a1461084c578063fe0d94c11461088057600080fd5b8063dd4e2ba514610667578063ddf0b009146106ad578063deaaa7cc146106cd578063e23a9a5214610701578063ea0217cf146107cb57600080fd5b8063b9a61961116100f2578063b9a61961146105c0578063c01f9e37146105d5578063c59057e4146105f5578063d33219b414610615578063da95691a1461064757600080fd5b80637d5e81e21461054b578063a890c9101461056b578063ab58fb8e1461058b578063b58131b0146105ab57600080fd5b80633932abb1116101b1578063452115d611610175578063452115d6146104a157806354fd4d50146104c157806356781388146104eb57806370b0f6601461050b5780637b3c71d31461052b57600080fd5b80633932abb1146103d55780633bccf4fd146103ea5780633e4f49e61461040a57806340e58ee514610437578063438596321461045757600080fd5b8063160cbed7116101f8578063160cbed71461033d57806324bc1a641461035d5780632656227d146103725780632d63f69314610385578063328dd982146103a557600080fd5b8063013cf08b1461025157806301ffc9a7146102cc57806302a251a3146102fc57806306fdde031461031b57600080fd5b3661024c5730610237610893565b6001600160a01b03161461024a57600080fd5b005b600080fd5b34801561025d57600080fd5b5061027161026c366004613609565b6108ac565b604080519a8b526001600160a01b0390991660208b0152978901969096526060880194909452608087019290925260a086015260c085015260e084015215156101008301521515610120820152610140015b60405180910390f35b3480156102d857600080fd5b506102ec6102e7366004613622565b610955565b60405190151581526020016102c3565b34801561030857600080fd5b506004545b6040519081526020016102c3565b34801561032757600080fd5b50610330610966565b6040516102c391906136a4565b34801561034957600080fd5b5061030d6103583660046138f8565b6109f8565b34801561036957600080fd5b5061030d610a0f565b61030d6103803660046138f8565b610a1f565b34801561039157600080fd5b5061030d6103a0366004613609565b610a2d565b3480156103b157600080fd5b506103c56103c0366004613609565b610a64565b6040516102c39493929190613a50565b3480156103e157600080fd5b5060035461030d565b3480156103f657600080fd5b5061030d610405366004613ab3565b610cf5565b34801561041657600080fd5b5061042a610425366004613609565b610d89565b6040516102c39190613b17565b34801561044357600080fd5b5061024a610452366004613609565b610d94565b34801561046357600080fd5b506102ec610472366004613b3f565b60008281526002602090815260408083206001600160a01b038516845260080190915290205460ff1692915050565b3480156104ad57600080fd5b5061030d6104bc3660046138f8565b6110b1565b3480156104cd57600080fd5b506040805180820190915260018152603160f81b6020820152610330565b3480156104f757600080fd5b5061030d610506366004613b6f565b6110bf565b34801561051757600080fd5b5061024a610526366004613609565b6110e8565b34801561053757600080fd5b5061030d610546366004613b9b565b61112c565b34801561055757600080fd5b5061030d610566366004613c41565b61117e565b34801561057757600080fd5b5061024a610586366004613ced565b61118c565b34801561059757600080fd5b5061030d6105a6366004613609565b6111cd565b3480156105b757600080fd5b5061030d6111d8565b3480156105cc57600080fd5b5061024a6111e3565b3480156105e157600080fd5b5061030d6105f0366004613609565b61124d565b34801561060157600080fd5b5061030d6106103660046138f8565b61127c565b34801561062157600080fd5b506006546001600160a01b03165b6040516001600160a01b0390911681526020016102c3565b34801561065357600080fd5b5061030d610662366004613d89565b6112b6565b34801561067357600080fd5b5060408051808201909152601a81527f737570706f72743d627261766f2671756f72756d3d627261766f0000000000006020820152610330565b3480156106b957600080fd5b5061024a6106c8366004613609565b6112db565b3480156106d957600080fd5b5061030d7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b34801561070d57600080fd5b5061079b61071c366004613b3f565b60408051606081018252600080825260208201819052918101919091525060009182526002602090815260408084206001600160a01b0393909316845260089092018152918190208151606081018352905460ff8082161515835261010082041693820193909352620100009092046001600160601b03169082015290565b6040805182511515815260208084015160ff1690820152918101516001600160601b0316908201526060016102c3565b3480156107d757600080fd5b5061024a6107e6366004613609565b611549565b3480156107f757600080fd5b5061030d610806366004613e5a565b61158a565b34801561081757600080fd5b5061024a610826366004613609565b61159d565b34801561083757600080fd5b5061030d610846366004613609565b50600090565b34801561085857600080fd5b5061062f7f000000000000000000000000000000000000000000000000000000000000000081565b61024a61088e366004613609565b6115de565b60006108a76006546001600160a01b031690565b905090565b80600080808080808080806108c08a6111cd565b97506108cb8b610a2d565b96506108d68b61124d565b60008c815260026020526040812080546005820154600683015460078401546001600160a01b039093169e50949a5098509296509194506109168d610d89565b9050600281600781111561092c5761092c613b01565b149350600781600781111561094357610943613b01565b14925050509193959799509193959799565b60006109608261184c565b92915050565b60606000805461097590613e86565b80601f01602080910402602001604051908101604052809291908181526020018280546109a190613e86565b80156109ee5780601f106109c3576101008083540402835291602001916109ee565b820191906000526020600020905b8154815290600101906020018083116109d157829003601f168201915b5050505050905090565b6000610a0685858585611871565b95945050505050565b60006108a7610846600143613ed0565b6000610a0685858585611beb565b60008181526001602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b60608060608060006002600087815260200190815260200160002090508060010181600201826003018360040183805480602002602001604051908101604052809291908181526020018280548015610ae657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ac8575b5050505050935082805480602002602001604051908101604052809291908181526020018280548015610b3857602002820191906000526020600020905b815481526020019060010190808311610b24575b5050505050925081805480602002602001604051908101604052809291908181526020016000905b82821015610c0c578382906000526020600020018054610b7f90613e86565b80601f0160208091040260200160405190810160405280929190818152602001828054610bab90613e86565b8015610bf85780601f10610bcd57610100808354040283529160200191610bf8565b820191906000526020600020905b815481529060010190602001808311610bdb57829003601f168201915b505050505081526020019060010190610b60565b50505050915080805480602002602001604051908101604052809291908181526020016000905b82821015610cdf578382906000526020600020018054610c5290613e86565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7e90613e86565b8015610ccb5780601f10610ca057610100808354040283529160200191610ccb565b820191906000526020600020905b815481529060010190602001808311610cae57829003601f168201915b505050505081526020019060010190610c33565b5050505090509450945094509450509193509193565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610d6190610d599060800160405160208183030381529060405280519060200120611cbe565b868686611d0c565b9050610d7e87828860405180602001604052806000815250611d2a565b979650505050505050565b600061096082611e35565b600081815260026020526040902080546001600160a01b0316336001600160a01b03161480610de25750610dc66111d8565b8154610de0906001600160a01b0316610806600143613ed0565b105b610e435760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72427261766f3a2070726f706f7365722061626f76652074686044820152661c995cda1bdb1960ca1b60648201526084015b60405180910390fd5b6110ac81600101805480602002602001604051908101604052809291908181526020018280548015610e9e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e80575b505050505082600201805480602002602001604051908101604052809291908181526020018280548015610ef157602002820191906000526020600020905b815481526020019060010190808311610edd575b50505050506110a284600301805480602002602001604051908101604052809291908181526020016000905b82821015610fc9578382906000526020600020018054610f3c90613e86565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6890613e86565b8015610fb55780601f10610f8a57610100808354040283529160200191610fb5565b820191906000526020600020905b815481529060010190602001808311610f9857829003601f168201915b505050505081526020019060010190610f1d565b50505060048701805460408051602080840282018101909252828152935060009084015b8282101561109957838290600052602060002001805461100c90613e86565b80601f016020809104026020016040519081016040528092919081815260200182805461103890613e86565b80156110855780601f1061105a57610100808354040283529160200191611085565b820191906000526020600020905b81548152906001019060200180831161106857829003601f168201915b505050505081526020019060010190610fed565b50505050611f19565b846009015461204b565b505050565b6000610a068585858561204b565b6000803390506110e084828560405180602001604052806000815250611d2a565b949350505050565b6110f0610893565b6001600160a01b0316336001600160a01b0316146111205760405162461bcd60e51b8152600401610e3a90613ee7565b61112981612059565b50565b60008033905061117486828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611d2a92505050565b9695505050505050565b6000610a068585858561209a565b611194610893565b6001600160a01b0316336001600160a01b0316146111c45760405162461bcd60e51b8152600401610e3a90613ee7565b61112981612102565b60006109608261216b565b60006108a760055490565b600660009054906101000a90046001600160a01b03166001600160a01b0316630e18b6816040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561123357600080fd5b505af1158015611247573d6000803e3d6000fd5b50505050565b60008181526001602081815260408084208151928301909152909101546001600160401b031690819052610a55565b6000848484846040516020016112959493929190613f1e565b60408051601f19818403018152919052805160209091012095945050505050565b60006112c6338787878787612197565b61117486866112d58787611f19565b8561117e565b60008181526002602090815260409182902060018101805484518185028101850190955280855291936110ac9390929083018282801561134457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611326575b50505050508260020180548060200260200160405190810160405280929190818152602001828054801561139757602002820191906000526020600020905b815481526020019060010190808311611383575b505050505061153f84600301805480602002602001604051908101604052809291908181526020016000905b8282101561146f5783829060005260206000200180546113e290613e86565b80601f016020809104026020016040519081016040528092919081815260200182805461140e90613e86565b801561145b5780601f106114305761010080835404028352916020019161145b565b820191906000526020600020905b81548152906001019060200180831161143e57829003601f168201915b5050505050815260200190600101906113c3565b50505060048701805460408051602080840282018101909252828152935060009084015b828210156110995783829060005260206000200180546114b290613e86565b80601f01602080910402602001604051908101604052809291908181526020018280546114de90613e86565b801561152b5780601f106115005761010080835404028352916020019161152b565b820191906000526020600020905b81548152906001019060200180831161150e57829003601f168201915b505050505081526020019060010190611493565b84600901546109f8565b611551610893565b6001600160a01b0316336001600160a01b0316146115815760405162461bcd60e51b8152600401610e3a90613ee7565b61112981612254565b600061159683836122f5565b9392505050565b6115a5610893565b6001600160a01b0316336001600160a01b0316146115d55760405162461bcd60e51b8152600401610e3a90613ee7565b6111298161239b565b60008181526002602090815260409182902060018101805484518185028101850190955280855291936110ac9390929083018282801561164757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611629575b50505050508260020180548060200260200160405190810160405280929190818152602001828054801561169a57602002820191906000526020600020905b815481526020019060010190808311611686575b505050505061184284600301805480602002602001604051908101604052809291908181526020016000905b828210156117725783829060005260206000200180546116e590613e86565b80601f016020809104026020016040519081016040528092919081815260200182805461171190613e86565b801561175e5780601f106117335761010080835404028352916020019161175e565b820191906000526020600020905b81548152906001019060200180831161174157829003601f168201915b5050505050815260200190600101906116c6565b50505060048701805460408051602080840282018101909252828152935060009084015b828210156110995783829060005260206000200180546117b590613e86565b80601f01602080910402602001604051908101604052809291908181526020018280546117e190613e86565b801561182e5780601f106118035761010080835404028352916020019161182e565b820191906000526020600020905b81548152906001019060200180831161181157829003601f168201915b505050505081526020019060010190611796565b8460090154610a1f565b60006001600160e01b03198216636e665ced60e01b14806109605750610960826123dc565b6000806118808686868661127c565b9050600461188d82610d89565b600781111561189e5761189e613b01565b146118bb5760405162461bcd60e51b8152600401610e3a90613f69565b60065460408051630d48571f60e31b815290516000926001600160a01b031691636a42b8f89160048083019260209291908290030181865afa158015611905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119299190613faa565b6119339042613fc3565b905061195561194182612411565b60008481526007602052604090209061247d565b60005b8751811015611ba65760065488516001600160a01b039091169063f2b06537908a908490811061198a5761198a613fdb565b60200260200101518984815181106119a4576119a4613fdb565b60200260200101518985815181106119be576119be613fdb565b6020026020010151866040516020016119da9493929190613ff1565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611a0e91815260200190565b602060405180830381865afa158015611a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4f9190614037565b15611acd5760405162461bcd60e51b815260206004820152604260248201527f476f7665726e6f7254696d656c6f636b436f6d706f756e643a206964656e746960448201527f63616c2070726f706f73616c20616374696f6e20616c72656164792071756575606482015261195960f21b608482015260a401610e3a565b60065488516001600160a01b0390911690633a66f901908a9084908110611af657611af6613fdb565b6020026020010151898481518110611b1057611b10613fdb565b6020026020010151898581518110611b2a57611b2a613fdb565b6020026020010151866040518563ffffffff1660e01b8152600401611b529493929190613ff1565b6020604051808303816000875af1158015611b71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b959190613faa565b50611b9f81614059565b9050611958565b5060408051838152602081018390527f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda289291015b60405180910390a15095945050505050565b600080611bfa8686868661127c565b90506000611c0782610d89565b90506004816007811115611c1d57611c1d613b01565b1480611c3a57506005816007811115611c3857611c38613b01565b145b611c565760405162461bcd60e51b8152600401610e3a90613f69565b600082815260016020818152604092839020600201805460ff191690921790915590518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f910160405180910390a1611cb4828888888861249b565b5095945050505050565b6000610960611ccb6124af565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611d1d878787876125d6565b91509150611cb4816126c3565b6000848152600160208190526040822090611d4487610d89565b6007811115611d5557611d55613b01565b14611dae5760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b6064820152608401610e3a565b604080516020810190915281546001600160401b031690819052600090611dd690879061158a565b9050611de487878784612879565b856001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda488878488604051611e239493929190614072565b60405180910390a29695505050505050565b600080611e4183612a1e565b90506004816007811115611e5757611e57613b01565b14611e625792915050565b6000611e6d846111cd565b905080600003611e7e575092915050565b600660009054906101000a90046001600160a01b03166001600160a01b031663c1a287e26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ed1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef59190613faa565b611eff9082613fc3565b4210611f0f575060069392505050565b5060059392505050565b6060600082516001600160401b03811115611f3657611f366136b7565b604051908082528060200260200182016040528015611f6957816020015b6060815260200190600190039081611f545790505b50905060005b845181101561204357848181518110611f8a57611f8a613fdb565b602002602001015151600014611ffa57848181518110611fac57611fac613fdb565b602002602001015180519060200120848281518110611fcd57611fcd613fdb565b6020026020010151604051602001611fe692919061409a565b604051602081830303815290604052612015565b83818151811061200c5761200c613fdb565b60200260200101515b82828151811061202757612027613fdb565b60200260200101819052508061203c90614059565b9050611f6f565b509392505050565b6000610a0685858585612b85565b60035460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600355565b60006120f633868686516001600160401b038111156120bb576120bb6136b7565b6040519080825280602002602001820160405280156120ee57816020015b60608152602001906001900390816120d95790505b508787612197565b610a0685858585612ca0565b600654604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600680546001600160a01b0319166001600160a01b0392909216919091179055565b60008181526007602090815260408083208151928301909152546001600160401b031690819052610a55565b8051602082012060006121b587876121af8888611f19565b8561127c565b60008181526002602052604090206009810154919250906122495780546001600160a01b0319166001600160a01b038a1617815587516121fe90600183019060208b01906133bf565b50865161221490600283019060208a0190613420565b50855161222a906003830190602089019061345b565b50845161224090600483019060208801906134b4565b50600981018390555b505050505050505050565b600081116122b45760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b6064820152608401610e3a565b60045460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600455565b60405163782d6fe160e01b81526001600160a01b038381166004830152602482018390526000917f00000000000000000000000000000000000000000000000000000000000000009091169063782d6fe190604401602060405180830381865afa158015612367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238b91906140cb565b6001600160601b03169392505050565b60055460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600555565b60006001600160e01b0319821663bf26d89760e01b148061096057506301ffc9a760e01b6001600160e01b0319831614610960565b60006001600160401b038211156124795760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610e3a565b5090565b815467ffffffffffffffff19166001600160401b0391909116179055565b6124a88585858585612f5c565b5050505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561250857507f000000000000000000000000000000000000000000000000000000000000000046145b1561253257507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561260d57506000905060036126ba565b8460ff16601b1415801561262557508460ff16601c14155b1561263657506000905060046126ba565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561268a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166126b3576000600192509250506126ba565b9150600090505b94509492505050565b60008160048111156126d7576126d7613b01565b036126df5750565b60018160048111156126f3576126f3613b01565b036127405760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610e3a565b600281600481111561275457612754613b01565b036127a15760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610e3a565b60038160048111156127b5576127b5613b01565b0361280d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610e3a565b600481600481111561282157612821613b01565b036111295760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610e3a565b60008481526002602090815260408083206001600160a01b038716845260088101909252909120805460ff16156129085760405162461bcd60e51b815260206004820152602d60248201527f476f7665726e6f72436f6d7061746962696c697479427261766f3a20766f746560448201526c08185b1c9958591e4818d85cdd609a1b6064820152608401610e3a565b805460ff85166101000261ffff19909116176001178155612928836130db565b81546001600160601b039190911662010000026dffffffffffffffffffffffff00001990911617815560ff8416612978578282600601600082825461296d9190613fc3565b90915550612a169050565b60001960ff851601612998578282600501600082825461296d9190613fc3565b60011960ff8516016129b8578282600701600082825461296d9190613fc3565b60405162461bcd60e51b815260206004820152602d60248201527f476f7665726e6f72436f6d7061746962696c697479427261766f3a20696e766160448201526c6c696420766f7465207479706560981b6064820152608401610e3a565b505050505050565b6000818152600160208181526040808420815160a08101835281546001600160401b0390811660808301908152825283518086018552958301541685529283019390935260029092015460ff80821615801594840194909452610100909104161515606082015290612a935750600792915050565b806060015115612aa65750600292915050565b80515143906001600160401b031610612ac25750600092915050565b43612acf82602001515190565b6001600160401b031610612ae65750600192915050565b612af38160200151613143565b15612b3757612b0183613172565b8015612b23575060008381526002602052604090206006810154600590910154115b612b2e576003611596565b60049392505050565b60405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c2069640000006044820152606401610e3a565b50919050565b600080612b948686868661319a565b90506000612ba1826111cd565b90508015611cb45760005b8751811015612c7d5760065488516001600160a01b039091169063591fcdfe908a9084908110612bde57612bde613fdb565b6020026020010151898481518110612bf857612bf8613fdb565b6020026020010151898581518110612c1257612c12613fdb565b6020026020010151866040518563ffffffff1660e01b8152600401612c3a9493929190613ff1565b600060405180830381600087803b158015612c5457600080fd5b505af1158015612c68573d6000803e3d6000fd5b5050505080612c7690614059565b9050612bac565b506000828152600760205260409020805467ffffffffffffffff19169055611cb4565b6000612caa6111d8565b612cb933610806600143613ed0565b1015612d395760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72436f6d7061746962696c697479427261766f3a2070726f7060448201527f6f73657220766f7465732062656c6f772070726f706f73616c207468726573686064820152621bdb1960ea1b608482015260a401610e3a565b6000612d4e868686868051906020012061127c565b90508451865114612d715760405162461bcd60e51b8152600401610e3a906140f4565b8351865114612d925760405162461bcd60e51b8152600401610e3a906140f4565b6000865111612de35760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c00000000000000006044820152606401610e3a565b600081815260016020908152604091829020825191820190925281546001600160401b03169081905215612e635760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b6064820152608401610e3a565b6000612e76612e7160035490565b612411565b612e7f43612411565b612e899190614135565b90506000612e99612e7160045490565b612ea39083614135565b9050612eaf838361247d565b612ebc600184018261247d565b7f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b03811115612efa57612efa6136b7565b604051908082528060200260200182016040528015612f2d57816020015b6060815260200190600190039081612f185790505b508c88888e604051612f4799989796959493929190614160565b60405180910390a15091979650505050505050565b6000612f67866111cd565b905060008111612fd35760405162461bcd60e51b815260206004820152603160248201527f476f7665726e6f7254696d656c6f636b436f6d706f756e643a2070726f706f73604482015270185b081b9bdd081e595d081c5d595d5959607a1b6064820152608401610e3a565b600654612fe9906001600160a01b0316346132a6565b60005b85518110156130d25760065486516001600160a01b0390911690630825f38f9088908490811061301e5761301e613fdb565b602002602001015187848151811061303857613038613fdb565b602002602001015187858151811061305257613052613fdb565b6020026020010151866040518563ffffffff1660e01b815260040161307a9493929190613ff1565b6000604051808303816000875af1158015613099573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526130c19190810190614203565b506130cb81614059565b9050612fec565b50505050505050565b60006001600160601b038211156124795760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203960448201526536206269747360d01b6064820152608401610e3a565b600061315882516001600160401b0316151590565b801561096057505051436001600160401b03909116111590565b6000818152600260205260408120600581015461319161084685610a2d565b11159392505050565b6000806131a98686868661127c565b905060006131b682610d89565b905060028160078111156131cc576131cc613b01565b141580156131ec575060068160078111156131e9576131e9613b01565b14155b801561320a5750600781600781111561320757613207613b01565b14155b6132565760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a2070726f706f73616c206e6f74206163746976650000006044820152606401610e3a565b60008281526001602052604090819020600201805461ff001916610100179055517f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c90611bd99084815260200190565b804710156132f65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610e3a565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613343576040519150601f19603f3d011682016040523d82523d6000602084013e613348565b606091505b50509050806110ac5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610e3a565b828054828255906000526020600020908101928215613414579160200282015b8281111561341457825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906133df565b5061247992915061350d565b828054828255906000526020600020908101928215613414579160200282015b82811115613414578251825591602001919060010190613440565b8280548282559060005260206000209081019282156134a8579160200282015b828111156134a85782518051613498918491602090910190613522565b509160200191906001019061347b565b50612479929150613595565b828054828255906000526020600020908101928215613501579160200282015b8281111561350157825180516134f1918491602090910190613522565b50916020019190600101906134d4565b506124799291506135b2565b5b80821115612479576000815560010161350e565b82805461352e90613e86565b90600052602060002090601f0160209004810192826135505760008555613414565b82601f1061356957805160ff1916838001178555613414565b828001600101855582156134145791820182811115613414578251825591602001919060010190613440565b808211156124795760006135a982826135cf565b50600101613595565b808211156124795760006135c682826135cf565b506001016135b2565b5080546135db90613e86565b6000825580601f106135eb575050565b601f016020900490600052602060002090810190611129919061350d565b60006020828403121561361b57600080fd5b5035919050565b60006020828403121561363457600080fd5b81356001600160e01b03198116811461159657600080fd5b60005b8381101561366757818101518382015260200161364f565b838111156112475750506000910152565b6000815180845261369081602086016020860161364c565b601f01601f19169290920160200192915050565b6020815260006115966020830184613678565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156136f5576136f56136b7565b604052919050565b60006001600160401b03821115613716576137166136b7565b5060051b60200190565b6001600160a01b038116811461112957600080fd5b600082601f83011261374657600080fd5b8135602061375b613756836136fd565b6136cd565b82815260059290921b8401810191818101908684111561377a57600080fd5b8286015b8481101561379e57803561379181613720565b835291830191830161377e565b509695505050505050565b600082601f8301126137ba57600080fd5b813560206137ca613756836136fd565b82815260059290921b840181019181810190868411156137e957600080fd5b8286015b8481101561379e57803583529183019183016137ed565b60006001600160401b0382111561381d5761381d6136b7565b50601f01601f191660200190565b600061383961375684613804565b905082815283838301111561384d57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261387557600080fd5b81356020613885613756836136fd565b82815260059290921b840181019181810190868411156138a457600080fd5b8286015b8481101561379e5780356001600160401b038111156138c75760008081fd5b8701603f810189136138d95760008081fd5b6138ea89868301356040840161382b565b8452509183019183016138a8565b6000806000806080858703121561390e57600080fd5b84356001600160401b038082111561392557600080fd5b61393188838901613735565b9550602087013591508082111561394757600080fd5b613953888389016137a9565b9450604087013591508082111561396957600080fd5b5061397687828801613864565b949793965093946060013593505050565b600081518084526020808501945080840160005b838110156139c05781516001600160a01b03168752958201959082019060010161399b565b509495945050505050565b600081518084526020808501945080840160005b838110156139c0578151875295820195908201906001016139df565b600081518084526020808501808196508360051b8101915082860160005b85811015613a43578284038952613a31848351613678565b98850198935090840190600101613a19565b5091979650505050505050565b608081526000613a636080830187613987565b8281036020840152613a7581876139cb565b90508281036040840152613a8981866139fb565b90508281036060840152610d7e81856139fb565b803560ff81168114613aae57600080fd5b919050565b600080600080600060a08688031215613acb57600080fd5b85359450613adb60208701613a9d565b9350613ae960408701613a9d565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b6020810160088310613b3957634e487b7160e01b600052602160045260246000fd5b91905290565b60008060408385031215613b5257600080fd5b823591506020830135613b6481613720565b809150509250929050565b60008060408385031215613b8257600080fd5b82359150613b9260208401613a9d565b90509250929050565b60008060008060608587031215613bb157600080fd5b84359350613bc160208601613a9d565b925060408501356001600160401b0380821115613bdd57600080fd5b818701915087601f830112613bf157600080fd5b813581811115613c0057600080fd5b886020828501011115613c1257600080fd5b95989497505060200194505050565b600082601f830112613c3257600080fd5b6115968383356020850161382b565b60008060008060808587031215613c5757600080fd5b84356001600160401b0380821115613c6e57600080fd5b613c7a88838901613735565b95506020870135915080821115613c9057600080fd5b613c9c888389016137a9565b94506040870135915080821115613cb257600080fd5b613cbe88838901613864565b93506060870135915080821115613cd457600080fd5b50613ce187828801613c21565b91505092959194509250565b600060208284031215613cff57600080fd5b813561159681613720565b600082601f830112613d1b57600080fd5b81356020613d2b613756836136fd565b82815260059290921b84018101918181019086841115613d4a57600080fd5b8286015b8481101561379e5780356001600160401b03811115613d6d5760008081fd5b613d7b8986838b0101613c21565b845250918301918301613d4e565b600080600080600060a08688031215613da157600080fd5b85356001600160401b0380821115613db857600080fd5b613dc489838a01613735565b96506020880135915080821115613dda57600080fd5b613de689838a016137a9565b95506040880135915080821115613dfc57600080fd5b613e0889838a01613d0a565b94506060880135915080821115613e1e57600080fd5b613e2a89838a01613864565b93506080880135915080821115613e4057600080fd5b50613e4d88828901613c21565b9150509295509295909350565b60008060408385031215613e6d57600080fd5b8235613e7881613720565b946020939093013593505050565b600181811c90821680613e9a57607f821691505b602082108103612b7f57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015613ee257613ee2613eba565b500390565b60208082526018908201527f476f7665726e6f723a206f6e6c79476f7665726e616e63650000000000000000604082015260600190565b608081526000613f316080830187613987565b8281036020840152613f4381876139cb565b90508281036040840152613f5781866139fb565b91505082606083015295945050505050565b60208082526021908201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756040820152601b60fa1b606082015260800190565b600060208284031215613fbc57600080fd5b5051919050565b60008219821115613fd657613fd6613eba565b500190565b634e487b7160e01b600052603260045260246000fd5b60018060a01b038516815283602082015260a06040820152600060a082015260c06060820152600061402660c0830185613678565b905082608083015295945050505050565b60006020828403121561404957600080fd5b8151801515811461159657600080fd5b60006001820161406b5761406b613eba565b5060010190565b84815260ff841660208201528260408201526080606082015260006111746080830184613678565b6001600160e01b03198316815281516000906140bd81600485016020870161364c565b919091016004019392505050565b6000602082840312156140dd57600080fd5b81516001600160601b038116811461159657600080fd5b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b0380831681851680830382111561415757614157613eba565b01949350505050565b8981526001600160a01b03891660208201526101206040820181905260009061418b8382018b613987565b9050828103606084015261419f818a6139cb565b905082810360808401526141b381896139fb565b905082810360a08401526141c781886139fb565b6001600160401b0387811660c0860152861660e085015283810361010085015290506141f38185613678565b9c9b505050505050505050505050565b60006020828403121561421557600080fd5b81516001600160401b0381111561422b57600080fd5b8201601f8101841361423c57600080fd5b805161424a61375682613804565b81815285602083850101111561425f57600080fd5b610a0682602083016020860161364c56fea264697066735822122096549f8577f50ab1bd6da06ff00448b06fc4ca715383ff9db2e913fe4635bdad64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name_", "type": "string", "internalType": "string"}, {"name": "token_", "type": "address", "internalType": "contract ERC20VotesComp"}, {"name": "votingDelay_", "type": "uint256", "internalType": "uint256"}, {"name": "votingPeriod_", "type": "uint256", "internalType": "uint256"}, {"name": "proposalThreshold_", "type": "uint256", "internalType": "uint256"}, {"name": "timelock_", "type": "address", "internalType": "contract ICompoundTimelock"}]}, {"type": "event", "name": "ProposalCanceled", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalCreated", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "proposer", "type": "address", "internalType": "address", "indexed": false}, {"name": "targets", "type": "address[]", "internalType": "address[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "signatures", "type": "string[]", "internalType": "string[]", "indexed": false}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]", "indexed": false}, {"name": "startBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "endBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "description", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalExecuted", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalQueued", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "eta", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalThresholdSet", "inputs": [{"name": "oldProposalThreshold", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newProposalThreshold", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TimelockChange", "inputs": [{"name": "oldTimelock", "type": "address", "internalType": "address", "indexed": false}, {"name": "newTimelock", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VoteCast", "inputs": [{"name": "voter", "type": "address", "internalType": "address", "indexed": true}, {"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "support", "type": "uint8", "internalType": "uint8", "indexed": false}, {"name": "weight", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "reason", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VotingDelaySet", "inputs": [{"name": "oldVotingDelay", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newVotingDelay", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VotingPeriodSet", "inputs": [{"name": "oldVotingPeriod", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newVotingPeriod", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "BALLOT_TYPEHASH", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "COUNTING_MODE", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "__acceptAdmin", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "cancel", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "cancel", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "salt", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVote", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteBySig", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteWithReason", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "reason", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "salt", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "getActions", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "signatures", "type": "string[]", "internalType": "string[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}]}, {"type": "function", "name": "getReceipt", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "voter", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "tuple", "components": [{"name": "hasVoted", "type": "bool", "internalType": "bool"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "votes", "type": "uint96", "internalType": "uint96"}], "internalType": "struct IGovernorCompatibilityBravo.Receipt"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "hasVoted", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "hashProposal", "stateMutability": "pure", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "proposalDeadline", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalEta", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalSnapshot", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalThreshold", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposals", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "proposer", "type": "address", "internalType": "address"}, {"name": "eta", "type": "uint256", "internalType": "uint256"}, {"name": "startBlock", "type": "uint256", "internalType": "uint256"}, {"name": "endBlock", "type": "uint256", "internalType": "uint256"}, {"name": "forVotes", "type": "uint256", "internalType": "uint256"}, {"name": "againstVotes", "type": "uint256", "internalType": "uint256"}, {"name": "abstainVotes", "type": "uint256", "internalType": "uint256"}, {"name": "canceled", "type": "bool", "internalType": "bool"}, {"name": "executed", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "signatures", "type": "string[]", "internalType": "string[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "queue", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "salt", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "queue", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "quorum", "stateMutability": "pure", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorumVotes", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "setProposalThreshold", "stateMutability": "nonpayable", "inputs": [{"name": "newProposalThreshold", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "setVotingDelay", "stateMutability": "nonpayable", "inputs": [{"name": "newVotingDelay", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "setVotingPeriod", "stateMutability": "nonpayable", "inputs": [{"name": "newVotingPeriod", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "enum IGovernor.ProposalState"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "timelock", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "token", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "contract ERC20VotesComp"}]}, {"type": "function", "name": "updateTimelock", "stateMutability": "nonpayable", "inputs": [{"name": "newTimelock", "type": "address", "internalType": "contract ICompoundTimelock"}], "outputs": []}, {"type": "function", "name": "version", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "votingDelay", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "votingPeriod", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {"COUNTING_MODE()": {"notice": "module:voting"}, "cancel(address[],uint256[],bytes[],bytes32)": {"notice": "WARNING: this is for mock purposes only. Ability to the _cancel function should be restricted for live deployments."}}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"COUNTING_MODE()": {"details": "A description of the possible `support` values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`. There are 2 standard keys: `support` and `quorum`. - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`. - `quorum=bravo` means that only For votes are counted towards quorum. - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`] JavaScript class."}, "__acceptAdmin()": {"details": "Accept admin right over the timelock."}, "cancel(uint256)": {"details": "Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold."}, "castVote(uint256,uint8)": {"details": "See {IGovernor-castVote}."}, "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {"details": "See {IGovernor-castVoteBySig}."}, "castVoteWithReason(uint256,uint8,string)": {"details": "See {IGovernor-castVoteWithReason}."}, "execute(uint256)": {"details": "See {IGovernorCompatibilityBravo-execute}."}, "getActions(uint256)": {"details": "See {IGovernorCompatibilityBravo-getActions}."}, "getReceipt(uint256,address)": {"details": "See {IGovernorCompatibilityBravo-getReceipt}."}, "hasVoted(uint256,address)": {"details": "See {IGovernor-hasVoted}."}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."}, "name()": {"details": "See {IGovernor-name}."}, "proposalDeadline(uint256)": {"details": "See {IGovernor-proposalDeadline}."}, "proposalSnapshot(uint256)": {"details": "See {IGovernor-proposalSnapshot}."}, "proposals(uint256)": {"details": "See {IGovernorCompatibilityBravo-proposals}."}, "propose(address[],uint256[],string[],bytes[],string)": {"details": "See {IGovernorCompatibilityBravo-propose}."}, "queue(uint256)": {"details": "See {IGovernorCompatibilityBravo-queue}."}, "quorumVotes()": {"details": "See {IGovernorCompatibilityBravo-quorumVotes}."}, "setProposalThreshold(uint256)": {"details": "Update the proposal threshold. This operation can only be performed through a governance proposal. Emits a {ProposalThresholdSet} event."}, "setVotingDelay(uint256)": {"details": "Update the voting delay. This operation can only be performed through a governance proposal. Emits a {VotingDelaySet} event."}, "setVotingPeriod(uint256)": {"details": "Update the voting period. This operation can only be performed through a governance proposal. Emits a {VotingPeriodSet} event."}, "timelock()": {"details": "Public accessor to check the address of the timelock"}, "updateTimelock(address)": {"details": "Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates must be proposed, scheduled and executed using the {Governor} workflow. For security reason, the timelock must be handed over to another admin before setting up a new one. The two operations (hand over the timelock) and do the update can be batched in a single proposal. Note that if the timelock admin has been handed over in a previous operation, we refuse updates made through the timelock if admin of the timelock has already been accepted and the operation is executed outside the scope of governance."}, "version()": {"details": "See {IGovernor-version}."}, "votingDelay()": {"details": "See {IGovernor-votingDelay}."}, "votingPeriod()": {"details": "See {IGovernor-votingPeriod}."}}, "version": 1}}, "GovernorMock": {"contractName": "GovernorMock", "sourceId": "mocks/GovernorMock.sol", "deploymentBytecode": {"bytecode": "0x6101606040523480156200001257600080fd5b5060405162002bea38038062002bea833981016040819052620000359162000419565b80848484600089806200005c6040805180820190915260018152603160f81b602082015290565b815160208084019190912082518383012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c00190528051940193909320919290916080523060c052610120525050825162000102925060009150602084019062000340565b50620001109050836200014d565b6200011b826200018e565b620001268162000235565b5050506001600160a01b031661014052620001418162000276565b50505050505062000561565b60025460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600255565b60008111620001f45760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b60648201526084015b60405180910390fd5b60035460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600355565b60045460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600455565b6064811115620002fb5760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a401620001eb565b600580549082905560408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b8280546200034e9062000525565b90600052602060002090601f016020900481019282620003725760008555620003bd565b82601f106200038d57805160ff1916838001178555620003bd565b82800160010185558215620003bd579182015b82811115620003bd578251825591602001919060010190620003a0565b50620003cb929150620003cf565b5090565b5b80821115620003cb5760008155600101620003d0565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200041457600080fd5b919050565b600080600080600060a086880312156200043257600080fd5b85516001600160401b03808211156200044a57600080fd5b818801915088601f8301126200045f57600080fd5b815181811115620004745762000474620003e6565b604051601f8201601f19908116603f011681019083821181831017156200049f576200049f620003e6565b81604052828152602093508b84848701011115620004bc57600080fd5b600091505b82821015620004e05784820184015181830185015290830190620004c1565b82821115620004f25760008484830101525b985062000504915050888201620003fc565b604089015160608a01516080909a0151989b919a5098979650945050505050565b600181811c908216806200053a57607f821691505b6020821081036200055b57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051610100516101205161014051612620620005ca600039600081816105f201528181610c200152611282015260006113f3015260006114420152600061141d01526000611376015260006113a0015260006113ca01526126206000f3fe6080604052600436106101c65760003560e01c806370b0f660116100f7578063c59057e411610095578063eb9019d411610064578063eb9019d414610580578063ece40cc1146105a0578063f8ce560a146105c0578063fc0c546a146105e057600080fd5b8063c59057e4146104c6578063dd4e2ba5146104e6578063deaaa7cc1461052c578063ea0217cf1461056057600080fd5b806397c3d334116100d157806397c3d33414610468578063a7713a701461047c578063b58131b014610491578063c01f9e37146104a657600080fd5b806370b0f660146104085780637b3c71d3146104285780637d5e81e21461044857600080fd5b80633bccf4fd11610164578063452115d61161013e578063452115d614610349578063544ffc9c1461036957806354fd4d50146103be57806356781388146103e857600080fd5b80633bccf4fd146102b25780633e4f49e6146102d257806343859632146102ff57600080fd5b806306fdde03116101a057806306fdde03146102485780632656227d1461026a5780632d63f6931461027d5780633932abb11461029d57600080fd5b806301ffc9a7146101d457806302a251a31461020957806306f3f9e61461022857600080fd5b366101cf57005b005b600080fd5b3480156101e057600080fd5b506101f46101ef366004611bfd565b61062c565b60405190151581526020015b60405180910390f35b34801561021557600080fd5b506003545b604051908152602001610200565b34801561023457600080fd5b506101cd610243366004611c27565b610663565b34801561025457600080fd5b5061025d610697565b6040516102009190611c9c565b61021a610278366004611eec565b610729565b34801561028957600080fd5b5061021a610298366004611c27565b610836565b3480156102a957600080fd5b5060025461021a565b3480156102be57600080fd5b5061021a6102cd366004611f8c565b61086d565b3480156102de57600080fd5b506102f26102ed366004611c27565b610901565b6040516102009190611ff0565b34801561030b57600080fd5b506101f461031a366004612018565b60008281526006602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b34801561035557600080fd5b5061021a610364366004611eec565b610a66565b34801561037557600080fd5b506103a3610384366004611c27565b6000908152600660205260409020805460018201546002909201549092565b60408051938452602084019290925290820152606001610200565b3480156103ca57600080fd5b506040805180820190915260018152603160f81b602082015261025d565b3480156103f457600080fd5b5061021a610403366004612044565b610a7d565b34801561041457600080fd5b506101cd610423366004611c27565b610aa6565b34801561043457600080fd5b5061021a610443366004612067565b610ace565b34801561045457600080fd5b5061021a6104633660046120ed565b610b20565b34801561047457600080fd5b50606461021a565b34801561048857600080fd5b5060055461021a565b34801561049d57600080fd5b5061021a610b2e565b3480156104b257600080fd5b5061021a6104c1366004611c27565b610b3e565b3480156104d257600080fd5b5061021a6104e1366004611eec565b610b6d565b3480156104f257600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e9082015261025d565b34801561053857600080fd5b5061021a7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b34801561056c57600080fd5b506101cd61057b366004611c27565b610ba7565b34801561058c57600080fd5b5061021a61059b3660046121ad565b610bcf565b3480156105ac57600080fd5b506101cd6105bb366004611c27565b610bdb565b3480156105cc57600080fd5b5061021a6105db366004611c27565b610c03565b3480156105ec57600080fd5b506106147f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610200565b60006001600160e01b0319821663bf26d89760e01b148061065d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b33301461068b5760405162461bcd60e51b8152600401610682906121d7565b60405180910390fd5b61069481610ca7565b50565b6060600080546106a69061220e565b80601f01602080910402602001604051908101604052809291908181526020018280546106d29061220e565b801561071f5780601f106106f45761010080835404028352916020019161071f565b820191906000526020600020905b81548152906001019060200180831161070257829003601f168201915b5050505050905090565b60008061073886868686610b6d565b9050600061074582610901565b9050600481600781111561075b5761075b611fda565b14806107785750600581600781111561077657610776611fda565b145b6107ce5760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756044820152601b60fa1b6064820152608401610682565b600082815260016020818152604092839020600201805460ff191690921790915590518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f910160405180910390a161082c8288888888610d6f565b5095945050505050565b60008181526001602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff8516606082015260009081906108d9906108d19060800160405160208183030381529060405280519060200120610e6e565b868686610ebc565b90506108f687828860405180602001604052806000815250610eda565b979650505050505050565b6000818152600160208181526040808420815160a08101835281546001600160401b0390811660808301908152825283518086018552958301541685529283019390935260029092015460ff808216158015948401949094526101009091041615156060820152906109765750600792915050565b8060600151156109895750600292915050565b80515143906001600160401b0316106109a55750600092915050565b436109b282602001515190565b6001600160401b0316106109c95750600192915050565b6109d68160200151610fe5565b15610a18576109e483611014565b8015610a03575060008381526006602052604090208054600190910154115b610a0e576003610a11565b60045b9392505050565b60405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c2069640000006044820152606401610682565b50919050565b6000610a748585858561104b565b95945050505050565b600080339050610a9e84828560405180602001604052806000815250610eda565b949350505050565b333014610ac55760405162461bcd60e51b8152600401610682906121d7565b61069481611169565b600080339050610b1686828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610eda92505050565b9695505050505050565b6000610a74858585856111aa565b6000610b3960045490565b905090565b60008181526001602081815260408084208151928301909152909101546001600160401b03169081905261085e565b600084848484604051602001610b86949392919061230b565b60408051601f19818403018152919052805160209091012095945050505050565b333014610bc65760405162461bcd60e51b8152600401610682906121d7565b610694816111b8565b6000610a118383611259565b333014610bfa5760405162461bcd60e51b8152600401610682906121d7565b610694816112ef565b60006064600554604051632394e7a360e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e539e8c90602401602060405180830381865afa158015610c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c939190612356565b610c9d9190612385565b61065d91906123a4565b6064811115610d2a5760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a401610682565b600580549082905560408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b60006040518060600160405280602781526020016125c460279139905060005b8551811015610e6557600080878381518110610dad57610dad6123c6565b60200260200101516001600160a01b0316878481518110610dd057610dd06123c6565b6020026020010151878581518110610dea57610dea6123c6565b6020026020010151604051610dff91906123dc565b60006040518083038185875af1925050503d8060008114610e3c576040519150601f19603f3d011682016040523d82523d6000602084013e610e41565b606091505b5091509150610e51828286611330565b50505080610e5e906123f8565b9050610d8f565b50505050505050565b600061065d610e7b611369565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000610ecd87878787611490565b9150915061082c8161157d565b6000848152600160208190526040822090610ef487610901565b6007811115610f0557610f05611fda565b14610f5e5760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b6064820152608401610682565b604080516020810190915281546001600160401b031690819052600090610f86908790610bcf565b9050610f9487878784611733565b856001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda488878488604051610fd39493929190612411565b60405180910390a29695505050505050565b6000610ffa82516001600160401b0316151590565b801561065d57505051436001600160401b03909116111590565b6000818152600660205260408120600281015460018201546110369190612439565b6110426105db85610836565b11159392505050565b60008061105a86868686610b6d565b9050600061106782610901565b9050600281600781111561107d5761107d611fda565b1415801561109d5750600681600781111561109a5761109a611fda565b14155b80156110bb575060078160078111156110b8576110b8611fda565b14155b6111075760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a2070726f706f73616c206e6f74206163746976650000006044820152606401610682565b60008281526001602052604090819020600201805461ff001916610100179055517f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c906111579084815260200190565b60405180910390a15095945050505050565b60025460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600255565b6000610a74858585856118b4565b600081116112185760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b6064820152608401610682565b60035460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600355565b604051630748d63560e31b81526001600160a01b038381166004830152602482018390526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a890604401602060405180830381865afa1580156112cb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a119190612356565b60045460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600455565b6060831561133f575081610a11565b82511561134f5782518084602001fd5b8160405162461bcd60e51b81526004016106829190611c9c565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156113c257507f000000000000000000000000000000000000000000000000000000000000000046145b156113ec57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156114c75750600090506003611574565b8460ff16601b141580156114df57508460ff16601c14155b156114f05750600090506004611574565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611544573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661156d57600060019250925050611574565b9150600090505b94509492505050565b600081600481111561159157611591611fda565b036115995750565b60018160048111156115ad576115ad611fda565b036115fa5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610682565b600281600481111561160e5761160e611fda565b0361165b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610682565b600381600481111561166f5761166f611fda565b036116c75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610682565b60048160048111156116db576116db611fda565b036106945760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610682565b60008481526006602090815260408083206001600160a01b0387168452600381019092529091205460ff16156117bb5760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b6064820152608401610682565b6001600160a01b03841660009081526003820160205260409020805460ff1916600117905560ff831661180757818160000160008282546117fc9190612439565b909155506118ad9050565b60001960ff84160161182757818160010160008282546117fc9190612439565b60011960ff84160161184757818160020160008282546117fc9190612439565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b6064820152608401610682565b5050505050565b60006118be610b2e565b6118cd3361059b600143612451565b101561194d5760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72436f6d7061746962696c697479427261766f3a2070726f7060448201527f6f73657220766f7465732062656c6f772070726f706f73616c207468726573686064820152621bdb1960ea1b608482015260a401610682565b60006119628686868680519060200120610b6d565b905084518651146119855760405162461bcd60e51b815260040161068290612468565b83518651146119a65760405162461bcd60e51b815260040161068290612468565b60008651116119f75760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c00000000000000006044820152606401610682565b600081815260016020908152604091829020825191820190925281546001600160401b03169081905215611a775760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b6064820152608401610682565b6000611a8a611a8560025490565b611b91565b611a9343611b91565b611a9d91906124a9565b90506000611aad611a8560035490565b611ab790836124a9565b835467ffffffffffffffff19166001600160401b038416178455905060018301805467ffffffffffffffff19166001600160401b0383161790557f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b03811115611b2f57611b2f611caf565b604051908082528060200260200182016040528015611b6257816020015b6060815260200190600190039081611b4d5790505b508c88888e604051611b7c999897969594939291906124d4565b60405180910390a15091979650505050505050565b60006001600160401b03821115611bf95760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610682565b5090565b600060208284031215611c0f57600080fd5b81356001600160e01b031981168114610a1157600080fd5b600060208284031215611c3957600080fd5b5035919050565b60005b83811015611c5b578181015183820152602001611c43565b83811115611c6a576000848401525b50505050565b60008151808452611c88816020860160208601611c40565b601f01601f19169290920160200192915050565b602081526000610a116020830184611c70565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611ced57611ced611caf565b604052919050565b60006001600160401b03821115611d0e57611d0e611caf565b5060051b60200190565b80356001600160a01b0381168114611d2f57600080fd5b919050565b600082601f830112611d4557600080fd5b81356020611d5a611d5583611cf5565b611cc5565b82815260059290921b84018101918181019086841115611d7957600080fd5b8286015b84811015611d9b57611d8e81611d18565b8352918301918301611d7d565b509695505050505050565b600082601f830112611db757600080fd5b81356020611dc7611d5583611cf5565b82815260059290921b84018101918181019086841115611de657600080fd5b8286015b84811015611d9b5780358352918301918301611dea565b60006001600160401b03831115611e1a57611e1a611caf565b611e2d601f8401601f1916602001611cc5565b9050828152838383011115611e4157600080fd5b828260208301376000602084830101529392505050565b600082601f830112611e6957600080fd5b81356020611e79611d5583611cf5565b82815260059290921b84018101918181019086841115611e9857600080fd5b8286015b84811015611d9b5780356001600160401b03811115611ebb5760008081fd5b8701603f81018913611ecd5760008081fd5b611ede898683013560408401611e01565b845250918301918301611e9c565b60008060008060808587031215611f0257600080fd5b84356001600160401b0380821115611f1957600080fd5b611f2588838901611d34565b95506020870135915080821115611f3b57600080fd5b611f4788838901611da6565b94506040870135915080821115611f5d57600080fd5b50611f6a87828801611e58565b949793965093946060013593505050565b803560ff81168114611d2f57600080fd5b600080600080600060a08688031215611fa457600080fd5b85359450611fb460208701611f7b565b9350611fc260408701611f7b565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061201257634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561202b57600080fd5b8235915061203b60208401611d18565b90509250929050565b6000806040838503121561205757600080fd5b8235915061203b60208401611f7b565b6000806000806060858703121561207d57600080fd5b8435935061208d60208601611f7b565b925060408501356001600160401b03808211156120a957600080fd5b818701915087601f8301126120bd57600080fd5b8135818111156120cc57600080fd5b8860208285010111156120de57600080fd5b95989497505060200194505050565b6000806000806080858703121561210357600080fd5b84356001600160401b038082111561211a57600080fd5b61212688838901611d34565b9550602087013591508082111561213c57600080fd5b61214888838901611da6565b9450604087013591508082111561215e57600080fd5b61216a88838901611e58565b9350606087013591508082111561218057600080fd5b508501601f8101871361219257600080fd5b6121a187823560208401611e01565b91505092959194509250565b600080604083850312156121c057600080fd5b6121c983611d18565b946020939093013593505050565b60208082526018908201527f476f7665726e6f723a206f6e6c79476f7665726e616e63650000000000000000604082015260600190565b600181811c9082168061222257607f821691505b602082108103610a6057634e487b7160e01b600052602260045260246000fd5b600081518084526020808501945080840160005b8381101561227b5781516001600160a01b031687529582019590820190600101612256565b509495945050505050565b600081518084526020808501945080840160005b8381101561227b5781518752958201959082019060010161229a565b600081518084526020808501808196508360051b8101915082860160005b858110156122fe5782840389526122ec848351611c70565b988501989350908401906001016122d4565b5091979650505050505050565b60808152600061231e6080830187612242565b82810360208401526123308187612286565b9050828103604084015261234481866122b6565b91505082606083015295945050505050565b60006020828403121561236857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561239f5761239f61236f565b500290565b6000826123c157634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600082516123ee818460208701611c40565b9190910192915050565b60006001820161240a5761240a61236f565b5060010190565b84815260ff84166020820152826040820152608060608201526000610b166080830184611c70565b6000821982111561244c5761244c61236f565b500190565b6000828210156124635761246361236f565b500390565b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b038083168185168083038211156124cb576124cb61236f565b01949350505050565b60006101208b8352602060018060a01b038c16818501528160408501526124fd8285018c612242565b91508382036060850152612511828b612286565b915083820360808501528189518084528284019150828160051b850101838c0160005b8381101561256257601f19878403018552612550838351611c70565b94860194925090850190600101612534565b505086810360a0880152612576818c6122b6565b94505050505061259160c08401876001600160401b03169052565b6001600160401b03851660e08401528281036101008401526125b38185611c70565b9c9b50505050505050505050505056fe476f7665726e6f723a2063616c6c20726576657274656420776974686f7574206d657373616765a26469706673582212201ef687795314821ae8452bc1b0862cc31b38394d549b5e2b4a4ca1c0bdf1fa2964736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052600436106101c65760003560e01c806370b0f660116100f7578063c59057e411610095578063eb9019d411610064578063eb9019d414610580578063ece40cc1146105a0578063f8ce560a146105c0578063fc0c546a146105e057600080fd5b8063c59057e4146104c6578063dd4e2ba5146104e6578063deaaa7cc1461052c578063ea0217cf1461056057600080fd5b806397c3d334116100d157806397c3d33414610468578063a7713a701461047c578063b58131b014610491578063c01f9e37146104a657600080fd5b806370b0f660146104085780637b3c71d3146104285780637d5e81e21461044857600080fd5b80633bccf4fd11610164578063452115d61161013e578063452115d614610349578063544ffc9c1461036957806354fd4d50146103be57806356781388146103e857600080fd5b80633bccf4fd146102b25780633e4f49e6146102d257806343859632146102ff57600080fd5b806306fdde03116101a057806306fdde03146102485780632656227d1461026a5780632d63f6931461027d5780633932abb11461029d57600080fd5b806301ffc9a7146101d457806302a251a31461020957806306f3f9e61461022857600080fd5b366101cf57005b005b600080fd5b3480156101e057600080fd5b506101f46101ef366004611bfd565b61062c565b60405190151581526020015b60405180910390f35b34801561021557600080fd5b506003545b604051908152602001610200565b34801561023457600080fd5b506101cd610243366004611c27565b610663565b34801561025457600080fd5b5061025d610697565b6040516102009190611c9c565b61021a610278366004611eec565b610729565b34801561028957600080fd5b5061021a610298366004611c27565b610836565b3480156102a957600080fd5b5060025461021a565b3480156102be57600080fd5b5061021a6102cd366004611f8c565b61086d565b3480156102de57600080fd5b506102f26102ed366004611c27565b610901565b6040516102009190611ff0565b34801561030b57600080fd5b506101f461031a366004612018565b60008281526006602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b34801561035557600080fd5b5061021a610364366004611eec565b610a66565b34801561037557600080fd5b506103a3610384366004611c27565b6000908152600660205260409020805460018201546002909201549092565b60408051938452602084019290925290820152606001610200565b3480156103ca57600080fd5b506040805180820190915260018152603160f81b602082015261025d565b3480156103f457600080fd5b5061021a610403366004612044565b610a7d565b34801561041457600080fd5b506101cd610423366004611c27565b610aa6565b34801561043457600080fd5b5061021a610443366004612067565b610ace565b34801561045457600080fd5b5061021a6104633660046120ed565b610b20565b34801561047457600080fd5b50606461021a565b34801561048857600080fd5b5060055461021a565b34801561049d57600080fd5b5061021a610b2e565b3480156104b257600080fd5b5061021a6104c1366004611c27565b610b3e565b3480156104d257600080fd5b5061021a6104e1366004611eec565b610b6d565b3480156104f257600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e9082015261025d565b34801561053857600080fd5b5061021a7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b34801561056c57600080fd5b506101cd61057b366004611c27565b610ba7565b34801561058c57600080fd5b5061021a61059b3660046121ad565b610bcf565b3480156105ac57600080fd5b506101cd6105bb366004611c27565b610bdb565b3480156105cc57600080fd5b5061021a6105db366004611c27565b610c03565b3480156105ec57600080fd5b506106147f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610200565b60006001600160e01b0319821663bf26d89760e01b148061065d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b33301461068b5760405162461bcd60e51b8152600401610682906121d7565b60405180910390fd5b61069481610ca7565b50565b6060600080546106a69061220e565b80601f01602080910402602001604051908101604052809291908181526020018280546106d29061220e565b801561071f5780601f106106f45761010080835404028352916020019161071f565b820191906000526020600020905b81548152906001019060200180831161070257829003601f168201915b5050505050905090565b60008061073886868686610b6d565b9050600061074582610901565b9050600481600781111561075b5761075b611fda565b14806107785750600581600781111561077657610776611fda565b145b6107ce5760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756044820152601b60fa1b6064820152608401610682565b600082815260016020818152604092839020600201805460ff191690921790915590518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f910160405180910390a161082c8288888888610d6f565b5095945050505050565b60008181526001602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff8516606082015260009081906108d9906108d19060800160405160208183030381529060405280519060200120610e6e565b868686610ebc565b90506108f687828860405180602001604052806000815250610eda565b979650505050505050565b6000818152600160208181526040808420815160a08101835281546001600160401b0390811660808301908152825283518086018552958301541685529283019390935260029092015460ff808216158015948401949094526101009091041615156060820152906109765750600792915050565b8060600151156109895750600292915050565b80515143906001600160401b0316106109a55750600092915050565b436109b282602001515190565b6001600160401b0316106109c95750600192915050565b6109d68160200151610fe5565b15610a18576109e483611014565b8015610a03575060008381526006602052604090208054600190910154115b610a0e576003610a11565b60045b9392505050565b60405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c2069640000006044820152606401610682565b50919050565b6000610a748585858561104b565b95945050505050565b600080339050610a9e84828560405180602001604052806000815250610eda565b949350505050565b333014610ac55760405162461bcd60e51b8152600401610682906121d7565b61069481611169565b600080339050610b1686828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610eda92505050565b9695505050505050565b6000610a74858585856111aa565b6000610b3960045490565b905090565b60008181526001602081815260408084208151928301909152909101546001600160401b03169081905261085e565b600084848484604051602001610b86949392919061230b565b60408051601f19818403018152919052805160209091012095945050505050565b333014610bc65760405162461bcd60e51b8152600401610682906121d7565b610694816111b8565b6000610a118383611259565b333014610bfa5760405162461bcd60e51b8152600401610682906121d7565b610694816112ef565b60006064600554604051632394e7a360e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e539e8c90602401602060405180830381865afa158015610c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c939190612356565b610c9d9190612385565b61065d91906123a4565b6064811115610d2a5760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a401610682565b600580549082905560408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b60006040518060600160405280602781526020016125c460279139905060005b8551811015610e6557600080878381518110610dad57610dad6123c6565b60200260200101516001600160a01b0316878481518110610dd057610dd06123c6565b6020026020010151878581518110610dea57610dea6123c6565b6020026020010151604051610dff91906123dc565b60006040518083038185875af1925050503d8060008114610e3c576040519150601f19603f3d011682016040523d82523d6000602084013e610e41565b606091505b5091509150610e51828286611330565b50505080610e5e906123f8565b9050610d8f565b50505050505050565b600061065d610e7b611369565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000610ecd87878787611490565b9150915061082c8161157d565b6000848152600160208190526040822090610ef487610901565b6007811115610f0557610f05611fda565b14610f5e5760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b6064820152608401610682565b604080516020810190915281546001600160401b031690819052600090610f86908790610bcf565b9050610f9487878784611733565b856001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda488878488604051610fd39493929190612411565b60405180910390a29695505050505050565b6000610ffa82516001600160401b0316151590565b801561065d57505051436001600160401b03909116111590565b6000818152600660205260408120600281015460018201546110369190612439565b6110426105db85610836565b11159392505050565b60008061105a86868686610b6d565b9050600061106782610901565b9050600281600781111561107d5761107d611fda565b1415801561109d5750600681600781111561109a5761109a611fda565b14155b80156110bb575060078160078111156110b8576110b8611fda565b14155b6111075760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a2070726f706f73616c206e6f74206163746976650000006044820152606401610682565b60008281526001602052604090819020600201805461ff001916610100179055517f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c906111579084815260200190565b60405180910390a15095945050505050565b60025460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600255565b6000610a74858585856118b4565b600081116112185760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b6064820152608401610682565b60035460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600355565b604051630748d63560e31b81526001600160a01b038381166004830152602482018390526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a890604401602060405180830381865afa1580156112cb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a119190612356565b60045460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600455565b6060831561133f575081610a11565b82511561134f5782518084602001fd5b8160405162461bcd60e51b81526004016106829190611c9c565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156113c257507f000000000000000000000000000000000000000000000000000000000000000046145b156113ec57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156114c75750600090506003611574565b8460ff16601b141580156114df57508460ff16601c14155b156114f05750600090506004611574565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611544573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661156d57600060019250925050611574565b9150600090505b94509492505050565b600081600481111561159157611591611fda565b036115995750565b60018160048111156115ad576115ad611fda565b036115fa5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610682565b600281600481111561160e5761160e611fda565b0361165b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610682565b600381600481111561166f5761166f611fda565b036116c75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610682565b60048160048111156116db576116db611fda565b036106945760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610682565b60008481526006602090815260408083206001600160a01b0387168452600381019092529091205460ff16156117bb5760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b6064820152608401610682565b6001600160a01b03841660009081526003820160205260409020805460ff1916600117905560ff831661180757818160000160008282546117fc9190612439565b909155506118ad9050565b60001960ff84160161182757818160010160008282546117fc9190612439565b60011960ff84160161184757818160020160008282546117fc9190612439565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b6064820152608401610682565b5050505050565b60006118be610b2e565b6118cd3361059b600143612451565b101561194d5760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72436f6d7061746962696c697479427261766f3a2070726f7060448201527f6f73657220766f7465732062656c6f772070726f706f73616c207468726573686064820152621bdb1960ea1b608482015260a401610682565b60006119628686868680519060200120610b6d565b905084518651146119855760405162461bcd60e51b815260040161068290612468565b83518651146119a65760405162461bcd60e51b815260040161068290612468565b60008651116119f75760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c00000000000000006044820152606401610682565b600081815260016020908152604091829020825191820190925281546001600160401b03169081905215611a775760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b6064820152608401610682565b6000611a8a611a8560025490565b611b91565b611a9343611b91565b611a9d91906124a9565b90506000611aad611a8560035490565b611ab790836124a9565b835467ffffffffffffffff19166001600160401b038416178455905060018301805467ffffffffffffffff19166001600160401b0383161790557f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b03811115611b2f57611b2f611caf565b604051908082528060200260200182016040528015611b6257816020015b6060815260200190600190039081611b4d5790505b508c88888e604051611b7c999897969594939291906124d4565b60405180910390a15091979650505050505050565b60006001600160401b03821115611bf95760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610682565b5090565b600060208284031215611c0f57600080fd5b81356001600160e01b031981168114610a1157600080fd5b600060208284031215611c3957600080fd5b5035919050565b60005b83811015611c5b578181015183820152602001611c43565b83811115611c6a576000848401525b50505050565b60008151808452611c88816020860160208601611c40565b601f01601f19169290920160200192915050565b602081526000610a116020830184611c70565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611ced57611ced611caf565b604052919050565b60006001600160401b03821115611d0e57611d0e611caf565b5060051b60200190565b80356001600160a01b0381168114611d2f57600080fd5b919050565b600082601f830112611d4557600080fd5b81356020611d5a611d5583611cf5565b611cc5565b82815260059290921b84018101918181019086841115611d7957600080fd5b8286015b84811015611d9b57611d8e81611d18565b8352918301918301611d7d565b509695505050505050565b600082601f830112611db757600080fd5b81356020611dc7611d5583611cf5565b82815260059290921b84018101918181019086841115611de657600080fd5b8286015b84811015611d9b5780358352918301918301611dea565b60006001600160401b03831115611e1a57611e1a611caf565b611e2d601f8401601f1916602001611cc5565b9050828152838383011115611e4157600080fd5b828260208301376000602084830101529392505050565b600082601f830112611e6957600080fd5b81356020611e79611d5583611cf5565b82815260059290921b84018101918181019086841115611e9857600080fd5b8286015b84811015611d9b5780356001600160401b03811115611ebb5760008081fd5b8701603f81018913611ecd5760008081fd5b611ede898683013560408401611e01565b845250918301918301611e9c565b60008060008060808587031215611f0257600080fd5b84356001600160401b0380821115611f1957600080fd5b611f2588838901611d34565b95506020870135915080821115611f3b57600080fd5b611f4788838901611da6565b94506040870135915080821115611f5d57600080fd5b50611f6a87828801611e58565b949793965093946060013593505050565b803560ff81168114611d2f57600080fd5b600080600080600060a08688031215611fa457600080fd5b85359450611fb460208701611f7b565b9350611fc260408701611f7b565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061201257634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561202b57600080fd5b8235915061203b60208401611d18565b90509250929050565b6000806040838503121561205757600080fd5b8235915061203b60208401611f7b565b6000806000806060858703121561207d57600080fd5b8435935061208d60208601611f7b565b925060408501356001600160401b03808211156120a957600080fd5b818701915087601f8301126120bd57600080fd5b8135818111156120cc57600080fd5b8860208285010111156120de57600080fd5b95989497505060200194505050565b6000806000806080858703121561210357600080fd5b84356001600160401b038082111561211a57600080fd5b61212688838901611d34565b9550602087013591508082111561213c57600080fd5b61214888838901611da6565b9450604087013591508082111561215e57600080fd5b61216a88838901611e58565b9350606087013591508082111561218057600080fd5b508501601f8101871361219257600080fd5b6121a187823560208401611e01565b91505092959194509250565b600080604083850312156121c057600080fd5b6121c983611d18565b946020939093013593505050565b60208082526018908201527f476f7665726e6f723a206f6e6c79476f7665726e616e63650000000000000000604082015260600190565b600181811c9082168061222257607f821691505b602082108103610a6057634e487b7160e01b600052602260045260246000fd5b600081518084526020808501945080840160005b8381101561227b5781516001600160a01b031687529582019590820190600101612256565b509495945050505050565b600081518084526020808501945080840160005b8381101561227b5781518752958201959082019060010161229a565b600081518084526020808501808196508360051b8101915082860160005b858110156122fe5782840389526122ec848351611c70565b988501989350908401906001016122d4565b5091979650505050505050565b60808152600061231e6080830187612242565b82810360208401526123308187612286565b9050828103604084015261234481866122b6565b91505082606083015295945050505050565b60006020828403121561236857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561239f5761239f61236f565b500290565b6000826123c157634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600082516123ee818460208701611c40565b9190910192915050565b60006001820161240a5761240a61236f565b5060010190565b84815260ff84166020820152826040820152608060608201526000610b166080830184611c70565b6000821982111561244c5761244c61236f565b500190565b6000828210156124635761246361236f565b500390565b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b038083168185168083038211156124cb576124cb61236f565b01949350505050565b60006101208b8352602060018060a01b038c16818501528160408501526124fd8285018c612242565b91508382036060850152612511828b612286565b915083820360808501528189518084528284019150828160051b850101838c0160005b8381101561256257601f19878403018552612550838351611c70565b94860194925090850190600101612534565b505086810360a0880152612576818c6122b6565b94505050505061259160c08401876001600160401b03169052565b6001600160401b03851660e08401528281036101008401526125b38185611c70565b9c9b50505050505050505050505056fe476f7665726e6f723a2063616c6c20726576657274656420776974686f7574206d657373616765a26469706673582212201ef687795314821ae8452bc1b0862cc31b38394d549b5e2b4a4ca1c0bdf1fa2964736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name_", "type": "string", "internalType": "string"}, {"name": "token_", "type": "address", "internalType": "contract ERC20Votes"}, {"name": "votingDelay_", "type": "uint256", "internalType": "uint256"}, {"name": "votingPeriod_", "type": "uint256", "internalType": "uint256"}, {"name": "quorumNumerator_", "type": "uint256", "internalType": "uint256"}]}, {"type": "event", "name": "ProposalCanceled", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalCreated", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "proposer", "type": "address", "internalType": "address", "indexed": false}, {"name": "targets", "type": "address[]", "internalType": "address[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "signatures", "type": "string[]", "internalType": "string[]", "indexed": false}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]", "indexed": false}, {"name": "startBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "endBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "description", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalExecuted", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalThresholdSet", "inputs": [{"name": "oldProposalThreshold", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newProposalThreshold", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "QuorumNumeratorUpdated", "inputs": [{"name": "oldQuorumNumerator", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newQuorumNumerator", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VoteCast", "inputs": [{"name": "voter", "type": "address", "internalType": "address", "indexed": true}, {"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "support", "type": "uint8", "internalType": "uint8", "indexed": false}, {"name": "weight", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "reason", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VotingDelaySet", "inputs": [{"name": "oldVotingDelay", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newVotingDelay", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VotingPeriodSet", "inputs": [{"name": "oldVotingPeriod", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newVotingPeriod", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "BALLOT_TYPEHASH", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "COUNTING_MODE", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "cancel", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "salt", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVote", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteBySig", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteWithReason", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "reason", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "hasVoted", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "hashProposal", "stateMutability": "pure", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "proposalDeadline", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalSnapshot", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalThreshold", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalVotes", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "againstVotes", "type": "uint256", "internalType": "uint256"}, {"name": "forVotes", "type": "uint256", "internalType": "uint256"}, {"name": "abstainVotes", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorum", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorumDenominator", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorumNumerator", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "setProposalThreshold", "stateMutability": "nonpayable", "inputs": [{"name": "newProposalThreshold", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "setVotingDelay", "stateMutability": "nonpayable", "inputs": [{"name": "newVotingDelay", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "setVotingPeriod", "stateMutability": "nonpayable", "inputs": [{"name": "newVotingPeriod", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "enum IGovernor.ProposalState"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "token", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "contract ERC20Votes"}]}, {"type": "function", "name": "updateQuorumNumerator", "stateMutability": "nonpayable", "inputs": [{"name": "newQuorumNumerator", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "version", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "votingDelay", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "votingPeriod", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {"quorum(uint256)": {"notice": "module:user-config"}}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"COUNTING_MODE()": {"details": "See {IGovernor-COUNTING_MODE}."}, "castVote(uint256,uint8)": {"details": "See {IGovernor-castVote}."}, "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {"details": "See {IGovernor-castVoteBySig}."}, "castVoteWithReason(uint256,uint8,string)": {"details": "See {IGovernor-castVoteWithReason}."}, "execute(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-execute}."}, "hasVoted(uint256,address)": {"details": "See {IGovernor-hasVoted}."}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."}, "name()": {"details": "See {IGovernor-name}."}, "proposalDeadline(uint256)": {"details": "See {IGovernor-proposalDeadline}."}, "proposalSnapshot(uint256)": {"details": "See {IGovernor-proposalSnapshot}."}, "proposalVotes(uint256)": {"details": "Accessor to the internal vote counts."}, "quorum(uint256)": {"details": "Minimum number of cast voted required for a proposal to be successful. Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes})."}, "setProposalThreshold(uint256)": {"details": "Update the proposal threshold. This operation can only be performed through a governance proposal. Emits a {ProposalThresholdSet} event."}, "setVotingDelay(uint256)": {"details": "Update the voting delay. This operation can only be performed through a governance proposal. Emits a {VotingDelaySet} event."}, "setVotingPeriod(uint256)": {"details": "Update the voting period. This operation can only be performed through a governance proposal. Emits a {VotingPeriodSet} event."}, "state(uint256)": {"details": "See {IGovernor-state}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "version()": {"details": "See {IGovernor-version}."}, "votingDelay()": {"details": "See {IGovernor-votingDelay}."}, "votingPeriod()": {"details": "See {IGovernor-votingPeriod}."}}, "version": 1}}, "GovernorTimelockCompoundMock": {"contractName": "GovernorTimelockCompoundMock", "sourceId": "mocks/GovernorTimelockCompoundMock.sol", "deploymentBytecode": {"bytecode": "0x6101606040523480156200001257600080fd5b50604051620036f4380380620036f4833981016040819052620000359162000496565b808583868660008b806200005d6040805180820190915260018152603160f81b602082015290565b815160208084019190912082518383012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c00190528051940193909320919290916080523060c0526101205250508251620001039250600091506020840190620003bd565b506200011190508362000161565b6200011c82620001a2565b620001278162000249565b5050506200013b816200028a60201b60201c565b506001600160a01b0316610140526200015481620002f3565b50505050505050620005f1565b60025460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600255565b60008111620002085760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b60648201526084015b60405180910390fd5b60035460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600355565b60045460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600455565b600554604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600580546001600160a01b0319166001600160a01b0392909216919091179055565b6064811115620003785760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a401620001ff565b600780549082905560408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b828054620003cb90620005b5565b90600052602060002090601f016020900481019282620003ef57600085556200043a565b82601f106200040a57805160ff19168380011785556200043a565b828001600101855582156200043a579182015b828111156200043a5782518255916020019190600101906200041d565b50620004489291506200044c565b5090565b5b808211156200044857600081556001016200044d565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200049157600080fd5b919050565b60008060008060008060c08789031215620004b057600080fd5b86516001600160401b0380821115620004c857600080fd5b818901915089601f830112620004dd57600080fd5b815181811115620004f257620004f262000463565b604051601f8201601f19908116603f011681019083821181831017156200051d576200051d62000463565b81604052828152602093508c848487010111156200053a57600080fd5b600091505b828210156200055e57848201840151818301850152908301906200053f565b82821115620005705760008484830101525b99506200058291505089820162000479565b965050506040870151935060608701519250620005a26080880162000479565b915060a087015190509295509295509295565b600181811c90821680620005ca57607f821691505b602082108103620005eb57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516101405161309a6200065a600039600081816106ea0152818161181a01526118e501526000611baa01526000611bf901526000611bd401526000611b2d01526000611b5701526000611b81015261309a6000f3fe6080604052600436106101fd5760003560e01c80637d5e81e21161010d578063c59057e4116100a0578063ea0217cf1161006f578063ea0217cf14610658578063eb9019d414610678578063ece40cc114610698578063f8ce560a146106b8578063fc0c546a146106d857600080fd5b8063c59057e41461058c578063d33219b4146105ac578063dd4e2ba5146105de578063deaaa7cc1461062457600080fd5b8063ab58fb8e116100dc578063ab58fb8e14610522578063b58131b014610542578063b9a6196114610557578063c01f9e371461056c57600080fd5b80637d5e81e2146104b957806397c3d334146104d9578063a7713a70146104ed578063a890c9101461050257600080fd5b80633bccf4fd11610190578063544ffc9c1161015f578063544ffc9c146103da57806354fd4d501461042f578063567813881461045957806370b0f660146104795780637b3c71d31461049957600080fd5b80633bccf4fd146103235780633e4f49e6146103435780634385963214610370578063452115d6146103ba57600080fd5b8063160cbed7116101cc578063160cbed7146102bb5780632656227d146102db5780632d63f693146102ee5780633932abb11461030e57600080fd5b806301ffc9a71461022557806302a251a31461025a57806306f3f9e61461027957806306fdde031461029957600080fd5b36610220573061020b61070c565b6001600160a01b03161461021e57600080fd5b005b600080fd5b34801561023157600080fd5b50610245610240366004612573565b610725565b60405190151581526020015b60405180910390f35b34801561026657600080fd5b506003545b604051908152602001610251565b34801561028557600080fd5b5061021e61029436600461259d565b610736565b3480156102a557600080fd5b506102ae610783565b604051610251919061260e565b3480156102c757600080fd5b5061026b6102d6366004612862565b610815565b61026b6102e9366004612862565b610b8f565b3480156102fa57600080fd5b5061026b61030936600461259d565b610c62565b34801561031a57600080fd5b5060025461026b565b34801561032f57600080fd5b5061026b61033e366004612907565b610c99565b34801561034f57600080fd5b5061036361035e36600461259d565b610d2d565b604051610251919061296b565b34801561037c57600080fd5b5061024561038b366004612993565b60008281526008602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b3480156103c657600080fd5b5061026b6103d5366004612862565b610d38565b3480156103e657600080fd5b506104146103f536600461259d565b6000908152600860205260409020805460018201546002909201549092565b60408051938452602084019290925290820152606001610251565b34801561043b57600080fd5b506040805180820190915260018152603160f81b60208201526102ae565b34801561046557600080fd5b5061026b6104743660046129c3565b610d4f565b34801561048557600080fd5b5061021e61049436600461259d565b610d78565b3480156104a557600080fd5b5061026b6104b43660046129ef565b610db9565b3480156104c557600080fd5b5061026b6104d4366004612a75565b610e0b565b3480156104e557600080fd5b50606461026b565b3480156104f957600080fd5b5060075461026b565b34801561050e57600080fd5b5061021e61051d366004612b35565b6110c7565b34801561052e57600080fd5b5061026b61053d36600461259d565b611108565b34801561054e57600080fd5b5061026b611134565b34801561056357600080fd5b5061021e61113f565b34801561057857600080fd5b5061026b61058736600461259d565b6111a9565b34801561059857600080fd5b5061026b6105a7366004612862565b6111d8565b3480156105b857600080fd5b506005546001600160a01b03165b6040516001600160a01b039091168152602001610251565b3480156105ea57600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e908201526102ae565b34801561063057600080fd5b5061026b7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b34801561066457600080fd5b5061021e61067336600461259d565b611212565b34801561068457600080fd5b5061026b610693366004612b52565b611253565b3480156106a457600080fd5b5061021e6106b336600461259d565b611266565b3480156106c457600080fd5b5061026b6106d336600461259d565b6112a7565b3480156106e457600080fd5b506105c67f000000000000000000000000000000000000000000000000000000000000000081565b60006107206005546001600160a01b031690565b905090565b6000610730826112b2565b92915050565b61073e61070c565b6001600160a01b0316336001600160a01b0316146107775760405162461bcd60e51b815260040161076e90612b7e565b60405180910390fd5b610780816112d7565b50565b60606000805461079290612bb5565b80601f01602080910402602001604051908101604052809291908181526020018280546107be90612bb5565b801561080b5780601f106107e05761010080835404028352916020019161080b565b820191906000526020600020905b8154815290600101906020018083116107ee57829003601f168201915b5050505050905090565b600080610824868686866111d8565b9050600461083182610d2d565b600781111561084257610842612955565b1461085f5760405162461bcd60e51b815260040161076e90612be9565b60055460408051630d48571f60e31b815290516000926001600160a01b031691636a42b8f89160048083019260209291908290030181865afa1580156108a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cd9190612c2a565b6108d79042612c59565b90506108f96108e58261139f565b60008481526006602052604090209061140b565b60005b8751811015610b4a5760055488516001600160a01b039091169063f2b06537908a908490811061092e5761092e612c71565b602002602001015189848151811061094857610948612c71565b602002602001015189858151811061096257610962612c71565b60200260200101518660405160200161097e9493929190612c87565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016109b291815260200190565b602060405180830381865afa1580156109cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f39190612ccd565b15610a715760405162461bcd60e51b815260206004820152604260248201527f476f7665726e6f7254696d656c6f636b436f6d706f756e643a206964656e746960448201527f63616c2070726f706f73616c20616374696f6e20616c72656164792071756575606482015261195960f21b608482015260a40161076e565b60055488516001600160a01b0390911690633a66f901908a9084908110610a9a57610a9a612c71565b6020026020010151898481518110610ab457610ab4612c71565b6020026020010151898581518110610ace57610ace612c71565b6020026020010151866040518563ffffffff1660e01b8152600401610af69493929190612c87565b6020604051808303816000875af1158015610b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b399190612c2a565b50610b4381612cef565b90506108fc565b5060408051838152602081018390527f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda289291015b60405180910390a15095945050505050565b600080610b9e868686866111d8565b90506000610bab82610d2d565b90506004816007811115610bc157610bc1612955565b1480610bde57506005816007811115610bdc57610bdc612955565b145b610bfa5760405162461bcd60e51b815260040161076e90612be9565b600082815260016020818152604092839020600201805460ff191690921790915590518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f910160405180910390a1610c588288888888611429565b5095945050505050565b60008181526001602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610d0590610cfd906080016040516020818303038152906040528051906020012061143d565b86868661148b565b9050610d22878288604051806020016040528060008152506114a9565b979650505050505050565b6000610730826115b4565b6000610d4685858585611698565b95945050505050565b600080339050610d70848285604051806020016040528060008152506114a9565b949350505050565b610d8061070c565b6001600160a01b0316336001600160a01b031614610db05760405162461bcd60e51b815260040161076e90612b7e565b610780816116a6565b600080339050610e0186828787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114a992505050565b9695505050505050565b6000610e15611134565b610e2433610693600143612d08565b1015610ea45760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72436f6d7061746962696c697479427261766f3a2070726f7060448201527f6f73657220766f7465732062656c6f772070726f706f73616c207468726573686064820152621bdb1960ea1b608482015260a40161076e565b6000610eb986868686805190602001206111d8565b90508451865114610edc5760405162461bcd60e51b815260040161076e90612d1f565b8351865114610efd5760405162461bcd60e51b815260040161076e90612d1f565b6000865111610f4e5760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c0000000000000000604482015260640161076e565b600081815260016020908152604091829020825191820190925281546001600160401b03169081905215610fce5760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b606482015260840161076e565b6000610fe1610fdc60025490565b61139f565b610fea4361139f565b610ff49190612d60565b90506000611004610fdc60035490565b61100e9083612d60565b905061101a838361140b565b611027600184018261140b565b7f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b0381111561106557611065612621565b60405190808252806020026020018201604052801561109857816020015b60608152602001906001900390816110835790505b508c88888e6040516110b299989796959493929190612e54565b60405180910390a15091979650505050505050565b6110cf61070c565b6001600160a01b0316336001600160a01b0316146110ff5760405162461bcd60e51b815260040161076e90612b7e565b610780816116e7565b60008181526006602090815260408083208151928301909152546001600160401b031690819052610c8a565b600061072060045490565b600560009054906101000a90046001600160a01b03166001600160a01b0316630e18b6816040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561118f57600080fd5b505af11580156111a3573d6000803e3d6000fd5b50505050565b60008181526001602081815260408084208151928301909152909101546001600160401b031690819052610c8a565b6000848484846040516020016111f19493929190612f43565b60408051601f19818403018152919052805160209091012095945050505050565b61121a61070c565b6001600160a01b0316336001600160a01b03161461124a5760405162461bcd60e51b815260040161076e90612b7e565b61078081611750565b600061125f83836117f1565b9392505050565b61126e61070c565b6001600160a01b0316336001600160a01b03161461129e5760405162461bcd60e51b815260040161076e90612b7e565b61078081611887565b6000610730826118c8565b60006001600160e01b03198216636e665ced60e01b148061073057506107308261196c565b606481111561135a5760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a40161076e565b600780549082905560408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b60006001600160401b038211156114075760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b606482015260840161076e565b5090565b815467ffffffffffffffff19166001600160401b0391909116179055565b61143685858585856119a1565b5050505050565b600061073061144a611b20565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061149c87878787611c47565b91509150610c5881611d34565b60008481526001602081905260408220906114c387610d2d565b60078111156114d4576114d4612955565b1461152d5760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b606482015260840161076e565b604080516020810190915281546001600160401b031690819052600090611555908790611253565b905061156387878784611eea565b856001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda4888784886040516115a29493929190612f8e565b60405180910390a29695505050505050565b6000806115c083612064565b905060048160078111156115d6576115d6612955565b146115e15792915050565b60006115ec84611108565b9050806000036115fd575092915050565b600560009054906101000a90046001600160a01b03166001600160a01b031663c1a287e26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611650573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116749190612c2a565b61167e9082612c59565b421061168e575060069392505050565b5060059392505050565b6000610d46858585856121c8565b60025460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600255565b600554604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600580546001600160a01b0319166001600160a01b0392909216919091179055565b600081116117b05760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b606482015260840161076e565b60035460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600355565b604051630748d63560e31b81526001600160a01b038381166004830152602482018390526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a890604401602060405180830381865afa158015611863573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125f9190612c2a565b60045460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600455565b60006064600754604051632394e7a360e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e539e8c90602401602060405180830381865afa158015611934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119589190612c2a565b6119629190612fb6565b6107309190612fd5565b60006001600160e01b0319821663bf26d89760e01b148061073057506301ffc9a760e01b6001600160e01b0319831614610730565b60006119ac86611108565b905060008111611a185760405162461bcd60e51b815260206004820152603160248201527f476f7665726e6f7254696d656c6f636b436f6d706f756e643a2070726f706f73604482015270185b081b9bdd081e595d081c5d595d5959607a1b606482015260840161076e565b600554611a2e906001600160a01b0316346122e3565b60005b8551811015611b175760055486516001600160a01b0390911690630825f38f90889084908110611a6357611a63612c71565b6020026020010151878481518110611a7d57611a7d612c71565b6020026020010151878581518110611a9757611a97612c71565b6020026020010151866040518563ffffffff1660e01b8152600401611abf9493929190612c87565b6000604051808303816000875af1158015611ade573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b069190810190612ff7565b50611b1081612cef565b9050611a31565b50505050505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015611b7957507f000000000000000000000000000000000000000000000000000000000000000046145b15611ba357507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611c7e5750600090506003611d2b565b8460ff16601b14158015611c9657508460ff16601c14155b15611ca75750600090506004611d2b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611cfb573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611d2457600060019250925050611d2b565b9150600090505b94509492505050565b6000816004811115611d4857611d48612955565b03611d505750565b6001816004811115611d6457611d64612955565b03611db15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161076e565b6002816004811115611dc557611dc5612955565b03611e125760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161076e565b6003816004811115611e2657611e26612955565b03611e7e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161076e565b6004816004811115611e9257611e92612955565b036107805760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161076e565b60008481526008602090815260408083206001600160a01b0387168452600381019092529091205460ff1615611f725760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b606482015260840161076e565b6001600160a01b03841660009081526003820160205260409020805460ff1916600117905560ff8316611fbe5781816000016000828254611fb39190612c59565b909155506114369050565b60001960ff841601611fde5781816001016000828254611fb39190612c59565b60011960ff841601611ffe5781816002016000828254611fb39190612c59565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b606482015260840161076e565b6000818152600160208181526040808420815160a08101835281546001600160401b0390811660808301908152825283518086018552958301541685529283019390935260029092015460ff808216158015948401949094526101009091041615156060820152906120d95750600792915050565b8060600151156120ec5750600292915050565b80515143906001600160401b0316106121085750600092915050565b4361211582602001515190565b6001600160401b03161061212c5750600192915050565b6121398160200151612401565b1561217a5761214783612430565b8015612166575060008381526008602052604090208054600190910154115b61217157600361125f565b60049392505050565b60405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c206964000000604482015260640161076e565b50919050565b6000806121d786868686612467565b905060006121e482611108565b90508015610c585760005b87518110156122c05760055488516001600160a01b039091169063591fcdfe908a908490811061222157612221612c71565b602002602001015189848151811061223b5761223b612c71565b602002602001015189858151811061225557612255612c71565b6020026020010151866040518563ffffffff1660e01b815260040161227d9493929190612c87565b600060405180830381600087803b15801561229757600080fd5b505af11580156122ab573d6000803e3d6000fd5b50505050806122b990612cef565b90506121ef565b506000828152600660205260409020805467ffffffffffffffff19169055610c58565b804710156123335760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161076e565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612380576040519150601f19603f3d011682016040523d82523d6000602084013e612385565b606091505b50509050806123fc5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161076e565b505050565b600061241682516001600160401b0316151590565b801561073057505051436001600160401b03909116111590565b6000818152600860205260408120600281015460018201546124529190612c59565b61245e6106d385610c62565b11159392505050565b600080612476868686866111d8565b9050600061248382610d2d565b9050600281600781111561249957612499612955565b141580156124b9575060068160078111156124b6576124b6612955565b14155b80156124d7575060078160078111156124d4576124d4612955565b14155b6125235760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a2070726f706f73616c206e6f7420616374697665000000604482015260640161076e565b60008281526001602052604090819020600201805461ff001916610100179055517f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c90610b7d9084815260200190565b60006020828403121561258557600080fd5b81356001600160e01b03198116811461125f57600080fd5b6000602082840312156125af57600080fd5b5035919050565b60005b838110156125d15781810151838201526020016125b9565b838111156111a35750506000910152565b600081518084526125fa8160208601602086016125b6565b601f01601f19169290920160200192915050565b60208152600061125f60208301846125e2565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561265f5761265f612621565b604052919050565b60006001600160401b0382111561268057612680612621565b5060051b60200190565b6001600160a01b038116811461078057600080fd5b600082601f8301126126b057600080fd5b813560206126c56126c083612667565b612637565b82815260059290921b840181019181810190868411156126e457600080fd5b8286015b848110156127085780356126fb8161268a565b83529183019183016126e8565b509695505050505050565b600082601f83011261272457600080fd5b813560206127346126c083612667565b82815260059290921b8401810191818101908684111561275357600080fd5b8286015b848110156127085780358352918301918301612757565b60006001600160401b0382111561278757612787612621565b50601f01601f191660200190565b60006127a36126c08461276e565b90508281528383830111156127b757600080fd5b828260208301376000602084830101529392505050565b600082601f8301126127df57600080fd5b813560206127ef6126c083612667565b82815260059290921b8401810191818101908684111561280e57600080fd5b8286015b848110156127085780356001600160401b038111156128315760008081fd5b8701603f810189136128435760008081fd5b612854898683013560408401612795565b845250918301918301612812565b6000806000806080858703121561287857600080fd5b84356001600160401b038082111561288f57600080fd5b61289b8883890161269f565b955060208701359150808211156128b157600080fd5b6128bd88838901612713565b945060408701359150808211156128d357600080fd5b506128e0878288016127ce565b949793965093946060013593505050565b803560ff8116811461290257600080fd5b919050565b600080600080600060a0868803121561291f57600080fd5b8535945061292f602087016128f1565b935061293d604087016128f1565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061298d57634e487b7160e01b600052602160045260246000fd5b91905290565b600080604083850312156129a657600080fd5b8235915060208301356129b88161268a565b809150509250929050565b600080604083850312156129d657600080fd5b823591506129e6602084016128f1565b90509250929050565b60008060008060608587031215612a0557600080fd5b84359350612a15602086016128f1565b925060408501356001600160401b0380821115612a3157600080fd5b818701915087601f830112612a4557600080fd5b813581811115612a5457600080fd5b886020828501011115612a6657600080fd5b95989497505060200194505050565b60008060008060808587031215612a8b57600080fd5b84356001600160401b0380821115612aa257600080fd5b612aae8883890161269f565b95506020870135915080821115612ac457600080fd5b612ad088838901612713565b94506040870135915080821115612ae657600080fd5b612af2888389016127ce565b93506060870135915080821115612b0857600080fd5b508501601f81018713612b1a57600080fd5b612b2987823560208401612795565b91505092959194509250565b600060208284031215612b4757600080fd5b813561125f8161268a565b60008060408385031215612b6557600080fd5b8235612b708161268a565b946020939093013593505050565b60208082526018908201527f476f7665726e6f723a206f6e6c79476f7665726e616e63650000000000000000604082015260600190565b600181811c90821680612bc957607f821691505b6020821081036121c257634e487b7160e01b600052602260045260246000fd5b60208082526021908201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756040820152601b60fa1b606082015260800190565b600060208284031215612c3c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612c6c57612c6c612c43565b500190565b634e487b7160e01b600052603260045260246000fd5b60018060a01b038516815283602082015260a06040820152600060a082015260c060608201526000612cbc60c08301856125e2565b905082608083015295945050505050565b600060208284031215612cdf57600080fd5b8151801515811461125f57600080fd5b600060018201612d0157612d01612c43565b5060010190565b600082821015612d1a57612d1a612c43565b500390565b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b03808316818516808303821115612d8257612d82612c43565b01949350505050565b600081518084526020808501945080840160005b83811015612dc45781516001600160a01b031687529582019590820190600101612d9f565b509495945050505050565b600081518084526020808501945080840160005b83811015612dc457815187529582019590820190600101612de3565b600081518084526020808501808196508360051b8101915082860160005b85811015612e47578284038952612e358483516125e2565b98850198935090840190600101612e1d565b5091979650505050505050565b60006101208b8352602060018060a01b038c1681850152816040850152612e7d8285018c612d8b565b91508382036060850152612e91828b612dcf565b915083820360808501528189518084528284019150828160051b850101838c0160005b83811015612ee257601f19878403018552612ed08383516125e2565b94860194925090850190600101612eb4565b505086810360a0880152612ef6818c612dff565b945050505050612f1160c08401876001600160401b03169052565b6001600160401b03851660e0840152828103610100840152612f3381856125e2565b9c9b505050505050505050505050565b608081526000612f566080830187612d8b565b8281036020840152612f688187612dcf565b90508281036040840152612f7c8186612dff565b91505082606083015295945050505050565b84815260ff84166020820152826040820152608060608201526000610e0160808301846125e2565b6000816000190483118215151615612fd057612fd0612c43565b500290565b600082612ff257634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561300957600080fd5b81516001600160401b0381111561301f57600080fd5b8201601f8101841361303057600080fd5b805161303e6126c08261276e565b81815285602083850101111561305357600080fd5b610d468260208301602086016125b656fea26469706673582212206c2ec92f2271df0e04d32af13efa9f49670a50b3ec5eb33f48656cf08acce72e64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052600436106101fd5760003560e01c80637d5e81e21161010d578063c59057e4116100a0578063ea0217cf1161006f578063ea0217cf14610658578063eb9019d414610678578063ece40cc114610698578063f8ce560a146106b8578063fc0c546a146106d857600080fd5b8063c59057e41461058c578063d33219b4146105ac578063dd4e2ba5146105de578063deaaa7cc1461062457600080fd5b8063ab58fb8e116100dc578063ab58fb8e14610522578063b58131b014610542578063b9a6196114610557578063c01f9e371461056c57600080fd5b80637d5e81e2146104b957806397c3d334146104d9578063a7713a70146104ed578063a890c9101461050257600080fd5b80633bccf4fd11610190578063544ffc9c1161015f578063544ffc9c146103da57806354fd4d501461042f578063567813881461045957806370b0f660146104795780637b3c71d31461049957600080fd5b80633bccf4fd146103235780633e4f49e6146103435780634385963214610370578063452115d6146103ba57600080fd5b8063160cbed7116101cc578063160cbed7146102bb5780632656227d146102db5780632d63f693146102ee5780633932abb11461030e57600080fd5b806301ffc9a71461022557806302a251a31461025a57806306f3f9e61461027957806306fdde031461029957600080fd5b36610220573061020b61070c565b6001600160a01b03161461021e57600080fd5b005b600080fd5b34801561023157600080fd5b50610245610240366004612573565b610725565b60405190151581526020015b60405180910390f35b34801561026657600080fd5b506003545b604051908152602001610251565b34801561028557600080fd5b5061021e61029436600461259d565b610736565b3480156102a557600080fd5b506102ae610783565b604051610251919061260e565b3480156102c757600080fd5b5061026b6102d6366004612862565b610815565b61026b6102e9366004612862565b610b8f565b3480156102fa57600080fd5b5061026b61030936600461259d565b610c62565b34801561031a57600080fd5b5060025461026b565b34801561032f57600080fd5b5061026b61033e366004612907565b610c99565b34801561034f57600080fd5b5061036361035e36600461259d565b610d2d565b604051610251919061296b565b34801561037c57600080fd5b5061024561038b366004612993565b60008281526008602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b3480156103c657600080fd5b5061026b6103d5366004612862565b610d38565b3480156103e657600080fd5b506104146103f536600461259d565b6000908152600860205260409020805460018201546002909201549092565b60408051938452602084019290925290820152606001610251565b34801561043b57600080fd5b506040805180820190915260018152603160f81b60208201526102ae565b34801561046557600080fd5b5061026b6104743660046129c3565b610d4f565b34801561048557600080fd5b5061021e61049436600461259d565b610d78565b3480156104a557600080fd5b5061026b6104b43660046129ef565b610db9565b3480156104c557600080fd5b5061026b6104d4366004612a75565b610e0b565b3480156104e557600080fd5b50606461026b565b3480156104f957600080fd5b5060075461026b565b34801561050e57600080fd5b5061021e61051d366004612b35565b6110c7565b34801561052e57600080fd5b5061026b61053d36600461259d565b611108565b34801561054e57600080fd5b5061026b611134565b34801561056357600080fd5b5061021e61113f565b34801561057857600080fd5b5061026b61058736600461259d565b6111a9565b34801561059857600080fd5b5061026b6105a7366004612862565b6111d8565b3480156105b857600080fd5b506005546001600160a01b03165b6040516001600160a01b039091168152602001610251565b3480156105ea57600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e908201526102ae565b34801561063057600080fd5b5061026b7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b34801561066457600080fd5b5061021e61067336600461259d565b611212565b34801561068457600080fd5b5061026b610693366004612b52565b611253565b3480156106a457600080fd5b5061021e6106b336600461259d565b611266565b3480156106c457600080fd5b5061026b6106d336600461259d565b6112a7565b3480156106e457600080fd5b506105c67f000000000000000000000000000000000000000000000000000000000000000081565b60006107206005546001600160a01b031690565b905090565b6000610730826112b2565b92915050565b61073e61070c565b6001600160a01b0316336001600160a01b0316146107775760405162461bcd60e51b815260040161076e90612b7e565b60405180910390fd5b610780816112d7565b50565b60606000805461079290612bb5565b80601f01602080910402602001604051908101604052809291908181526020018280546107be90612bb5565b801561080b5780601f106107e05761010080835404028352916020019161080b565b820191906000526020600020905b8154815290600101906020018083116107ee57829003601f168201915b5050505050905090565b600080610824868686866111d8565b9050600461083182610d2d565b600781111561084257610842612955565b1461085f5760405162461bcd60e51b815260040161076e90612be9565b60055460408051630d48571f60e31b815290516000926001600160a01b031691636a42b8f89160048083019260209291908290030181865afa1580156108a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cd9190612c2a565b6108d79042612c59565b90506108f96108e58261139f565b60008481526006602052604090209061140b565b60005b8751811015610b4a5760055488516001600160a01b039091169063f2b06537908a908490811061092e5761092e612c71565b602002602001015189848151811061094857610948612c71565b602002602001015189858151811061096257610962612c71565b60200260200101518660405160200161097e9493929190612c87565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016109b291815260200190565b602060405180830381865afa1580156109cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f39190612ccd565b15610a715760405162461bcd60e51b815260206004820152604260248201527f476f7665726e6f7254696d656c6f636b436f6d706f756e643a206964656e746960448201527f63616c2070726f706f73616c20616374696f6e20616c72656164792071756575606482015261195960f21b608482015260a40161076e565b60055488516001600160a01b0390911690633a66f901908a9084908110610a9a57610a9a612c71565b6020026020010151898481518110610ab457610ab4612c71565b6020026020010151898581518110610ace57610ace612c71565b6020026020010151866040518563ffffffff1660e01b8152600401610af69493929190612c87565b6020604051808303816000875af1158015610b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b399190612c2a565b50610b4381612cef565b90506108fc565b5060408051838152602081018390527f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda289291015b60405180910390a15095945050505050565b600080610b9e868686866111d8565b90506000610bab82610d2d565b90506004816007811115610bc157610bc1612955565b1480610bde57506005816007811115610bdc57610bdc612955565b145b610bfa5760405162461bcd60e51b815260040161076e90612be9565b600082815260016020818152604092839020600201805460ff191690921790915590518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f910160405180910390a1610c588288888888611429565b5095945050505050565b60008181526001602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610d0590610cfd906080016040516020818303038152906040528051906020012061143d565b86868661148b565b9050610d22878288604051806020016040528060008152506114a9565b979650505050505050565b6000610730826115b4565b6000610d4685858585611698565b95945050505050565b600080339050610d70848285604051806020016040528060008152506114a9565b949350505050565b610d8061070c565b6001600160a01b0316336001600160a01b031614610db05760405162461bcd60e51b815260040161076e90612b7e565b610780816116a6565b600080339050610e0186828787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114a992505050565b9695505050505050565b6000610e15611134565b610e2433610693600143612d08565b1015610ea45760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72436f6d7061746962696c697479427261766f3a2070726f7060448201527f6f73657220766f7465732062656c6f772070726f706f73616c207468726573686064820152621bdb1960ea1b608482015260a40161076e565b6000610eb986868686805190602001206111d8565b90508451865114610edc5760405162461bcd60e51b815260040161076e90612d1f565b8351865114610efd5760405162461bcd60e51b815260040161076e90612d1f565b6000865111610f4e5760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c0000000000000000604482015260640161076e565b600081815260016020908152604091829020825191820190925281546001600160401b03169081905215610fce5760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b606482015260840161076e565b6000610fe1610fdc60025490565b61139f565b610fea4361139f565b610ff49190612d60565b90506000611004610fdc60035490565b61100e9083612d60565b905061101a838361140b565b611027600184018261140b565b7f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b0381111561106557611065612621565b60405190808252806020026020018201604052801561109857816020015b60608152602001906001900390816110835790505b508c88888e6040516110b299989796959493929190612e54565b60405180910390a15091979650505050505050565b6110cf61070c565b6001600160a01b0316336001600160a01b0316146110ff5760405162461bcd60e51b815260040161076e90612b7e565b610780816116e7565b60008181526006602090815260408083208151928301909152546001600160401b031690819052610c8a565b600061072060045490565b600560009054906101000a90046001600160a01b03166001600160a01b0316630e18b6816040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561118f57600080fd5b505af11580156111a3573d6000803e3d6000fd5b50505050565b60008181526001602081815260408084208151928301909152909101546001600160401b031690819052610c8a565b6000848484846040516020016111f19493929190612f43565b60408051601f19818403018152919052805160209091012095945050505050565b61121a61070c565b6001600160a01b0316336001600160a01b03161461124a5760405162461bcd60e51b815260040161076e90612b7e565b61078081611750565b600061125f83836117f1565b9392505050565b61126e61070c565b6001600160a01b0316336001600160a01b03161461129e5760405162461bcd60e51b815260040161076e90612b7e565b61078081611887565b6000610730826118c8565b60006001600160e01b03198216636e665ced60e01b148061073057506107308261196c565b606481111561135a5760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a40161076e565b600780549082905560408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b60006001600160401b038211156114075760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b606482015260840161076e565b5090565b815467ffffffffffffffff19166001600160401b0391909116179055565b61143685858585856119a1565b5050505050565b600061073061144a611b20565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061149c87878787611c47565b91509150610c5881611d34565b60008481526001602081905260408220906114c387610d2d565b60078111156114d4576114d4612955565b1461152d5760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b606482015260840161076e565b604080516020810190915281546001600160401b031690819052600090611555908790611253565b905061156387878784611eea565b856001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda4888784886040516115a29493929190612f8e565b60405180910390a29695505050505050565b6000806115c083612064565b905060048160078111156115d6576115d6612955565b146115e15792915050565b60006115ec84611108565b9050806000036115fd575092915050565b600560009054906101000a90046001600160a01b03166001600160a01b031663c1a287e26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611650573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116749190612c2a565b61167e9082612c59565b421061168e575060069392505050565b5060059392505050565b6000610d46858585856121c8565b60025460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600255565b600554604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600580546001600160a01b0319166001600160a01b0392909216919091179055565b600081116117b05760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b606482015260840161076e565b60035460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600355565b604051630748d63560e31b81526001600160a01b038381166004830152602482018390526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a890604401602060405180830381865afa158015611863573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125f9190612c2a565b60045460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600455565b60006064600754604051632394e7a360e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e539e8c90602401602060405180830381865afa158015611934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119589190612c2a565b6119629190612fb6565b6107309190612fd5565b60006001600160e01b0319821663bf26d89760e01b148061073057506301ffc9a760e01b6001600160e01b0319831614610730565b60006119ac86611108565b905060008111611a185760405162461bcd60e51b815260206004820152603160248201527f476f7665726e6f7254696d656c6f636b436f6d706f756e643a2070726f706f73604482015270185b081b9bdd081e595d081c5d595d5959607a1b606482015260840161076e565b600554611a2e906001600160a01b0316346122e3565b60005b8551811015611b175760055486516001600160a01b0390911690630825f38f90889084908110611a6357611a63612c71565b6020026020010151878481518110611a7d57611a7d612c71565b6020026020010151878581518110611a9757611a97612c71565b6020026020010151866040518563ffffffff1660e01b8152600401611abf9493929190612c87565b6000604051808303816000875af1158015611ade573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b069190810190612ff7565b50611b1081612cef565b9050611a31565b50505050505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015611b7957507f000000000000000000000000000000000000000000000000000000000000000046145b15611ba357507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611c7e5750600090506003611d2b565b8460ff16601b14158015611c9657508460ff16601c14155b15611ca75750600090506004611d2b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611cfb573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611d2457600060019250925050611d2b565b9150600090505b94509492505050565b6000816004811115611d4857611d48612955565b03611d505750565b6001816004811115611d6457611d64612955565b03611db15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161076e565b6002816004811115611dc557611dc5612955565b03611e125760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161076e565b6003816004811115611e2657611e26612955565b03611e7e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161076e565b6004816004811115611e9257611e92612955565b036107805760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161076e565b60008481526008602090815260408083206001600160a01b0387168452600381019092529091205460ff1615611f725760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b606482015260840161076e565b6001600160a01b03841660009081526003820160205260409020805460ff1916600117905560ff8316611fbe5781816000016000828254611fb39190612c59565b909155506114369050565b60001960ff841601611fde5781816001016000828254611fb39190612c59565b60011960ff841601611ffe5781816002016000828254611fb39190612c59565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b606482015260840161076e565b6000818152600160208181526040808420815160a08101835281546001600160401b0390811660808301908152825283518086018552958301541685529283019390935260029092015460ff808216158015948401949094526101009091041615156060820152906120d95750600792915050565b8060600151156120ec5750600292915050565b80515143906001600160401b0316106121085750600092915050565b4361211582602001515190565b6001600160401b03161061212c5750600192915050565b6121398160200151612401565b1561217a5761214783612430565b8015612166575060008381526008602052604090208054600190910154115b61217157600361125f565b60049392505050565b60405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c206964000000604482015260640161076e565b50919050565b6000806121d786868686612467565b905060006121e482611108565b90508015610c585760005b87518110156122c05760055488516001600160a01b039091169063591fcdfe908a908490811061222157612221612c71565b602002602001015189848151811061223b5761223b612c71565b602002602001015189858151811061225557612255612c71565b6020026020010151866040518563ffffffff1660e01b815260040161227d9493929190612c87565b600060405180830381600087803b15801561229757600080fd5b505af11580156122ab573d6000803e3d6000fd5b50505050806122b990612cef565b90506121ef565b506000828152600660205260409020805467ffffffffffffffff19169055610c58565b804710156123335760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161076e565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612380576040519150601f19603f3d011682016040523d82523d6000602084013e612385565b606091505b50509050806123fc5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161076e565b505050565b600061241682516001600160401b0316151590565b801561073057505051436001600160401b03909116111590565b6000818152600860205260408120600281015460018201546124529190612c59565b61245e6106d385610c62565b11159392505050565b600080612476868686866111d8565b9050600061248382610d2d565b9050600281600781111561249957612499612955565b141580156124b9575060068160078111156124b6576124b6612955565b14155b80156124d7575060078160078111156124d4576124d4612955565b14155b6125235760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a2070726f706f73616c206e6f7420616374697665000000604482015260640161076e565b60008281526001602052604090819020600201805461ff001916610100179055517f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c90610b7d9084815260200190565b60006020828403121561258557600080fd5b81356001600160e01b03198116811461125f57600080fd5b6000602082840312156125af57600080fd5b5035919050565b60005b838110156125d15781810151838201526020016125b9565b838111156111a35750506000910152565b600081518084526125fa8160208601602086016125b6565b601f01601f19169290920160200192915050565b60208152600061125f60208301846125e2565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561265f5761265f612621565b604052919050565b60006001600160401b0382111561268057612680612621565b5060051b60200190565b6001600160a01b038116811461078057600080fd5b600082601f8301126126b057600080fd5b813560206126c56126c083612667565b612637565b82815260059290921b840181019181810190868411156126e457600080fd5b8286015b848110156127085780356126fb8161268a565b83529183019183016126e8565b509695505050505050565b600082601f83011261272457600080fd5b813560206127346126c083612667565b82815260059290921b8401810191818101908684111561275357600080fd5b8286015b848110156127085780358352918301918301612757565b60006001600160401b0382111561278757612787612621565b50601f01601f191660200190565b60006127a36126c08461276e565b90508281528383830111156127b757600080fd5b828260208301376000602084830101529392505050565b600082601f8301126127df57600080fd5b813560206127ef6126c083612667565b82815260059290921b8401810191818101908684111561280e57600080fd5b8286015b848110156127085780356001600160401b038111156128315760008081fd5b8701603f810189136128435760008081fd5b612854898683013560408401612795565b845250918301918301612812565b6000806000806080858703121561287857600080fd5b84356001600160401b038082111561288f57600080fd5b61289b8883890161269f565b955060208701359150808211156128b157600080fd5b6128bd88838901612713565b945060408701359150808211156128d357600080fd5b506128e0878288016127ce565b949793965093946060013593505050565b803560ff8116811461290257600080fd5b919050565b600080600080600060a0868803121561291f57600080fd5b8535945061292f602087016128f1565b935061293d604087016128f1565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061298d57634e487b7160e01b600052602160045260246000fd5b91905290565b600080604083850312156129a657600080fd5b8235915060208301356129b88161268a565b809150509250929050565b600080604083850312156129d657600080fd5b823591506129e6602084016128f1565b90509250929050565b60008060008060608587031215612a0557600080fd5b84359350612a15602086016128f1565b925060408501356001600160401b0380821115612a3157600080fd5b818701915087601f830112612a4557600080fd5b813581811115612a5457600080fd5b886020828501011115612a6657600080fd5b95989497505060200194505050565b60008060008060808587031215612a8b57600080fd5b84356001600160401b0380821115612aa257600080fd5b612aae8883890161269f565b95506020870135915080821115612ac457600080fd5b612ad088838901612713565b94506040870135915080821115612ae657600080fd5b612af2888389016127ce565b93506060870135915080821115612b0857600080fd5b508501601f81018713612b1a57600080fd5b612b2987823560208401612795565b91505092959194509250565b600060208284031215612b4757600080fd5b813561125f8161268a565b60008060408385031215612b6557600080fd5b8235612b708161268a565b946020939093013593505050565b60208082526018908201527f476f7665726e6f723a206f6e6c79476f7665726e616e63650000000000000000604082015260600190565b600181811c90821680612bc957607f821691505b6020821081036121c257634e487b7160e01b600052602260045260246000fd5b60208082526021908201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756040820152601b60fa1b606082015260800190565b600060208284031215612c3c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612c6c57612c6c612c43565b500190565b634e487b7160e01b600052603260045260246000fd5b60018060a01b038516815283602082015260a06040820152600060a082015260c060608201526000612cbc60c08301856125e2565b905082608083015295945050505050565b600060208284031215612cdf57600080fd5b8151801515811461125f57600080fd5b600060018201612d0157612d01612c43565b5060010190565b600082821015612d1a57612d1a612c43565b500390565b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b03808316818516808303821115612d8257612d82612c43565b01949350505050565b600081518084526020808501945080840160005b83811015612dc45781516001600160a01b031687529582019590820190600101612d9f565b509495945050505050565b600081518084526020808501945080840160005b83811015612dc457815187529582019590820190600101612de3565b600081518084526020808501808196508360051b8101915082860160005b85811015612e47578284038952612e358483516125e2565b98850198935090840190600101612e1d565b5091979650505050505050565b60006101208b8352602060018060a01b038c1681850152816040850152612e7d8285018c612d8b565b91508382036060850152612e91828b612dcf565b915083820360808501528189518084528284019150828160051b850101838c0160005b83811015612ee257601f19878403018552612ed08383516125e2565b94860194925090850190600101612eb4565b505086810360a0880152612ef6818c612dff565b945050505050612f1160c08401876001600160401b03169052565b6001600160401b03851660e0840152828103610100840152612f3381856125e2565b9c9b505050505050505050505050565b608081526000612f566080830187612d8b565b8281036020840152612f688187612dcf565b90508281036040840152612f7c8186612dff565b91505082606083015295945050505050565b84815260ff84166020820152826040820152608060608201526000610e0160808301846125e2565b6000816000190483118215151615612fd057612fd0612c43565b500290565b600082612ff257634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561300957600080fd5b81516001600160401b0381111561301f57600080fd5b8201601f8101841361303057600080fd5b805161303e6126c08261276e565b81815285602083850101111561305357600080fd5b610d468260208301602086016125b656fea26469706673582212206c2ec92f2271df0e04d32af13efa9f49670a50b3ec5eb33f48656cf08acce72e64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name_", "type": "string", "internalType": "string"}, {"name": "token_", "type": "address", "internalType": "contract ERC20Votes"}, {"name": "votingDelay_", "type": "uint256", "internalType": "uint256"}, {"name": "votingPeriod_", "type": "uint256", "internalType": "uint256"}, {"name": "timelock_", "type": "address", "internalType": "contract ICompoundTimelock"}, {"name": "quorumNumerator_", "type": "uint256", "internalType": "uint256"}]}, {"type": "event", "name": "ProposalCanceled", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalCreated", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "proposer", "type": "address", "internalType": "address", "indexed": false}, {"name": "targets", "type": "address[]", "internalType": "address[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "signatures", "type": "string[]", "internalType": "string[]", "indexed": false}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]", "indexed": false}, {"name": "startBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "endBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "description", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalExecuted", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalQueued", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "eta", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalThresholdSet", "inputs": [{"name": "oldProposalThreshold", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newProposalThreshold", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "QuorumNumeratorUpdated", "inputs": [{"name": "oldQuorumNumerator", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newQuorumNumerator", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TimelockChange", "inputs": [{"name": "oldTimelock", "type": "address", "internalType": "address", "indexed": false}, {"name": "newTimelock", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VoteCast", "inputs": [{"name": "voter", "type": "address", "internalType": "address", "indexed": true}, {"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "support", "type": "uint8", "internalType": "uint8", "indexed": false}, {"name": "weight", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "reason", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VotingDelaySet", "inputs": [{"name": "oldVotingDelay", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newVotingDelay", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VotingPeriodSet", "inputs": [{"name": "oldVotingPeriod", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newVotingPeriod", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "BALLOT_TYPEHASH", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "COUNTING_MODE", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "__acceptAdmin", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "cancel", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "salt", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVote", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteBySig", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteWithReason", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "reason", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "hasVoted", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "hashProposal", "stateMutability": "pure", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "proposalDeadline", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalEta", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalSnapshot", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalThreshold", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalVotes", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "againstVotes", "type": "uint256", "internalType": "uint256"}, {"name": "forVotes", "type": "uint256", "internalType": "uint256"}, {"name": "abstainVotes", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "queue", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorum", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorumDenominator", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorumNumerator", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "setProposalThreshold", "stateMutability": "nonpayable", "inputs": [{"name": "newProposalThreshold", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "setVotingDelay", "stateMutability": "nonpayable", "inputs": [{"name": "newVotingDelay", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "setVotingPeriod", "stateMutability": "nonpayable", "inputs": [{"name": "newVotingPeriod", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "enum IGovernor.ProposalState"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "timelock", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "token", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "contract ERC20Votes"}]}, {"type": "function", "name": "updateQuorumNumerator", "stateMutability": "nonpayable", "inputs": [{"name": "newQuorumNumerator", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "updateTimelock", "stateMutability": "nonpayable", "inputs": [{"name": "newTimelock", "type": "address", "internalType": "contract ICompoundTimelock"}], "outputs": []}, {"type": "function", "name": "version", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "votingDelay", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "votingPeriod", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {"state(uint256)": {"notice": "Overriding nightmare"}}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"COUNTING_MODE()": {"details": "See {IGovernor-COUNTING_MODE}."}, "__acceptAdmin()": {"details": "Accept admin right over the timelock."}, "castVote(uint256,uint8)": {"details": "See {IGovernor-castVote}."}, "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {"details": "See {IGovernor-castVoteBySig}."}, "castVoteWithReason(uint256,uint8,string)": {"details": "See {IGovernor-castVoteWithReason}."}, "execute(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-execute}."}, "hasVoted(uint256,address)": {"details": "See {IGovernor-hasVoted}."}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."}, "name()": {"details": "See {IGovernor-name}."}, "proposalDeadline(uint256)": {"details": "See {IGovernor-proposalDeadline}."}, "proposalEta(uint256)": {"details": "Public accessor to check the eta of a queued proposal"}, "proposalSnapshot(uint256)": {"details": "See {IGovernor-proposalSnapshot}."}, "proposalVotes(uint256)": {"details": "Accessor to the internal vote counts."}, "propose(address[],uint256[],bytes[],string)": {"details": "See {IGovernor-propose}."}, "queue(address[],uint256[],bytes[],bytes32)": {"details": "Function to queue a proposal to the timelock."}, "setProposalThreshold(uint256)": {"details": "Update the proposal threshold. This operation can only be performed through a governance proposal. Emits a {ProposalThresholdSet} event."}, "setVotingDelay(uint256)": {"details": "Update the voting delay. This operation can only be performed through a governance proposal. Emits a {VotingDelaySet} event."}, "setVotingPeriod(uint256)": {"details": "Update the voting period. This operation can only be performed through a governance proposal. Emits a {VotingPeriodSet} event."}, "timelock()": {"details": "Public accessor to check the address of the timelock"}, "updateTimelock(address)": {"details": "Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates must be proposed, scheduled and executed using the {Governor} workflow. For security reason, the timelock must be handed over to another admin before setting up a new one. The two operations (hand over the timelock) and do the update can be batched in a single proposal. Note that if the timelock admin has been handed over in a previous operation, we refuse updates made through the timelock if admin of the timelock has already been accepted and the operation is executed outside the scope of governance."}, "version()": {"details": "See {IGovernor-version}."}, "votingDelay()": {"details": "See {IGovernor-votingDelay}."}, "votingPeriod()": {"details": "See {IGovernor-votingPeriod}."}}, "version": 1}}, "GovernorTimelockControlMock": {"contractName": "GovernorTimelockControlMock", "sourceId": "mocks/GovernorTimelockControlMock.sol", "deploymentBytecode": {"bytecode": "0x6101606040523480156200001257600080fd5b506040516200326138038062003261833981016040819052620000359162000496565b808583868660008b806200005d6040805180820190915260018152603160f81b602082015290565b815160208084019190912082518383012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c00190528051940193909320919290916080523060c0526101205250508251620001039250600091506020840190620003bd565b506200011190508362000161565b6200011c82620001a2565b620001278162000249565b5050506200013b816200028a60201b60201c565b506001600160a01b0316610140526200015481620002f3565b50505050505050620005f1565b60025460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600255565b60008111620002085760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b60648201526084015b60405180910390fd5b60035460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600355565b60045460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600455565b600554604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600580546001600160a01b0319166001600160a01b0392909216919091179055565b6064811115620003785760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a401620001ff565b600780549082905560408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b828054620003cb90620005b5565b90600052602060002090601f016020900481019282620003ef57600085556200043a565b82601f106200040a57805160ff19168380011785556200043a565b828001600101855582156200043a579182015b828111156200043a5782518255916020019190600101906200041d565b50620004489291506200044c565b5090565b5b808211156200044857600081556001016200044d565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200049157600080fd5b919050565b60008060008060008060c08789031215620004b057600080fd5b86516001600160401b0380821115620004c857600080fd5b818901915089601f830112620004dd57600080fd5b815181811115620004f257620004f262000463565b604051601f8201601f19908116603f011681019083821181831017156200051d576200051d62000463565b81604052828152602093508c848487010111156200053a57600080fd5b600091505b828210156200055e57848201840151818301850152908301906200053f565b82821115620005705760008484830101525b99506200058291505089820162000479565b965050506040870151935060608701519250620005a26080880162000479565b915060a087015190509295509295509295565b600181811c90821680620005ca57607f821691505b602082108103620005eb57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051610100516101205161014051612c076200065a600039600081816106ca0152818161166c0152611737015260006118f1015260006119400152600061191b015260006118740152600061189e015260006118c80152612c076000f3fe6080604052600436106101f25760003560e01c80637b3c71d31161010d578063c59057e4116100a0578063ea0217cf1161006f578063ea0217cf14610638578063eb9019d414610658578063ece40cc114610678578063f8ce560a14610698578063fc0c546a146106b857600080fd5b8063c59057e41461056c578063d33219b41461058c578063dd4e2ba5146105be578063deaaa7cc1461060457600080fd5b8063a890c910116100dc578063a890c910146104f7578063ab58fb8e14610517578063b58131b014610537578063c01f9e371461054c57600080fd5b80637b3c71d31461048e5780637d5e81e2146104ae57806397c3d334146104ce578063a7713a70146104e257600080fd5b80633bccf4fd11610185578063544ffc9c11610154578063544ffc9c146103cf57806354fd4d5014610424578063567813881461044e57806370b0f6601461046e57600080fd5b80633bccf4fd146103185780633e4f49e6146103385780634385963214610365578063452115d6146103af57600080fd5b8063160cbed7116101c1578063160cbed7146102b05780632656227d146102d05780632d63f693146102e35780633932abb11461030357600080fd5b806301ffc9a71461021a57806302a251a31461024f57806306f3f9e61461026e57806306fdde031461028e57600080fd5b3661021557306102006106ec565b6001600160a01b03161461021357600080fd5b005b600080fd5b34801561022657600080fd5b5061023a610235366004612133565b610705565b60405190151581526020015b60405180910390f35b34801561025b57600080fd5b506003545b604051908152602001610246565b34801561027a57600080fd5b5061021361028936600461215d565b610716565b34801561029a57600080fd5b506102a3610763565b60405161024691906121c3565b3480156102bc57600080fd5b506102606102cb36600461240e565b6107f5565b6102606102de36600461240e565b6109f6565b3480156102ef57600080fd5b506102606102fe36600461215d565b610ac9565b34801561030f57600080fd5b50600254610260565b34801561032457600080fd5b506102606103333660046124b3565b610b00565b34801561034457600080fd5b5061035861035336600461215d565b610b94565b6040516102469190612517565b34801561037157600080fd5b5061023a61038036600461253f565b60008281526008602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b3480156103bb57600080fd5b506102606103ca36600461240e565b610b9f565b3480156103db57600080fd5b506104096103ea36600461215d565b6000908152600860205260409020805460018201546002909201549092565b60408051938452602084019290925290820152606001610246565b34801561043057600080fd5b506040805180820190915260018152603160f81b60208201526102a3565b34801561045a57600080fd5b5061026061046936600461256f565b610bb6565b34801561047a57600080fd5b5061021361048936600461215d565b610bdf565b34801561049a57600080fd5b506102606104a936600461259b565b610c20565b3480156104ba57600080fd5b506102606104c9366004612621565b610c72565b3480156104da57600080fd5b506064610260565b3480156104ee57600080fd5b50600754610260565b34801561050357600080fd5b506102136105123660046126e1565b610f4f565b34801561052357600080fd5b5061026061053236600461215d565b610f90565b34801561054357600080fd5b5061026061102b565b34801561055857600080fd5b5061026061056736600461215d565b611036565b34801561057857600080fd5b5061026061058736600461240e565b611065565b34801561059857600080fd5b506005546001600160a01b03165b6040516001600160a01b039091168152602001610246565b3480156105ca57600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e908201526102a3565b34801561061057600080fd5b506102607f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b34801561064457600080fd5b5061021361065336600461215d565b61109f565b34801561066457600080fd5b506102606106733660046126fe565b6110e0565b34801561068457600080fd5b5061021361069336600461215d565b6110ec565b3480156106a457600080fd5b506102606106b336600461215d565b61112d565b3480156106c457600080fd5b506105a67f000000000000000000000000000000000000000000000000000000000000000081565b60006107006005546001600160a01b031690565b905090565b600061071082611138565b92915050565b61071e6106ec565b6001600160a01b0316336001600160a01b0316146107575760405162461bcd60e51b815260040161074e9061272a565b60405180910390fd5b6107608161115d565b50565b60606000805461077290612761565b80601f016020809104026020016040519081016040528092919081815260200182805461079e90612761565b80156107eb5780601f106107c0576101008083540402835291602001916107eb565b820191906000526020600020905b8154815290600101906020018083116107ce57829003601f168201915b5050505050905090565b60008061080486868686611065565b9050600461081182610b94565b600781111561082257610822612501565b1461083f5760405162461bcd60e51b815260040161074e90612795565b6005546040805163793d064960e11b815290516000926001600160a01b03169163f27a0c929160048083019260209291908290030181865afa158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad91906127d6565b60055460405163b1c5f42760e01b81529192506001600160a01b03169063b1c5f427906108e7908a908a908a906000908b906004016128b5565b602060405180830381865afa158015610904573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092891906127d6565b6000838152600660205260408082209290925560055491516308f2a0bb60e41b81526001600160a01b0390921691638f2a0bb091610973918b918b918b91908b908990600401612903565b600060405180830381600087803b15801561098d57600080fd5b505af11580156109a1573d6000803e3d6000fd5b505050507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda28928282426109d39190612971565b604080519283526020830191909152015b60405180910390a15095945050505050565b600080610a0586868686611065565b90506000610a1282610b94565b90506004816007811115610a2857610a28612501565b1480610a4557506005816007811115610a4357610a43612501565b145b610a615760405162461bcd60e51b815260040161074e90612795565b600082815260016020818152604092839020600201805460ff191690921790915590518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f910160405180910390a1610abf8288888888611225565b5095945050505050565b60008181526001602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610b6c90610b649060800160405160208183030381529060405280519060200120611239565b868686611287565b9050610b89878288604051806020016040528060008152506112a5565b979650505050505050565b6000610710826113b0565b6000610bad8585858561147e565b95945050505050565b600080339050610bd7848285604051806020016040528060008152506112a5565b949350505050565b610be76106ec565b6001600160a01b0316336001600160a01b031614610c175760405162461bcd60e51b815260040161074e9061272a565b6107608161148c565b600080339050610c6886828787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112a592505050565b9695505050505050565b6000610c7c61102b565b610c8b33610673600143612989565b1015610d0b5760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72436f6d7061746962696c697479427261766f3a2070726f7060448201527f6f73657220766f7465732062656c6f772070726f706f73616c207468726573686064820152621bdb1960ea1b608482015260a40161074e565b6000610d208686868680519060200120611065565b90508451865114610d435760405162461bcd60e51b815260040161074e906129a0565b8351865114610d645760405162461bcd60e51b815260040161074e906129a0565b6000865111610db55760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c0000000000000000604482015260640161074e565b600081815260016020908152604091829020825191820190925281546001600160401b03169081905215610e355760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b606482015260840161074e565b6000610e48610e4360025490565b6114cd565b610e51436114cd565b610e5b91906129e1565b90506000610e6b610e4360035490565b610e7590836129e1565b835467ffffffffffffffff19166001600160401b038416178455905060018301805467ffffffffffffffff19166001600160401b0383161790557f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b03811115610eed57610eed6121d6565b604051908082528060200260200182016040528015610f2057816020015b6060815260200190600190039081610f0b5790505b508c88888e604051610f3a99989796959493929190612a0c565b60405180910390a15091979650505050505050565b610f576106ec565b6001600160a01b0316336001600160a01b031614610f875760405162461bcd60e51b815260040161074e9061272a565b61076081611539565b60055460008281526006602052604080822054905163d45c443560e01b81526004810191909152909182916001600160a01b039091169063d45c443590602401602060405180830381865afa158015610fed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101191906127d6565b9050806001146110215780611024565b60005b9392505050565b600061070060045490565b60008181526001602081815260408084208151928301909152909101546001600160401b031690819052610af1565b60008484848460405160200161107e9493929190612afb565b60408051601f19818403018152919052805160209091012095945050505050565b6110a76106ec565b6001600160a01b0316336001600160a01b0316146110d75760405162461bcd60e51b815260040161074e9061272a565b610760816115a2565b60006110248383611643565b6110f46106ec565b6001600160a01b0316336001600160a01b0316146111245760405162461bcd60e51b815260040161074e9061272a565b610760816116d9565b60006107108261171a565b60006001600160e01b03198216636e665ced60e01b14806107105750610710826117be565b60648111156111e05760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a40161074e565b600780549082905560408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b61123285858585856117f3565b5050505050565b6000610710611246611867565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006112988787878761198e565b91509150610abf81611a7b565b60008481526001602081905260408220906112bf87610b94565b60078111156112d0576112d0612501565b146113295760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b606482015260840161074e565b604080516020810190915281546001600160401b0316908190526000906113519087906110e0565b905061135f87878784611c31565b856001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda48887848860405161139e9493929190612b46565b60405180910390a29695505050505050565b6000806113bc83611dab565b905060048160078111156113d2576113d2612501565b146113dd5792915050565b600083815260066020526040902054806113f8575092915050565b600554604051632ab0f52960e01b8152600481018390526001600160a01b0390911690632ab0f52990602401602060405180830381865afa158015611441573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114659190612b6e565b15611474575060079392505050565b5060059392505050565b6000610bad85858585611f0f565b60025460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600255565b60006001600160401b038211156115355760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b606482015260840161074e565b5090565b600554604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600580546001600160a01b0319166001600160a01b0392909216919091179055565b600081116116025760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b606482015260840161074e565b60035460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600355565b604051630748d63560e31b81526001600160a01b038381166004830152602482018390526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a890604401602060405180830381865afa1580156116b5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102491906127d6565b60045460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600455565b60006064600754604051632394e7a360e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e539e8c90602401602060405180830381865afa158015611786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117aa91906127d6565b6117b49190612b90565b6107109190612baf565b60006001600160e01b0319821663bf26d89760e01b148061071057506301ffc9a760e01b6001600160e01b0319831614610710565b60055460405163e38335e560e01b81526001600160a01b039091169063e38335e590349061182e9088908890889060009089906004016128b5565b6000604051808303818588803b15801561184757600080fd5b505af115801561185b573d6000803e3d6000fd5b50505050505050505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156118c057507f000000000000000000000000000000000000000000000000000000000000000046145b156118ea57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156119c55750600090506003611a72565b8460ff16601b141580156119dd57508460ff16601c14155b156119ee5750600090506004611a72565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611a42573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611a6b57600060019250925050611a72565b9150600090505b94509492505050565b6000816004811115611a8f57611a8f612501565b03611a975750565b6001816004811115611aab57611aab612501565b03611af85760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161074e565b6002816004811115611b0c57611b0c612501565b03611b595760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161074e565b6003816004811115611b6d57611b6d612501565b03611bc55760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161074e565b6004816004811115611bd957611bd9612501565b036107605760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161074e565b60008481526008602090815260408083206001600160a01b0387168452600381019092529091205460ff1615611cb95760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b606482015260840161074e565b6001600160a01b03841660009081526003820160205260409020805460ff1916600117905560ff8316611d055781816000016000828254611cfa9190612971565b909155506112329050565b60001960ff841601611d255781816001016000828254611cfa9190612971565b60011960ff841601611d455781816002016000828254611cfa9190612971565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b606482015260840161074e565b6000818152600160208181526040808420815160a08101835281546001600160401b0390811660808301908152825283518086018552958301541685529283019390935260029092015460ff80821615801594840194909452610100909104161515606082015290611e205750600792915050565b806060015115611e335750600292915050565b80515143906001600160401b031610611e4f5750600092915050565b43611e5c82602001515190565b6001600160401b031610611e735750600192915050565b611e808160200151611fc1565b15611ec157611e8e83611ff0565b8015611ead575060008381526008602052604090208054600190910154115b611eb8576003611024565b60049392505050565b60405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c206964000000604482015260640161074e565b50919050565b600080611f1e86868686612027565b60008181526006602052604090205490915015610bad576005546000828152600660205260409081902054905163c4d252f560e01b81526001600160a01b039092169163c4d252f591611f779160040190815260200190565b600060405180830381600087803b158015611f9157600080fd5b505af1158015611fa5573d6000803e3d6000fd5b5050506000828152600660205260408120555095945050505050565b6000611fd682516001600160401b0316151590565b801561071057505051436001600160401b03909116111590565b6000818152600860205260408120600281015460018201546120129190612971565b61201e6106b385610ac9565b11159392505050565b60008061203686868686611065565b9050600061204382610b94565b9050600281600781111561205957612059612501565b141580156120795750600681600781111561207657612076612501565b14155b80156120975750600781600781111561209457612094612501565b14155b6120e35760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a2070726f706f73616c206e6f7420616374697665000000604482015260640161074e565b60008281526001602052604090819020600201805461ff001916610100179055517f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c906109e49084815260200190565b60006020828403121561214557600080fd5b81356001600160e01b03198116811461102457600080fd5b60006020828403121561216f57600080fd5b5035919050565b6000815180845260005b8181101561219c57602081850181015186830182015201612180565b818111156121ae576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006110246020830184612176565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612214576122146121d6565b604052919050565b60006001600160401b03821115612235576122356121d6565b5060051b60200190565b6001600160a01b038116811461076057600080fd5b600082601f83011261226557600080fd5b8135602061227a6122758361221c565b6121ec565b82815260059290921b8401810191818101908684111561229957600080fd5b8286015b848110156122bd5780356122b08161223f565b835291830191830161229d565b509695505050505050565b600082601f8301126122d957600080fd5b813560206122e96122758361221c565b82815260059290921b8401810191818101908684111561230857600080fd5b8286015b848110156122bd578035835291830191830161230c565b60006001600160401b0383111561233c5761233c6121d6565b61234f601f8401601f19166020016121ec565b905082815283838301111561236357600080fd5b828260208301376000602084830101529392505050565b600082601f83011261238b57600080fd5b8135602061239b6122758361221c565b82815260059290921b840181019181810190868411156123ba57600080fd5b8286015b848110156122bd5780356001600160401b038111156123dd5760008081fd5b8701603f810189136123ef5760008081fd5b612400898683013560408401612323565b8452509183019183016123be565b6000806000806080858703121561242457600080fd5b84356001600160401b038082111561243b57600080fd5b61244788838901612254565b9550602087013591508082111561245d57600080fd5b612469888389016122c8565b9450604087013591508082111561247f57600080fd5b5061248c8782880161237a565b949793965093946060013593505050565b803560ff811681146124ae57600080fd5b919050565b600080600080600060a086880312156124cb57600080fd5b853594506124db6020870161249d565b93506124e96040870161249d565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061253957634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561255257600080fd5b8235915060208301356125648161223f565b809150509250929050565b6000806040838503121561258257600080fd5b823591506125926020840161249d565b90509250929050565b600080600080606085870312156125b157600080fd5b843593506125c16020860161249d565b925060408501356001600160401b03808211156125dd57600080fd5b818701915087601f8301126125f157600080fd5b81358181111561260057600080fd5b88602082850101111561261257600080fd5b95989497505060200194505050565b6000806000806080858703121561263757600080fd5b84356001600160401b038082111561264e57600080fd5b61265a88838901612254565b9550602087013591508082111561267057600080fd5b61267c888389016122c8565b9450604087013591508082111561269257600080fd5b61269e8883890161237a565b935060608701359150808211156126b457600080fd5b508501601f810187136126c657600080fd5b6126d587823560208401612323565b91505092959194509250565b6000602082840312156126f357600080fd5b81356110248161223f565b6000806040838503121561271157600080fd5b823561271c8161223f565b946020939093013593505050565b60208082526018908201527f476f7665726e6f723a206f6e6c79476f7665726e616e63650000000000000000604082015260600190565b600181811c9082168061277557607f821691505b602082108103611f0957634e487b7160e01b600052602260045260246000fd5b60208082526021908201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756040820152601b60fa1b606082015260800190565b6000602082840312156127e857600080fd5b5051919050565b600081518084526020808501945080840160005b838110156128285781516001600160a01b031687529582019590820190600101612803565b509495945050505050565b600081518084526020808501945080840160005b8381101561282857815187529582019590820190600101612847565b6000815180845260208085019450848260051b860182860160005b858110156128a8578383038952612896838351612176565b9885019892509084019060010161287e565b5090979650505050505050565b60a0815260006128c860a08301886127ef565b82810360208401526128da8188612833565b905082810360408401526128ee8187612863565b60608401959095525050608001529392505050565b60c08152600061291660c08301896127ef565b82810360208401526129288189612833565b9050828103604084015261293c8188612863565b60608401969096525050608081019290925260a0909101529392505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156129845761298461295b565b500190565b60008282101561299b5761299b61295b565b500390565b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b03808316818516808303821115612a0357612a0361295b565b01949350505050565b60006101208b8352602060018060a01b038c1681850152816040850152612a358285018c6127ef565b91508382036060850152612a49828b612833565b915083820360808501528189518084528284019150828160051b850101838c0160005b83811015612a9a57601f19878403018552612a88838351612176565b94860194925090850190600101612a6c565b505086810360a0880152612aae818c612863565b945050505050612ac960c08401876001600160401b03169052565b6001600160401b03851660e0840152828103610100840152612aeb8185612176565b9c9b505050505050505050505050565b608081526000612b0e60808301876127ef565b8281036020840152612b208187612833565b90508281036040840152612b348186612863565b91505082606083015295945050505050565b84815260ff84166020820152826040820152608060608201526000610c686080830184612176565b600060208284031215612b8057600080fd5b8151801515811461102457600080fd5b6000816000190483118215151615612baa57612baa61295b565b500290565b600082612bcc57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220673f330a29382fbeb3d9604345086c306a2ddf590fb8786b3d9afe8e31e64af364736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052600436106101f25760003560e01c80637b3c71d31161010d578063c59057e4116100a0578063ea0217cf1161006f578063ea0217cf14610638578063eb9019d414610658578063ece40cc114610678578063f8ce560a14610698578063fc0c546a146106b857600080fd5b8063c59057e41461056c578063d33219b41461058c578063dd4e2ba5146105be578063deaaa7cc1461060457600080fd5b8063a890c910116100dc578063a890c910146104f7578063ab58fb8e14610517578063b58131b014610537578063c01f9e371461054c57600080fd5b80637b3c71d31461048e5780637d5e81e2146104ae57806397c3d334146104ce578063a7713a70146104e257600080fd5b80633bccf4fd11610185578063544ffc9c11610154578063544ffc9c146103cf57806354fd4d5014610424578063567813881461044e57806370b0f6601461046e57600080fd5b80633bccf4fd146103185780633e4f49e6146103385780634385963214610365578063452115d6146103af57600080fd5b8063160cbed7116101c1578063160cbed7146102b05780632656227d146102d05780632d63f693146102e35780633932abb11461030357600080fd5b806301ffc9a71461021a57806302a251a31461024f57806306f3f9e61461026e57806306fdde031461028e57600080fd5b3661021557306102006106ec565b6001600160a01b03161461021357600080fd5b005b600080fd5b34801561022657600080fd5b5061023a610235366004612133565b610705565b60405190151581526020015b60405180910390f35b34801561025b57600080fd5b506003545b604051908152602001610246565b34801561027a57600080fd5b5061021361028936600461215d565b610716565b34801561029a57600080fd5b506102a3610763565b60405161024691906121c3565b3480156102bc57600080fd5b506102606102cb36600461240e565b6107f5565b6102606102de36600461240e565b6109f6565b3480156102ef57600080fd5b506102606102fe36600461215d565b610ac9565b34801561030f57600080fd5b50600254610260565b34801561032457600080fd5b506102606103333660046124b3565b610b00565b34801561034457600080fd5b5061035861035336600461215d565b610b94565b6040516102469190612517565b34801561037157600080fd5b5061023a61038036600461253f565b60008281526008602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b3480156103bb57600080fd5b506102606103ca36600461240e565b610b9f565b3480156103db57600080fd5b506104096103ea36600461215d565b6000908152600860205260409020805460018201546002909201549092565b60408051938452602084019290925290820152606001610246565b34801561043057600080fd5b506040805180820190915260018152603160f81b60208201526102a3565b34801561045a57600080fd5b5061026061046936600461256f565b610bb6565b34801561047a57600080fd5b5061021361048936600461215d565b610bdf565b34801561049a57600080fd5b506102606104a936600461259b565b610c20565b3480156104ba57600080fd5b506102606104c9366004612621565b610c72565b3480156104da57600080fd5b506064610260565b3480156104ee57600080fd5b50600754610260565b34801561050357600080fd5b506102136105123660046126e1565b610f4f565b34801561052357600080fd5b5061026061053236600461215d565b610f90565b34801561054357600080fd5b5061026061102b565b34801561055857600080fd5b5061026061056736600461215d565b611036565b34801561057857600080fd5b5061026061058736600461240e565b611065565b34801561059857600080fd5b506005546001600160a01b03165b6040516001600160a01b039091168152602001610246565b3480156105ca57600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e908201526102a3565b34801561061057600080fd5b506102607f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b34801561064457600080fd5b5061021361065336600461215d565b61109f565b34801561066457600080fd5b506102606106733660046126fe565b6110e0565b34801561068457600080fd5b5061021361069336600461215d565b6110ec565b3480156106a457600080fd5b506102606106b336600461215d565b61112d565b3480156106c457600080fd5b506105a67f000000000000000000000000000000000000000000000000000000000000000081565b60006107006005546001600160a01b031690565b905090565b600061071082611138565b92915050565b61071e6106ec565b6001600160a01b0316336001600160a01b0316146107575760405162461bcd60e51b815260040161074e9061272a565b60405180910390fd5b6107608161115d565b50565b60606000805461077290612761565b80601f016020809104026020016040519081016040528092919081815260200182805461079e90612761565b80156107eb5780601f106107c0576101008083540402835291602001916107eb565b820191906000526020600020905b8154815290600101906020018083116107ce57829003601f168201915b5050505050905090565b60008061080486868686611065565b9050600461081182610b94565b600781111561082257610822612501565b1461083f5760405162461bcd60e51b815260040161074e90612795565b6005546040805163793d064960e11b815290516000926001600160a01b03169163f27a0c929160048083019260209291908290030181865afa158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad91906127d6565b60055460405163b1c5f42760e01b81529192506001600160a01b03169063b1c5f427906108e7908a908a908a906000908b906004016128b5565b602060405180830381865afa158015610904573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092891906127d6565b6000838152600660205260408082209290925560055491516308f2a0bb60e41b81526001600160a01b0390921691638f2a0bb091610973918b918b918b91908b908990600401612903565b600060405180830381600087803b15801561098d57600080fd5b505af11580156109a1573d6000803e3d6000fd5b505050507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda28928282426109d39190612971565b604080519283526020830191909152015b60405180910390a15095945050505050565b600080610a0586868686611065565b90506000610a1282610b94565b90506004816007811115610a2857610a28612501565b1480610a4557506005816007811115610a4357610a43612501565b145b610a615760405162461bcd60e51b815260040161074e90612795565b600082815260016020818152604092839020600201805460ff191690921790915590518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f910160405180910390a1610abf8288888888611225565b5095945050505050565b60008181526001602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610b6c90610b649060800160405160208183030381529060405280519060200120611239565b868686611287565b9050610b89878288604051806020016040528060008152506112a5565b979650505050505050565b6000610710826113b0565b6000610bad8585858561147e565b95945050505050565b600080339050610bd7848285604051806020016040528060008152506112a5565b949350505050565b610be76106ec565b6001600160a01b0316336001600160a01b031614610c175760405162461bcd60e51b815260040161074e9061272a565b6107608161148c565b600080339050610c6886828787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112a592505050565b9695505050505050565b6000610c7c61102b565b610c8b33610673600143612989565b1015610d0b5760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72436f6d7061746962696c697479427261766f3a2070726f7060448201527f6f73657220766f7465732062656c6f772070726f706f73616c207468726573686064820152621bdb1960ea1b608482015260a40161074e565b6000610d208686868680519060200120611065565b90508451865114610d435760405162461bcd60e51b815260040161074e906129a0565b8351865114610d645760405162461bcd60e51b815260040161074e906129a0565b6000865111610db55760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c0000000000000000604482015260640161074e565b600081815260016020908152604091829020825191820190925281546001600160401b03169081905215610e355760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b606482015260840161074e565b6000610e48610e4360025490565b6114cd565b610e51436114cd565b610e5b91906129e1565b90506000610e6b610e4360035490565b610e7590836129e1565b835467ffffffffffffffff19166001600160401b038416178455905060018301805467ffffffffffffffff19166001600160401b0383161790557f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b03811115610eed57610eed6121d6565b604051908082528060200260200182016040528015610f2057816020015b6060815260200190600190039081610f0b5790505b508c88888e604051610f3a99989796959493929190612a0c565b60405180910390a15091979650505050505050565b610f576106ec565b6001600160a01b0316336001600160a01b031614610f875760405162461bcd60e51b815260040161074e9061272a565b61076081611539565b60055460008281526006602052604080822054905163d45c443560e01b81526004810191909152909182916001600160a01b039091169063d45c443590602401602060405180830381865afa158015610fed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101191906127d6565b9050806001146110215780611024565b60005b9392505050565b600061070060045490565b60008181526001602081815260408084208151928301909152909101546001600160401b031690819052610af1565b60008484848460405160200161107e9493929190612afb565b60408051601f19818403018152919052805160209091012095945050505050565b6110a76106ec565b6001600160a01b0316336001600160a01b0316146110d75760405162461bcd60e51b815260040161074e9061272a565b610760816115a2565b60006110248383611643565b6110f46106ec565b6001600160a01b0316336001600160a01b0316146111245760405162461bcd60e51b815260040161074e9061272a565b610760816116d9565b60006107108261171a565b60006001600160e01b03198216636e665ced60e01b14806107105750610710826117be565b60648111156111e05760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a40161074e565b600780549082905560408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b61123285858585856117f3565b5050505050565b6000610710611246611867565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006112988787878761198e565b91509150610abf81611a7b565b60008481526001602081905260408220906112bf87610b94565b60078111156112d0576112d0612501565b146113295760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b606482015260840161074e565b604080516020810190915281546001600160401b0316908190526000906113519087906110e0565b905061135f87878784611c31565b856001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda48887848860405161139e9493929190612b46565b60405180910390a29695505050505050565b6000806113bc83611dab565b905060048160078111156113d2576113d2612501565b146113dd5792915050565b600083815260066020526040902054806113f8575092915050565b600554604051632ab0f52960e01b8152600481018390526001600160a01b0390911690632ab0f52990602401602060405180830381865afa158015611441573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114659190612b6e565b15611474575060079392505050565b5060059392505050565b6000610bad85858585611f0f565b60025460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600255565b60006001600160401b038211156115355760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b606482015260840161074e565b5090565b600554604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600580546001600160a01b0319166001600160a01b0392909216919091179055565b600081116116025760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b606482015260840161074e565b60035460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600355565b604051630748d63560e31b81526001600160a01b038381166004830152602482018390526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a890604401602060405180830381865afa1580156116b5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102491906127d6565b60045460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600455565b60006064600754604051632394e7a360e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e539e8c90602401602060405180830381865afa158015611786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117aa91906127d6565b6117b49190612b90565b6107109190612baf565b60006001600160e01b0319821663bf26d89760e01b148061071057506301ffc9a760e01b6001600160e01b0319831614610710565b60055460405163e38335e560e01b81526001600160a01b039091169063e38335e590349061182e9088908890889060009089906004016128b5565b6000604051808303818588803b15801561184757600080fd5b505af115801561185b573d6000803e3d6000fd5b50505050505050505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156118c057507f000000000000000000000000000000000000000000000000000000000000000046145b156118ea57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156119c55750600090506003611a72565b8460ff16601b141580156119dd57508460ff16601c14155b156119ee5750600090506004611a72565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611a42573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611a6b57600060019250925050611a72565b9150600090505b94509492505050565b6000816004811115611a8f57611a8f612501565b03611a975750565b6001816004811115611aab57611aab612501565b03611af85760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161074e565b6002816004811115611b0c57611b0c612501565b03611b595760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161074e565b6003816004811115611b6d57611b6d612501565b03611bc55760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161074e565b6004816004811115611bd957611bd9612501565b036107605760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161074e565b60008481526008602090815260408083206001600160a01b0387168452600381019092529091205460ff1615611cb95760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b606482015260840161074e565b6001600160a01b03841660009081526003820160205260409020805460ff1916600117905560ff8316611d055781816000016000828254611cfa9190612971565b909155506112329050565b60001960ff841601611d255781816001016000828254611cfa9190612971565b60011960ff841601611d455781816002016000828254611cfa9190612971565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b606482015260840161074e565b6000818152600160208181526040808420815160a08101835281546001600160401b0390811660808301908152825283518086018552958301541685529283019390935260029092015460ff80821615801594840194909452610100909104161515606082015290611e205750600792915050565b806060015115611e335750600292915050565b80515143906001600160401b031610611e4f5750600092915050565b43611e5c82602001515190565b6001600160401b031610611e735750600192915050565b611e808160200151611fc1565b15611ec157611e8e83611ff0565b8015611ead575060008381526008602052604090208054600190910154115b611eb8576003611024565b60049392505050565b60405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c206964000000604482015260640161074e565b50919050565b600080611f1e86868686612027565b60008181526006602052604090205490915015610bad576005546000828152600660205260409081902054905163c4d252f560e01b81526001600160a01b039092169163c4d252f591611f779160040190815260200190565b600060405180830381600087803b158015611f9157600080fd5b505af1158015611fa5573d6000803e3d6000fd5b5050506000828152600660205260408120555095945050505050565b6000611fd682516001600160401b0316151590565b801561071057505051436001600160401b03909116111590565b6000818152600860205260408120600281015460018201546120129190612971565b61201e6106b385610ac9565b11159392505050565b60008061203686868686611065565b9050600061204382610b94565b9050600281600781111561205957612059612501565b141580156120795750600681600781111561207657612076612501565b14155b80156120975750600781600781111561209457612094612501565b14155b6120e35760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a2070726f706f73616c206e6f7420616374697665000000604482015260640161074e565b60008281526001602052604090819020600201805461ff001916610100179055517f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c906109e49084815260200190565b60006020828403121561214557600080fd5b81356001600160e01b03198116811461102457600080fd5b60006020828403121561216f57600080fd5b5035919050565b6000815180845260005b8181101561219c57602081850181015186830182015201612180565b818111156121ae576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006110246020830184612176565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612214576122146121d6565b604052919050565b60006001600160401b03821115612235576122356121d6565b5060051b60200190565b6001600160a01b038116811461076057600080fd5b600082601f83011261226557600080fd5b8135602061227a6122758361221c565b6121ec565b82815260059290921b8401810191818101908684111561229957600080fd5b8286015b848110156122bd5780356122b08161223f565b835291830191830161229d565b509695505050505050565b600082601f8301126122d957600080fd5b813560206122e96122758361221c565b82815260059290921b8401810191818101908684111561230857600080fd5b8286015b848110156122bd578035835291830191830161230c565b60006001600160401b0383111561233c5761233c6121d6565b61234f601f8401601f19166020016121ec565b905082815283838301111561236357600080fd5b828260208301376000602084830101529392505050565b600082601f83011261238b57600080fd5b8135602061239b6122758361221c565b82815260059290921b840181019181810190868411156123ba57600080fd5b8286015b848110156122bd5780356001600160401b038111156123dd5760008081fd5b8701603f810189136123ef5760008081fd5b612400898683013560408401612323565b8452509183019183016123be565b6000806000806080858703121561242457600080fd5b84356001600160401b038082111561243b57600080fd5b61244788838901612254565b9550602087013591508082111561245d57600080fd5b612469888389016122c8565b9450604087013591508082111561247f57600080fd5b5061248c8782880161237a565b949793965093946060013593505050565b803560ff811681146124ae57600080fd5b919050565b600080600080600060a086880312156124cb57600080fd5b853594506124db6020870161249d565b93506124e96040870161249d565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061253957634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561255257600080fd5b8235915060208301356125648161223f565b809150509250929050565b6000806040838503121561258257600080fd5b823591506125926020840161249d565b90509250929050565b600080600080606085870312156125b157600080fd5b843593506125c16020860161249d565b925060408501356001600160401b03808211156125dd57600080fd5b818701915087601f8301126125f157600080fd5b81358181111561260057600080fd5b88602082850101111561261257600080fd5b95989497505060200194505050565b6000806000806080858703121561263757600080fd5b84356001600160401b038082111561264e57600080fd5b61265a88838901612254565b9550602087013591508082111561267057600080fd5b61267c888389016122c8565b9450604087013591508082111561269257600080fd5b61269e8883890161237a565b935060608701359150808211156126b457600080fd5b508501601f810187136126c657600080fd5b6126d587823560208401612323565b91505092959194509250565b6000602082840312156126f357600080fd5b81356110248161223f565b6000806040838503121561271157600080fd5b823561271c8161223f565b946020939093013593505050565b60208082526018908201527f476f7665726e6f723a206f6e6c79476f7665726e616e63650000000000000000604082015260600190565b600181811c9082168061277557607f821691505b602082108103611f0957634e487b7160e01b600052602260045260246000fd5b60208082526021908201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756040820152601b60fa1b606082015260800190565b6000602082840312156127e857600080fd5b5051919050565b600081518084526020808501945080840160005b838110156128285781516001600160a01b031687529582019590820190600101612803565b509495945050505050565b600081518084526020808501945080840160005b8381101561282857815187529582019590820190600101612847565b6000815180845260208085019450848260051b860182860160005b858110156128a8578383038952612896838351612176565b9885019892509084019060010161287e565b5090979650505050505050565b60a0815260006128c860a08301886127ef565b82810360208401526128da8188612833565b905082810360408401526128ee8187612863565b60608401959095525050608001529392505050565b60c08152600061291660c08301896127ef565b82810360208401526129288189612833565b9050828103604084015261293c8188612863565b60608401969096525050608081019290925260a0909101529392505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156129845761298461295b565b500190565b60008282101561299b5761299b61295b565b500390565b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b03808316818516808303821115612a0357612a0361295b565b01949350505050565b60006101208b8352602060018060a01b038c1681850152816040850152612a358285018c6127ef565b91508382036060850152612a49828b612833565b915083820360808501528189518084528284019150828160051b850101838c0160005b83811015612a9a57601f19878403018552612a88838351612176565b94860194925090850190600101612a6c565b505086810360a0880152612aae818c612863565b945050505050612ac960c08401876001600160401b03169052565b6001600160401b03851660e0840152828103610100840152612aeb8185612176565b9c9b505050505050505050505050565b608081526000612b0e60808301876127ef565b8281036020840152612b208187612833565b90508281036040840152612b348186612863565b91505082606083015295945050505050565b84815260ff84166020820152826040820152608060608201526000610c686080830184612176565b600060208284031215612b8057600080fd5b8151801515811461102457600080fd5b6000816000190483118215151615612baa57612baa61295b565b500290565b600082612bcc57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220673f330a29382fbeb3d9604345086c306a2ddf590fb8786b3d9afe8e31e64af364736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name_", "type": "string", "internalType": "string"}, {"name": "token_", "type": "address", "internalType": "contract ERC20Votes"}, {"name": "votingDelay_", "type": "uint256", "internalType": "uint256"}, {"name": "votingPeriod_", "type": "uint256", "internalType": "uint256"}, {"name": "timelock_", "type": "address", "internalType": "contract TimelockController"}, {"name": "quorumNumerator_", "type": "uint256", "internalType": "uint256"}]}, {"type": "event", "name": "ProposalCanceled", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalCreated", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "proposer", "type": "address", "internalType": "address", "indexed": false}, {"name": "targets", "type": "address[]", "internalType": "address[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "signatures", "type": "string[]", "internalType": "string[]", "indexed": false}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]", "indexed": false}, {"name": "startBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "endBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "description", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalExecuted", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalQueued", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "eta", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalThresholdSet", "inputs": [{"name": "oldProposalThreshold", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newProposalThreshold", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "QuorumNumeratorUpdated", "inputs": [{"name": "oldQuorumNumerator", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newQuorumNumerator", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TimelockChange", "inputs": [{"name": "oldTimelock", "type": "address", "internalType": "address", "indexed": false}, {"name": "newTimelock", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VoteCast", "inputs": [{"name": "voter", "type": "address", "internalType": "address", "indexed": true}, {"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "support", "type": "uint8", "internalType": "uint8", "indexed": false}, {"name": "weight", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "reason", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VotingDelaySet", "inputs": [{"name": "oldVotingDelay", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newVotingDelay", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VotingPeriodSet", "inputs": [{"name": "oldVotingPeriod", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newVotingPeriod", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "BALLOT_TYPEHASH", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "COUNTING_MODE", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "cancel", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVote", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteBySig", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteWithReason", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "reason", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "hasVoted", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "hashProposal", "stateMutability": "pure", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "proposalDeadline", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalEta", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalSnapshot", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalThreshold", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalVotes", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "againstVotes", "type": "uint256", "internalType": "uint256"}, {"name": "forVotes", "type": "uint256", "internalType": "uint256"}, {"name": "abstainVotes", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "queue", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorum", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorumDenominator", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorumNumerator", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "setProposalThreshold", "stateMutability": "nonpayable", "inputs": [{"name": "newProposalThreshold", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "setVotingDelay", "stateMutability": "nonpayable", "inputs": [{"name": "newVotingDelay", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "setVotingPeriod", "stateMutability": "nonpayable", "inputs": [{"name": "newVotingPeriod", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "enum IGovernor.ProposalState"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "timelock", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "token", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "contract ERC20Votes"}]}, {"type": "function", "name": "updateQuorumNumerator", "stateMutability": "nonpayable", "inputs": [{"name": "newQuorumNumerator", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "updateTimelock", "stateMutability": "nonpayable", "inputs": [{"name": "newTimelock", "type": "address", "internalType": "contract TimelockController"}], "outputs": []}, {"type": "function", "name": "version", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "votingDelay", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "votingPeriod", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {"state(uint256)": {"notice": "Overriding nightmare"}}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"COUNTING_MODE()": {"details": "See {IGovernor-COUNTING_MODE}."}, "castVote(uint256,uint8)": {"details": "See {IGovernor-castVote}."}, "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {"details": "See {IGovernor-castVoteBySig}."}, "castVoteWithReason(uint256,uint8,string)": {"details": "See {IGovernor-castVoteWithReason}."}, "execute(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-execute}."}, "hasVoted(uint256,address)": {"details": "See {IGovernor-hasVoted}."}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."}, "name()": {"details": "See {IGovernor-name}."}, "proposalDeadline(uint256)": {"details": "See {IGovernor-proposalDeadline}."}, "proposalEta(uint256)": {"details": "Public accessor to check the eta of a queued proposal"}, "proposalSnapshot(uint256)": {"details": "See {IGovernor-proposalSnapshot}."}, "proposalVotes(uint256)": {"details": "Accessor to the internal vote counts."}, "propose(address[],uint256[],bytes[],string)": {"details": "See {IGovernor-propose}."}, "queue(address[],uint256[],bytes[],bytes32)": {"details": "Function to queue a proposal to the timelock."}, "setProposalThreshold(uint256)": {"details": "Update the proposal threshold. This operation can only be performed through a governance proposal. Emits a {ProposalThresholdSet} event."}, "setVotingDelay(uint256)": {"details": "Update the voting delay. This operation can only be performed through a governance proposal. Emits a {VotingDelaySet} event."}, "setVotingPeriod(uint256)": {"details": "Update the voting period. This operation can only be performed through a governance proposal. Emits a {VotingPeriodSet} event."}, "timelock()": {"details": "Public accessor to check the address of the timelock"}, "updateTimelock(address)": {"details": "Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates must be proposed, scheduled and executed using the {Governor} workflow."}, "version()": {"details": "See {IGovernor-version}."}, "votingDelay()": {"details": "See {IGovernor-votingDelay}."}, "votingPeriod()": {"details": "See {IGovernor-votingPeriod}."}}, "version": 1}}, "ConstructorInitializableMock": {"contractName": "ConstructorInitializableMock", "sourceId": "mocks/InitializableMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600054610100900460ff1661002c5760005460ff1615610034565b6100346100d4565b61008a5760405162461bcd60e51b815260206004820152602e602482015260008051602061046983398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff161580156100ac576000805461ffff19166101011790555b6100b46100ef565b6100bc6101ab565b80156100ce576000805461ff00191690555b50610231565b60006100e93061022b60201b6101ed1760201c565b15905090565b600054610100900460ff1661010a5760005460ff1615610112565b6101126100d4565b6101635760405162461bcd60e51b815260206004820152602e602482015260008051602061046983398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610081565b600054610100900460ff16158015610185576000805461ffff19166101011790555b6000805462ff000019166201000017905580156101a8576000805461ff00191690555b50565b600054610100900460ff166102165760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610081565b6000805463ff00000019166301000000179055565b3b151590565b610229806102406000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806310065ed2146100515780637cffe97a1461005b5780638129fc1c14610083578063c3b8ef2a1461008b575b600080fd5b61005961009e565b005b60005461006f906301000000900460ff1681565b604051901515815260200160405180910390f35b610059610123565b60005461006f9062010000900460ff1681565b600054610100900460ff1661010e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084015b60405180910390fd5b6000805463ff00000019166301000000179055565b600054610100900460ff1661013e5760005460ff1615610142565b303b155b6101a55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610105565b600054610100900460ff161580156101c7576000805461ffff19166101011790555b6000805462ff000019166201000017905580156101ea576000805461ff00191690555b50565b3b15159056fea264697066735822122096ddec66bc01d9de91d87a5ad37592a6dbf4fe13115f137c30cd45f47669276f64736f6c634300080d0033496e697469616c697a61626c653a20636f6e747261637420697320616c726561"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806310065ed2146100515780637cffe97a1461005b5780638129fc1c14610083578063c3b8ef2a1461008b575b600080fd5b61005961009e565b005b60005461006f906301000000900460ff1681565b604051901515815260200160405180910390f35b610059610123565b60005461006f9062010000900460ff1681565b600054610100900460ff1661010e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084015b60405180910390fd5b6000805463ff00000019166301000000179055565b600054610100900460ff1661013e5760005460ff1615610142565b303b155b6101a55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610105565b600054610100900460ff161580156101c7576000805461ffff19166101011790555b6000805462ff000019166201000017905580156101ea576000805461ff00191690555b50565b3b15159056fea264697066735822122096ddec66bc01d9de91d87a5ad37592a6dbf4fe13115f137c30cd45f47669276f64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": []}, {"type": "function", "name": "initialize", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "initializeOnlyInitializing", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "initializerRan", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "onlyInitializingRan", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "InitializableMock": {"contractName": "InitializableMock", "sourceId": "mocks/InitializableMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506104e3806100206000396000f3fe6080604052600436106100905760003560e01c80637cffe97a116100595780637cffe97a146101125780638129fc1c14610143578063a9cc471814610158578063c3b8ef2a1461016d578063e955c9ec1461018d57600080fd5b806218eaa8146100955780630c55699c146100aa57806310065ed2146100d357806368449d1b146100e857806376268ae8146100fd575b600080fd5b6100a86100a3366004610446565b6101a0565b005b3480156100b657600080fd5b506100c060015481565b6040519081526020015b60405180910390f35b3480156100df57600080fd5b506100a8610221565b3480156100f457600080fd5b506100a86102a1565b34801561010957600080fd5b506100a861031b565b34801561011e57600080fd5b50600054610133906301000000900460ff1681565b60405190151581526020016100ca565b34801561014f57600080fd5b506100a861037c565b34801561016457600080fd5b506100a86103fe565b34801561017957600080fd5b506000546101339062010000900460ff1681565b6100a861019b366004610446565b600155565b600054610100900460ff166101bb5760005460ff16156101bf565b303b155b6101e45760405162461bcd60e51b81526004016101db9061045f565b60405180910390fd5b600054610100900460ff16158015610206576000805461ffff19166101011790555b6001829055801561021d576000805461ff00191690555b5050565b600054610100900460ff1661028c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016101db565b6000805463ff00000019166301000000179055565b600054610100900460ff166102bc5760005460ff16156102c0565b303b155b6102dc5760405162461bcd60e51b81526004016101db9061045f565b600054610100900460ff161580156102fe576000805461ffff19166101011790555b610306610221565b8015610318576000805461ff00191690555b50565b600054610100900460ff166103365760005460ff161561033a565b303b155b6103565760405162461bcd60e51b81526004016101db9061045f565b600054610100900460ff16158015610378576000805461ffff19166101011790555b6103065b600054610100900460ff166103975760005460ff161561039b565b303b155b6103b75760405162461bcd60e51b81526004016101db9061045f565b600054610100900460ff161580156103d9576000805461ffff19166101011790555b6000805462ff00001916620100001790558015610318576000805461ff001916905550565b60405162461bcd60e51b815260206004820181905260248201527f496e697469616c697a61626c654d6f636b20666f72636564206661696c75726560448201526064016101db565b60006020828403121561045857600080fd5b5035919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fea2646970667358221220f6293bc5404ec3fae63efbe08c06608130740798c79b505cc12c536f43dfc22264736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052600436106100905760003560e01c80637cffe97a116100595780637cffe97a146101125780638129fc1c14610143578063a9cc471814610158578063c3b8ef2a1461016d578063e955c9ec1461018d57600080fd5b806218eaa8146100955780630c55699c146100aa57806310065ed2146100d357806368449d1b146100e857806376268ae8146100fd575b600080fd5b6100a86100a3366004610446565b6101a0565b005b3480156100b657600080fd5b506100c060015481565b6040519081526020015b60405180910390f35b3480156100df57600080fd5b506100a8610221565b3480156100f457600080fd5b506100a86102a1565b34801561010957600080fd5b506100a861031b565b34801561011e57600080fd5b50600054610133906301000000900460ff1681565b60405190151581526020016100ca565b34801561014f57600080fd5b506100a861037c565b34801561016457600080fd5b506100a86103fe565b34801561017957600080fd5b506000546101339062010000900460ff1681565b6100a861019b366004610446565b600155565b600054610100900460ff166101bb5760005460ff16156101bf565b303b155b6101e45760405162461bcd60e51b81526004016101db9061045f565b60405180910390fd5b600054610100900460ff16158015610206576000805461ffff19166101011790555b6001829055801561021d576000805461ff00191690555b5050565b600054610100900460ff1661028c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016101db565b6000805463ff00000019166301000000179055565b600054610100900460ff166102bc5760005460ff16156102c0565b303b155b6102dc5760405162461bcd60e51b81526004016101db9061045f565b600054610100900460ff161580156102fe576000805461ffff19166101011790555b610306610221565b8015610318576000805461ff00191690555b50565b600054610100900460ff166103365760005460ff161561033a565b303b155b6103565760405162461bcd60e51b81526004016101db9061045f565b600054610100900460ff16158015610378576000805461ffff19166101011790555b6103065b600054610100900460ff166103975760005460ff161561039b565b303b155b6103b75760405162461bcd60e51b81526004016101db9061045f565b600054610100900460ff161580156103d9576000805461ffff19166101011790555b6000805462ff00001916620100001790558015610318576000805461ff001916905550565b60405162461bcd60e51b815260206004820181905260248201527f496e697469616c697a61626c654d6f636b20666f72636564206661696c75726560448201526064016101db565b60006020828403121561045857600080fd5b5035919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fea2646970667358221220f6293bc5404ec3fae63efbe08c06608130740798c79b505cc12c536f43dfc22264736f6c634300080d0033"}, "abi": [{"type": "function", "name": "fail", "stateMutability": "pure", "inputs": [], "outputs": []}, {"type": "function", "name": "initialize", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "initializeOnlyInitializing", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "initializeWithX", "stateMutability": "payable", "inputs": [{"name": "_x", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "initializerNested", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "initializerRan", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "nonInitializable", "stateMutability": "payable", "inputs": [{"name": "_x", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "onlyInitializingNested", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "onlyInitializingRan", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "x", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "This contract is a mock to test initializable functionality", "kind": "dev", "methods": {}, "title": "InitializableMock", "version": 1}}, "MathMock": {"contractName": "MathMock", "sourceId": "mocks/MathMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50610215806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632b7423ab146100515780636d5433e6146100765780637ae2b5c7146100895780639cb353271461009c575b600080fd5b61006461005f366004610159565b6100af565b60405190815260200160405180910390f35b610064610084366004610159565b6100c2565b610064610097366004610159565b6100ce565b6100646100aa366004610159565b6100da565b60006100bb83836100e6565b9392505050565b60006100bb8383610101565b60006100bb8383610118565b60006100bb8383610127565b60006100f56002848418610191565b6100bb908484166101a5565b60008183101561011157816100bb565b5090919050565b600081831061011157816100bb565b600061013382846101cb565b1561013f576001610142565b60005b60ff1661014f8385610191565b6100bb91906101a5565b6000806040838503121561016c57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601260045260246000fd5b6000826101a0576101a061017b565b500490565b600082198211156101c657634e487b7160e01b600052601160045260246000fd5b500190565b6000826101da576101da61017b565b50069056fea264697066735822122047c54adc72f24650acc487f5e6660553d17c9eecb2cdfe83e37c6fadffb94d0f64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80632b7423ab146100515780636d5433e6146100765780637ae2b5c7146100895780639cb353271461009c575b600080fd5b61006461005f366004610159565b6100af565b60405190815260200160405180910390f35b610064610084366004610159565b6100c2565b610064610097366004610159565b6100ce565b6100646100aa366004610159565b6100da565b60006100bb83836100e6565b9392505050565b60006100bb8383610101565b60006100bb8383610118565b60006100bb8383610127565b60006100f56002848418610191565b6100bb908484166101a5565b60008183101561011157816100bb565b5090919050565b600081831061011157816100bb565b600061013382846101cb565b1561013f576001610142565b60005b60ff1661014f8385610191565b6100bb91906101a5565b6000806040838503121561016c57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601260045260246000fd5b6000826101a0576101a061017b565b500490565b600082198211156101c657634e487b7160e01b600052601160045260246000fd5b500190565b6000826101da576101da61017b565b50069056fea264697066735822122047c54adc72f24650acc487f5e6660553d17c9eecb2cdfe83e37c6fadffb94d0f64736f6c634300080d0033"}, "abi": [{"type": "function", "name": "average", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "ceilDiv", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "max", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "min", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "MerkleProofWrapper": {"contractName": "MerkleProofWrapper", "sourceId": "mocks/MerkleProofWrapper.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50610325806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80635a9a49c71461003b57806362702a6b14610063575b600080fd5b61004e61004936600461021f565b610084565b60405190151581526020015b60405180910390f35b61007661007136600461026d565b610099565b60405190815260200161005a565b60006100918484846100ac565b949350505050565b60006100a583836100c2565b9392505050565b6000826100b985846100c2565b14949350505050565b600081815b84518110156101665760008582815181106100e4576100e46102b2565b60200260200101519050808311610126576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250610153565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061015e816102c8565b9150506100c7565b509392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261019557600080fd5b8135602067ffffffffffffffff808311156101b2576101b261016e565b8260051b604051601f19603f830116810181811084821117156101d7576101d761016e565b6040529384528581018301938381019250878511156101f557600080fd5b83870191505b84821015610214578135835291830191908301906101fb565b979650505050505050565b60008060006060848603121561023457600080fd5b833567ffffffffffffffff81111561024b57600080fd5b61025786828701610184565b9660208601359650604090950135949350505050565b6000806040838503121561028057600080fd5b823567ffffffffffffffff81111561029757600080fd5b6102a385828601610184565b95602094909401359450505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016102e857634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122084c6b9d6126fb8667862db96a3b12294ca6c56a5c153fe5ee223939a49a1ebb964736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80635a9a49c71461003b57806362702a6b14610063575b600080fd5b61004e61004936600461021f565b610084565b60405190151581526020015b60405180910390f35b61007661007136600461026d565b610099565b60405190815260200161005a565b60006100918484846100ac565b949350505050565b60006100a583836100c2565b9392505050565b6000826100b985846100c2565b14949350505050565b600081815b84518110156101665760008582815181106100e4576100e46102b2565b60200260200101519050808311610126576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250610153565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061015e816102c8565b9150506100c7565b509392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261019557600080fd5b8135602067ffffffffffffffff808311156101b2576101b261016e565b8260051b604051601f19603f830116810181811084821117156101d7576101d761016e565b6040529384528581018301938381019250878511156101f557600080fd5b83870191505b84821015610214578135835291830191908301906101fb565b979650505050505050565b60008060006060848603121561023457600080fd5b833567ffffffffffffffff81111561024b57600080fd5b61025786828701610184565b9660208601359650604090950135949350505050565b6000806040838503121561028057600080fd5b823567ffffffffffffffff81111561029757600080fd5b6102a385828601610184565b95602094909401359450505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016102e857634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122084c6b9d6126fb8667862db96a3b12294ca6c56a5c153fe5ee223939a49a1ebb964736f6c634300080d0033"}, "abi": [{"type": "function", "name": "processProof", "stateMutability": "pure", "inputs": [{"name": "proof", "type": "bytes32[]", "internalType": "bytes32[]"}, {"name": "leaf", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "verify", "stateMutability": "pure", "inputs": [{"name": "proof", "type": "bytes32[]", "internalType": "bytes32[]"}, {"name": "root", "type": "bytes32", "internalType": "bytes32"}, {"name": "leaf", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "MulticallTest": {"contractName": "MulticallTest", "sourceId": "mocks/MulticallTest.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506105d8806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063bc548f7614610030575b600080fd5b61004361003e366004610295565b610045565b005b60008367ffffffffffffffff81111561006057610060610318565b60405190808252806020026020018201604052801561009357816020015b606081526020019060019003908161007e5790505b50905060005b8481101561015a578585828181106100b3576100b361032e565b90506020020160208101906100c89190610344565b8484838181106100da576100da61032e565b6040516001600160a01b039094166024850152602002919091013560448301525060640160408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b179052825183908390811061013c5761013c61032e565b6020026020010181905250808061015290610368565b915050610099565b50604051631592ca1b60e31b81526000906001600160a01b0388169063ac9650d89061018a9085906004016103bf565b6000604051808303816000875af11580156101a9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101d1919081019061046a565b905060005b8151811015610227578181815181106101f1576101f161032e565b602002602001015180602001905181019061020c9190610580565b61021557600080fd5b8061021f81610368565b9150506101d6565b5050505050505050565b6001600160a01b038116811461024657600080fd5b50565b60008083601f84011261025b57600080fd5b50813567ffffffffffffffff81111561027357600080fd5b6020830191508360208260051b850101111561028e57600080fd5b9250929050565b6000806000806000606086880312156102ad57600080fd5b85356102b881610231565b9450602086013567ffffffffffffffff808211156102d557600080fd5b6102e189838a01610249565b909650945060408801359150808211156102fa57600080fd5b5061030788828901610249565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561035657600080fd5b813561036181610231565b9392505050565b60006001820161038857634e487b7160e01b600052601160045260246000fd5b5060010190565b60005b838110156103aa578181015183820152602001610392565b838111156103b9576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561042c57878503603f190184528151805180875261040d818989018a850161038f565b601f01601f1916959095018601945092850192908501906001016103e6565b5092979650505050505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561046257610462610318565b604052919050565b6000602080838503121561047d57600080fd5b825167ffffffffffffffff8082111561049557600080fd5b8185019150601f86818401126104aa57600080fd5b8251828111156104bc576104bc610318565b8060051b6104cb868201610439565b918252848101860191868101908a8411156104e557600080fd5b87870192505b83831015610572578251868111156105035760008081fd5b8701603f81018c136105155760008081fd5b8881015160408882111561052b5761052b610318565b61053c828901601f19168c01610439565b8281528e828486010111156105515760008081fd5b610560838d830184870161038f565b855250505091870191908701906104eb565b9a9950505050505050505050565b60006020828403121561059257600080fd5b8151801515811461036157600080fdfea264697066735822122083aeb0c47fd03c4e9e45ce48b8318985bb09a61ed552d9643e04bcef1750042564736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063bc548f7614610030575b600080fd5b61004361003e366004610295565b610045565b005b60008367ffffffffffffffff81111561006057610060610318565b60405190808252806020026020018201604052801561009357816020015b606081526020019060019003908161007e5790505b50905060005b8481101561015a578585828181106100b3576100b361032e565b90506020020160208101906100c89190610344565b8484838181106100da576100da61032e565b6040516001600160a01b039094166024850152602002919091013560448301525060640160408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b179052825183908390811061013c5761013c61032e565b6020026020010181905250808061015290610368565b915050610099565b50604051631592ca1b60e31b81526000906001600160a01b0388169063ac9650d89061018a9085906004016103bf565b6000604051808303816000875af11580156101a9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101d1919081019061046a565b905060005b8151811015610227578181815181106101f1576101f161032e565b602002602001015180602001905181019061020c9190610580565b61021557600080fd5b8061021f81610368565b9150506101d6565b5050505050505050565b6001600160a01b038116811461024657600080fd5b50565b60008083601f84011261025b57600080fd5b50813567ffffffffffffffff81111561027357600080fd5b6020830191508360208260051b850101111561028e57600080fd5b9250929050565b6000806000806000606086880312156102ad57600080fd5b85356102b881610231565b9450602086013567ffffffffffffffff808211156102d557600080fd5b6102e189838a01610249565b909650945060408801359150808211156102fa57600080fd5b5061030788828901610249565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561035657600080fd5b813561036181610231565b9392505050565b60006001820161038857634e487b7160e01b600052601160045260246000fd5b5060010190565b60005b838110156103aa578181015183820152602001610392565b838111156103b9576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561042c57878503603f190184528151805180875261040d818989018a850161038f565b601f01601f1916959095018601945092850192908501906001016103e6565b5092979650505050505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561046257610462610318565b604052919050565b6000602080838503121561047d57600080fd5b825167ffffffffffffffff8082111561049557600080fd5b8185019150601f86818401126104aa57600080fd5b8251828111156104bc576104bc610318565b8060051b6104cb868201610439565b918252848101860191868101908a8411156104e557600080fd5b87870192505b83831015610572578251868111156105035760008081fd5b8701603f81018c136105155760008081fd5b8881015160408882111561052b5761052b610318565b61053c828901601f19168c01610439565b8281528e828486010111156105515760008081fd5b610560838d830184870161038f565b855250505091870191908701906104eb565b9a9950505050505050505050565b60006020828403121561059257600080fd5b8151801515811461036157600080fdfea264697066735822122083aeb0c47fd03c4e9e45ce48b8318985bb09a61ed552d9643e04bcef1750042564736f6c634300080d0033"}, "abi": [{"type": "function", "name": "testReturnValues", "stateMutability": "nonpayable", "inputs": [{"name": "multicallToken", "type": "address", "internalType": "contract MulticallTokenMock"}, {"name": "recipients", "type": "address[]", "internalType": "address[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "MulticallTokenMock": {"contractName": "MulticallTokenMock", "sourceId": "mocks/MulticallTokenMock.sol", "deploymentBytecode": {"bytecode": "0x60806040523480156200001157600080fd5b50604051620012cc380380620012cc833981016040819052620000349162000257565b6040518060400160405280600e81526020016d26bab63a34b1b0b6362a37b5b2b760911b815250604051806040016040528060038152602001621090d560ea1b81525033838383816003908051906020019062000093929190620001b1565b508051620000a9906004906020840190620001b1565b505050620000be8282620000c960201b60201c565b5050505050620002d4565b6001600160a01b038216620001245760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b806002600082825462000138919062000271565b90915550506001600160a01b038216600090815260208190526040812080548392906200016790849062000271565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001bf9062000298565b90600052602060002090601f016020900481019282620001e357600085556200022e565b82601f10620001fe57805160ff19168380011785556200022e565b828001600101855582156200022e579182015b828111156200022e57825182559160200191906001019062000211565b506200023c92915062000240565b5090565b5b808211156200023c576000815560010162000241565b6000602082840312156200026a57600080fd5b5051919050565b600082198211156200029357634e487b7160e01b600052601160045260246000fd5b500190565b600181811c90821680620002ad57607f821691505b602082108103620002ce57634e487b7160e01b600052602260045260246000fd5b50919050565b610fe880620002e46000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806356189cb411610097578063a457c2d711610066578063a457c2d71461020c578063a9059cbb1461021f578063ac9650d814610232578063dd62ed3e1461025257600080fd5b806356189cb4146101b557806370a08231146101c857806395d89b41146101f15780639dc29fac146101f957600080fd5b806323b872dd116100d357806323b872dd1461016d578063313ce56714610180578063395093511461018f57806340c10f19146101a257600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd14610146578063222f5be014610158575b600080fd5b61010d61028b565b60405161011a9190610ca3565b60405180910390f35b610136610131366004610cd2565b61031d565b604051901515815260200161011a565b6002545b60405190815260200161011a565b61016b610166366004610cfc565b610333565b005b61013661017b366004610cfc565b610343565b6040516012815260200161011a565b61013661019d366004610cd2565b6103f4565b61016b6101b0366004610cd2565b610430565b61016b6101c3366004610cfc565b61043e565b61014a6101d6366004610d38565b6001600160a01b031660009081526020819052604090205490565b61010d610449565b61016b610207366004610cd2565b610458565b61013661021a366004610cd2565b610462565b61013661022d366004610cd2565b6104fb565b610245610240366004610d53565b610508565b60405161011a9190610dc8565b61014a610260366004610e2a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461029a90610e5d565b80601f01602080910402602001604051908101604052809291908181526020018280546102c690610e5d565b80156103135780601f106102e857610100808354040283529160200191610313565b820191906000526020600020905b8154815290600101906020018083116102f657829003601f168201915b5050505050905090565b600061032a3384846105fd565b50600192915050565b61033e838383610721565b505050565b6000610350848484610721565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103da5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103e785338584036105fd565b60019150505b9392505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161032a91859061042b908690610ead565b6105fd565b61043a82826108f1565b5050565b61033e8383836105fd565b60606004805461029a90610e5d565b61043a82826109d0565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104e45760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103d1565b6104f133858584036105fd565b5060019392505050565b600061032a338484610721565b60608167ffffffffffffffff81111561052357610523610ec5565b60405190808252806020026020018201604052801561055657816020015b60608152602001906001900390816105415790505b50905060005b828110156105f6576105c63085858481811061057a5761057a610edb565b905060200281019061058c9190610ef1565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b1e92505050565b8282815181106105d8576105d8610edb565b602002602001018190525080806105ee90610f3f565b91505061055c565b5092915050565b6001600160a01b03831661065f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103d1565b6001600160a01b0382166106c05760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103d1565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166107855760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103d1565b6001600160a01b0382166107e75760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103d1565b6001600160a01b0383166000908152602081905260409020548181101561085f5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103d1565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610896908490610ead565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516108e291815260200190565b60405180910390a35b50505050565b6001600160a01b0382166109475760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103d1565b80600260008282546109599190610ead565b90915550506001600160a01b03821660009081526020819052604081208054839290610986908490610ead565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610a305760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103d1565b6001600160a01b03821660009081526020819052604090205481811015610aa45760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103d1565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610ad3908490610f58565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60606103ed8383604051806060016040528060278152602001610f8c602791396060833b610b9d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016103d1565b600080856001600160a01b031685604051610bb89190610f6f565b600060405180830381855af49150503d8060008114610bf3576040519150601f19603f3d011682016040523d82523d6000602084013e610bf8565b606091505b5091509150610c08828286610c12565b9695505050505050565b60608315610c215750816103ed565b825115610c315782518084602001fd5b8160405162461bcd60e51b81526004016103d19190610ca3565b60005b83811015610c66578181015183820152602001610c4e565b838111156108eb5750506000910152565b60008151808452610c8f816020860160208601610c4b565b601f01601f19169290920160200192915050565b6020815260006103ed6020830184610c77565b80356001600160a01b0381168114610ccd57600080fd5b919050565b60008060408385031215610ce557600080fd5b610cee83610cb6565b946020939093013593505050565b600080600060608486031215610d1157600080fd5b610d1a84610cb6565b9250610d2860208501610cb6565b9150604084013590509250925092565b600060208284031215610d4a57600080fd5b6103ed82610cb6565b60008060208385031215610d6657600080fd5b823567ffffffffffffffff80821115610d7e57600080fd5b818501915085601f830112610d9257600080fd5b813581811115610da157600080fd5b8660208260051b8501011115610db657600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610e1d57603f19888603018452610e0b858351610c77565b94509285019290850190600101610def565b5092979650505050505050565b60008060408385031215610e3d57600080fd5b610e4683610cb6565b9150610e5460208401610cb6565b90509250929050565b600181811c90821680610e7157607f821691505b602082108103610e9157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610ec057610ec0610e97565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112610f0857600080fd5b83018035915067ffffffffffffffff821115610f2357600080fd5b602001915036819003821315610f3857600080fd5b9250929050565b600060018201610f5157610f51610e97565b5060010190565b600082821015610f6a57610f6a610e97565b500390565b60008251610f81818460208701610c4b565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220472dc8e6ba980c77ea0ca2b201967690f1745a26b0624541c7adfae71fbb914364736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806356189cb411610097578063a457c2d711610066578063a457c2d71461020c578063a9059cbb1461021f578063ac9650d814610232578063dd62ed3e1461025257600080fd5b806356189cb4146101b557806370a08231146101c857806395d89b41146101f15780639dc29fac146101f957600080fd5b806323b872dd116100d357806323b872dd1461016d578063313ce56714610180578063395093511461018f57806340c10f19146101a257600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd14610146578063222f5be014610158575b600080fd5b61010d61028b565b60405161011a9190610ca3565b60405180910390f35b610136610131366004610cd2565b61031d565b604051901515815260200161011a565b6002545b60405190815260200161011a565b61016b610166366004610cfc565b610333565b005b61013661017b366004610cfc565b610343565b6040516012815260200161011a565b61013661019d366004610cd2565b6103f4565b61016b6101b0366004610cd2565b610430565b61016b6101c3366004610cfc565b61043e565b61014a6101d6366004610d38565b6001600160a01b031660009081526020819052604090205490565b61010d610449565b61016b610207366004610cd2565b610458565b61013661021a366004610cd2565b610462565b61013661022d366004610cd2565b6104fb565b610245610240366004610d53565b610508565b60405161011a9190610dc8565b61014a610260366004610e2a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461029a90610e5d565b80601f01602080910402602001604051908101604052809291908181526020018280546102c690610e5d565b80156103135780601f106102e857610100808354040283529160200191610313565b820191906000526020600020905b8154815290600101906020018083116102f657829003601f168201915b5050505050905090565b600061032a3384846105fd565b50600192915050565b61033e838383610721565b505050565b6000610350848484610721565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103da5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103e785338584036105fd565b60019150505b9392505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161032a91859061042b908690610ead565b6105fd565b61043a82826108f1565b5050565b61033e8383836105fd565b60606004805461029a90610e5d565b61043a82826109d0565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104e45760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103d1565b6104f133858584036105fd565b5060019392505050565b600061032a338484610721565b60608167ffffffffffffffff81111561052357610523610ec5565b60405190808252806020026020018201604052801561055657816020015b60608152602001906001900390816105415790505b50905060005b828110156105f6576105c63085858481811061057a5761057a610edb565b905060200281019061058c9190610ef1565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b1e92505050565b8282815181106105d8576105d8610edb565b602002602001018190525080806105ee90610f3f565b91505061055c565b5092915050565b6001600160a01b03831661065f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103d1565b6001600160a01b0382166106c05760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103d1565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166107855760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103d1565b6001600160a01b0382166107e75760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103d1565b6001600160a01b0383166000908152602081905260409020548181101561085f5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103d1565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610896908490610ead565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516108e291815260200190565b60405180910390a35b50505050565b6001600160a01b0382166109475760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103d1565b80600260008282546109599190610ead565b90915550506001600160a01b03821660009081526020819052604081208054839290610986908490610ead565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610a305760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103d1565b6001600160a01b03821660009081526020819052604090205481811015610aa45760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103d1565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610ad3908490610f58565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60606103ed8383604051806060016040528060278152602001610f8c602791396060833b610b9d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016103d1565b600080856001600160a01b031685604051610bb89190610f6f565b600060405180830381855af49150503d8060008114610bf3576040519150601f19603f3d011682016040523d82523d6000602084013e610bf8565b606091505b5091509150610c08828286610c12565b9695505050505050565b60608315610c215750816103ed565b825115610c315782518084602001fd5b8160405162461bcd60e51b81526004016103d19190610ca3565b60005b83811015610c66578181015183820152602001610c4e565b838111156108eb5750506000910152565b60008151808452610c8f816020860160208601610c4b565b601f01601f19169290920160200192915050565b6020815260006103ed6020830184610c77565b80356001600160a01b0381168114610ccd57600080fd5b919050565b60008060408385031215610ce557600080fd5b610cee83610cb6565b946020939093013593505050565b600080600060608486031215610d1157600080fd5b610d1a84610cb6565b9250610d2860208501610cb6565b9150604084013590509250925092565b600060208284031215610d4a57600080fd5b6103ed82610cb6565b60008060208385031215610d6657600080fd5b823567ffffffffffffffff80821115610d7e57600080fd5b818501915085601f830112610d9257600080fd5b813581811115610da157600080fd5b8660208260051b8501011115610db657600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610e1d57603f19888603018452610e0b858351610c77565b94509285019290850190600101610def565b5092979650505050505050565b60008060408385031215610e3d57600080fd5b610e4683610cb6565b9150610e5460208401610cb6565b90509250929050565b600181811c90821680610e7157607f821691505b602082108103610e9157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610ec057610ec0610e97565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112610f0857600080fd5b83018035915067ffffffffffffffff821115610f2357600080fd5b602001915036819003821315610f3857600080fd5b9250929050565b600060018201610f5157610f51610e97565b5060010190565b600082821015610f6a57610f6a610e97565b500390565b60008251610f81818460208701610c4b565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220472dc8e6ba980c77ea0ca2b201967690f1745a26b0624541c7adfae71fbb914364736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "initialBalance", "type": "uint256", "internalType": "uint256"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "approveInternal", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "multicall", "stateMutability": "nonpayable", "inputs": [{"name": "data", "type": "bytes[]", "internalType": "bytes[]"}], "outputs": [{"name": "results", "type": "bytes[]", "internalType": "bytes[]"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferInternal", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "multicall(bytes[])": {"details": "Receives and executes a batch of function calls on this contract."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "SampleChild": {"contractName": "SampleChild", "sourceId": "mocks/MultipleInheritanceInitializableMocks.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506109f9806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638beaf7d7116100665780638beaf7d714610108578063ed7dfee31461011b578063f62d188814610124578063fa39851f14610137578063fe4b84df1461014c57600080fd5b80631c8aca3b146100a3578063237b5e96146100bf5780634a6c9db6146100c85780636f2edbd2146100eb5780638129fc1c14610100575b600080fd5b6100ac60035481565b6040519081526020015b60405180910390f35b6100ac60045481565b6000546100db9062010000900460ff1681565b60405190151581526020016100b6565b6100fe6100f93660046107a9565b61015f565b005b6100fe6101ea565b6100fe610116366004610800565b610264565b6100ac60015481565b6100fe610132366004610845565b6102e2565b61013f61035e565b6040516100b69190610882565b6100fe61015a3660046108d7565b6103ec565b600054610100900460ff1661017a5760005460ff161561017e565b303b155b6101a35760405162461bcd60e51b815260040161019a906108f0565b60405180910390fd5b600054610100900460ff161580156101c5576000805461ffff19166101011790555b6101d185858585610452565b80156101e3576000805461ff00191690555b5050505050565b600054610100900460ff166102055760005460ff1615610209565b303b155b6102255760405162461bcd60e51b815260040161019a906108f0565b600054610100900460ff16158015610247576000805461ffff19166101011790555b61024f61049b565b8015610261576000805461ff00191690555b50565b600054610100900460ff1661027f5760005460ff1615610283565b303b155b61029f5760405162461bcd60e51b815260040161019a906108f0565b600054610100900460ff161580156102c1576000805461ffff19166101011790555b6102cb83836104cc565b80156102dd576000805461ff00191690555b505050565b600054610100900460ff166102fd5760005460ff1615610301565b303b155b61031d5760405162461bcd60e51b815260040161019a906108f0565b600054610100900460ff1615801561033f576000805461ffff19166101011790555b61034882610505565b801561035a576000805461ff00191690555b5050565b6002805461036b9061093e565b80601f01602080910402602001604051908101604052809291908181526020018280546103979061093e565b80156103e45780601f106103b9576101008083540402835291602001916103e4565b820191906000526020600020905b8154815290600101906020018083116103c757829003601f168201915b505050505081565b600054610100900460ff166104075760005460ff161561040b565b303b155b6104275760405162461bcd60e51b815260040161019a906108f0565b600054610100900460ff16158015610449576000805461ffff19166101011790555b6103488261053d565b600054610100900460ff166104795760405162461bcd60e51b815260040161019a90610978565b6104828461053d565b61048c83836104cc565b61049581610575565b50505050565b600054610100900460ff166104c25760405162461bcd60e51b815260040161019a90610978565b6104ca6105a1565b565b600054610100900460ff166104f35760405162461bcd60e51b815260040161019a90610978565b6104fc82610505565b61035a816105db565b600054610100900460ff1661052c5760405162461bcd60e51b815260040161019a90610978565b61053461049b565b61026181610607565b600054610100900460ff166105645760405162461bcd60e51b815260040161019a90610978565b61056c61049b565b61026181610641565b600054610100900460ff1661059c5760405162461bcd60e51b815260040161019a90610978565b600455565b600054610100900460ff166105c85760405162461bcd60e51b815260040161019a90610978565b6000805462ff0000191662010000179055565b600054610100900460ff166106025760405162461bcd60e51b815260040161019a90610978565b600355565b600054610100900460ff1661062e5760405162461bcd60e51b815260040161019a90610978565b805161035a90600290602084019061066d565b600054610100900460ff166106685760405162461bcd60e51b815260040161019a90610978565b600155565b8280546106799061093e565b90600052602060002090601f01602090048101928261069b57600085556106e1565b82601f106106b457805160ff19168380011785556106e1565b828001600101855582156106e1579182015b828111156106e15782518255916020019190600101906106c6565b506106ed9291506106f1565b5090565b5b808211156106ed57600081556001016106f2565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261072d57600080fd5b813567ffffffffffffffff8082111561074857610748610706565b604051601f8301601f19908116603f0116810190828211818310171561077057610770610706565b8160405283815286602085880101111561078957600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156107bf57600080fd5b84359350602085013567ffffffffffffffff8111156107dd57600080fd5b6107e98782880161071c565b949794965050505060408301359260600135919050565b6000806040838503121561081357600080fd5b823567ffffffffffffffff81111561082a57600080fd5b6108368582860161071c565b95602094909401359450505050565b60006020828403121561085757600080fd5b813567ffffffffffffffff81111561086e57600080fd5b61087a8482850161071c565b949350505050565b600060208083528351808285015260005b818110156108af57858101830151858201604001528201610893565b818111156108c1576000604083870101525b50601f01601f1916929092016040019392505050565b6000602082840312156108e957600080fd5b5035919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600181811c9082168061095257607f821691505b60208210810361097257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220c2fd339773715194229d81ec3c78415aa6fc5497174be7de0bcd6738f9f35a2264736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80638beaf7d7116100665780638beaf7d714610108578063ed7dfee31461011b578063f62d188814610124578063fa39851f14610137578063fe4b84df1461014c57600080fd5b80631c8aca3b146100a3578063237b5e96146100bf5780634a6c9db6146100c85780636f2edbd2146100eb5780638129fc1c14610100575b600080fd5b6100ac60035481565b6040519081526020015b60405180910390f35b6100ac60045481565b6000546100db9062010000900460ff1681565b60405190151581526020016100b6565b6100fe6100f93660046107a9565b61015f565b005b6100fe6101ea565b6100fe610116366004610800565b610264565b6100ac60015481565b6100fe610132366004610845565b6102e2565b61013f61035e565b6040516100b69190610882565b6100fe61015a3660046108d7565b6103ec565b600054610100900460ff1661017a5760005460ff161561017e565b303b155b6101a35760405162461bcd60e51b815260040161019a906108f0565b60405180910390fd5b600054610100900460ff161580156101c5576000805461ffff19166101011790555b6101d185858585610452565b80156101e3576000805461ff00191690555b5050505050565b600054610100900460ff166102055760005460ff1615610209565b303b155b6102255760405162461bcd60e51b815260040161019a906108f0565b600054610100900460ff16158015610247576000805461ffff19166101011790555b61024f61049b565b8015610261576000805461ff00191690555b50565b600054610100900460ff1661027f5760005460ff1615610283565b303b155b61029f5760405162461bcd60e51b815260040161019a906108f0565b600054610100900460ff161580156102c1576000805461ffff19166101011790555b6102cb83836104cc565b80156102dd576000805461ff00191690555b505050565b600054610100900460ff166102fd5760005460ff1615610301565b303b155b61031d5760405162461bcd60e51b815260040161019a906108f0565b600054610100900460ff1615801561033f576000805461ffff19166101011790555b61034882610505565b801561035a576000805461ff00191690555b5050565b6002805461036b9061093e565b80601f01602080910402602001604051908101604052809291908181526020018280546103979061093e565b80156103e45780601f106103b9576101008083540402835291602001916103e4565b820191906000526020600020905b8154815290600101906020018083116103c757829003601f168201915b505050505081565b600054610100900460ff166104075760005460ff161561040b565b303b155b6104275760405162461bcd60e51b815260040161019a906108f0565b600054610100900460ff16158015610449576000805461ffff19166101011790555b6103488261053d565b600054610100900460ff166104795760405162461bcd60e51b815260040161019a90610978565b6104828461053d565b61048c83836104cc565b61049581610575565b50505050565b600054610100900460ff166104c25760405162461bcd60e51b815260040161019a90610978565b6104ca6105a1565b565b600054610100900460ff166104f35760405162461bcd60e51b815260040161019a90610978565b6104fc82610505565b61035a816105db565b600054610100900460ff1661052c5760405162461bcd60e51b815260040161019a90610978565b61053461049b565b61026181610607565b600054610100900460ff166105645760405162461bcd60e51b815260040161019a90610978565b61056c61049b565b61026181610641565b600054610100900460ff1661059c5760405162461bcd60e51b815260040161019a90610978565b600455565b600054610100900460ff166105c85760405162461bcd60e51b815260040161019a90610978565b6000805462ff0000191662010000179055565b600054610100900460ff166106025760405162461bcd60e51b815260040161019a90610978565b600355565b600054610100900460ff1661062e5760405162461bcd60e51b815260040161019a90610978565b805161035a90600290602084019061066d565b600054610100900460ff166106685760405162461bcd60e51b815260040161019a90610978565b600155565b8280546106799061093e565b90600052602060002090601f01602090048101928261069b57600085556106e1565b82601f106106b457805160ff19168380011785556106e1565b828001600101855582156106e1579182015b828111156106e15782518255916020019190600101906106c6565b506106ed9291506106f1565b5090565b5b808211156106ed57600081556001016106f2565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261072d57600080fd5b813567ffffffffffffffff8082111561074857610748610706565b604051601f8301601f19908116603f0116810190828211818310171561077057610770610706565b8160405283815286602085880101111561078957600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156107bf57600080fd5b84359350602085013567ffffffffffffffff8111156107dd57600080fd5b6107e98782880161071c565b949794965050505060408301359260600135919050565b6000806040838503121561081357600080fd5b823567ffffffffffffffff81111561082a57600080fd5b6108368582860161071c565b95602094909401359450505050565b60006020828403121561085757600080fd5b813567ffffffffffffffff81111561086e57600080fd5b61087a8482850161071c565b949350505050565b600060208083528351808285015260005b818110156108af57858101830151858201604001528201610893565b818111156108c1576000604083870101525b50601f01601f1916929092016040019392505050565b6000602082840312156108e957600080fd5b5035919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600181811c9082168061095257607f821691505b60208210810361097257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220c2fd339773715194229d81ec3c78415aa6fc5497174be7de0bcd6738f9f35a2264736f6c634300080d0033"}, "abi": [{"type": "function", "name": "child", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "father", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "gramps", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "initialize", "stateMutability": "nonpayable", "inputs": [{"name": "_mother", "type": "uint256", "internalType": "uint256"}, {"name": "_gramps", "type": "string", "internalType": "string"}, {"name": "_father", "type": "uint256", "internalType": "uint256"}, {"name": "_child", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "initialize", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "initialize", "stateMutability": "nonpayable", "inputs": [{"name": "_gramps", "type": "string", "internalType": "string"}, {"name": "_father", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "initialize", "stateMutability": "nonpayable", "inputs": [{"name": "value", "type": "string", "internalType": "string"}], "outputs": []}, {"type": "function", "name": "initialize", "stateMutability": "nonpayable", "inputs": [{"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "isHuman", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mother", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}], "userdoc": {"kind": "user", "methods": {}, "notice": "Child extends from mother, father (gramps)", "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "SampleFather": {"contractName": "SampleFather", "sourceId": "mocks/MultipleInheritanceInitializableMocks.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5061074f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631c8aca3b146100675780634a6c9db6146100835780638129fc1c146100a65780638beaf7d7146100b0578063f62d1888146100c3578063fa39851f146100d6575b600080fd5b61007060025481565b6040519081526020015b60405180910390f35b6000546100969062010000900460ff1681565b604051901515815260200161007a565b6100ae6100eb565b005b6100ae6100be36600461056f565b61016e565b6100ae6100d13660046105b4565b6101ec565b6100de610268565b60405161007a91906105f1565b600054610100900460ff166101065760005460ff161561010a565b303b155b61012f5760405162461bcd60e51b815260040161012690610646565b60405180910390fd5b600054610100900460ff16158015610151576000805461ffff19166101011790555b6101596102f6565b801561016b576000805461ff00191690555b50565b600054610100900460ff166101895760005460ff161561018d565b303b155b6101a95760405162461bcd60e51b815260040161012690610646565b600054610100900460ff161580156101cb576000805461ffff19166101011790555b6101d58383610327565b80156101e7576000805461ff00191690555b505050565b600054610100900460ff166102075760005460ff161561020b565b303b155b6102275760405162461bcd60e51b815260040161012690610646565b600054610100900460ff16158015610249576000805461ffff19166101011790555b61025282610360565b8015610264576000805461ff00191690555b5050565b6001805461027590610694565b80601f01602080910402602001604051908101604052809291908181526020018280546102a190610694565b80156102ee5780601f106102c3576101008083540402835291602001916102ee565b820191906000526020600020905b8154815290600101906020018083116102d157829003601f168201915b505050505081565b600054610100900460ff1661031d5760405162461bcd60e51b8152600401610126906106ce565b610325610398565b565b600054610100900460ff1661034e5760405162461bcd60e51b8152600401610126906106ce565b61035782610360565b610264816103d2565b600054610100900460ff166103875760405162461bcd60e51b8152600401610126906106ce565b61038f6102f6565b61016b816103fe565b600054610100900460ff166103bf5760405162461bcd60e51b8152600401610126906106ce565b6000805462ff0000191662010000179055565b600054610100900460ff166103f95760405162461bcd60e51b8152600401610126906106ce565b600255565b600054610100900460ff166104255760405162461bcd60e51b8152600401610126906106ce565b805161026490600190602084019082805461043f90610694565b90600052602060002090601f01602090048101928261046157600085556104a7565b82601f1061047a57805160ff19168380011785556104a7565b828001600101855582156104a7579182015b828111156104a757825182559160200191906001019061048c565b506104b39291506104b7565b5090565b5b808211156104b357600081556001016104b8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126104f357600080fd5b813567ffffffffffffffff8082111561050e5761050e6104cc565b604051601f8301601f19908116603f01168101908282118183101715610536576105366104cc565b8160405283815286602085880101111561054f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561058257600080fd5b823567ffffffffffffffff81111561059957600080fd5b6105a5858286016104e2565b95602094909401359450505050565b6000602082840312156105c657600080fd5b813567ffffffffffffffff8111156105dd57600080fd5b6105e9848285016104e2565b949350505050565b600060208083528351808285015260005b8181101561061e57858101830151858201604001528201610602565b81811115610630576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600181811c908216806106a857607f821691505b6020821081036106c857634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220a5c3948e136b58dfb8331b987e6990b538bfb2992976ab7606e16b78c3bd6b1464736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80631c8aca3b146100675780634a6c9db6146100835780638129fc1c146100a65780638beaf7d7146100b0578063f62d1888146100c3578063fa39851f146100d6575b600080fd5b61007060025481565b6040519081526020015b60405180910390f35b6000546100969062010000900460ff1681565b604051901515815260200161007a565b6100ae6100eb565b005b6100ae6100be36600461056f565b61016e565b6100ae6100d13660046105b4565b6101ec565b6100de610268565b60405161007a91906105f1565b600054610100900460ff166101065760005460ff161561010a565b303b155b61012f5760405162461bcd60e51b815260040161012690610646565b60405180910390fd5b600054610100900460ff16158015610151576000805461ffff19166101011790555b6101596102f6565b801561016b576000805461ff00191690555b50565b600054610100900460ff166101895760005460ff161561018d565b303b155b6101a95760405162461bcd60e51b815260040161012690610646565b600054610100900460ff161580156101cb576000805461ffff19166101011790555b6101d58383610327565b80156101e7576000805461ff00191690555b505050565b600054610100900460ff166102075760005460ff161561020b565b303b155b6102275760405162461bcd60e51b815260040161012690610646565b600054610100900460ff16158015610249576000805461ffff19166101011790555b61025282610360565b8015610264576000805461ff00191690555b5050565b6001805461027590610694565b80601f01602080910402602001604051908101604052809291908181526020018280546102a190610694565b80156102ee5780601f106102c3576101008083540402835291602001916102ee565b820191906000526020600020905b8154815290600101906020018083116102d157829003601f168201915b505050505081565b600054610100900460ff1661031d5760405162461bcd60e51b8152600401610126906106ce565b610325610398565b565b600054610100900460ff1661034e5760405162461bcd60e51b8152600401610126906106ce565b61035782610360565b610264816103d2565b600054610100900460ff166103875760405162461bcd60e51b8152600401610126906106ce565b61038f6102f6565b61016b816103fe565b600054610100900460ff166103bf5760405162461bcd60e51b8152600401610126906106ce565b6000805462ff0000191662010000179055565b600054610100900460ff166103f95760405162461bcd60e51b8152600401610126906106ce565b600255565b600054610100900460ff166104255760405162461bcd60e51b8152600401610126906106ce565b805161026490600190602084019082805461043f90610694565b90600052602060002090601f01602090048101928261046157600085556104a7565b82601f1061047a57805160ff19168380011785556104a7565b828001600101855582156104a7579182015b828111156104a757825182559160200191906001019061048c565b506104b39291506104b7565b5090565b5b808211156104b357600081556001016104b8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126104f357600080fd5b813567ffffffffffffffff8082111561050e5761050e6104cc565b604051601f8301601f19908116603f01168101908282118183101715610536576105366104cc565b8160405283815286602085880101111561054f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561058257600080fd5b823567ffffffffffffffff81111561059957600080fd5b6105a5858286016104e2565b95602094909401359450505050565b6000602082840312156105c657600080fd5b813567ffffffffffffffff8111156105dd57600080fd5b6105e9848285016104e2565b949350505050565b600060208083528351808285015260005b8181101561061e57858101830151858201604001528201610602565b81811115610630576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600181811c908216806106a857607f821691505b6020821081036106c857634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220a5c3948e136b58dfb8331b987e6990b538bfb2992976ab7606e16b78c3bd6b1464736f6c634300080d0033"}, "abi": [{"type": "function", "name": "father", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "gramps", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "initialize", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "initialize", "stateMutability": "nonpayable", "inputs": [{"name": "_gramps", "type": "string", "internalType": "string"}, {"name": "_father", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "initialize", "stateMutability": "nonpayable", "inputs": [{"name": "value", "type": "string", "internalType": "string"}], "outputs": []}, {"type": "function", "name": "isHuman", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "notice": "Sample base intializable contract that defines a field father and extends from gramps", "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "SampleGramps": {"contractName": "SampleGramps", "sourceId": "mocks/MultipleInheritanceInitializableMocks.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506105ce806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634a6c9db6146100515780638129fc1c14610079578063f62d188814610083578063fa39851f14610096575b600080fd5b6000546100649062010000900460ff1681565b60405190151581526020015b60405180910390f35b6100816100ab565b005b6100816100913660046103bf565b61012e565b61009e6101aa565b6040516100709190610470565b600054610100900460ff166100c65760005460ff16156100ca565b303b155b6100ef5760405162461bcd60e51b81526004016100e6906104c5565b60405180910390fd5b600054610100900460ff16158015610111576000805461ffff19166101011790555b610119610238565b801561012b576000805461ff00191690555b50565b600054610100900460ff166101495760005460ff161561014d565b303b155b6101695760405162461bcd60e51b81526004016100e6906104c5565b600054610100900460ff1615801561018b576000805461ffff19166101011790555b61019482610269565b80156101a6576000805461ff00191690555b5050565b600180546101b790610513565b80601f01602080910402602001604051908101604052809291908181526020018280546101e390610513565b80156102305780601f1061020557610100808354040283529160200191610230565b820191906000526020600020905b81548152906001019060200180831161021357829003601f168201915b505050505081565b600054610100900460ff1661025f5760405162461bcd60e51b81526004016100e69061054d565b6102676102a1565b565b600054610100900460ff166102905760405162461bcd60e51b81526004016100e69061054d565b610298610238565b61012b816102db565b600054610100900460ff166102c85760405162461bcd60e51b81526004016100e69061054d565b6000805462ff0000191662010000179055565b600054610100900460ff166103025760405162461bcd60e51b81526004016100e69061054d565b80516101a690600190602084019082805461031c90610513565b90600052602060002090601f01602090048101928261033e5760008555610384565b82601f1061035757805160ff1916838001178555610384565b82800160010185558215610384579182015b82811115610384578251825591602001919060010190610369565b50610390929150610394565b5090565b5b808211156103905760008155600101610395565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156103d157600080fd5b813567ffffffffffffffff808211156103e957600080fd5b818401915084601f8301126103fd57600080fd5b81358181111561040f5761040f6103a9565b604051601f8201601f19908116603f01168101908382118183101715610437576104376103a9565b8160405282815287602084870101111561045057600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083528351808285015260005b8181101561049d57858101830151858201604001528201610481565b818111156104af576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600181811c9082168061052757607f821691505b60208210810361054757634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220335b84349e937a8c46c2db94f2a78078440d7743985339124a12083db040979364736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80634a6c9db6146100515780638129fc1c14610079578063f62d188814610083578063fa39851f14610096575b600080fd5b6000546100649062010000900460ff1681565b60405190151581526020015b60405180910390f35b6100816100ab565b005b6100816100913660046103bf565b61012e565b61009e6101aa565b6040516100709190610470565b600054610100900460ff166100c65760005460ff16156100ca565b303b155b6100ef5760405162461bcd60e51b81526004016100e6906104c5565b60405180910390fd5b600054610100900460ff16158015610111576000805461ffff19166101011790555b610119610238565b801561012b576000805461ff00191690555b50565b600054610100900460ff166101495760005460ff161561014d565b303b155b6101695760405162461bcd60e51b81526004016100e6906104c5565b600054610100900460ff1615801561018b576000805461ffff19166101011790555b61019482610269565b80156101a6576000805461ff00191690555b5050565b600180546101b790610513565b80601f01602080910402602001604051908101604052809291908181526020018280546101e390610513565b80156102305780601f1061020557610100808354040283529160200191610230565b820191906000526020600020905b81548152906001019060200180831161021357829003601f168201915b505050505081565b600054610100900460ff1661025f5760405162461bcd60e51b81526004016100e69061054d565b6102676102a1565b565b600054610100900460ff166102905760405162461bcd60e51b81526004016100e69061054d565b610298610238565b61012b816102db565b600054610100900460ff166102c85760405162461bcd60e51b81526004016100e69061054d565b6000805462ff0000191662010000179055565b600054610100900460ff166103025760405162461bcd60e51b81526004016100e69061054d565b80516101a690600190602084019082805461031c90610513565b90600052602060002090601f01602090048101928261033e5760008555610384565b82601f1061035757805160ff1916838001178555610384565b82800160010185558215610384579182015b82811115610384578251825591602001919060010190610369565b50610390929150610394565b5090565b5b808211156103905760008155600101610395565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156103d157600080fd5b813567ffffffffffffffff808211156103e957600080fd5b818401915084601f8301126103fd57600080fd5b81358181111561040f5761040f6103a9565b604051601f8201601f19908116603f01168101908382118183101715610437576104376103a9565b8160405282815287602084870101111561045057600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083528351808285015260005b8181101561049d57858101830151858201604001528201610481565b818111156104af576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600181811c9082168061052757607f821691505b60208210810361054757634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220335b84349e937a8c46c2db94f2a78078440d7743985339124a12083db040979364736f6c634300080d0033"}, "abi": [{"type": "function", "name": "gramps", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "initialize", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "initialize", "stateMutability": "nonpayable", "inputs": [{"name": "value", "type": "string", "internalType": "string"}], "outputs": []}, {"type": "function", "name": "isHuman", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "notice": "Sample base intializable contract that defines a field gramps", "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "SampleHuman": {"contractName": "SampleHuman", "sourceId": "mocks/MultipleInheritanceInitializableMocks.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5061021e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634a6c9db61461003b5780638129fc1c14610062575b600080fd5b60005461004e9062010000900460ff1681565b604051901515815260200160405180910390f35b61006a61006c565b005b600054610100900460ff166100875760005460ff161561008b565b303b155b6100f35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff16158015610115576000805461ffff19166101011790555b61011d610132565b801561012f576000805461ff00191690555b50565b600054610100900460ff166101595760405162461bcd60e51b81526004016100ea9061019d565b610161610163565b565b600054610100900460ff1661018a5760405162461bcd60e51b81526004016100ea9061019d565b6000805462ff0000191662010000179055565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212205866833213f9b9740514026827fe1577c2488a701e678cffc40e42399bea10f864736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80634a6c9db61461003b5780638129fc1c14610062575b600080fd5b60005461004e9062010000900460ff1681565b604051901515815260200160405180910390f35b61006a61006c565b005b600054610100900460ff166100875760005460ff161561008b565b303b155b6100f35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff16158015610115576000805461ffff19166101011790555b61011d610132565b801561012f576000805461ff00191690555b50565b600054610100900460ff166101595760405162461bcd60e51b81526004016100ea9061019d565b610161610163565b565b600054610100900460ff1661018a5760405162461bcd60e51b81526004016100ea9061019d565b6000805462ff0000191662010000179055565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212205866833213f9b9740514026827fe1577c2488a701e678cffc40e42399bea10f864736f6c634300080d0033"}, "abi": [{"type": "function", "name": "initialize", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "isHuman", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "notice": "Sample base intializable contract that is a human", "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "SampleMother": {"contractName": "SampleMother", "sourceId": "mocks/MultipleInheritanceInitializableMocks.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50610363806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634a6c9db6146100515780638129fc1c14610079578063ed7dfee314610083578063fe4b84df1461009a575b600080fd5b6000546100649062010000900460ff1681565b60405190151581526020015b60405180910390f35b6100816100ad565b005b61008c60015481565b604051908152602001610070565b6100816100a836600461027b565b610130565b600054610100900460ff166100c85760005460ff16156100cc565b303b155b6100f15760405162461bcd60e51b81526004016100e890610294565b60405180910390fd5b600054610100900460ff16158015610113576000805461ffff19166101011790555b61011b6101ac565b801561012d576000805461ff00191690555b50565b600054610100900460ff1661014b5760005460ff161561014f565b303b155b61016b5760405162461bcd60e51b81526004016100e890610294565b600054610100900460ff1615801561018d576000805461ffff19166101011790555b610196826101dd565b80156101a8576000805461ff00191690555b5050565b600054610100900460ff166101d35760405162461bcd60e51b81526004016100e8906102e2565b6101db610215565b565b600054610100900460ff166102045760405162461bcd60e51b81526004016100e8906102e2565b61020c6101ac565b61012d8161024f565b600054610100900460ff1661023c5760405162461bcd60e51b81526004016100e8906102e2565b6000805462ff0000191662010000179055565b600054610100900460ff166102765760405162461bcd60e51b81526004016100e8906102e2565b600155565b60006020828403121561028d57600080fd5b5035919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220636e4980ecd152097bb7d66b20e359675180d9cc4d8ffe4c37ae4b061c07d63b64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80634a6c9db6146100515780638129fc1c14610079578063ed7dfee314610083578063fe4b84df1461009a575b600080fd5b6000546100649062010000900460ff1681565b60405190151581526020015b60405180910390f35b6100816100ad565b005b61008c60015481565b604051908152602001610070565b6100816100a836600461027b565b610130565b600054610100900460ff166100c85760005460ff16156100cc565b303b155b6100f15760405162461bcd60e51b81526004016100e890610294565b60405180910390fd5b600054610100900460ff16158015610113576000805461ffff19166101011790555b61011b6101ac565b801561012d576000805461ff00191690555b50565b600054610100900460ff1661014b5760005460ff161561014f565b303b155b61016b5760405162461bcd60e51b81526004016100e890610294565b600054610100900460ff1615801561018d576000805461ffff19166101011790555b610196826101dd565b80156101a8576000805461ff00191690555b5050565b600054610100900460ff166101d35760405162461bcd60e51b81526004016100e8906102e2565b6101db610215565b565b600054610100900460ff166102045760405162461bcd60e51b81526004016100e8906102e2565b61020c6101ac565b61012d8161024f565b600054610100900460ff1661023c5760405162461bcd60e51b81526004016100e8906102e2565b6000805462ff0000191662010000179055565b600054610100900460ff166102765760405162461bcd60e51b81526004016100e8906102e2565b600155565b60006020828403121561028d57600080fd5b5035919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220636e4980ecd152097bb7d66b20e359675180d9cc4d8ffe4c37ae4b061c07d63b64736f6c634300080d0033"}, "abi": [{"type": "function", "name": "initialize", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "initialize", "stateMutability": "nonpayable", "inputs": [{"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "isHuman", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mother", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}], "userdoc": {"kind": "user", "methods": {}, "notice": "Sample base intializable contract that defines a field mother", "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "OwnableMock": {"contractName": "OwnableMock", "sourceId": "mocks/OwnableMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61026e8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063715018a6146100465780638da5cb5b14610050578063f2fde38b1461006f575b600080fd5b61004e610082565b005b600054604080516001600160a01b039092168252519081900360200190f35b61004e61007d366004610208565b6100ed565b6000546001600160a01b031633146100e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6100eb60006101b8565b565b6000546001600160a01b031633146101475760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016100d8565b6001600160a01b0381166101ac5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100d8565b6101b5816101b8565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561021a57600080fd5b81356001600160a01b038116811461023157600080fd5b939250505056fea264697066735822122005314d8e821e0b606ca56e19f26e3c1230d1e93888cb7f3a7f8ca9812ae6818464736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063715018a6146100465780638da5cb5b14610050578063f2fde38b1461006f575b600080fd5b61004e610082565b005b600054604080516001600160a01b039092168252519081900360200190f35b61004e61007d366004610208565b6100ed565b6000546001600160a01b031633146100e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6100eb60006101b8565b565b6000546001600160a01b031633146101475760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016100d8565b6001600160a01b0381166101ac5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100d8565b6101b5816101b8565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561021a57600080fd5b81356001600160a01b038116811461023157600080fd5b939250505056fea264697066735822122005314d8e821e0b606ca56e19f26e3c1230d1e93888cb7f3a7f8ca9812ae6818464736f6c634300080d0033"}, "abi": [{"type": "event", "name": "OwnershipTransferred", "inputs": [{"name": "previousOwner", "type": "address", "internalType": "address", "indexed": true}, {"name": "newOwner", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "function", "name": "owner", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "renounceOwnership", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "transferOwnership", "stateMutability": "nonpayable", "inputs": [{"name": "newOwner", "type": "address", "internalType": "address"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"owner()": {"details": "Returns the address of the current owner."}, "renounceOwnership()": {"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."}, "transferOwnership(address)": {"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}, "version": 1}}, "PausableMock": {"contractName": "PausableMock", "sourceId": "mocks/PausableMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506000805461ffff191681556001556103228061002e6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806376657b8e1161005b57806376657b8e146100bf5780638456cb59146100d15780639958f045146100d9578063e7651d7a146100e157600080fd5b806306661abd146100825780633f4ba83a1461009e5780635c975abb146100a8575b600080fd5b61008b60015481565b6040519081526020015b60405180910390f35b6100a66100e9565b005b60005460ff165b6040519015158152602001610095565b6000546100af90610100900460ff1681565b6100a66100f3565b6100a66100fb565b6100a661015a565b6100f16101b7565b565b6100f161024a565b60005460ff166101495760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064015b60405180910390fd5b6000805461ff001916610100179055565b60005460ff16156101a05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610140565b600180549060006101b0836102c5565b9190505550565b60005460ff166102005760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610140565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60005460ff16156102905760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610140565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861022d3390565b6000600182016102e557634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122015f4946cdd325007f211c1b474e42a5f5158ec0ad29bbb27505b83530f874a7964736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806376657b8e1161005b57806376657b8e146100bf5780638456cb59146100d15780639958f045146100d9578063e7651d7a146100e157600080fd5b806306661abd146100825780633f4ba83a1461009e5780635c975abb146100a8575b600080fd5b61008b60015481565b6040519081526020015b60405180910390f35b6100a66100e9565b005b60005460ff165b6040519015158152602001610095565b6000546100af90610100900460ff1681565b6100a66100f3565b6100a66100fb565b6100a661015a565b6100f16101b7565b565b6100f161024a565b60005460ff166101495760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064015b60405180910390fd5b6000805461ff001916610100179055565b60005460ff16156101a05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610140565b600180549060006101b0836102c5565b9190505550565b60005460ff166102005760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610140565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60005460ff16156102905760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610140565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861022d3390565b6000600182016102e557634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122015f4946cdd325007f211c1b474e42a5f5158ec0ad29bbb27505b83530f874a7964736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": []}, {"type": "event", "name": "Paused", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Unpaused", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "function", "name": "count", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "drasticMeasure", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "drasticMeasureTaken", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "normalProcess", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "pause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "paused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "unpause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"paused()": {"details": "Returns true if the contract is paused, and false otherwise."}}, "version": 1}}, "PullPaymentMock": {"contractName": "PullPaymentMock", "sourceId": "mocks/PullPaymentMock.sol", "deploymentBytecode": {"bytecode": "0x60a06040526040516100109061003e565b604051809103906000f08015801561002c573d6000803e3d6000fd5b506001600160a01b031660805261004b565b6105f28061035f83390190565b6080516102ec6100736000396000818160b20152818161014101526101d301526102ec6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806331b3eb9414610046578063d44409911461005b578063e2982c211461006e575b600080fd5b61005961005436600461024d565b610093565b005b610059610069366004610271565b610111565b61008161007c36600461024d565b61011f565b60405190815260200160405180910390f35b6040516351cff8d960e01b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906351cff8d990602401600060405180830381600087803b1580156100f657600080fd5b505af115801561010a573d6000803e3d6000fd5b5050505050565b61011b82826101b4565b5050565b6040516371d4ed8d60e11b81526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e3a9db1a90602401602060405180830381865afa15801561018a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ae919061029d565b92915050565b60405163f340fa0160e01b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f340fa019083906024016000604051808303818588803b15801561021857600080fd5b505af115801561022c573d6000803e3d6000fd5b50505050505050565b6001600160a01b038116811461024a57600080fd5b50565b60006020828403121561025f57600080fd5b813561026a81610235565b9392505050565b6000806040838503121561028457600080fd5b823561028f81610235565b946020939093013593505050565b6000602082840312156102af57600080fd5b505191905056fea2646970667358221220b841b754b06f6d15c2949d8bf3c87c57063258adae7fdbecee1885dab8a1aea364736f6c634300080d0033608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105748061007e6000396000f3fe6080604052600436106100555760003560e01c806351cff8d91461005a578063715018a61461007c5780638da5cb5b14610091578063e3a9db1a146100be578063f2fde38b14610102578063f340fa0114610122575b600080fd5b34801561006657600080fd5b5061007a6100753660046104bf565b610135565b005b34801561008857600080fd5b5061007a6101d7565b34801561009d57600080fd5b506000546040516001600160a01b0390911681526020015b60405180910390f35b3480156100ca57600080fd5b506100f46100d93660046104bf565b6001600160a01b031660009081526001602052604090205490565b6040519081526020016100b5565b34801561010e57600080fd5b5061007a61011d3660046104bf565b61020d565b61007a6101303660046104bf565b6102a8565b6000546001600160a01b031633146101685760405162461bcd60e51b815260040161015f906104e3565b60405180910390fd5b6001600160a01b0381166000818152600160205260408120805491905590610190908261033c565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826040516101cb91815260200190565b60405180910390a25050565b6000546001600160a01b031633146102015760405162461bcd60e51b815260040161015f906104e3565b61020b600061045a565b565b6000546001600160a01b031633146102375760405162461bcd60e51b815260040161015f906104e3565b6001600160a01b03811661029c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161015f565b6102a58161045a565b50565b6000546001600160a01b031633146102d25760405162461bcd60e51b815260040161015f906104e3565b6001600160a01b0381166000908152600160205260408120805434928392916102fc908490610518565b90915550506040518181526001600160a01b038316907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4906020016101cb565b8047101561038c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161015f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146103d9576040519150601f19603f3d011682016040523d82523d6000602084013e6103de565b606091505b50509050806104555760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161015f565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146102a557600080fd5b6000602082840312156104d157600080fd5b81356104dc816104aa565b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561053957634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212206cc97246e6fbc2b4eac8231f2c0a9d93b40fba36a34b504db86a101136dc96f164736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806331b3eb9414610046578063d44409911461005b578063e2982c211461006e575b600080fd5b61005961005436600461024d565b610093565b005b610059610069366004610271565b610111565b61008161007c36600461024d565b61011f565b60405190815260200160405180910390f35b6040516351cff8d960e01b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906351cff8d990602401600060405180830381600087803b1580156100f657600080fd5b505af115801561010a573d6000803e3d6000fd5b5050505050565b61011b82826101b4565b5050565b6040516371d4ed8d60e11b81526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e3a9db1a90602401602060405180830381865afa15801561018a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ae919061029d565b92915050565b60405163f340fa0160e01b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f340fa019083906024016000604051808303818588803b15801561021857600080fd5b505af115801561022c573d6000803e3d6000fd5b50505050505050565b6001600160a01b038116811461024a57600080fd5b50565b60006020828403121561025f57600080fd5b813561026a81610235565b9392505050565b6000806040838503121561028457600080fd5b823561028f81610235565b946020939093013593505050565b6000602082840312156102af57600080fd5b505191905056fea2646970667358221220b841b754b06f6d15c2949d8bf3c87c57063258adae7fdbecee1885dab8a1aea364736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "payable", "inputs": []}, {"type": "function", "name": "callTransfer", "stateMutability": "nonpayable", "inputs": [{"name": "dest", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "payments", "stateMutability": "view", "inputs": [{"name": "dest", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "withdrawPayments", "stateMutability": "nonpayable", "inputs": [{"name": "payee", "type": "address", "internalType": "address payable"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"payments(address)": {"details": "Returns the payments owed to an address.", "params": {"dest": "The creditor's address."}}, "withdrawPayments(address)": {"details": "Withdraw accumulated payments, forwarding all gas to the recipient. Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.", "params": {"payee": "Whose payments will be withdrawn."}}}, "version": 1}}, "ReentrancyAttack": {"contractName": "ReentrancyAttack", "sourceId": "mocks/ReentrancyAttack.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506101be806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630a2df1ed14610030575b600080fd5b61004361003e36600461011c565b610045565b005b60408051600481526024810182526020810180516001600160e01b03166001600160e01b0319851617905290516000913391610081919061014d565b6000604051808303816000865af19150503d80600081146100be576040519150601f19603f3d011682016040523d82523d6000602084013e6100c3565b606091505b50509050806101185760405162461bcd60e51b815260206004820152601d60248201527f5265656e7472616e637941747461636b3a206661696c65642063616c6c000000604482015260640160405180910390fd5b5050565b60006020828403121561012e57600080fd5b81356001600160e01b03198116811461014657600080fd5b9392505050565b6000825160005b8181101561016e5760208186018101518583015201610154565b8181111561017d576000828501525b50919091019291505056fea264697066735822122015c115312be7c4da69c303ae52ff7837a4f86d40e4bbab13d268187edc19211864736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80630a2df1ed14610030575b600080fd5b61004361003e36600461011c565b610045565b005b60408051600481526024810182526020810180516001600160e01b03166001600160e01b0319851617905290516000913391610081919061014d565b6000604051808303816000865af19150503d80600081146100be576040519150601f19603f3d011682016040523d82523d6000602084013e6100c3565b606091505b50509050806101185760405162461bcd60e51b815260206004820152601d60248201527f5265656e7472616e637941747461636b3a206661696c65642063616c6c000000604482015260640160405180910390fd5b5050565b60006020828403121561012e57600080fd5b81356001600160e01b03198116811461014657600080fd5b9392505050565b6000825160005b8181101561016e5760208186018101518583015201610154565b8181111561017d576000828501525b50919091019291505056fea264697066735822122015c115312be7c4da69c303ae52ff7837a4f86d40e4bbab13d268187edc19211864736f6c634300080d0033"}, "abi": [{"type": "function", "name": "callSender", "stateMutability": "nonpayable", "inputs": [{"name": "data", "type": "bytes4", "internalType": "bytes4"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ReentrancyMock": {"contractName": "ReentrancyMock", "sourceId": "mocks/ReentrancyMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5060016000818155905561046c806100296000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063083b27321461005c57806361bc221a146100665780638c5344fa1461008157806396ffa69014610094578063b672ad8b146100a7575b600080fd5b6100646100ba565b005b61006f60015481565b60405190815260200160405180910390f35b61006461008f366004610336565b6100f9565b6100646100a2366004610336565b610220565b6100646100b536600461034f565b610263565b6002600054036100e55760405162461bcd60e51b81526004016100dc9061037f565b60405180910390fd5b60026000556100f261031d565b6001600055565b60026000540361011b5760405162461bcd60e51b81526004016100dc9061037f565b600260005580156102185761012e61031d565b60003061013c6001846103cc565b60405160240161014e91815260200190565b60408051601f198184030181529181526020820180516001600160e01b0316634629a27d60e11b1790525161018391906103e3565b6000604051808303816000865af19150503d80600081146101c0576040519150601f19603f3d011682016040523d82523d6000602084013e6101c5565b606091505b50509050806102165760405162461bcd60e51b815260206004820152601b60248201527f5265656e7472616e63794d6f636b3a206661696c65642063616c6c000000000060448201526064016100dc565b505b506001600055565b6002600054036102425760405162461bcd60e51b81526004016100dc9061037f565b600260005580156102185761025561031d565b6102186100a26001836103cc565b6002600054036102855760405162461bcd60e51b81526004016100dc9061037f565b600260005561029261031d565b604051630a2df1ed60e01b815263041d939960e11b60048201527f083b2732f78169bfaad6b407fa338cc97d697ed69d3915a18239cc111d51a402906001600160a01b03831690630a2df1ed90602401600060405180830381600087803b1580156102fc57600080fd5b505af1158015610310573d6000803e3d6000fd5b5050600160005550505050565b600180600082825461032f919061041e565b9091555050565b60006020828403121561034857600080fd5b5035919050565b60006020828403121561036157600080fd5b81356001600160a01b038116811461037857600080fd5b9392505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156103de576103de6103b6565b500390565b6000825160005b8181101561040457602081860181015185830152016103ea565b81811115610413576000828501525b509190910192915050565b60008219821115610431576104316103b6565b50019056fea26469706673582212208d1792d9085944e697885cc1bfc83583b3968b35b3ea2235a412746091d50ec964736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063083b27321461005c57806361bc221a146100665780638c5344fa1461008157806396ffa69014610094578063b672ad8b146100a7575b600080fd5b6100646100ba565b005b61006f60015481565b60405190815260200160405180910390f35b61006461008f366004610336565b6100f9565b6100646100a2366004610336565b610220565b6100646100b536600461034f565b610263565b6002600054036100e55760405162461bcd60e51b81526004016100dc9061037f565b60405180910390fd5b60026000556100f261031d565b6001600055565b60026000540361011b5760405162461bcd60e51b81526004016100dc9061037f565b600260005580156102185761012e61031d565b60003061013c6001846103cc565b60405160240161014e91815260200190565b60408051601f198184030181529181526020820180516001600160e01b0316634629a27d60e11b1790525161018391906103e3565b6000604051808303816000865af19150503d80600081146101c0576040519150601f19603f3d011682016040523d82523d6000602084013e6101c5565b606091505b50509050806102165760405162461bcd60e51b815260206004820152601b60248201527f5265656e7472616e63794d6f636b3a206661696c65642063616c6c000000000060448201526064016100dc565b505b506001600055565b6002600054036102425760405162461bcd60e51b81526004016100dc9061037f565b600260005580156102185761025561031d565b6102186100a26001836103cc565b6002600054036102855760405162461bcd60e51b81526004016100dc9061037f565b600260005561029261031d565b604051630a2df1ed60e01b815263041d939960e11b60048201527f083b2732f78169bfaad6b407fa338cc97d697ed69d3915a18239cc111d51a402906001600160a01b03831690630a2df1ed90602401600060405180830381600087803b1580156102fc57600080fd5b505af1158015610310573d6000803e3d6000fd5b5050600160005550505050565b600180600082825461032f919061041e565b9091555050565b60006020828403121561034857600080fd5b5035919050565b60006020828403121561036157600080fd5b81356001600160a01b038116811461037857600080fd5b9392505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156103de576103de6103b6565b500390565b6000825160005b8181101561040457602081860181015185830152016103ea565b81811115610413576000828501525b509190910192915050565b60008219821115610431576104316103b6565b50019056fea26469706673582212208d1792d9085944e697885cc1bfc83583b3968b35b3ea2235a412746091d50ec964736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": []}, {"type": "function", "name": "callback", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "countAndCall", "stateMutability": "nonpayable", "inputs": [{"name": "attacker", "type": "address", "internalType": "contract ReentrancyAttack"}], "outputs": []}, {"type": "function", "name": "countLocalRecursive", "stateMutability": "nonpayable", "inputs": [{"name": "n", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "countThisRecursive", "stateMutability": "nonpayable", "inputs": [{"name": "n", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "counter", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "Implementation1": {"contractName": "Implementation1", "sourceId": "mocks/RegressionImplementation.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5061015f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063552410771461003b5780638129fc1c14610050575b600080fd5b61004e610049366004610110565b600155565b005b61004e600054610100900460ff1661006e5760005460ff1615610072565b303b155b6100d95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff161580156100fb576000805461ffff19166101011790555b801561010d576000805461ff00191690555b50565b60006020828403121561012257600080fd5b503591905056fea2646970667358221220a0985a56a49a3ebe866318f02efc6770ba9f37c7afc7279ec4204f73b89d5eef64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063552410771461003b5780638129fc1c14610050575b600080fd5b61004e610049366004610110565b600155565b005b61004e600054610100900460ff1661006e5760005460ff1615610072565b303b155b6100d95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff161580156100fb576000805461ffff19166101011790555b801561010d576000805461ff00191690555b50565b60006020828403121561012257600080fd5b503591905056fea2646970667358221220a0985a56a49a3ebe866318f02efc6770ba9f37c7afc7279ec4204f73b89d5eef64736f6c634300080d0033"}, "abi": [{"type": "function", "name": "initialize", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "setValue", "stateMutability": "nonpayable", "inputs": [{"name": "_number", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "Implementation2": {"contractName": "Implementation2", "sourceId": "mocks/RegressionImplementation.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5061017f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632096525514610046578063552410771461005b5780638129fc1c14610070575b600080fd5b60015460405190815260200160405180910390f35b61006e610069366004610130565b600155565b005b61006e600054610100900460ff1661008e5760005460ff1615610092565b303b155b6100f95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff1615801561011b576000805461ffff19166101011790555b801561012d576000805461ff00191690555b50565b60006020828403121561014257600080fd5b503591905056fea2646970667358221220a5204dd0907c370c6d9743289cf6fe80b3376372d60d8417ab096525091aa7e864736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80632096525514610046578063552410771461005b5780638129fc1c14610070575b600080fd5b60015460405190815260200160405180910390f35b61006e610069366004610130565b600155565b005b61006e600054610100900460ff1661008e5760005460ff1615610092565b303b155b6100f95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff1615801561011b576000805461ffff19166101011790555b801561012d576000805461ff00191690555b50565b60006020828403121561014257600080fd5b503591905056fea2646970667358221220a5204dd0907c370c6d9743289cf6fe80b3376372d60d8417ab096525091aa7e864736f6c634300080d0033"}, "abi": [{"type": "function", "name": "getValue", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "initialize", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "setValue", "stateMutability": "nonpayable", "inputs": [{"name": "_number", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "Implementation3": {"contractName": "Implementation3", "sourceId": "mocks/RegressionImplementation.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506101d0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630ff4c91614610046578063552410771461006b5780638129fc1c14610080575b600080fd5b61005961005436600461015b565b610088565b60405190815260200160405180910390f35b61007e61007936600461015b565b600155565b005b61007e61009e565b6000816001546100989190610174565b92915050565b600054610100900460ff166100b95760005460ff16156100bd565b303b155b6101245760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015610146576000805461ffff19166101011790555b8015610158576000805461ff00191690555b50565b60006020828403121561016d57600080fd5b5035919050565b6000821982111561019557634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220defe1f85b1facd2a04229e0a78d49607e2a9ad6c611f50516db9ef14667c741f64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80630ff4c91614610046578063552410771461006b5780638129fc1c14610080575b600080fd5b61005961005436600461015b565b610088565b60405190815260200160405180910390f35b61007e61007936600461015b565b600155565b005b61007e61009e565b6000816001546100989190610174565b92915050565b600054610100900460ff166100b95760005460ff16156100bd565b303b155b6101245760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015610146576000805461ffff19166101011790555b8015610158576000805461ff00191690555b50565b60006020828403121561016d57600080fd5b5035919050565b6000821982111561019557634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220defe1f85b1facd2a04229e0a78d49607e2a9ad6c611f50516db9ef14667c741f64736f6c634300080d0033"}, "abi": [{"type": "function", "name": "getValue", "stateMutability": "view", "inputs": [{"name": "_number", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "initialize", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "setValue", "stateMutability": "nonpayable", "inputs": [{"name": "_number", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "Implementation4": {"contractName": "Implementation4", "sourceId": "mocks/RegressionImplementation.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50610181806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632096525514610048578063552410771461005d5780638129fc1c14610072575b6001808055005b60015460405190815260200160405180910390f35b61007061006b366004610132565b600155565b005b610070600054610100900460ff166100905760005460ff1615610094565b303b155b6100fb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff1615801561011d576000805461ffff19166101011790555b801561012f576000805461ff00191690555b50565b60006020828403121561014457600080fd5b503591905056fea26469706673582212200ea1d2e40824b38d516722179bce61036bf4ed61f4138a544d35cb6ada3969c364736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80632096525514610048578063552410771461005d5780638129fc1c14610072575b6001808055005b60015460405190815260200160405180910390f35b61007061006b366004610132565b600155565b005b610070600054610100900460ff166100905760005460ff1615610094565b303b155b6100fb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff1615801561011d576000805461ffff19166101011790555b801561012f576000805461ff00191690555b50565b60006020828403121561014457600080fd5b503591905056fea26469706673582212200ea1d2e40824b38d516722179bce61036bf4ed61f4138a544d35cb6ada3969c364736f6c634300080d0033"}, "abi": [{"type": "fallback", "stateMutability": "nonpayable"}, {"type": "function", "name": "getValue", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "initialize", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "setValue", "stateMutability": "nonpayable", "inputs": [{"name": "_number", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "SafeCastMock": {"contractName": "SafeCastMock", "sourceId": "mocks/SafeCastMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506108e0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063c81932551161008c578063dd2a031611610066578063dd2a03161461028b578063dfbe873b146102b1578063f136dc02146102d2578063fdcf791b146102f857600080fd5b8063c819325514610217578063cf65b4d31461023f578063d6bd32aa1461026557600080fd5b80635bb79860116100c85780635bb7986014610175578063809fdd33146101a05780639374068f146101cb5780639c6f59be146101f157600080fd5b80630cc4681e146100ef5780631cf887fc146101195780632665fad014610149575b600080fd5b6101026100fd366004610733565b61030b565b60405160ff90911681526020015b60405180910390f35b61012c610127366004610733565b61031c565b6040516bffffffffffffffffffffffff9091168152602001610110565b61015c610157366004610733565b610327565b60405167ffffffffffffffff9091168152602001610110565b610188610183366004610733565b610332565b6040516001600160e01b039091168152602001610110565b6101b36101ae366004610733565b61033d565b6040516001600160801b039091168152602001610110565b6101de6101d9366004610733565b610348565b60405161ffff9091168152602001610110565b6102046101ff366004610733565b610353565b60405160039190910b8152602001610110565b61022a610225366004610733565b61035e565b60405163ffffffff9091168152602001610110565b61025261024d366004610733565b610369565b60405160019190910b8152602001610110565b610278610273366004610733565b610374565b60405160079190910b8152602001610110565b61029e610299366004610733565b61037f565b604051600f9190910b8152602001610110565b6102c46102bf366004610733565b61038a565b604051908152602001610110565b6102e56102e0366004610733565b610395565b60405160009190910b8152602001610110565b6102c4610306366004610733565b6103a0565b6000610316826103ab565b92915050565b6000610316826103db565b600061031682610448565b600061031682610472565b6000610316826104db565b600061031682610504565b600061031682610528565b60006103168261055f565b600061031682610585565b6000610316826105b8565b6000610316826105f7565b600061031682610646565b6000610316826106b0565b6000610316826106e1565b600060ff8211156103d75760405162461bcd60e51b81526004016103ce9061074c565b60405180910390fd5b5090565b60006bffffffffffffffffffffffff8211156103d75760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203960448201526536206269747360d01b60648201526084016103ce565b600067ffffffffffffffff8211156103d75760405162461bcd60e51b81526004016103ce90610791565b60006001600160e01b038211156103d75760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b60648201526084016103ce565b60006001600160801b038211156103d75760405162461bcd60e51b81526004016103ce906107d7565b600061ffff8211156103d75760405162461bcd60e51b81526004016103ce9061081e565b6000637fffffff1982128015906105435750637fffffff8213155b6103d75760405162461bcd60e51b81526004016103ce90610864565b600063ffffffff8211156103d75760405162461bcd60e51b81526004016103ce90610864565b6000617fff19821280159061059c5750617fff8213155b6103d75760405162461bcd60e51b81526004016103ce9061081e565b6000677fffffffffffffff1982128015906105db5750677fffffffffffffff8213155b6103d75760405162461bcd60e51b81526004016103ce90610791565b60006f7fffffffffffffffffffffffffffffff19821280159061062a57506f7fffffffffffffffffffffffffffffff8213155b6103d75760405162461bcd60e51b81526004016103ce906107d7565b60006001600160ff1b038211156103d75760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016103ce565b6000607f1982128015906106c55750607f8213155b6103d75760405162461bcd60e51b81526004016103ce9061074c565b6000808212156103d75760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064016103ce565b60006020828403121561074557600080fd5b5035919050565b60208082526025908201527f53616665436173743a2076616c756520646f65736e27742066697420696e2038604082015264206269747360d81b606082015260800190565b60208082526026908201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660408201526534206269747360d01b606082015260800190565b60208082526027908201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316040820152663238206269747360c81b606082015260800190565b60208082526026908201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160408201526536206269747360d01b606082015260800190565b60208082526026908201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360408201526532206269747360d01b60608201526080019056fea26469706673582212209e039eac959e79e5496e1b97b97395d9766ca7eeb777da97d04f55ec7682d33364736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063c81932551161008c578063dd2a031611610066578063dd2a03161461028b578063dfbe873b146102b1578063f136dc02146102d2578063fdcf791b146102f857600080fd5b8063c819325514610217578063cf65b4d31461023f578063d6bd32aa1461026557600080fd5b80635bb79860116100c85780635bb7986014610175578063809fdd33146101a05780639374068f146101cb5780639c6f59be146101f157600080fd5b80630cc4681e146100ef5780631cf887fc146101195780632665fad014610149575b600080fd5b6101026100fd366004610733565b61030b565b60405160ff90911681526020015b60405180910390f35b61012c610127366004610733565b61031c565b6040516bffffffffffffffffffffffff9091168152602001610110565b61015c610157366004610733565b610327565b60405167ffffffffffffffff9091168152602001610110565b610188610183366004610733565b610332565b6040516001600160e01b039091168152602001610110565b6101b36101ae366004610733565b61033d565b6040516001600160801b039091168152602001610110565b6101de6101d9366004610733565b610348565b60405161ffff9091168152602001610110565b6102046101ff366004610733565b610353565b60405160039190910b8152602001610110565b61022a610225366004610733565b61035e565b60405163ffffffff9091168152602001610110565b61025261024d366004610733565b610369565b60405160019190910b8152602001610110565b610278610273366004610733565b610374565b60405160079190910b8152602001610110565b61029e610299366004610733565b61037f565b604051600f9190910b8152602001610110565b6102c46102bf366004610733565b61038a565b604051908152602001610110565b6102e56102e0366004610733565b610395565b60405160009190910b8152602001610110565b6102c4610306366004610733565b6103a0565b6000610316826103ab565b92915050565b6000610316826103db565b600061031682610448565b600061031682610472565b6000610316826104db565b600061031682610504565b600061031682610528565b60006103168261055f565b600061031682610585565b6000610316826105b8565b6000610316826105f7565b600061031682610646565b6000610316826106b0565b6000610316826106e1565b600060ff8211156103d75760405162461bcd60e51b81526004016103ce9061074c565b60405180910390fd5b5090565b60006bffffffffffffffffffffffff8211156103d75760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203960448201526536206269747360d01b60648201526084016103ce565b600067ffffffffffffffff8211156103d75760405162461bcd60e51b81526004016103ce90610791565b60006001600160e01b038211156103d75760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b60648201526084016103ce565b60006001600160801b038211156103d75760405162461bcd60e51b81526004016103ce906107d7565b600061ffff8211156103d75760405162461bcd60e51b81526004016103ce9061081e565b6000637fffffff1982128015906105435750637fffffff8213155b6103d75760405162461bcd60e51b81526004016103ce90610864565b600063ffffffff8211156103d75760405162461bcd60e51b81526004016103ce90610864565b6000617fff19821280159061059c5750617fff8213155b6103d75760405162461bcd60e51b81526004016103ce9061081e565b6000677fffffffffffffff1982128015906105db5750677fffffffffffffff8213155b6103d75760405162461bcd60e51b81526004016103ce90610791565b60006f7fffffffffffffffffffffffffffffff19821280159061062a57506f7fffffffffffffffffffffffffffffff8213155b6103d75760405162461bcd60e51b81526004016103ce906107d7565b60006001600160ff1b038211156103d75760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016103ce565b6000607f1982128015906106c55750607f8213155b6103d75760405162461bcd60e51b81526004016103ce9061074c565b6000808212156103d75760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064016103ce565b60006020828403121561074557600080fd5b5035919050565b60208082526025908201527f53616665436173743a2076616c756520646f65736e27742066697420696e2038604082015264206269747360d81b606082015260800190565b60208082526026908201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660408201526534206269747360d01b606082015260800190565b60208082526027908201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316040820152663238206269747360c81b606082015260800190565b60208082526026908201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160408201526536206269747360d01b606082015260800190565b60208082526026908201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360408201526532206269747360d01b60608201526080019056fea26469706673582212209e039eac959e79e5496e1b97b97395d9766ca7eeb777da97d04f55ec7682d33364736f6c634300080d0033"}, "abi": [{"type": "function", "name": "toInt128", "stateMutability": "pure", "inputs": [{"name": "a", "type": "int256", "internalType": "int256"}], "outputs": [{"name": "", "type": "int128", "internalType": "int128"}]}, {"type": "function", "name": "toInt16", "stateMutability": "pure", "inputs": [{"name": "a", "type": "int256", "internalType": "int256"}], "outputs": [{"name": "", "type": "int16", "internalType": "int16"}]}, {"type": "function", "name": "toInt256", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "int256", "internalType": "int256"}]}, {"type": "function", "name": "toInt32", "stateMutability": "pure", "inputs": [{"name": "a", "type": "int256", "internalType": "int256"}], "outputs": [{"name": "", "type": "int32", "internalType": "int32"}]}, {"type": "function", "name": "toInt64", "stateMutability": "pure", "inputs": [{"name": "a", "type": "int256", "internalType": "int256"}], "outputs": [{"name": "", "type": "int64", "internalType": "int64"}]}, {"type": "function", "name": "toInt8", "stateMutability": "pure", "inputs": [{"name": "a", "type": "int256", "internalType": "int256"}], "outputs": [{"name": "", "type": "int8", "internalType": "int8"}]}, {"type": "function", "name": "toUint128", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint128", "internalType": "uint128"}]}, {"type": "function", "name": "toUint16", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint16", "internalType": "uint16"}]}, {"type": "function", "name": "toUint224", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint224", "internalType": "uint224"}]}, {"type": "function", "name": "toUint256", "stateMutability": "pure", "inputs": [{"name": "a", "type": "int256", "internalType": "int256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "toUint32", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint32", "internalType": "uint32"}]}, {"type": "function", "name": "toUint64", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint64", "internalType": "uint64"}]}, {"type": "function", "name": "toUint8", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "toUint96", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint96", "internalType": "uint96"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ERC20NoReturnMock": {"contractName": "ERC20NoReturnMock", "sourceId": "mocks/SafeERC20Helper.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506101ed806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063095ea7b31461005c57806323b872dd146100755780633ba93f261461008d578063a9059cbb1461005c578063dd62ed3e146100ad575b600080fd5b61007361006a366004610105565b50506000600155565b005b61007361008336600461012f565b5050600060015550565b61007361009b36600461016b565b33600090815260208190526040902055565b6100d76100bb366004610184565b506001600160a01b031660009081526020819052604090205490565b60405190815260200160405180910390f35b80356001600160a01b038116811461010057600080fd5b919050565b6000806040838503121561011857600080fd5b610121836100e9565b946020939093013593505050565b60008060006060848603121561014457600080fd5b61014d846100e9565b925061015b602085016100e9565b9150604084013590509250925092565b60006020828403121561017d57600080fd5b5035919050565b6000806040838503121561019757600080fd5b6101a0836100e9565b91506101ae602084016100e9565b9050925092905056fea264697066735822122048effdd68726fe5d7b78d637a707a1a773fa17e75ac168b1b6e1f0fedc1ab83d64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063095ea7b31461005c57806323b872dd146100755780633ba93f261461008d578063a9059cbb1461005c578063dd62ed3e146100ad575b600080fd5b61007361006a366004610105565b50506000600155565b005b61007361008336600461012f565b5050600060015550565b61007361009b36600461016b565b33600090815260208190526040902055565b6100d76100bb366004610184565b506001600160a01b031660009081526020819052604090205490565b60405190815260200160405180910390f35b80356001600160a01b038116811461010057600080fd5b919050565b6000806040838503121561011857600080fd5b610121836100e9565b946020939093013593505050565b60008060006060848603121561014457600080fd5b61014d846100e9565b925061015b602085016100e9565b9150604084013590509250925092565b60006020828403121561017d57600080fd5b5035919050565b6000806040838503121561019757600080fd5b6101a0836100e9565b91506101ae602084016100e9565b9050925092905056fea264697066735822122048effdd68726fe5d7b78d637a707a1a773fa17e75ac168b1b6e1f0fedc1ab83d64736f6c634300080d0033"}, "abi": [{"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "setAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "allowance_", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ERC20ReturnFalseMock": {"contractName": "ERC20ReturnFalseMock", "sourceId": "mocks/SafeERC20Helper.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506101c2806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063095ea7b31461005157806323b872dd14610080578063a9059cbb14610051578063dd62ed3e1461009c575b600080fd5b61006b61005f3660046100f3565b50506000600181905590565b60405190151581526020015b60405180910390f35b61006b61008e36600461011d565b600060018190559392505050565b6100af6100aa366004610159565b6100bd565b604051908152602001610077565b60006001546000146100ce57600080fd5b50600092915050565b80356001600160a01b03811681146100ee57600080fd5b919050565b6000806040838503121561010657600080fd5b61010f836100d7565b946020939093013593505050565b60008060006060848603121561013257600080fd5b61013b846100d7565b9250610149602085016100d7565b9150604084013590509250925092565b6000806040838503121561016c57600080fd5b610175836100d7565b9150610183602084016100d7565b9050925092905056fea2646970667358221220d4fb8620fdc78c1f03e45fff6cbfc127d5623ee6f2353793dea4a285acf396cb64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063095ea7b31461005157806323b872dd14610080578063a9059cbb14610051578063dd62ed3e1461009c575b600080fd5b61006b61005f3660046100f3565b50506000600181905590565b60405190151581526020015b60405180910390f35b61006b61008e36600461011d565b600060018190559392505050565b6100af6100aa366004610159565b6100bd565b604051908152602001610077565b60006001546000146100ce57600080fd5b50600092915050565b80356001600160a01b03811681146100ee57600080fd5b919050565b6000806040838503121561010657600080fd5b61010f836100d7565b946020939093013593505050565b60008060006060848603121561013257600080fd5b61013b846100d7565b9250610149602085016100d7565b9150604084013590509250925092565b6000806040838503121561016c57600080fd5b610175836100d7565b9150610183602084016100d7565b9050925092905056fea2646970667358221220d4fb8620fdc78c1f03e45fff6cbfc127d5623ee6f2353793dea4a285acf396cb64736f6c634300080d0033"}, "abi": [{"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "ERC20ReturnTrueMock": {"contractName": "ERC20ReturnTrueMock", "sourceId": "mocks/SafeERC20Helper.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50610205806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063095ea7b31461005c57806323b872dd1461008b5780633ba93f26146100a7578063a9059cbb1461005c578063dd62ed3e146100c9575b600080fd5b61007661006a36600461011d565b50506000600190815590565b60405190151581526020015b60405180910390f35b610076610099366004610147565b600060019081559392505050565b6100c76100b5366004610183565b33600090815260208190526040902055565b005b6100f36100d736600461019c565b506001600160a01b031660009081526020819052604090205490565b604051908152602001610082565b80356001600160a01b038116811461011857600080fd5b919050565b6000806040838503121561013057600080fd5b61013983610101565b946020939093013593505050565b60008060006060848603121561015c57600080fd5b61016584610101565b925061017360208501610101565b9150604084013590509250925092565b60006020828403121561019557600080fd5b5035919050565b600080604083850312156101af57600080fd5b6101b883610101565b91506101c660208401610101565b9050925092905056fea26469706673582212209b4d84cf706fe69831deb07eeb8e4c13045c5e49ca820e8533b5fae23cc337b964736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063095ea7b31461005c57806323b872dd1461008b5780633ba93f26146100a7578063a9059cbb1461005c578063dd62ed3e146100c9575b600080fd5b61007661006a36600461011d565b50506000600190815590565b60405190151581526020015b60405180910390f35b610076610099366004610147565b600060019081559392505050565b6100c76100b5366004610183565b33600090815260208190526040902055565b005b6100f36100d736600461019c565b506001600160a01b031660009081526020819052604090205490565b604051908152602001610082565b80356001600160a01b038116811461011857600080fd5b919050565b6000806040838503121561013057600080fd5b61013983610101565b946020939093013593505050565b60008060006060848603121561015c57600080fd5b61016584610101565b925061017360208501610101565b9150604084013590509250925092565b60006020828403121561019557600080fd5b5035919050565b600080604083850312156101af57600080fd5b6101b883610101565b91506101c660208401610101565b9050925092905056fea26469706673582212209b4d84cf706fe69831deb07eeb8e4c13045c5e49ca820e8533b5fae23cc337b964736f6c634300080d0033"}, "abi": [{"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "setAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "allowance_", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "SafeERC20Wrapper": {"contractName": "SafeERC20Wrapper", "sourceId": "mocks/SafeERC20Helper.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506040516109e53803806109e583398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610952806100936000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063811c34d31161005b578063811c34d3146100bd5780638a4068dd146100c5578063b759f954146100cd578063de242ff4146100e057600080fd5b806310bad4cf1461008257806311e330b2146100975780633ba93f26146100aa575b600080fd5b610095610090366004610827565b6100fa565b005b6100956100a5366004610827565b610117565b6100956100b8366004610827565b610131565b610095610192565b6100956101af565b6100956100db366004610827565b6101c9565b6100e86101e3565b60405190815260200160405180910390f35b60008054610114916001600160a01b03909116908361025d565b50565b60008054610114916001600160a01b0390911690836103a1565b600054604051631dd49f9360e11b8152600481018390526001600160a01b0390911690633ba93f2690602401600060405180830381600087803b15801561017757600080fd5b505af115801561018b573d6000803e3d6000fd5b5050505050565b600080546101ad916001600160a01b03909116908080610459565b565b600080546101ad916001600160a01b039091169080610491565b60008054610114916001600160a01b0390911690836104c6565b60008054604051636eb1769f60e11b815260048101839052602481018390526001600160a01b039091169063dd62ed3e90604401602060405180830381865afa158015610234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102589190610840565b905090565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa1580156102ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d19190610840565b90508181101561033a5760405162461bcd60e51b815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e63652062604482015268656c6f77207a65726f60b81b60648201526084015b60405180910390fd5b6040516001600160a01b0384166024820152828203604482018190529061018b90869063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526105db565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa1580156103f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104169190610840565b6104209190610859565b6040516001600160a01b03851660248201526044810182905290915061045390859063095ea7b360e01b9060640161036a565b50505050565b6040516001600160a01b03808516602483015283166044820152606481018290526104539085906323b872dd60e01b9060840161036a565b6040516001600160a01b0383166024820152604481018290526104c190849063a9059cbb60e01b9060640161036a565b505050565b8015806105405750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561051a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053e9190610840565b155b6105ab5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610331565b6040516001600160a01b0383166024820152604481018290526104c190849063095ea7b360e01b9060640161036a565b6000610630826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166106ad9092919063ffffffff16565b8051909150156104c1578080602001905181019061064e919061087f565b6104c15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610331565b60606106bc84846000856106c6565b90505b9392505050565b6060824710156107275760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610331565b843b6107755760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610331565b600080866001600160a01b0316858760405161079191906108cd565b60006040518083038185875af1925050503d80600081146107ce576040519150601f19603f3d011682016040523d82523d6000602084013e6107d3565b606091505b50915091506107e38282866107ee565b979650505050505050565b606083156107fd5750816106bf565b82511561080d5782518084602001fd5b8160405162461bcd60e51b815260040161033191906108e9565b60006020828403121561083957600080fd5b5035919050565b60006020828403121561085257600080fd5b5051919050565b6000821982111561087a57634e487b7160e01b600052601160045260246000fd5b500190565b60006020828403121561089157600080fd5b815180151581146106bf57600080fd5b60005b838110156108bc5781810151838201526020016108a4565b838111156104535750506000910152565b600082516108df8184602087016108a1565b9190910192915050565b60208152600082518060208401526109088160408501602087016108a1565b601f01601f1916919091016040019291505056fea26469706673582212203060e252587e496dafab6a967218b3bfafaccc7312442194e084d0583bf9b59564736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063811c34d31161005b578063811c34d3146100bd5780638a4068dd146100c5578063b759f954146100cd578063de242ff4146100e057600080fd5b806310bad4cf1461008257806311e330b2146100975780633ba93f26146100aa575b600080fd5b610095610090366004610827565b6100fa565b005b6100956100a5366004610827565b610117565b6100956100b8366004610827565b610131565b610095610192565b6100956101af565b6100956100db366004610827565b6101c9565b6100e86101e3565b60405190815260200160405180910390f35b60008054610114916001600160a01b03909116908361025d565b50565b60008054610114916001600160a01b0390911690836103a1565b600054604051631dd49f9360e11b8152600481018390526001600160a01b0390911690633ba93f2690602401600060405180830381600087803b15801561017757600080fd5b505af115801561018b573d6000803e3d6000fd5b5050505050565b600080546101ad916001600160a01b03909116908080610459565b565b600080546101ad916001600160a01b039091169080610491565b60008054610114916001600160a01b0390911690836104c6565b60008054604051636eb1769f60e11b815260048101839052602481018390526001600160a01b039091169063dd62ed3e90604401602060405180830381865afa158015610234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102589190610840565b905090565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa1580156102ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d19190610840565b90508181101561033a5760405162461bcd60e51b815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e63652062604482015268656c6f77207a65726f60b81b60648201526084015b60405180910390fd5b6040516001600160a01b0384166024820152828203604482018190529061018b90869063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526105db565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa1580156103f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104169190610840565b6104209190610859565b6040516001600160a01b03851660248201526044810182905290915061045390859063095ea7b360e01b9060640161036a565b50505050565b6040516001600160a01b03808516602483015283166044820152606481018290526104539085906323b872dd60e01b9060840161036a565b6040516001600160a01b0383166024820152604481018290526104c190849063a9059cbb60e01b9060640161036a565b505050565b8015806105405750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561051a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053e9190610840565b155b6105ab5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610331565b6040516001600160a01b0383166024820152604481018290526104c190849063095ea7b360e01b9060640161036a565b6000610630826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166106ad9092919063ffffffff16565b8051909150156104c1578080602001905181019061064e919061087f565b6104c15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610331565b60606106bc84846000856106c6565b90505b9392505050565b6060824710156107275760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610331565b843b6107755760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610331565b600080866001600160a01b0316858760405161079191906108cd565b60006040518083038185875af1925050503d80600081146107ce576040519150601f19603f3d011682016040523d82523d6000602084013e6107d3565b606091505b50915091506107e38282866107ee565b979650505050505050565b606083156107fd5750816106bf565b82511561080d5782518084602001fd5b8160405162461bcd60e51b815260040161033191906108e9565b60006020828403121561083957600080fd5b5035919050565b60006020828403121561085257600080fd5b5051919050565b6000821982111561087a57634e487b7160e01b600052601160045260246000fd5b500190565b60006020828403121561089157600080fd5b815180151581146106bf57600080fd5b60005b838110156108bc5781810151838201526020016108a4565b838111156104535750506000910152565b600082516108df8184602087016108a1565b9190910192915050565b60208152600082518060208401526109088160408501602087016108a1565b601f01601f1916919091016040019291505056fea26469706673582212203060e252587e496dafab6a967218b3bfafaccc7312442194e084d0583bf9b59564736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "token", "type": "address", "internalType": "contract IERC20"}]}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "setAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "allowance_", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "SafeMathMock": {"contractName": "SafeMathMock", "sourceId": "mocks/SafeMathMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5061081b806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80639f5cec89116100a2578063dcc721d211610071578063dcc721d21461021b578063fb1191981461022e578063fb24c86014610241578063fb999ded14610249578063fc0ce5031461025157600080fd5b80639f5cec89146101da578063a155bd62146101ed578063a29962b114610200578063c460ae041461021357600080fd5b80636f91e802116100e95780636f91e80214610191578063736ecb18146101995780637e86d25c146101ac578063869f602f146101b4578063884557bf146101c757600080fd5b80633449b5fb1461011b57806338dc0867146101415780636281efa41461016b5780636c7ac6371461017e575b600080fd5b61012e6101293660046105ef565b610264565b6040519081526020015b60405180910390f35b61015461014f3660046106b3565b610279565b604080519215158352602083019190915201610138565b6101546101793660046106b3565b610292565b61012e61018c3660046106b3565b61029f565b61012e6102b2565b6101546101a73660046106b3565b6102e7565b61012e6102f4565b61012e6101c23660046106b3565b610320565b6101546101d53660046106b3565b61032c565b61012e6101e83660046105ef565b610339565b61012e6101fb3660046105ef565b610346565b61015461020e3660046106b3565b610353565b61012e610360565b61012e6102293660046106b3565b61038c565b61012e61023c3660046106b3565b610398565b61012e6103a4565b61012e6103d0565b61012e61025f3660046106b3565b6103fc565b6000610271848484610408565b949350505050565b600080610286848461044b565b915091505b9250929050565b600080610286848461047e565b60006102ab83836104c7565b9392505050565b604051602060005b818110156102de576102cd6001806104d3565b506102d7816106eb565b90506102ba565b50506040510390565b60008061028684846104df565b604051602060005b818110156102de5761030f600180610512565b50610319816106eb565b90506102fc565b60006102ab83836104d3565b600080610286848461051e565b6000610271848484610539565b6000610271848484610565565b600080610286848461059f565b604051602060005b818110156102de5761037b6001806105c1565b50610385816106eb565b9050610368565b60006102ab83836105cd565b60006102ab8383610512565b604051602060005b818110156102de576103bf6001806105cd565b506103c9816106eb565b90506103ac565b604051602060005b818110156102de576103eb6001806104c7565b506103f5816106eb565b90506103d8565b60006102ab83836105c1565b600081836104325760405162461bcd60e51b81526004016104299190610704565b60405180910390fd5b5082848161044257610442610759565b04949350505050565b600080826000036104615750600090508061028b565b600183858161047257610472610759565b06915091509250929050565b60008083600003610495575060019050600061028b565b838302838582816104a8576104a8610759565b04146104bb57600080925092505061028b565b60019590945092505050565b60006102ab828461076f565b60006102ab8284610786565b600080826000036104f55750600090508061028b565b600183858161050657610506610759565b04915091509250929050565b60006102ab828461079a565b600080838301848110156104bb57600080925092505061028b565b6000818484111561055d5760405162461bcd60e51b81526004016104299190610704565b505050900390565b600081836105865760405162461bcd60e51b81526004016104299190610704565b5082848161059657610596610759565b06949350505050565b600080838311156105b55750600090508061028b565b50600193919092039150565b60006102ab82846107b9565b60006102ab82846107cd565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561060457600080fd5b8335925060208401359150604084013567ffffffffffffffff8082111561062a57600080fd5b818601915086601f83011261063e57600080fd5b813581811115610650576106506105d9565b604051601f8201601f19908116603f01168101908382118183101715610678576106786105d9565b8160405282815289602084870101111561069157600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b600080604083850312156106c657600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b6000600182016106fd576106fd6106d5565b5060010190565b600060208083528351808285015260005b8181101561073157858101830151858201604001528201610715565b81811115610743576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052601260045260246000fd5b600082821015610781576107816106d5565b500390565b60008261079557610795610759565b500690565b60008160001904831182151516156107b4576107b46106d5565b500290565b6000826107c8576107c8610759565b500490565b600082198211156107e0576107e06106d5565b50019056fea26469706673582212205bccb7d20374a53d6141942170a538d64f1f9a187a0a7a45aa7f0eefc6316f3464736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80639f5cec89116100a2578063dcc721d211610071578063dcc721d21461021b578063fb1191981461022e578063fb24c86014610241578063fb999ded14610249578063fc0ce5031461025157600080fd5b80639f5cec89146101da578063a155bd62146101ed578063a29962b114610200578063c460ae041461021357600080fd5b80636f91e802116100e95780636f91e80214610191578063736ecb18146101995780637e86d25c146101ac578063869f602f146101b4578063884557bf146101c757600080fd5b80633449b5fb1461011b57806338dc0867146101415780636281efa41461016b5780636c7ac6371461017e575b600080fd5b61012e6101293660046105ef565b610264565b6040519081526020015b60405180910390f35b61015461014f3660046106b3565b610279565b604080519215158352602083019190915201610138565b6101546101793660046106b3565b610292565b61012e61018c3660046106b3565b61029f565b61012e6102b2565b6101546101a73660046106b3565b6102e7565b61012e6102f4565b61012e6101c23660046106b3565b610320565b6101546101d53660046106b3565b61032c565b61012e6101e83660046105ef565b610339565b61012e6101fb3660046105ef565b610346565b61015461020e3660046106b3565b610353565b61012e610360565b61012e6102293660046106b3565b61038c565b61012e61023c3660046106b3565b610398565b61012e6103a4565b61012e6103d0565b61012e61025f3660046106b3565b6103fc565b6000610271848484610408565b949350505050565b600080610286848461044b565b915091505b9250929050565b600080610286848461047e565b60006102ab83836104c7565b9392505050565b604051602060005b818110156102de576102cd6001806104d3565b506102d7816106eb565b90506102ba565b50506040510390565b60008061028684846104df565b604051602060005b818110156102de5761030f600180610512565b50610319816106eb565b90506102fc565b60006102ab83836104d3565b600080610286848461051e565b6000610271848484610539565b6000610271848484610565565b600080610286848461059f565b604051602060005b818110156102de5761037b6001806105c1565b50610385816106eb565b9050610368565b60006102ab83836105cd565b60006102ab8383610512565b604051602060005b818110156102de576103bf6001806105cd565b506103c9816106eb565b90506103ac565b604051602060005b818110156102de576103eb6001806104c7565b506103f5816106eb565b90506103d8565b60006102ab83836105c1565b600081836104325760405162461bcd60e51b81526004016104299190610704565b60405180910390fd5b5082848161044257610442610759565b04949350505050565b600080826000036104615750600090508061028b565b600183858161047257610472610759565b06915091509250929050565b60008083600003610495575060019050600061028b565b838302838582816104a8576104a8610759565b04146104bb57600080925092505061028b565b60019590945092505050565b60006102ab828461076f565b60006102ab8284610786565b600080826000036104f55750600090508061028b565b600183858161050657610506610759565b04915091509250929050565b60006102ab828461079a565b600080838301848110156104bb57600080925092505061028b565b6000818484111561055d5760405162461bcd60e51b81526004016104299190610704565b505050900390565b600081836105865760405162461bcd60e51b81526004016104299190610704565b5082848161059657610596610759565b06949350505050565b600080838311156105b55750600090508061028b565b50600193919092039150565b60006102ab82846107b9565b60006102ab82846107cd565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561060457600080fd5b8335925060208401359150604084013567ffffffffffffffff8082111561062a57600080fd5b818601915086601f83011261063e57600080fd5b813581811115610650576106506105d9565b604051601f8201601f19908116603f01168101908382118183101715610678576106786105d9565b8160405282815289602084870101111561069157600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b600080604083850312156106c657600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b6000600182016106fd576106fd6106d5565b5060010190565b600060208083528351808285015260005b8181101561073157858101830151858201604001528201610715565b81811115610743576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052601260045260246000fd5b600082821015610781576107816106d5565b500390565b60008261079557610795610759565b500690565b60008160001904831182151516156107b4576107b46106d5565b500290565b6000826107c8576107c8610759565b500490565b600082198211156107e0576107e06106d5565b50019056fea26469706673582212205bccb7d20374a53d6141942170a538d64f1f9a187a0a7a45aa7f0eefc6316f3464736f6c634300080d0033"}, "abi": [{"type": "function", "name": "addMemoryCheck", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "mem", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "divMemoryCheck", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "mem", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "divWithMessage", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}, {"name": "errorMessage", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "doAdd", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "doDiv", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "doMod", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "doMul", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "doSub", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "modMemoryCheck", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "mem", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "modWithMessage", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}, {"name": "errorMessage", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "mulMemoryCheck", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "mem", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "subMemoryCheck", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "mem", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "subWithMessage", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}, {"name": "errorMessage", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tryAdd", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "flag", "type": "bool", "internalType": "bool"}, {"name": "value", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tryDiv", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "flag", "type": "bool", "internalType": "bool"}, {"name": "value", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tryMod", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "flag", "type": "bool", "internalType": "bool"}, {"name": "value", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tryMul", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "flag", "type": "bool", "internalType": "bool"}, {"name": "value", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "trySub", "stateMutability": "pure", "inputs": [{"name": "a", "type": "uint256", "internalType": "uint256"}, {"name": "b", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "flag", "type": "bool", "internalType": "bool"}, {"name": "value", "type": "uint256", "internalType": "uint256"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "SignatureCheckerMock": {"contractName": "SignatureCheckerMock", "sourceId": "mocks/SignatureCheckerMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50610538806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636ccea65214610030575b600080fd5b61004361003e366004610363565b610057565b604051901515815260200160405180910390f35b600061006d6001600160a01b0385168484610077565b90505b9392505050565b600080600061008685856101c3565b9092509050600081600481111561009f5761009f61043c565b1480156100bd5750856001600160a01b0316826001600160a01b0316145b156100cd57600192505050610070565b600080876001600160a01b0316631626ba7e60e01b88886040516024016100f5929190610482565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161013391906104bc565b600060405180830381855afa9150503d806000811461016e576040519150601f19603f3d011682016040523d82523d6000602084013e610173565b606091505b5091509150818015610186575080516020145b80156101b757508051630b135d3f60e11b906101ab90830160209081019084016104d8565b6001600160e01b031916145b98975050505050505050565b60008082516041036101f95760208301516040840151606085015160001a6101ed87828585610231565b9450945050505061022a565b8251604003610222576020830151604084015161021786838361031e565b93509350505061022a565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156102685750600090506003610315565b8460ff16601b1415801561028057508460ff16601c14155b156102915750600090506004610315565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156102e5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661030e57600060019250925050610315565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161033f87828885610231565b935093505050935093915050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561037857600080fd5b83356001600160a01b038116811461038f57600080fd5b925060208401359150604084013567ffffffffffffffff808211156103b357600080fd5b818601915086601f8301126103c757600080fd5b8135818111156103d9576103d961034d565b604051601f8201601f19908116603f011681019083821181831017156104015761040161034d565b8160405282815289602084870101111561041a57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b634e487b7160e01b600052602160045260246000fd5b60005b8381101561046d578181015183820152602001610455565b8381111561047c576000848401525b50505050565b82815260406020820152600082518060408401526104a7816060850160208701610452565b601f01601f1916919091016060019392505050565b600082516104ce818460208701610452565b9190910192915050565b6000602082840312156104ea57600080fd5b81516001600160e01b03198116811461007057600080fdfea26469706673582212206c699aab059e3ce83fe59812a094d1cf2943e84d8da085f59c88a6bf5cc209aa64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80636ccea65214610030575b600080fd5b61004361003e366004610363565b610057565b604051901515815260200160405180910390f35b600061006d6001600160a01b0385168484610077565b90505b9392505050565b600080600061008685856101c3565b9092509050600081600481111561009f5761009f61043c565b1480156100bd5750856001600160a01b0316826001600160a01b0316145b156100cd57600192505050610070565b600080876001600160a01b0316631626ba7e60e01b88886040516024016100f5929190610482565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161013391906104bc565b600060405180830381855afa9150503d806000811461016e576040519150601f19603f3d011682016040523d82523d6000602084013e610173565b606091505b5091509150818015610186575080516020145b80156101b757508051630b135d3f60e11b906101ab90830160209081019084016104d8565b6001600160e01b031916145b98975050505050505050565b60008082516041036101f95760208301516040840151606085015160001a6101ed87828585610231565b9450945050505061022a565b8251604003610222576020830151604084015161021786838361031e565b93509350505061022a565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156102685750600090506003610315565b8460ff16601b1415801561028057508460ff16601c14155b156102915750600090506004610315565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156102e5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661030e57600060019250925050610315565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161033f87828885610231565b935093505050935093915050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561037857600080fd5b83356001600160a01b038116811461038f57600080fd5b925060208401359150604084013567ffffffffffffffff808211156103b357600080fd5b818601915086601f8301126103c757600080fd5b8135818111156103d9576103d961034d565b604051601f8201601f19908116603f011681019083821181831017156104015761040161034d565b8160405282815289602084870101111561041a57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b634e487b7160e01b600052602160045260246000fd5b60005b8381101561046d578181015183820152602001610455565b8381111561047c576000848401525b50505050565b82815260406020820152600082518060408401526104a7816060850160208701610452565b601f01601f1916919091016060019392505050565b600082516104ce818460208701610452565b9190910192915050565b6000602082840312156104ea57600080fd5b81516001600160e01b03198116811461007057600080fdfea26469706673582212206c699aab059e3ce83fe59812a094d1cf2943e84d8da085f59c88a6bf5cc209aa64736f6c634300080d0033"}, "abi": [{"type": "function", "name": "isValidSignatureNow", "stateMutability": "view", "inputs": [{"name": "signer", "type": "address", "internalType": "address"}, {"name": "hash", "type": "bytes32", "internalType": "bytes32"}, {"name": "signature", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "SignedSafeMathMock": {"contractName": "SignedSafeMathMock", "sourceId": "mocks/SignedSafeMathMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506102c5806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634350913814610051578063a5f3c23b14610076578063adefc37b14610089578063bbe93d911461009c575b600080fd5b61006461005f366004610116565b6100af565b60405190815260200160405180910390f35b610064610084366004610116565b6100c2565b610064610097366004610116565b6100ce565b6100646100aa366004610116565b6100da565b60006100bb83836100e6565b9392505050565b60006100bb83836100f2565b60006100bb83836100fe565b60006100bb838361010a565b60006100bb828461014e565b60006100bb828461018a565b60006100bb82846101cb565b60006100bb828461020a565b6000806040838503121561012957600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b60008261016b57634e487b7160e01b600052601260045260246000fd5b600160ff1b82146000198414161561018557610185610138565b500590565b600080821280156001600160ff1b03849003851316156101ac576101ac610138565b600160ff1b83900384128116156101c5576101c5610138565b50500190565b60008083128015600160ff1b8501841216156101e9576101e9610138565b6001600160ff1b038401831381161561020457610204610138565b50500390565b60006001600160ff1b038184138284138082168684048611161561023057610230610138565b600160ff1b600087128281168783058912161561024f5761024f610138565b6000871292508782058712848416161561026b5761026b610138565b8785058712818416161561028157610281610138565b50505092909302939250505056fea2646970667358221220b68d9729e6bcf5eb574b777742c3cbc5f385cd4e817461bfd661f3b7a2a8526164736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80634350913814610051578063a5f3c23b14610076578063adefc37b14610089578063bbe93d911461009c575b600080fd5b61006461005f366004610116565b6100af565b60405190815260200160405180910390f35b610064610084366004610116565b6100c2565b610064610097366004610116565b6100ce565b6100646100aa366004610116565b6100da565b60006100bb83836100e6565b9392505050565b60006100bb83836100f2565b60006100bb83836100fe565b60006100bb838361010a565b60006100bb828461014e565b60006100bb828461018a565b60006100bb82846101cb565b60006100bb828461020a565b6000806040838503121561012957600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b60008261016b57634e487b7160e01b600052601260045260246000fd5b600160ff1b82146000198414161561018557610185610138565b500590565b600080821280156001600160ff1b03849003851316156101ac576101ac610138565b600160ff1b83900384128116156101c5576101c5610138565b50500190565b60008083128015600160ff1b8501841216156101e9576101e9610138565b6001600160ff1b038401831381161561020457610204610138565b50500390565b60006001600160ff1b038184138284138082168684048611161561023057610230610138565b600160ff1b600087128281168783058912161561024f5761024f610138565b6000871292508782058712848416161561026b5761026b610138565b8785058712818416161561028157610281610138565b50505092909302939250505056fea2646970667358221220b68d9729e6bcf5eb574b777742c3cbc5f385cd4e817461bfd661f3b7a2a8526164736f6c634300080d0033"}, "abi": [{"type": "function", "name": "add", "stateMutability": "pure", "inputs": [{"name": "a", "type": "int256", "internalType": "int256"}, {"name": "b", "type": "int256", "internalType": "int256"}], "outputs": [{"name": "", "type": "int256", "internalType": "int256"}]}, {"type": "function", "name": "div", "stateMutability": "pure", "inputs": [{"name": "a", "type": "int256", "internalType": "int256"}, {"name": "b", "type": "int256", "internalType": "int256"}], "outputs": [{"name": "", "type": "int256", "internalType": "int256"}]}, {"type": "function", "name": "mul", "stateMutability": "pure", "inputs": [{"name": "a", "type": "int256", "internalType": "int256"}, {"name": "b", "type": "int256", "internalType": "int256"}], "outputs": [{"name": "", "type": "int256", "internalType": "int256"}]}, {"type": "function", "name": "sub", "stateMutability": "pure", "inputs": [{"name": "a", "type": "int256", "internalType": "int256"}, {"name": "b", "type": "int256", "internalType": "int256"}], "outputs": [{"name": "", "type": "int256", "internalType": "int256"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "MigratableMockV1": {"contractName": "MigratableMockV1", "sourceId": "mocks/SingleInheritanceInitializableMocks.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5061017d806100206000396000f3fe6080604052600436106100295760003560e01c80630c55699c1461002e578063fe4b84df14610056575b600080fd5b34801561003a57600080fd5b5061004460015481565b60405190815260200160405180910390f35b61006961006436600461012e565b61006b565b005b600054610100900460ff166100865760005460ff161561008a565b303b155b6100f15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015610113576000805461ffff19166101011790555b6001829055801561012a576000805461ff00191690555b5050565b60006020828403121561014057600080fd5b503591905056fea2646970667358221220d687729800b44f09412c9c1bb24b64245398abc706ff7e928b109aba096cbe3364736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052600436106100295760003560e01c80630c55699c1461002e578063fe4b84df14610056575b600080fd5b34801561003a57600080fd5b5061004460015481565b60405190815260200160405180910390f35b61006961006436600461012e565b61006b565b005b600054610100900460ff166100865760005460ff161561008a565b303b155b6100f15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015610113576000805461ffff19166101011790555b6001829055801561012a576000805461ff00191690555b5050565b60006020828403121561014057600080fd5b503591905056fea2646970667358221220d687729800b44f09412c9c1bb24b64245398abc706ff7e928b109aba096cbe3364736f6c634300080d0033"}, "abi": [{"type": "function", "name": "initialize", "stateMutability": "payable", "inputs": [{"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "x", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "This contract is a mock to test initializable functionality through migrations", "kind": "dev", "methods": {}, "title": "MigratableMockV1", "version": 1}}, "MigratableMockV2": {"contractName": "MigratableMockV2", "sourceId": "mocks/SingleInheritanceInitializableMocks.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50610205806100206000396000f3fe60806040526004361061003f5760003560e01c80630c55699c146100445780633e54bacb1461006c578063a56dfe4a14610081578063fe4b84df14610097575b600080fd5b34801561005057600080fd5b5061005a60015481565b60405190815260200160405180910390f35b61007f61007a366004610194565b6100aa565b005b34801561008d57600080fd5b5061005a60035481565b61007f6100a53660046101b6565b6100d1565b60025460ff16156100ba57600080fd5b60019182556003556002805460ff19169091179055565b600054610100900460ff166100ec5760005460ff16156100f0565b303b155b6101575760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015610179576000805461ffff19166101011790555b60018290558015610190576000805461ff00191690555b5050565b600080604083850312156101a757600080fd5b50508035926020909101359150565b6000602082840312156101c857600080fd5b503591905056fea2646970667358221220fe75a6a8dca4b87526ac90e9cb9f9e807ccb1e7b49abb32a3dd9ceaaded1d52f64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x60806040526004361061003f5760003560e01c80630c55699c146100445780633e54bacb1461006c578063a56dfe4a14610081578063fe4b84df14610097575b600080fd5b34801561005057600080fd5b5061005a60015481565b60405190815260200160405180910390f35b61007f61007a366004610194565b6100aa565b005b34801561008d57600080fd5b5061005a60035481565b61007f6100a53660046101b6565b6100d1565b60025460ff16156100ba57600080fd5b60019182556003556002805460ff19169091179055565b600054610100900460ff166100ec5760005460ff16156100f0565b303b155b6101575760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015610179576000805461ffff19166101011790555b60018290558015610190576000805461ff00191690555b5050565b600080604083850312156101a757600080fd5b50508035926020909101359150565b6000602082840312156101c857600080fd5b503591905056fea2646970667358221220fe75a6a8dca4b87526ac90e9cb9f9e807ccb1e7b49abb32a3dd9ceaaded1d52f64736f6c634300080d0033"}, "abi": [{"type": "function", "name": "initialize", "stateMutability": "payable", "inputs": [{"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "migrate", "stateMutability": "payable", "inputs": [{"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "anotherValue", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "x", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "y", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "This contract is a mock to test migratable functionality with params", "kind": "dev", "methods": {}, "title": "MigratableMockV2", "version": 1}}, "MigratableMockV3": {"contractName": "MigratableMockV3", "sourceId": "mocks/SingleInheritanceInitializableMocks.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50610242806100206000396000f3fe60806040526004361061004a5760003560e01c80630c55699c1461004f5780633e54bacb146100775780638fd3ab801461008c578063a56dfe4a14610094578063fe4b84df146100aa575b600080fd5b34801561005b57600080fd5b5061006560015481565b60405190815260200160405180910390f35b61008a6100853660046101d1565b6100bd565b005b61008a6100e4565b3480156100a057600080fd5b5061006560035481565b61008a6100b83660046101f3565b61010e565b60025460ff16156100cd57600080fd5b60019182556003556002805460ff19169091179055565b60045460ff16156100f457600080fd5b60018054600380548355556004805460ff19169091179055565b600054610100900460ff166101295760005460ff161561012d565b303b155b6101945760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff161580156101b6576000805461ffff19166101011790555b600182905580156101cd576000805461ff00191690555b5050565b600080604083850312156101e457600080fd5b50508035926020909101359150565b60006020828403121561020557600080fd5b503591905056fea26469706673582212200a37ff6269d8f024ba472efa4ac7d7871cc74b030c65a499f511e61afd49b32564736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x60806040526004361061004a5760003560e01c80630c55699c1461004f5780633e54bacb146100775780638fd3ab801461008c578063a56dfe4a14610094578063fe4b84df146100aa575b600080fd5b34801561005b57600080fd5b5061006560015481565b60405190815260200160405180910390f35b61008a6100853660046101d1565b6100bd565b005b61008a6100e4565b3480156100a057600080fd5b5061006560035481565b61008a6100b83660046101f3565b61010e565b60025460ff16156100cd57600080fd5b60019182556003556002805460ff19169091179055565b60045460ff16156100f457600080fd5b60018054600380548355556004805460ff19169091179055565b600054610100900460ff166101295760005460ff161561012d565b303b155b6101945760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff161580156101b6576000805461ffff19166101011790555b600182905580156101cd576000805461ff00191690555b5050565b600080604083850312156101e457600080fd5b50508035926020909101359150565b60006020828403121561020557600080fd5b503591905056fea26469706673582212200a37ff6269d8f024ba472efa4ac7d7871cc74b030c65a499f511e61afd49b32564736f6c634300080d0033"}, "abi": [{"type": "function", "name": "initialize", "stateMutability": "payable", "inputs": [{"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "migrate", "stateMutability": "payable", "inputs": [{"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "anotherValue", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "migrate", "stateMutability": "payable", "inputs": [], "outputs": []}, {"type": "function", "name": "x", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "y", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "This contract is a mock to test migratable functionality without params", "kind": "dev", "methods": {}, "title": "MigratableMockV3", "version": 1}}, "StorageSlotMock": {"contractName": "StorageSlotMock", "sourceId": "mocks/StorageSlotMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5061023c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80634f3029c21161005b5780634f3029c21461010a578063a6ed563e146100c5578063ca446dd91461011e578063f8715b3e1461014957600080fd5b806321f8a7211461008d57806333598b00146100c55780633848207a146100e55780634e91db081461010a575b600080fd5b6100a861009b366004610165565b546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d76100d3366004610165565b5490565b6040519081526020016100bc565b6100fa6100f3366004610165565b5460ff1690565b60405190151581526020016100bc565b61011c61011836600461017e565b9055565b005b61011c61012c3660046101a0565b81546001600160a01b0319166001600160a01b0391909116179055565b61011c6101573660046101dc565b815460ff1916901515179055565b60006020828403121561017757600080fd5b5035919050565b6000806040838503121561019157600080fd5b50508035926020909101359150565b600080604083850312156101b357600080fd5b8235915060208301356001600160a01b03811681146101d157600080fd5b809150509250929050565b600080604083850312156101ef57600080fd5b82359150602083013580151581146101d157600080fdfea264697066735822122091b937c51e3b71b6f51171ece54274027b50f86b394ce0a0d06ff8dc2cf80af764736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80634f3029c21161005b5780634f3029c21461010a578063a6ed563e146100c5578063ca446dd91461011e578063f8715b3e1461014957600080fd5b806321f8a7211461008d57806333598b00146100c55780633848207a146100e55780634e91db081461010a575b600080fd5b6100a861009b366004610165565b546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d76100d3366004610165565b5490565b6040519081526020016100bc565b6100fa6100f3366004610165565b5460ff1690565b60405190151581526020016100bc565b61011c61011836600461017e565b9055565b005b61011c61012c3660046101a0565b81546001600160a01b0319166001600160a01b0391909116179055565b61011c6101573660046101dc565b815460ff1916901515179055565b60006020828403121561017757600080fd5b5035919050565b6000806040838503121561019157600080fd5b50508035926020909101359150565b600080604083850312156101b357600080fd5b8235915060208301356001600160a01b03811681146101d157600080fd5b809150509250929050565b600080604083850312156101ef57600080fd5b82359150602083013580151581146101d157600080fdfea264697066735822122091b937c51e3b71b6f51171ece54274027b50f86b394ce0a0d06ff8dc2cf80af764736f6c634300080d0033"}, "abi": [{"type": "function", "name": "getAddress", "stateMutability": "view", "inputs": [{"name": "slot", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getBoolean", "stateMutability": "view", "inputs": [{"name": "slot", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "getBytes32", "stateMutability": "view", "inputs": [{"name": "slot", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "getUint256", "stateMutability": "view", "inputs": [{"name": "slot", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "setAddress", "stateMutability": "nonpayable", "inputs": [{"name": "slot", "type": "bytes32", "internalType": "bytes32"}, {"name": "value", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "setBoolean", "stateMutability": "nonpayable", "inputs": [{"name": "slot", "type": "bytes32", "internalType": "bytes32"}, {"name": "value", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "setBytes32", "stateMutability": "nonpayable", "inputs": [{"name": "slot", "type": "bytes32", "internalType": "bytes32"}, {"name": "value", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "setUint256", "stateMutability": "nonpayable", "inputs": [{"name": "slot", "type": "bytes32", "internalType": "bytes32"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "StringsMock": {"contractName": "StringsMock", "sourceId": "mocks/StringsMock.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50610588806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806302c5b75f1461004657806392b0ed1a1461006f578063a2bd364414610082575b600080fd5b6100596100543660046103c4565b610095565b60405161006691906103dd565b60405180910390f35b61005961007d366004610432565b6100a6565b6100596100903660046103c4565b6100b9565b60606100a0826100c4565b92915050565b60606100b28383610123565b9392505050565b60606100a0826102c3565b6060816000036100ee5750506040805180820190915260048152630307830360e41b602082015290565b8160005b811561011157806101028161046a565b915050600882901c91506100f2565b61011b8482610123565b949350505050565b60606000610132836002610483565b61013d9060026104a2565b67ffffffffffffffff811115610155576101556104ba565b6040519080825280601f01601f19166020018201604052801561017f576020820181803683370190505b509050600360fc1b8160008151811061019a5761019a6104d0565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106101c9576101c96104d0565b60200101906001600160f81b031916908160001a90535060006101ed846002610483565b6101f89060016104a2565b90505b6001811115610270576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061022c5761022c6104d0565b1a60f81b828281518110610242576102426104d0565b60200101906001600160f81b031916908160001a90535060049490941c93610269816104e6565b90506101fb565b5083156100b25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640160405180910390fd5b6060816000036102ea5750506040805180820190915260018152600360fc1b602082015290565b8160005b811561031457806102fe8161046a565b915061030d9050600a83610513565b91506102ee565b60008167ffffffffffffffff81111561032f5761032f6104ba565b6040519080825280601f01601f191660200182016040528015610359576020820181803683370190505b5090505b841561011b5761036e600183610527565b915061037b600a8661053e565b6103869060306104a2565b60f81b81838151811061039b5761039b6104d0565b60200101906001600160f81b031916908160001a9053506103bd600a86610513565b945061035d565b6000602082840312156103d657600080fd5b5035919050565b600060208083528351808285015260005b8181101561040a578581018301518582016040015282016103ee565b8181111561041c576000604083870101525b50601f01601f1916929092016040019392505050565b6000806040838503121561044557600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b60006001820161047c5761047c610454565b5060010190565b600081600019048311821515161561049d5761049d610454565b500290565b600082198211156104b5576104b5610454565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000816104f5576104f5610454565b506000190190565b634e487b7160e01b600052601260045260246000fd5b600082610522576105226104fd565b500490565b60008282101561053957610539610454565b500390565b60008261054d5761054d6104fd565b50069056fea2646970667358221220ae3412b609be8a271e8d8bc07d27bd1700abf49931b2518b6e665c4effde7fc664736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806302c5b75f1461004657806392b0ed1a1461006f578063a2bd364414610082575b600080fd5b6100596100543660046103c4565b610095565b60405161006691906103dd565b60405180910390f35b61005961007d366004610432565b6100a6565b6100596100903660046103c4565b6100b9565b60606100a0826100c4565b92915050565b60606100b28383610123565b9392505050565b60606100a0826102c3565b6060816000036100ee5750506040805180820190915260048152630307830360e41b602082015290565b8160005b811561011157806101028161046a565b915050600882901c91506100f2565b61011b8482610123565b949350505050565b60606000610132836002610483565b61013d9060026104a2565b67ffffffffffffffff811115610155576101556104ba565b6040519080825280601f01601f19166020018201604052801561017f576020820181803683370190505b509050600360fc1b8160008151811061019a5761019a6104d0565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106101c9576101c96104d0565b60200101906001600160f81b031916908160001a90535060006101ed846002610483565b6101f89060016104a2565b90505b6001811115610270576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061022c5761022c6104d0565b1a60f81b828281518110610242576102426104d0565b60200101906001600160f81b031916908160001a90535060049490941c93610269816104e6565b90506101fb565b5083156100b25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640160405180910390fd5b6060816000036102ea5750506040805180820190915260018152600360fc1b602082015290565b8160005b811561031457806102fe8161046a565b915061030d9050600a83610513565b91506102ee565b60008167ffffffffffffffff81111561032f5761032f6104ba565b6040519080825280601f01601f191660200182016040528015610359576020820181803683370190505b5090505b841561011b5761036e600183610527565b915061037b600a8661053e565b6103869060306104a2565b60f81b81838151811061039b5761039b6104d0565b60200101906001600160f81b031916908160001a9053506103bd600a86610513565b945061035d565b6000602082840312156103d657600080fd5b5035919050565b600060208083528351808285015260005b8181101561040a578581018301518582016040015282016103ee565b8181111561041c576000604083870101525b50601f01601f1916929092016040019392505050565b6000806040838503121561044557600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b60006001820161047c5761047c610454565b5060010190565b600081600019048311821515161561049d5761049d610454565b500290565b600082198211156104b5576104b5610454565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000816104f5576104f5610454565b506000190190565b634e487b7160e01b600052601260045260246000fd5b600082610522576105226104fd565b500490565b60008282101561053957610539610454565b500390565b60008261054d5761054d6104fd565b50069056fea2646970667358221220ae3412b609be8a271e8d8bc07d27bd1700abf49931b2518b6e665c4effde7fc664736f6c634300080d0033"}, "abi": [{"type": "function", "name": "fromUint256", "stateMutability": "pure", "inputs": [{"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "fromUint256Hex", "stateMutability": "pure", "inputs": [{"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "fromUint256HexFixed", "stateMutability": "pure", "inputs": [{"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "length", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "TimersBlockNumberImpl": {"contractName": "TimersBlockNumberImpl", "sourceId": "mocks/TimersBlockNumberImpl.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50610243806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80635f8d96de1161005b5780635f8d96de146100e05780639c30ad7e14610107578063aebc04831461012a578063d826f88f1461015c57600080fd5b80632260fe3a146100825780632f13b60c146100b5578063544736e6146100bd575b600080fd5b604080516020810190915260005467ffffffffffffffff1690819052155b60405190151581526020015b60405180910390f35b6100a0610169565b604080516020810190915260005467ffffffffffffffff169081905215156100a0565b604080516020808201835260005467ffffffffffffffff16918290529151908152016100ac565b604080516020810190915260005467ffffffffffffffff169081905243106100a0565b61015a6101383660046101dc565b6000805467ffffffffffffffff831667ffffffffffffffff1990911617905550565b005b61015a61018e565b905090565b60408051602081019091526000805467ffffffffffffffff16825290610164906101a6565b6101a46000805467ffffffffffffffff19169055565b565b60006101bc825167ffffffffffffffff16151590565b80156101d6575043826000015167ffffffffffffffff1611155b92915050565b6000602082840312156101ee57600080fd5b813567ffffffffffffffff8116811461020657600080fd5b939250505056fea2646970667358221220c69f6812755dfaffcfd7a7e1398e411bfd8657e09410c09075f5d5764aaaa00864736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80635f8d96de1161005b5780635f8d96de146100e05780639c30ad7e14610107578063aebc04831461012a578063d826f88f1461015c57600080fd5b80632260fe3a146100825780632f13b60c146100b5578063544736e6146100bd575b600080fd5b604080516020810190915260005467ffffffffffffffff1690819052155b60405190151581526020015b60405180910390f35b6100a0610169565b604080516020810190915260005467ffffffffffffffff169081905215156100a0565b604080516020808201835260005467ffffffffffffffff16918290529151908152016100ac565b604080516020810190915260005467ffffffffffffffff169081905243106100a0565b61015a6101383660046101dc565b6000805467ffffffffffffffff831667ffffffffffffffff1990911617905550565b005b61015a61018e565b905090565b60408051602081019091526000805467ffffffffffffffff16825290610164906101a6565b6101a46000805467ffffffffffffffff19169055565b565b60006101bc825167ffffffffffffffff16151590565b80156101d6575043826000015167ffffffffffffffff1611155b92915050565b6000602082840312156101ee57600080fd5b813567ffffffffffffffff8116811461020657600080fd5b939250505056fea2646970667358221220c69f6812755dfaffcfd7a7e1398e411bfd8657e09410c09075f5d5764aaaa00864736f6c634300080d0033"}, "abi": [{"type": "function", "name": "getDeadline", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint64", "internalType": "uint64"}]}, {"type": "function", "name": "isExpired", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "isPending", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "isStarted", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "isUnset", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "reset", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "setDeadline", "stateMutability": "nonpayable", "inputs": [{"name": "timestamp", "type": "uint64", "internalType": "uint64"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "TimersTimestampImpl": {"contractName": "TimersTimestampImpl", "sourceId": "mocks/TimersTimestampImpl.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50610243806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80635f8d96de1161005b5780635f8d96de146100e05780639c30ad7e14610107578063aebc04831461012a578063d826f88f1461015c57600080fd5b80632260fe3a146100825780632f13b60c146100b5578063544736e6146100bd575b600080fd5b604080516020810190915260005467ffffffffffffffff1690819052155b60405190151581526020015b60405180910390f35b6100a0610169565b604080516020810190915260005467ffffffffffffffff169081905215156100a0565b604080516020808201835260005467ffffffffffffffff16918290529151908152016100ac565b604080516020810190915260005467ffffffffffffffff169081905242106100a0565b61015a6101383660046101dc565b6000805467ffffffffffffffff831667ffffffffffffffff1990911617905550565b005b61015a61018e565b905090565b60408051602081019091526000805467ffffffffffffffff16825290610164906101a6565b6101a46000805467ffffffffffffffff19169055565b565b60006101bc825167ffffffffffffffff16151590565b80156101d6575042826000015167ffffffffffffffff1611155b92915050565b6000602082840312156101ee57600080fd5b813567ffffffffffffffff8116811461020657600080fd5b939250505056fea2646970667358221220d887e86429eb0d89599f9c1609f7ff3ff34e664f21884e279b3827d98745c9b064736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80635f8d96de1161005b5780635f8d96de146100e05780639c30ad7e14610107578063aebc04831461012a578063d826f88f1461015c57600080fd5b80632260fe3a146100825780632f13b60c146100b5578063544736e6146100bd575b600080fd5b604080516020810190915260005467ffffffffffffffff1690819052155b60405190151581526020015b60405180910390f35b6100a0610169565b604080516020810190915260005467ffffffffffffffff169081905215156100a0565b604080516020808201835260005467ffffffffffffffff16918290529151908152016100ac565b604080516020810190915260005467ffffffffffffffff169081905242106100a0565b61015a6101383660046101dc565b6000805467ffffffffffffffff831667ffffffffffffffff1990911617905550565b005b61015a61018e565b905090565b60408051602081019091526000805467ffffffffffffffff16825290610164906101a6565b6101a46000805467ffffffffffffffff19169055565b565b60006101bc825167ffffffffffffffff16151590565b80156101d6575042826000015167ffffffffffffffff1611155b92915050565b6000602082840312156101ee57600080fd5b813567ffffffffffffffff8116811461020657600080fd5b939250505056fea2646970667358221220d887e86429eb0d89599f9c1609f7ff3ff34e664f21884e279b3827d98745c9b064736f6c634300080d0033"}, "abi": [{"type": "function", "name": "getDeadline", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint64", "internalType": "uint64"}]}, {"type": "function", "name": "isExpired", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "isPending", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "isStarted", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "isUnset", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "reset", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "setDeadline", "stateMutability": "nonpayable", "inputs": [{"name": "timestamp", "type": "uint64", "internalType": "uint64"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "UUPSUpgradeableBrokenMock": {"contractName": "UUPSUpgradeableBrokenMock", "sourceId": "mocks/UUPS/TestInProd.sol", "deploymentBytecode": {"bytecode": "0x60a06040523060805234801561001457600080fd5b506080516102b761002d600039600050506102b76000f3fe6080604052600436106100555760003560e01c80632baeceb71461005a5780633659cfe6146100715780634f1ef2861461008f5780639fa6a6e3146100a1578063d09de08a146100c3578063d826f88f146100d8575b600080fd5b34801561006657600080fd5b5061006f6100ed565b005b34801561007d57600080fd5b5061006f61008c366004610187565b50565b61006f61009d3660046101bf565b5050565b3480156100ad57600080fd5b5060005460405190815260200160405180910390f35b3480156100cf57600080fd5b5061006f6100f9565b3480156100e457600080fd5b5061006f610107565b6100f76000610110565b565b6100f7600080546001019055565b6100f760008055565b8054806101635760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f770000000000604482015260640160405180910390fd5b600019019055565b80356001600160a01b038116811461018257600080fd5b919050565b60006020828403121561019957600080fd5b6101a28261016b565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156101d257600080fd5b6101db8361016b565b9150602083013567ffffffffffffffff808211156101f857600080fd5b818501915085601f83011261020c57600080fd5b81358181111561021e5761021e6101a9565b604051601f8201601f19908116603f01168101908382118183101715610246576102466101a9565b8160405282815288602084870101111561025f57600080fd5b826020860160208301376000602084830101528095505050505050925092905056fea2646970667358221220a5079459a2ebbaa9a64e5d40c3aba61f8ef8118ecff9cefb39b3e93d2b76129864736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052600436106100555760003560e01c80632baeceb71461005a5780633659cfe6146100715780634f1ef2861461008f5780639fa6a6e3146100a1578063d09de08a146100c3578063d826f88f146100d8575b600080fd5b34801561006657600080fd5b5061006f6100ed565b005b34801561007d57600080fd5b5061006f61008c366004610187565b50565b61006f61009d3660046101bf565b5050565b3480156100ad57600080fd5b5060005460405190815260200160405180910390f35b3480156100cf57600080fd5b5061006f6100f9565b3480156100e457600080fd5b5061006f610107565b6100f76000610110565b565b6100f7600080546001019055565b6100f760008055565b8054806101635760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f770000000000604482015260640160405180910390fd5b600019019055565b80356001600160a01b038116811461018257600080fd5b919050565b60006020828403121561019957600080fd5b6101a28261016b565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156101d257600080fd5b6101db8361016b565b9150602083013567ffffffffffffffff808211156101f857600080fd5b818501915085601f83011261020c57600080fd5b81358181111561021e5761021e6101a9565b604051601f8201601f19908116603f01168101908382118183101715610246576102466101a9565b8160405282815288602084870101111561025f57600080fd5b826020860160208301376000602084830101528095505050505050925092905056fea2646970667358221220a5079459a2ebbaa9a64e5d40c3aba61f8ef8118ecff9cefb39b3e93d2b76129864736f6c634300080d0033"}, "abi": [{"type": "event", "name": "AdminChanged", "inputs": [{"name": "previousAdmin", "type": "address", "internalType": "address", "indexed": false}, {"name": "newAdmin", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "BeaconUpgraded", "inputs": [{"name": "beacon", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Upgraded", "inputs": [{"name": "implementation", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "function", "name": "current", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decrement", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "increment", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "reset", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "upgradeTo", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "upgradeToAndCall", "stateMutability": "payable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "bytes", "internalType": "bytes"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "UUPSUpgradeableMock": {"contractName": "UUPSUpgradeableMock", "sourceId": "mocks/UUPS/TestInProd.sol", "deploymentBytecode": {"bytecode": "0x60a06040523060805234801561001457600080fd5b506080516108fc610045600039600081816101060152818161014f015281816101ce015261020e01526108fc6000f3fe6080604052600436106100555760003560e01c80632baeceb71461005a5780633659cfe6146100715780634f1ef286146100915780639fa6a6e3146100a4578063d09de08a146100c6578063d826f88f146100db575b600080fd5b34801561006657600080fd5b5061006f6100f0565b005b34801561007d57600080fd5b5061006f61008c366004610695565b6100fc565b61006f61009f3660046106c6565b6101c4565b3480156100b057600080fd5b5060005460405190815260200160405180910390f35b3480156100d257600080fd5b5061006f610274565b3480156100e757600080fd5b5061006f610282565b6100fa600061028b565b565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361014d5760405162461bcd60e51b815260040161014490610788565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661017f6102e2565b6001600160a01b0316146101a55760405162461bcd60e51b8152600401610144906107d4565b604080516000808252602082019092526101c191839190610310565b50565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361020c5760405162461bcd60e51b815260040161014490610788565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661023e6102e2565b6001600160a01b0316146102645760405162461bcd60e51b8152600401610144906107d4565b61027082826001610310565b5050565b6100fa600080546001019055565b6100fa60008055565b8054806102da5760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f7700000000006044820152606401610144565b600019019055565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b600061031a6102e2565b90506103258461045b565b6000835111806103325750815b15610343576103418484610500565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661045457805460ff191660011781556040516001600160a01b03831660248201526103c290869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052610500565b50805460ff191681556103d36102e2565b6001600160a01b0316826001600160a01b03161461044b5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610144565b6104548561052c565b5050505050565b803b6104bf5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610144565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b606061052583836040518060600160405280602781526020016108a06027913961056c565b9392505050565b6105358161045b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060833b6105cb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610144565b600080856001600160a01b0316856040516105e69190610850565b600060405180830381855af49150503d8060008114610621576040519150601f19603f3d011682016040523d82523d6000602084013e610626565b606091505b5091509150610636828286610640565b9695505050505050565b6060831561064f575081610525565b82511561065f5782518084602001fd5b8160405162461bcd60e51b8152600401610144919061086c565b80356001600160a01b038116811461069057600080fd5b919050565b6000602082840312156106a757600080fd5b61052582610679565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156106d957600080fd5b6106e283610679565b9150602083013567ffffffffffffffff808211156106ff57600080fd5b818501915085601f83011261071357600080fd5b813581811115610725576107256106b0565b604051601f8201601f19908116603f0116810190838211818310171561074d5761074d6106b0565b8160405282815288602084870101111561076657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60005b8381101561083b578181015183820152602001610823565b8381111561084a576000848401525b50505050565b60008251610862818460208701610820565b9190910192915050565b602081526000825180602084015261088b816040850160208701610820565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d94a93f0b6c22ae7ba5728f74b49bc28b15dfd15575c539f386e63f1109e087464736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052600436106100555760003560e01c80632baeceb71461005a5780633659cfe6146100715780634f1ef286146100915780639fa6a6e3146100a4578063d09de08a146100c6578063d826f88f146100db575b600080fd5b34801561006657600080fd5b5061006f6100f0565b005b34801561007d57600080fd5b5061006f61008c366004610695565b6100fc565b61006f61009f3660046106c6565b6101c4565b3480156100b057600080fd5b5060005460405190815260200160405180910390f35b3480156100d257600080fd5b5061006f610274565b3480156100e757600080fd5b5061006f610282565b6100fa600061028b565b565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361014d5760405162461bcd60e51b815260040161014490610788565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661017f6102e2565b6001600160a01b0316146101a55760405162461bcd60e51b8152600401610144906107d4565b604080516000808252602082019092526101c191839190610310565b50565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361020c5760405162461bcd60e51b815260040161014490610788565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661023e6102e2565b6001600160a01b0316146102645760405162461bcd60e51b8152600401610144906107d4565b61027082826001610310565b5050565b6100fa600080546001019055565b6100fa60008055565b8054806102da5760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f7700000000006044820152606401610144565b600019019055565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b600061031a6102e2565b90506103258461045b565b6000835111806103325750815b15610343576103418484610500565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661045457805460ff191660011781556040516001600160a01b03831660248201526103c290869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052610500565b50805460ff191681556103d36102e2565b6001600160a01b0316826001600160a01b03161461044b5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610144565b6104548561052c565b5050505050565b803b6104bf5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610144565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b606061052583836040518060600160405280602781526020016108a06027913961056c565b9392505050565b6105358161045b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060833b6105cb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610144565b600080856001600160a01b0316856040516105e69190610850565b600060405180830381855af49150503d8060008114610621576040519150601f19603f3d011682016040523d82523d6000602084013e610626565b606091505b5091509150610636828286610640565b9695505050505050565b6060831561064f575081610525565b82511561065f5782518084602001fd5b8160405162461bcd60e51b8152600401610144919061086c565b80356001600160a01b038116811461069057600080fd5b919050565b6000602082840312156106a757600080fd5b61052582610679565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156106d957600080fd5b6106e283610679565b9150602083013567ffffffffffffffff808211156106ff57600080fd5b818501915085601f83011261071357600080fd5b813581811115610725576107256106b0565b604051601f8201601f19908116603f0116810190838211818310171561074d5761074d6106b0565b8160405282815288602084870101111561076657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60005b8381101561083b578181015183820152602001610823565b8381111561084a576000848401525b50505050565b60008251610862818460208701610820565b9190910192915050565b602081526000825180602084015261088b816040850160208701610820565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d94a93f0b6c22ae7ba5728f74b49bc28b15dfd15575c539f386e63f1109e087464736f6c634300080d0033"}, "abi": [{"type": "event", "name": "AdminChanged", "inputs": [{"name": "previousAdmin", "type": "address", "internalType": "address", "indexed": false}, {"name": "newAdmin", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "BeaconUpgraded", "inputs": [{"name": "beacon", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Upgraded", "inputs": [{"name": "implementation", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "function", "name": "current", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decrement", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "increment", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "reset", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "upgradeTo", "stateMutability": "nonpayable", "inputs": [{"name": "newImplementation", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "upgradeToAndCall", "stateMutability": "payable", "inputs": [{"name": "newImplementation", "type": "address", "internalType": "address"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"upgradeTo(address)": {"details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}, "upgradeToAndCall(address,bytes)": {"details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}}, "version": 1}}, "UUPSUpgradeableUnsafeMock": {"contractName": "UUPSUpgradeableUnsafeMock", "sourceId": "mocks/UUPS/TestInProd.sol", "deploymentBytecode": {"bytecode": "0x60a06040523060805234801561001457600080fd5b506080516105ce61002d600039600050506105ce6000f3fe6080604052600436106100555760003560e01c80632baeceb71461005a5780633659cfe6146100715780634f1ef286146100915780639fa6a6e3146100a4578063d09de08a146100c6578063d826f88f146100db575b600080fd5b34801561006657600080fd5b5061006f6100f0565b005b34801561007d57600080fd5b5061006f61008c366004610403565b6100fc565b61006f61009f366004610434565b61011a565b3480156100b057600080fd5b5060005460405190815260200160405180910390f35b3480156100d257600080fd5b5061006f61012a565b3480156100e757600080fd5b5061006f610138565b6100fa6000610141565b565b6101178160405180602001604052806000815250600061019d565b50565b6101268282600061019d565b5050565b6100fa600080546001019055565b6100fa60008055565b8054806101955760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f77000000000060448201526064015b60405180910390fd5b600019019055565b6101a6836101c9565b6000825111806101b35750805b156101c4576101c28383610209565b505b505050565b6101d281610235565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061022e8383604051806060016040528060278152602001610572602791396102da565b9392505050565b803b6102995760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161018c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060833b6103395760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161018c565b600080856001600160a01b0316856040516103549190610522565b600060405180830381855af49150503d806000811461038f576040519150601f19603f3d011682016040523d82523d6000602084013e610394565b606091505b50915091506103a48282866103ae565b9695505050505050565b606083156103bd57508161022e565b8251156103cd5782518084602001fd5b8160405162461bcd60e51b815260040161018c919061053e565b80356001600160a01b03811681146103fe57600080fd5b919050565b60006020828403121561041557600080fd5b61022e826103e7565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561044757600080fd5b610450836103e7565b9150602083013567ffffffffffffffff8082111561046d57600080fd5b818501915085601f83011261048157600080fd5b8135818111156104935761049361041e565b604051601f8201601f19908116603f011681019083821181831017156104bb576104bb61041e565b816040528281528860208487010111156104d457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b838110156105115781810151838201526020016104f9565b838111156101c25750506000910152565b600082516105348184602087016104f6565b9190910192915050565b602081526000825180602084015261055d8160408501602087016104f6565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220074d696c07d671cb886d615e13151a57f0bbb5f561bebc6c054736fca34fb2c064736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052600436106100555760003560e01c80632baeceb71461005a5780633659cfe6146100715780634f1ef286146100915780639fa6a6e3146100a4578063d09de08a146100c6578063d826f88f146100db575b600080fd5b34801561006657600080fd5b5061006f6100f0565b005b34801561007d57600080fd5b5061006f61008c366004610403565b6100fc565b61006f61009f366004610434565b61011a565b3480156100b057600080fd5b5060005460405190815260200160405180910390f35b3480156100d257600080fd5b5061006f61012a565b3480156100e757600080fd5b5061006f610138565b6100fa6000610141565b565b6101178160405180602001604052806000815250600061019d565b50565b6101268282600061019d565b5050565b6100fa600080546001019055565b6100fa60008055565b8054806101955760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f77000000000060448201526064015b60405180910390fd5b600019019055565b6101a6836101c9565b6000825111806101b35750805b156101c4576101c28383610209565b505b505050565b6101d281610235565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061022e8383604051806060016040528060278152602001610572602791396102da565b9392505050565b803b6102995760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161018c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060833b6103395760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161018c565b600080856001600160a01b0316856040516103549190610522565b600060405180830381855af49150503d806000811461038f576040519150601f19603f3d011682016040523d82523d6000602084013e610394565b606091505b50915091506103a48282866103ae565b9695505050505050565b606083156103bd57508161022e565b8251156103cd5782518084602001fd5b8160405162461bcd60e51b815260040161018c919061053e565b80356001600160a01b03811681146103fe57600080fd5b919050565b60006020828403121561041557600080fd5b61022e826103e7565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561044757600080fd5b610450836103e7565b9150602083013567ffffffffffffffff8082111561046d57600080fd5b818501915085601f83011261048157600080fd5b8135818111156104935761049361041e565b604051601f8201601f19908116603f011681019083821181831017156104bb576104bb61041e565b816040528281528860208487010111156104d457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b838110156105115781810151838201526020016104f9565b838111156101c25750506000910152565b600082516105348184602087016104f6565b9190910192915050565b602081526000825180602084015261055d8160408501602087016104f6565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220074d696c07d671cb886d615e13151a57f0bbb5f561bebc6c054736fca34fb2c064736f6c634300080d0033"}, "abi": [{"type": "event", "name": "AdminChanged", "inputs": [{"name": "previousAdmin", "type": "address", "internalType": "address", "indexed": false}, {"name": "newAdmin", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "BeaconUpgraded", "inputs": [{"name": "beacon", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Upgraded", "inputs": [{"name": "implementation", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "function", "name": "current", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decrement", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "increment", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "reset", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "upgradeTo", "stateMutability": "nonpayable", "inputs": [{"name": "newImplementation", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "upgradeToAndCall", "stateMutability": "payable", "inputs": [{"name": "newImplementation", "type": "address", "internalType": "address"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"upgradeTo(address)": {"details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}, "upgradeToAndCall(address,bytes)": {"details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}}, "version": 1}}, "CompTimelock": {"contractName": "CompTimelock", "sourceId": "mocks/compound/CompTimelock.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": "0x6080604052600436106100c65760003560e01c80636a42b8f81161007f578063c1a287e211610059578063c1a287e2146101fc578063e177246e14610213578063f2b0653714610233578063f851a4401461027357600080fd5b80636a42b8f8146101b85780637d645fab146101ce578063b1b43ae5146101e557600080fd5b80630825f38f146100d25780630e18b681146100fb57806326782247146101125780633a66f9011461014a5780634dd18bf514610178578063591fcdfe1461019857600080fd5b366100cd57005b600080fd5b6100e56100e0366004610c81565b610293565b6040516100f29190610d8e565b60405180910390f35b34801561010757600080fd5b50610110610605565b005b34801561011e57600080fd5b50600154610132906001600160a01b031681565b6040516001600160a01b0390911681526020016100f2565b34801561015657600080fd5b5061016a610165366004610c81565b6106ce565b6040519081526020016100f2565b34801561018457600080fd5b50610110610193366004610da8565b61087b565b3480156101a457600080fd5b506101106101b3366004610c81565b61093a565b3480156101c457600080fd5b5061016a60025481565b3480156101da57600080fd5b5061016a62278d0081565b3480156101f157600080fd5b5061016a6202a30081565b34801561020857600080fd5b5061016a6212750081565b34801561021f57600080fd5b5061011061022e366004610dc3565b610a54565b34801561023f57600080fd5b5061026361024e366004610dc3565b60036020526000908152604090205460ff1681565b60405190151581526020016100f2565b34801561027f57600080fd5b50600054610132906001600160a01b031681565b6000546060906001600160a01b0316331461031b5760405162461bcd60e51b815260206004820152603860248201527f54696d656c6f636b3a3a657865637574655472616e73616374696f6e3a20436160448201527f6c6c206d75737420636f6d652066726f6d2061646d696e2e000000000000000060648201526084015b60405180910390fd5b60008686868686604051602001610336959493929190610ddc565b60408051601f1981840301815291815281516020928301206000818152600390935291205490915060ff166103c15760405162461bcd60e51b815260206004820152603d6024820152600080516020610ed983398151915260448201527f616e73616374696f6e206861736e2774206265656e207175657565642e0000006064820152608401610312565b824210156104335760405162461bcd60e51b81526020600482015260456024820152600080516020610ed983398151915260448201527f616e73616374696f6e206861736e2774207375727061737365642074696d65206064820152643637b1b59760d91b608482015260a401610312565b6104406212750084610e28565b4211156104995760405162461bcd60e51b81526020600482015260336024820152600080516020610ed983398151915260448201527230b739b0b1ba34b7b71034b99039ba30b6329760691b6064820152608401610312565b6000818152600360205260408120805460ff191690558551606091036104c05750836104ec565b8580519060200120856040516020016104da929190610e4e565b60405160208183030381529060405290505b600080896001600160a01b031689846040516105089190610e7f565b60006040518083038185875af1925050503d8060008114610545576040519150601f19603f3d011682016040523d82523d6000602084013e61054a565b606091505b5091509150816105b05760405162461bcd60e51b815260206004820152603d6024820152600080516020610ed983398151915260448201527f616e73616374696f6e20657865637574696f6e2072657665727465642e0000006064820152608401610312565b896001600160a01b0316847fa560e3198060a2f10670c1ec5b403077ea6ae93ca8de1c32b451dc1a943cd6e78b8b8b8b6040516105f09493929190610e9b565b60405180910390a39998505050505050505050565b6001546001600160a01b031633146106855760405162461bcd60e51b815260206004820152603860248201527f54696d656c6f636b3a3a61636365707441646d696e3a2043616c6c206d75737460448201527f20636f6d652066726f6d2070656e64696e6741646d696e2e00000000000000006064820152608401610312565b60008054336001600160a01b0319918216811783556001805490921690915560405190917f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c91a2565b600080546001600160a01b031633146107485760405162461bcd60e51b815260206004820152603660248201527f54696d656c6f636b3a3a71756575655472616e73616374696f6e3a2043616c6c6044820152751036bab9ba1031b7b6b290333937b69030b236b4b71760511b6064820152608401610312565b6002546107559042610e28565b8210156107dc5760405162461bcd60e51b815260206004820152604960248201527f54696d656c6f636b3a3a71756575655472616e73616374696f6e3a204573746960448201527f6d6174656420657865637574696f6e20626c6f636b206d757374207361746973606482015268333c903232b630bc9760b91b608482015260a401610312565b600086868686866040516020016107f7959493929190610ddc565b60408051601f19818403018152828252805160209182012060008181526003909252919020805460ff1916600117905591506001600160a01b0388169082907f76e2796dc3a81d57b0e8504b647febcbeeb5f4af818e164f11eef8131a6a763f90610869908a908a908a908a90610e9b565b60405180910390a39695505050505050565b3330146108f05760405162461bcd60e51b815260206004820152603860248201527f54696d656c6f636b3a3a73657450656e64696e6741646d696e3a2043616c6c2060448201527f6d75737420636f6d652066726f6d2054696d656c6f636b2e00000000000000006064820152608401610312565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f69d78e38a01985fbb1462961809b4b2d65531bc93b2b94037f3334b82ca4a75690600090a250565b6000546001600160a01b031633146109ba5760405162461bcd60e51b815260206004820152603760248201527f54696d656c6f636b3a3a63616e63656c5472616e73616374696f6e3a2043616c60448201527f6c206d75737420636f6d652066726f6d2061646d696e2e0000000000000000006064820152608401610312565b600085858585856040516020016109d5959493929190610ddc565b60408051601f19818403018152828252805160209182012060008181526003909252919020805460ff1916905591506001600160a01b0387169082907f2fffc091a501fd91bfbff27141450d3acb40fb8e6d8382b243ec7a812a3aaf8790610a44908990899089908990610e9b565b60405180910390a3505050505050565b333014610abd5760405162461bcd60e51b815260206004820152603160248201527f54696d656c6f636b3a3a73657444656c61793a2043616c6c206d75737420636f60448201527036b290333937b6902a34b6b2b637b1b59760791b6064820152608401610312565b6202a300811015610b2d5760405162461bcd60e51b815260206004820152603460248201527f54696d656c6f636b3a3a73657444656c61793a2044656c6179206d75737420656044820152733c31b2b2b21036b4b734b6bab6903232b630bc9760611b6064820152608401610312565b62278d00811115610ba65760405162461bcd60e51b815260206004820152603860248201527f54696d656c6f636b3a3a73657444656c61793a2044656c6179206d757374206e60448201527f6f7420657863656564206d6178696d756d2064656c61792e00000000000000006064820152608401610312565b600281905560405181907f948b1f6a42ee138b7e34058ba85a37f716d55ff25ff05a763f15bed6a04c8d2c90600090a250565b80356001600160a01b0381168114610bf057600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115610c2657610c26610bf5565b604051601f8501601f19908116603f01168101908282118183101715610c4e57610c4e610bf5565b81604052809350858152868686011115610c6757600080fd5b858560208301376000602087830101525050509392505050565b600080600080600060a08688031215610c9957600080fd5b610ca286610bd9565b945060208601359350604086013567ffffffffffffffff80821115610cc657600080fd5b818801915088601f830112610cda57600080fd5b610ce989833560208501610c0b565b94506060880135915080821115610cff57600080fd5b508601601f81018813610d1157600080fd5b610d2088823560208401610c0b565b95989497509295608001359392505050565b60005b83811015610d4d578181015183820152602001610d35565b83811115610d5c576000848401525b50505050565b60008151808452610d7a816020860160208601610d32565b601f01601f19169290920160200192915050565b602081526000610da16020830184610d62565b9392505050565b600060208284031215610dba57600080fd5b610da182610bd9565b600060208284031215610dd557600080fd5b5035919050565b60018060a01b038616815284602082015260a060408201526000610e0360a0830186610d62565b8281036060840152610e158186610d62565b9150508260808301529695505050505050565b60008219821115610e4957634e487b7160e01b600052601160045260246000fd5b500190565b6001600160e01b0319831681528151600090610e71816004850160208701610d32565b919091016004019392505050565b60008251610e91818460208701610d32565b9190910192915050565b848152608060208201526000610eb46080830186610d62565b8281036040840152610ec68186610d62565b9150508260608301529594505050505056fe54696d656c6f636b3a3a657865637574655472616e73616374696f6e3a205472a264697066735822122091f187efa60e0f0f2edda75b786682dda88a784d11022d83134212891d1ba31c64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "admin_", "type": "address", "internalType": "address"}, {"name": "delay_", "type": "uint256", "internalType": "uint256"}]}, {"type": "event", "name": "CancelTransaction", "inputs": [{"name": "txHash", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "target", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "signature", "type": "string", "internalType": "string", "indexed": false}, {"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "eta", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ExecuteTransaction", "inputs": [{"name": "txHash", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "target", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "signature", "type": "string", "internalType": "string", "indexed": false}, {"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "eta", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "NewAdmin", "inputs": [{"name": "newAdmin", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "NewDelay", "inputs": [{"name": "newDelay", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "NewPendingAdmin", "inputs": [{"name": "newPendingAdmin", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "QueueTransaction", "inputs": [{"name": "txHash", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "target", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "signature", "type": "string", "internalType": "string", "indexed": false}, {"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "eta", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "GRACE_PERIOD", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "MAXIMUM_DELAY", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "MINIMUM_DELAY", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "acceptAdmin", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "admin", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "cancelTransaction", "stateMutability": "nonpayable", "inputs": [{"name": "target", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "signature", "type": "string", "internalType": "string"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "eta", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "delay", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "executeTransaction", "stateMutability": "payable", "inputs": [{"name": "target", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "signature", "type": "string", "internalType": "string"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "eta", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bytes", "internalType": "bytes"}]}, {"type": "function", "name": "pendingAdmin", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "queueTransaction", "stateMutability": "nonpayable", "inputs": [{"name": "target", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "signature", "type": "string", "internalType": "string"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "eta", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "queuedTransactions", "stateMutability": "view", "inputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "setDelay", "stateMutability": "nonpayable", "inputs": [{"name": "delay_", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "setPendingAdmin", "stateMutability": "nonpayable", "inputs": [{"name": "pendingAdmin_", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "MyGovernor1": {"contractName": "MyGovernor1", "sourceId": "mocks/wizard/MyGovernor1.sol", "deploymentBytecode": {"bytecode": "0x6101606040523480156200001257600080fd5b5060405162002be138038062002be1833981016040819052620000359162000353565b600482826040518060400160405280600a81526020016926bca3b7bb32b93737b960b11b815250806200006d6200014360201b60201c565b815160208084019190912082518383012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c00190528051940193909320919290916080523060c052610120525050825162000113925060009150602084019062000294565b50620001219050816200015e565b506001600160a01b0316610140526200013a81620001c7565b505050620003ce565b6040805180820190915260018152603160f81b602082015290565b600254604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600280546001600160a01b0319166001600160a01b0392909216919091179055565b60648111156200024f5760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a40160405180910390fd5b600480549082905560408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b828054620002a29062000392565b90600052602060002090601f016020900481019282620002c6576000855562000311565b82601f10620002e157805160ff191683800117855562000311565b8280016001018555821562000311579182015b8281111562000311578251825591602001919060010190620002f4565b506200031f92915062000323565b5090565b5b808211156200031f576000815560010162000324565b6001600160a01b03811681146200035057600080fd5b50565b600080604083850312156200036757600080fd5b825162000374816200033a565b602084015190925062000387816200033a565b809150509250929050565b600181811c90821680620003a757607f821691505b602082108103620003c857634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516101005161012051610140516127aa620004376000396000818161061c015281816113d601526114600152600061161a01526000611669015260006116440152600061159d015260006115c7015260006115f101526127aa6000f3fe6080604052600436106101c65760003560e01c80637b3c71d3116100f7578063c01f9e3711610095578063deaaa7cc11610064578063deaaa7cc14610596578063eb9019d4146105ca578063f8ce560a146105ea578063fc0c546a1461060a57600080fd5b8063c01f9e37146104de578063c59057e4146104fe578063d33219b41461051e578063dd4e2ba51461055057600080fd5b8063a7713a70116100d1578063a7713a7014610475578063a890c9101461048a578063ab58fb8e146104aa578063b58131b0146104ca57600080fd5b80637b3c71d3146104215780637d5e81e21461044157806397c3d3341461046157600080fd5b80633932abb111610164578063438596321161013e5780634385963214610338578063544ffc9c1461038257806354fd4d50146103d7578063567813881461040157600080fd5b80633932abb1146102d75780633bccf4fd146102eb5780633e4f49e61461030b57600080fd5b806306fdde03116101a057806306fdde0314610262578063160cbed7146102845780632656227d146102a45780632d63f693146102b757600080fd5b806301ffc9a7146101ee57806302a251a31461022357806306f3f9e61461024257600080fd5b366101e957306101d461063e565b6001600160a01b0316146101e757600080fd5b005b600080fd5b3480156101fa57600080fd5b5061020e610209366004611d0a565b610657565b60405190151581526020015b60405180910390f35b34801561022f57600080fd5b5061b2fa5b60405190815260200161021a565b34801561024e57600080fd5b506101e761025d366004611d34565b610668565b34801561026e57600080fd5b506102776106dc565b60405161021a9190611d9a565b34801561029057600080fd5b5061023461029f366004611fe5565b61076e565b6102346102b2366004611fe5565b61096e565b3480156102c357600080fd5b506102346102d2366004611d34565b610a41565b3480156102e357600080fd5b506001610234565b3480156102f757600080fd5b5061023461030636600461208a565b610a78565b34801561031757600080fd5b5061032b610326366004611d34565b610b0c565b60405161021a91906120ee565b34801561034457600080fd5b5061020e610353366004612116565b60008281526005602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b34801561038e57600080fd5b506103bc61039d366004611d34565b6000908152600560205260409020805460018201546002909201549092565b6040805193845260208401929092529082015260600161021a565b3480156103e357600080fd5b506040805180820190915260018152603160f81b6020820152610277565b34801561040d57600080fd5b5061023461041c366004612146565b610b17565b34801561042d57600080fd5b5061023461043c366004612172565b610b40565b34801561044d57600080fd5b5061023461045c3660046121f8565b610b92565b34801561046d57600080fd5b506064610234565b34801561048157600080fd5b50600454610234565b34801561049657600080fd5b506101e76104a53660046122b8565b610ba9565b3480156104b657600080fd5b506102346104c5366004611d34565b610c15565b3480156104d657600080fd5b506000610234565b3480156104ea57600080fd5b506102346104f9366004611d34565b610cb0565b34801561050a57600080fd5b50610234610519366004611fe5565b610cdf565b34801561052a57600080fd5b506002546001600160a01b03165b6040516001600160a01b03909116815260200161021a565b34801561055c57600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e90820152610277565b3480156105a257600080fd5b506102347f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b3480156105d657600080fd5b506102346105e53660046122d5565b610d19565b3480156105f657600080fd5b50610234610605366004611d34565b610d25565b34801561061657600080fd5b506105387f000000000000000000000000000000000000000000000000000000000000000081565b60006106526002546001600160a01b031690565b905090565b600061066282610d30565b92915050565b61067061063e565b6001600160a01b0316336001600160a01b0316146106d05760405162461bcd60e51b8152602060048201526018602482015277476f7665726e6f723a206f6e6c79476f7665726e616e636560401b60448201526064015b60405180910390fd5b6106d981610d55565b50565b6060600080546106eb90612301565b80601f016020809104026020016040519081016040528092919081815260200182805461071790612301565b80156107645780601f1061073957610100808354040283529160200191610764565b820191906000526020600020905b81548152906001019060200180831161074757829003601f168201915b5050505050905090565b60008061077d86868686610cdf565b9050600461078a82610b0c565b600781111561079b5761079b6120d8565b146107b85760405162461bcd60e51b81526004016106c790612335565b6002546040805163793d064960e11b815290516000926001600160a01b03169163f27a0c929160048083019260209291908290030181865afa158015610802573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108269190612376565b60025460405163b1c5f42760e01b81529192506001600160a01b03169063b1c5f42790610860908a908a908a906000908b90600401612458565b602060405180830381865afa15801561087d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a19190612376565b6000838152600360205260408082209290925560025491516308f2a0bb60e41b81526001600160a01b0390921691638f2a0bb0916108ec918b918b918b91908b9089906004016124a6565b600060405180830381600087803b15801561090657600080fd5b505af115801561091a573d6000803e3d6000fd5b505050507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda289282824261094c9190612514565b6040805192835260208301919091520160405180910390a15095945050505050565b60008061097d86868686610cdf565b9050600061098a82610b0c565b905060048160078111156109a0576109a06120d8565b14806109bd575060058160078111156109bb576109bb6120d8565b145b6109d95760405162461bcd60e51b81526004016106c790612335565b600082815260016020818152604092839020600201805460ff191690921790915590518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f910160405180910390a1610a378288888888610e1d565b5095945050505050565b60008181526001602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610ae490610adc9060800160405160208183030381529060405280519060200120610e31565b868686610e7f565b9050610b0187828860405180602001604052806000815250610e9d565b979650505050505050565b600061066282610fa8565b600080339050610b3884828560405180602001604052806000815250610e9d565b949350505050565b600080339050610b8886828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e9d92505050565b9695505050505050565b6000610ba085858585611076565b95945050505050565b610bb161063e565b6001600160a01b0316336001600160a01b031614610c0c5760405162461bcd60e51b8152602060048201526018602482015277476f7665726e6f723a206f6e6c79476f7665726e616e636560401b60448201526064016106c7565b6106d981611344565b60025460008281526003602052604080822054905163d45c443560e01b81526004810191909152909182916001600160a01b039091169063d45c443590602401602060405180830381865afa158015610c72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c969190612376565b905080600114610ca65780610ca9565b60005b9392505050565b60008181526001602081815260408084208151928301909152909101546001600160401b031690819052610a69565b600084848484604051602001610cf8949392919061252c565b60408051601f19818403018152919052805160209091012095945050505050565b6000610ca983836113ad565b600061066282611443565b60006001600160e01b03198216636e665ced60e01b14806106625750610662826114e7565b6064811115610dd85760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a4016106c7565b600480549082905560408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b610e2a858585858561151c565b5050505050565b6000610662610e3e611590565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000610e90878787876116b7565b91509150610a37816117a4565b6000848152600160208190526040822090610eb787610b0c565b6007811115610ec857610ec86120d8565b14610f215760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b60648201526084016106c7565b604080516020810190915281546001600160401b031690819052600090610f49908790610d19565b9050610f578787878461195a565b856001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda488878488604051610f969493929190612577565b60405180910390a29695505050505050565b600080610fb483611ad4565b90506004816007811115610fca57610fca6120d8565b14610fd55792915050565b60008381526003602052604090205480610ff0575092915050565b600254604051632ab0f52960e01b8152600481018390526001600160a01b0390911690632ab0f52990602401602060405180830381865afa158015611039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105d919061259f565b1561106c575060079392505050565b5060059392505050565b600080611088336105e56001436125c1565b10156111085760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72436f6d7061746962696c697479427261766f3a2070726f7060448201527f6f73657220766f7465732062656c6f772070726f706f73616c207468726573686064820152621bdb1960ea1b608482015260a4016106c7565b600061111d8686868680519060200120610cdf565b905084518651146111405760405162461bcd60e51b81526004016106c7906125d8565b83518651146111615760405162461bcd60e51b81526004016106c7906125d8565b60008651116111b25760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c000000000000000060448201526064016106c7565b600081815260016020908152604091829020825191820190925281546001600160401b031690819052156112325760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b60648201526084016106c7565b600061123e6001611c38565b61124743611c38565b6112519190612619565b9050600061126061b2fa611c38565b61126a9083612619565b835467ffffffffffffffff19166001600160401b038416178455905060018301805467ffffffffffffffff19166001600160401b0383161790557f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b038111156112e2576112e2611dad565b60405190808252806020026020018201604052801561131557816020015b60608152602001906001900390816113005790505b508c88888e60405161132f99989796959493929190612644565b60405180910390a15091979650505050505050565b600254604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600280546001600160a01b0319166001600160a01b0392909216919091179055565b604051630748d63560e31b81526001600160a01b038381166004830152602482018390526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a890604401602060405180830381865afa15801561141f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca99190612376565b60006064600454604051632394e7a360e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e539e8c90602401602060405180830381865afa1580156114af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d39190612376565b6114dd9190612733565b6106629190612752565b60006001600160e01b0319821663bf26d89760e01b148061066257506301ffc9a760e01b6001600160e01b0319831614610662565b60025460405163e38335e560e01b81526001600160a01b039091169063e38335e5903490611557908890889088906000908990600401612458565b6000604051808303818588803b15801561157057600080fd5b505af1158015611584573d6000803e3d6000fd5b50505050505050505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156115e957507f000000000000000000000000000000000000000000000000000000000000000046145b1561161357507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156116ee575060009050600361179b565b8460ff16601b1415801561170657508460ff16601c14155b15611717575060009050600461179b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561176b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166117945760006001925092505061179b565b9150600090505b94509492505050565b60008160048111156117b8576117b86120d8565b036117c05750565b60018160048111156117d4576117d46120d8565b036118215760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106c7565b6002816004811115611835576118356120d8565b036118825760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106c7565b6003816004811115611896576118966120d8565b036118ee5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016106c7565b6004816004811115611902576119026120d8565b036106d95760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016106c7565b60008481526005602090815260408083206001600160a01b0387168452600381019092529091205460ff16156119e25760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b60648201526084016106c7565b6001600160a01b03841660009081526003820160205260409020805460ff1916600117905560ff8316611a2e5781816000016000828254611a239190612514565b90915550610e2a9050565b60001960ff841601611a4e5781816001016000828254611a239190612514565b60011960ff841601611a6e5781816002016000828254611a239190612514565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b60648201526084016106c7565b6000818152600160208181526040808420815160a08101835281546001600160401b0390811660808301908152825283518086018552958301541685529283019390935260029092015460ff80821615801594840194909452610100909104161515606082015290611b495750600792915050565b806060015115611b5c5750600292915050565b80515143906001600160401b031610611b785750600092915050565b43611b8582602001515190565b6001600160401b031610611b9c5750600192915050565b611ba98160200151611ca4565b15611bea57611bb783611cd3565b8015611bd6575060008381526005602052604090208054600190910154115b611be1576003610ca9565b60049392505050565b60405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c20696400000060448201526064016106c7565b50919050565b60006001600160401b03821115611ca05760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b60648201526084016106c7565b5090565b6000611cb982516001600160401b0316151590565b801561066257505051436001600160401b03909116111590565b600081815260056020526040812060028101546001820154611cf59190612514565b611d0161060585610a41565b11159392505050565b600060208284031215611d1c57600080fd5b81356001600160e01b031981168114610ca957600080fd5b600060208284031215611d4657600080fd5b5035919050565b6000815180845260005b81811015611d7357602081850181015186830182015201611d57565b81811115611d85576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610ca96020830184611d4d565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611deb57611deb611dad565b604052919050565b60006001600160401b03821115611e0c57611e0c611dad565b5060051b60200190565b6001600160a01b03811681146106d957600080fd5b600082601f830112611e3c57600080fd5b81356020611e51611e4c83611df3565b611dc3565b82815260059290921b84018101918181019086841115611e7057600080fd5b8286015b84811015611e94578035611e8781611e16565b8352918301918301611e74565b509695505050505050565b600082601f830112611eb057600080fd5b81356020611ec0611e4c83611df3565b82815260059290921b84018101918181019086841115611edf57600080fd5b8286015b84811015611e945780358352918301918301611ee3565b60006001600160401b03831115611f1357611f13611dad565b611f26601f8401601f1916602001611dc3565b9050828152838383011115611f3a57600080fd5b828260208301376000602084830101529392505050565b600082601f830112611f6257600080fd5b81356020611f72611e4c83611df3565b82815260059290921b84018101918181019086841115611f9157600080fd5b8286015b84811015611e945780356001600160401b03811115611fb45760008081fd5b8701603f81018913611fc65760008081fd5b611fd7898683013560408401611efa565b845250918301918301611f95565b60008060008060808587031215611ffb57600080fd5b84356001600160401b038082111561201257600080fd5b61201e88838901611e2b565b9550602087013591508082111561203457600080fd5b61204088838901611e9f565b9450604087013591508082111561205657600080fd5b5061206387828801611f51565b949793965093946060013593505050565b803560ff8116811461208557600080fd5b919050565b600080600080600060a086880312156120a257600080fd5b853594506120b260208701612074565b93506120c060408701612074565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061211057634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561212957600080fd5b82359150602083013561213b81611e16565b809150509250929050565b6000806040838503121561215957600080fd5b8235915061216960208401612074565b90509250929050565b6000806000806060858703121561218857600080fd5b8435935061219860208601612074565b925060408501356001600160401b03808211156121b457600080fd5b818701915087601f8301126121c857600080fd5b8135818111156121d757600080fd5b8860208285010111156121e957600080fd5b95989497505060200194505050565b6000806000806080858703121561220e57600080fd5b84356001600160401b038082111561222557600080fd5b61223188838901611e2b565b9550602087013591508082111561224757600080fd5b61225388838901611e9f565b9450604087013591508082111561226957600080fd5b61227588838901611f51565b9350606087013591508082111561228b57600080fd5b508501601f8101871361229d57600080fd5b6122ac87823560208401611efa565b91505092959194509250565b6000602082840312156122ca57600080fd5b8135610ca981611e16565b600080604083850312156122e857600080fd5b82356122f381611e16565b946020939093013593505050565b600181811c9082168061231557607f821691505b602082108103611c3257634e487b7160e01b600052602260045260246000fd5b60208082526021908201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756040820152601b60fa1b606082015260800190565b60006020828403121561238857600080fd5b5051919050565b600081518084526020808501945080840160005b838110156123c85781516001600160a01b0316875295820195908201906001016123a3565b509495945050505050565b600081518084526020808501945080840160005b838110156123c8578151875295820195908201906001016123e7565b600081518084526020808501808196508360051b8101915082860160005b8581101561244b578284038952612439848351611d4d565b98850198935090840190600101612421565b5091979650505050505050565b60a08152600061246b60a083018861238f565b828103602084015261247d81886123d3565b905082810360408401526124918187612403565b60608401959095525050608001529392505050565b60c0815260006124b960c083018961238f565b82810360208401526124cb81896123d3565b905082810360408401526124df8188612403565b60608401969096525050608081019290925260a0909101529392505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612527576125276124fe565b500190565b60808152600061253f608083018761238f565b828103602084015261255181876123d3565b905082810360408401526125658186612403565b91505082606083015295945050505050565b84815260ff84166020820152826040820152608060608201526000610b886080830184611d4d565b6000602082840312156125b157600080fd5b81518015158114610ca957600080fd5b6000828210156125d3576125d36124fe565b500390565b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b0380831681851680830382111561263b5761263b6124fe565b01949350505050565b60006101208b8352602060018060a01b038c168185015281604085015261266d8285018c61238f565b91508382036060850152612681828b6123d3565b915083820360808501528189518084528284019150828160051b850101838c0160005b838110156126d257601f198784030185526126c0838351611d4d565b948601949250908501906001016126a4565b505086810360a08801526126e6818c612403565b94505050505061270160c08401876001600160401b03169052565b6001600160401b03851660e08401528281036101008401526127238185611d4d565b9c9b505050505050505050505050565b600081600019048311821515161561274d5761274d6124fe565b500290565b60008261276f57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220cfcc489c806b7b93fd1dfea50b8758a607bd98347e2c24f69862b7f7bf65768e64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052600436106101c65760003560e01c80637b3c71d3116100f7578063c01f9e3711610095578063deaaa7cc11610064578063deaaa7cc14610596578063eb9019d4146105ca578063f8ce560a146105ea578063fc0c546a1461060a57600080fd5b8063c01f9e37146104de578063c59057e4146104fe578063d33219b41461051e578063dd4e2ba51461055057600080fd5b8063a7713a70116100d1578063a7713a7014610475578063a890c9101461048a578063ab58fb8e146104aa578063b58131b0146104ca57600080fd5b80637b3c71d3146104215780637d5e81e21461044157806397c3d3341461046157600080fd5b80633932abb111610164578063438596321161013e5780634385963214610338578063544ffc9c1461038257806354fd4d50146103d7578063567813881461040157600080fd5b80633932abb1146102d75780633bccf4fd146102eb5780633e4f49e61461030b57600080fd5b806306fdde03116101a057806306fdde0314610262578063160cbed7146102845780632656227d146102a45780632d63f693146102b757600080fd5b806301ffc9a7146101ee57806302a251a31461022357806306f3f9e61461024257600080fd5b366101e957306101d461063e565b6001600160a01b0316146101e757600080fd5b005b600080fd5b3480156101fa57600080fd5b5061020e610209366004611d0a565b610657565b60405190151581526020015b60405180910390f35b34801561022f57600080fd5b5061b2fa5b60405190815260200161021a565b34801561024e57600080fd5b506101e761025d366004611d34565b610668565b34801561026e57600080fd5b506102776106dc565b60405161021a9190611d9a565b34801561029057600080fd5b5061023461029f366004611fe5565b61076e565b6102346102b2366004611fe5565b61096e565b3480156102c357600080fd5b506102346102d2366004611d34565b610a41565b3480156102e357600080fd5b506001610234565b3480156102f757600080fd5b5061023461030636600461208a565b610a78565b34801561031757600080fd5b5061032b610326366004611d34565b610b0c565b60405161021a91906120ee565b34801561034457600080fd5b5061020e610353366004612116565b60008281526005602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b34801561038e57600080fd5b506103bc61039d366004611d34565b6000908152600560205260409020805460018201546002909201549092565b6040805193845260208401929092529082015260600161021a565b3480156103e357600080fd5b506040805180820190915260018152603160f81b6020820152610277565b34801561040d57600080fd5b5061023461041c366004612146565b610b17565b34801561042d57600080fd5b5061023461043c366004612172565b610b40565b34801561044d57600080fd5b5061023461045c3660046121f8565b610b92565b34801561046d57600080fd5b506064610234565b34801561048157600080fd5b50600454610234565b34801561049657600080fd5b506101e76104a53660046122b8565b610ba9565b3480156104b657600080fd5b506102346104c5366004611d34565b610c15565b3480156104d657600080fd5b506000610234565b3480156104ea57600080fd5b506102346104f9366004611d34565b610cb0565b34801561050a57600080fd5b50610234610519366004611fe5565b610cdf565b34801561052a57600080fd5b506002546001600160a01b03165b6040516001600160a01b03909116815260200161021a565b34801561055c57600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e90820152610277565b3480156105a257600080fd5b506102347f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b3480156105d657600080fd5b506102346105e53660046122d5565b610d19565b3480156105f657600080fd5b50610234610605366004611d34565b610d25565b34801561061657600080fd5b506105387f000000000000000000000000000000000000000000000000000000000000000081565b60006106526002546001600160a01b031690565b905090565b600061066282610d30565b92915050565b61067061063e565b6001600160a01b0316336001600160a01b0316146106d05760405162461bcd60e51b8152602060048201526018602482015277476f7665726e6f723a206f6e6c79476f7665726e616e636560401b60448201526064015b60405180910390fd5b6106d981610d55565b50565b6060600080546106eb90612301565b80601f016020809104026020016040519081016040528092919081815260200182805461071790612301565b80156107645780601f1061073957610100808354040283529160200191610764565b820191906000526020600020905b81548152906001019060200180831161074757829003601f168201915b5050505050905090565b60008061077d86868686610cdf565b9050600461078a82610b0c565b600781111561079b5761079b6120d8565b146107b85760405162461bcd60e51b81526004016106c790612335565b6002546040805163793d064960e11b815290516000926001600160a01b03169163f27a0c929160048083019260209291908290030181865afa158015610802573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108269190612376565b60025460405163b1c5f42760e01b81529192506001600160a01b03169063b1c5f42790610860908a908a908a906000908b90600401612458565b602060405180830381865afa15801561087d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a19190612376565b6000838152600360205260408082209290925560025491516308f2a0bb60e41b81526001600160a01b0390921691638f2a0bb0916108ec918b918b918b91908b9089906004016124a6565b600060405180830381600087803b15801561090657600080fd5b505af115801561091a573d6000803e3d6000fd5b505050507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda289282824261094c9190612514565b6040805192835260208301919091520160405180910390a15095945050505050565b60008061097d86868686610cdf565b9050600061098a82610b0c565b905060048160078111156109a0576109a06120d8565b14806109bd575060058160078111156109bb576109bb6120d8565b145b6109d95760405162461bcd60e51b81526004016106c790612335565b600082815260016020818152604092839020600201805460ff191690921790915590518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f910160405180910390a1610a378288888888610e1d565b5095945050505050565b60008181526001602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610ae490610adc9060800160405160208183030381529060405280519060200120610e31565b868686610e7f565b9050610b0187828860405180602001604052806000815250610e9d565b979650505050505050565b600061066282610fa8565b600080339050610b3884828560405180602001604052806000815250610e9d565b949350505050565b600080339050610b8886828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e9d92505050565b9695505050505050565b6000610ba085858585611076565b95945050505050565b610bb161063e565b6001600160a01b0316336001600160a01b031614610c0c5760405162461bcd60e51b8152602060048201526018602482015277476f7665726e6f723a206f6e6c79476f7665726e616e636560401b60448201526064016106c7565b6106d981611344565b60025460008281526003602052604080822054905163d45c443560e01b81526004810191909152909182916001600160a01b039091169063d45c443590602401602060405180830381865afa158015610c72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c969190612376565b905080600114610ca65780610ca9565b60005b9392505050565b60008181526001602081815260408084208151928301909152909101546001600160401b031690819052610a69565b600084848484604051602001610cf8949392919061252c565b60408051601f19818403018152919052805160209091012095945050505050565b6000610ca983836113ad565b600061066282611443565b60006001600160e01b03198216636e665ced60e01b14806106625750610662826114e7565b6064811115610dd85760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a4016106c7565b600480549082905560408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b610e2a858585858561151c565b5050505050565b6000610662610e3e611590565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000610e90878787876116b7565b91509150610a37816117a4565b6000848152600160208190526040822090610eb787610b0c565b6007811115610ec857610ec86120d8565b14610f215760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b60648201526084016106c7565b604080516020810190915281546001600160401b031690819052600090610f49908790610d19565b9050610f578787878461195a565b856001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda488878488604051610f969493929190612577565b60405180910390a29695505050505050565b600080610fb483611ad4565b90506004816007811115610fca57610fca6120d8565b14610fd55792915050565b60008381526003602052604090205480610ff0575092915050565b600254604051632ab0f52960e01b8152600481018390526001600160a01b0390911690632ab0f52990602401602060405180830381865afa158015611039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105d919061259f565b1561106c575060079392505050565b5060059392505050565b600080611088336105e56001436125c1565b10156111085760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72436f6d7061746962696c697479427261766f3a2070726f7060448201527f6f73657220766f7465732062656c6f772070726f706f73616c207468726573686064820152621bdb1960ea1b608482015260a4016106c7565b600061111d8686868680519060200120610cdf565b905084518651146111405760405162461bcd60e51b81526004016106c7906125d8565b83518651146111615760405162461bcd60e51b81526004016106c7906125d8565b60008651116111b25760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c000000000000000060448201526064016106c7565b600081815260016020908152604091829020825191820190925281546001600160401b031690819052156112325760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b60648201526084016106c7565b600061123e6001611c38565b61124743611c38565b6112519190612619565b9050600061126061b2fa611c38565b61126a9083612619565b835467ffffffffffffffff19166001600160401b038416178455905060018301805467ffffffffffffffff19166001600160401b0383161790557f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b038111156112e2576112e2611dad565b60405190808252806020026020018201604052801561131557816020015b60608152602001906001900390816113005790505b508c88888e60405161132f99989796959493929190612644565b60405180910390a15091979650505050505050565b600254604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600280546001600160a01b0319166001600160a01b0392909216919091179055565b604051630748d63560e31b81526001600160a01b038381166004830152602482018390526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a890604401602060405180830381865afa15801561141f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca99190612376565b60006064600454604051632394e7a360e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e539e8c90602401602060405180830381865afa1580156114af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d39190612376565b6114dd9190612733565b6106629190612752565b60006001600160e01b0319821663bf26d89760e01b148061066257506301ffc9a760e01b6001600160e01b0319831614610662565b60025460405163e38335e560e01b81526001600160a01b039091169063e38335e5903490611557908890889088906000908990600401612458565b6000604051808303818588803b15801561157057600080fd5b505af1158015611584573d6000803e3d6000fd5b50505050505050505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156115e957507f000000000000000000000000000000000000000000000000000000000000000046145b1561161357507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156116ee575060009050600361179b565b8460ff16601b1415801561170657508460ff16601c14155b15611717575060009050600461179b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561176b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166117945760006001925092505061179b565b9150600090505b94509492505050565b60008160048111156117b8576117b86120d8565b036117c05750565b60018160048111156117d4576117d46120d8565b036118215760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106c7565b6002816004811115611835576118356120d8565b036118825760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106c7565b6003816004811115611896576118966120d8565b036118ee5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016106c7565b6004816004811115611902576119026120d8565b036106d95760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016106c7565b60008481526005602090815260408083206001600160a01b0387168452600381019092529091205460ff16156119e25760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b60648201526084016106c7565b6001600160a01b03841660009081526003820160205260409020805460ff1916600117905560ff8316611a2e5781816000016000828254611a239190612514565b90915550610e2a9050565b60001960ff841601611a4e5781816001016000828254611a239190612514565b60011960ff841601611a6e5781816002016000828254611a239190612514565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b60648201526084016106c7565b6000818152600160208181526040808420815160a08101835281546001600160401b0390811660808301908152825283518086018552958301541685529283019390935260029092015460ff80821615801594840194909452610100909104161515606082015290611b495750600792915050565b806060015115611b5c5750600292915050565b80515143906001600160401b031610611b785750600092915050565b43611b8582602001515190565b6001600160401b031610611b9c5750600192915050565b611ba98160200151611ca4565b15611bea57611bb783611cd3565b8015611bd6575060008381526005602052604090208054600190910154115b611be1576003610ca9565b60049392505050565b60405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c20696400000060448201526064016106c7565b50919050565b60006001600160401b03821115611ca05760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b60648201526084016106c7565b5090565b6000611cb982516001600160401b0316151590565b801561066257505051436001600160401b03909116111590565b600081815260056020526040812060028101546001820154611cf59190612514565b611d0161060585610a41565b11159392505050565b600060208284031215611d1c57600080fd5b81356001600160e01b031981168114610ca957600080fd5b600060208284031215611d4657600080fd5b5035919050565b6000815180845260005b81811015611d7357602081850181015186830182015201611d57565b81811115611d85576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610ca96020830184611d4d565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611deb57611deb611dad565b604052919050565b60006001600160401b03821115611e0c57611e0c611dad565b5060051b60200190565b6001600160a01b03811681146106d957600080fd5b600082601f830112611e3c57600080fd5b81356020611e51611e4c83611df3565b611dc3565b82815260059290921b84018101918181019086841115611e7057600080fd5b8286015b84811015611e94578035611e8781611e16565b8352918301918301611e74565b509695505050505050565b600082601f830112611eb057600080fd5b81356020611ec0611e4c83611df3565b82815260059290921b84018101918181019086841115611edf57600080fd5b8286015b84811015611e945780358352918301918301611ee3565b60006001600160401b03831115611f1357611f13611dad565b611f26601f8401601f1916602001611dc3565b9050828152838383011115611f3a57600080fd5b828260208301376000602084830101529392505050565b600082601f830112611f6257600080fd5b81356020611f72611e4c83611df3565b82815260059290921b84018101918181019086841115611f9157600080fd5b8286015b84811015611e945780356001600160401b03811115611fb45760008081fd5b8701603f81018913611fc65760008081fd5b611fd7898683013560408401611efa565b845250918301918301611f95565b60008060008060808587031215611ffb57600080fd5b84356001600160401b038082111561201257600080fd5b61201e88838901611e2b565b9550602087013591508082111561203457600080fd5b61204088838901611e9f565b9450604087013591508082111561205657600080fd5b5061206387828801611f51565b949793965093946060013593505050565b803560ff8116811461208557600080fd5b919050565b600080600080600060a086880312156120a257600080fd5b853594506120b260208701612074565b93506120c060408701612074565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061211057634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561212957600080fd5b82359150602083013561213b81611e16565b809150509250929050565b6000806040838503121561215957600080fd5b8235915061216960208401612074565b90509250929050565b6000806000806060858703121561218857600080fd5b8435935061219860208601612074565b925060408501356001600160401b03808211156121b457600080fd5b818701915087601f8301126121c857600080fd5b8135818111156121d757600080fd5b8860208285010111156121e957600080fd5b95989497505060200194505050565b6000806000806080858703121561220e57600080fd5b84356001600160401b038082111561222557600080fd5b61223188838901611e2b565b9550602087013591508082111561224757600080fd5b61225388838901611e9f565b9450604087013591508082111561226957600080fd5b61227588838901611f51565b9350606087013591508082111561228b57600080fd5b508501601f8101871361229d57600080fd5b6122ac87823560208401611efa565b91505092959194509250565b6000602082840312156122ca57600080fd5b8135610ca981611e16565b600080604083850312156122e857600080fd5b82356122f381611e16565b946020939093013593505050565b600181811c9082168061231557607f821691505b602082108103611c3257634e487b7160e01b600052602260045260246000fd5b60208082526021908201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756040820152601b60fa1b606082015260800190565b60006020828403121561238857600080fd5b5051919050565b600081518084526020808501945080840160005b838110156123c85781516001600160a01b0316875295820195908201906001016123a3565b509495945050505050565b600081518084526020808501945080840160005b838110156123c8578151875295820195908201906001016123e7565b600081518084526020808501808196508360051b8101915082860160005b8581101561244b578284038952612439848351611d4d565b98850198935090840190600101612421565b5091979650505050505050565b60a08152600061246b60a083018861238f565b828103602084015261247d81886123d3565b905082810360408401526124918187612403565b60608401959095525050608001529392505050565b60c0815260006124b960c083018961238f565b82810360208401526124cb81896123d3565b905082810360408401526124df8188612403565b60608401969096525050608081019290925260a0909101529392505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612527576125276124fe565b500190565b60808152600061253f608083018761238f565b828103602084015261255181876123d3565b905082810360408401526125658186612403565b91505082606083015295945050505050565b84815260ff84166020820152826040820152608060608201526000610b886080830184611d4d565b6000602082840312156125b157600080fd5b81518015158114610ca957600080fd5b6000828210156125d3576125d36124fe565b500390565b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b0380831681851680830382111561263b5761263b6124fe565b01949350505050565b60006101208b8352602060018060a01b038c168185015281604085015261266d8285018c61238f565b91508382036060850152612681828b6123d3565b915083820360808501528189518084528284019150828160051b850101838c0160005b838110156126d257601f198784030185526126c0838351611d4d565b948601949250908501906001016126a4565b505086810360a08801526126e6818c612403565b94505050505061270160c08401876001600160401b03169052565b6001600160401b03851660e08401528281036101008401526127238185611d4d565b9c9b505050505050505050505050565b600081600019048311821515161561274d5761274d6124fe565b500290565b60008261276f57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220cfcc489c806b7b93fd1dfea50b8758a607bd98347e2c24f69862b7f7bf65768e64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "_token", "type": "address", "internalType": "contract ERC20Votes"}, {"name": "_timelock", "type": "address", "internalType": "contract TimelockController"}]}, {"type": "event", "name": "ProposalCanceled", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalCreated", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "proposer", "type": "address", "internalType": "address", "indexed": false}, {"name": "targets", "type": "address[]", "internalType": "address[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "signatures", "type": "string[]", "internalType": "string[]", "indexed": false}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]", "indexed": false}, {"name": "startBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "endBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "description", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalExecuted", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalQueued", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "eta", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "QuorumNumeratorUpdated", "inputs": [{"name": "oldQuorumNumerator", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newQuorumNumerator", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TimelockChange", "inputs": [{"name": "oldTimelock", "type": "address", "internalType": "address", "indexed": false}, {"name": "newTimelock", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VoteCast", "inputs": [{"name": "voter", "type": "address", "internalType": "address", "indexed": true}, {"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "support", "type": "uint8", "internalType": "uint8", "indexed": false}, {"name": "weight", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "reason", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "function", "name": "BALLOT_TYPEHASH", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "COUNTING_MODE", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "castVote", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteBySig", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteWithReason", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "reason", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "hasVoted", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "hashProposal", "stateMutability": "pure", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "proposalDeadline", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalEta", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalSnapshot", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalThreshold", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalVotes", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "againstVotes", "type": "uint256", "internalType": "uint256"}, {"name": "forVotes", "type": "uint256", "internalType": "uint256"}, {"name": "abstainVotes", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "queue", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorum", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorumDenominator", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorumNumerator", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "enum IGovernor.ProposalState"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "timelock", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "token", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "contract ERC20Votes"}]}, {"type": "function", "name": "updateQuorumNumerator", "stateMutability": "nonpayable", "inputs": [{"name": "newQuorumNumerator", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "updateTimelock", "stateMutability": "nonpayable", "inputs": [{"name": "newTimelock", "type": "address", "internalType": "contract TimelockController"}], "outputs": []}, {"type": "function", "name": "version", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "votingDelay", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "votingPeriod", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {"votingDelay()": {"notice": "module:user-config"}, "votingPeriod()": {"notice": "module:user-config"}}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"COUNTING_MODE()": {"details": "See {IGovernor-COUNTING_MODE}."}, "castVote(uint256,uint8)": {"details": "See {IGovernor-castVote}."}, "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {"details": "See {IGovernor-castVoteBySig}."}, "castVoteWithReason(uint256,uint8,string)": {"details": "See {IGovernor-castVoteWithReason}."}, "execute(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-execute}."}, "hasVoted(uint256,address)": {"details": "See {IGovernor-hasVoted}."}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."}, "name()": {"details": "See {IGovernor-name}."}, "proposalDeadline(uint256)": {"details": "See {IGovernor-proposalDeadline}."}, "proposalEta(uint256)": {"details": "Public accessor to check the eta of a queued proposal"}, "proposalSnapshot(uint256)": {"details": "See {IGovernor-proposalSnapshot}."}, "proposalThreshold()": {"details": "Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_."}, "proposalVotes(uint256)": {"details": "Accessor to the internal vote counts."}, "queue(address[],uint256[],bytes[],bytes32)": {"details": "Function to queue a proposal to the timelock."}, "timelock()": {"details": "Public accessor to check the address of the timelock"}, "updateTimelock(address)": {"details": "Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates must be proposed, scheduled and executed using the {Governor} workflow."}, "version()": {"details": "See {IGovernor-version}."}, "votingDelay()": {"details": "Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts."}, "votingPeriod()": {"details": "Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay."}}, "version": 1}}, "MyGovernor2": {"contractName": "MyGovernor2", "sourceId": "mocks/wizard/MyGovernor2.sol", "deploymentBytecode": {"bytecode": "0x6101606040523480156200001257600080fd5b5060405162002c0038038062002c00833981016040819052620000359162000353565b600482826040518060400160405280600a81526020016926bca3b7bb32b93737b960b11b815250806200006d6200014360201b60201c565b815160208084019190912082518383012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c00190528051940193909320919290916080523060c052610120525050825162000113925060009150602084019062000294565b50620001219050816200015e565b506001600160a01b0316610140526200013a81620001c7565b505050620003ce565b6040805180820190915260018152603160f81b602082015290565b600254604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600280546001600160a01b0319166001600160a01b0392909216919091179055565b60648111156200024f5760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a40160405180910390fd5b600480549082905560408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b828054620002a29062000392565b90600052602060002090601f016020900481019282620002c6576000855562000311565b82601f10620002e157805160ff191683800117855562000311565b8280016001018555821562000311579182015b8281111562000311578251825591602001919060010190620002f4565b506200031f92915062000323565b5090565b5b808211156200031f576000815560010162000324565b6001600160a01b03811681146200035057600080fd5b50565b600080604083850312156200036757600080fd5b825162000374816200033a565b602084015190925062000387816200033a565b809150509250929050565b600181811c90821680620003a757607f821691505b602082108103620003c857634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516101005161012051610140516127c962000437600039600081816106240152818161111e01526111a801526000611362015260006113b10152600061138c015260006112e50152600061130f0152600061133901526127c96000f3fe6080604052600436106101c65760003560e01c80637b3c71d3116100f7578063c01f9e3711610095578063deaaa7cc11610064578063deaaa7cc1461059e578063eb9019d4146105d2578063f8ce560a146105f2578063fc0c546a1461061257600080fd5b8063c01f9e37146104e6578063c59057e414610506578063d33219b414610526578063dd4e2ba51461055857600080fd5b8063a7713a70116100d1578063a7713a7014610475578063a890c9101461048a578063ab58fb8e146104aa578063b58131b0146104ca57600080fd5b80637b3c71d3146104215780637d5e81e21461044157806397c3d3341461046157600080fd5b80633932abb111610164578063438596321161013e5780634385963214610338578063544ffc9c1461038257806354fd4d50146103d7578063567813881461040157600080fd5b80633932abb1146102d75780633bccf4fd146102eb5780633e4f49e61461030b57600080fd5b806306fdde03116101a057806306fdde0314610262578063160cbed7146102845780632656227d146102a45780632d63f693146102b757600080fd5b806301ffc9a7146101ee57806302a251a31461022357806306f3f9e61461024257600080fd5b366101e957306101d4610646565b6001600160a01b0316146101e757600080fd5b005b600080fd5b3480156101fa57600080fd5b5061020e610209366004611d29565b61065f565b60405190151581526020015b60405180910390f35b34801561022f57600080fd5b5061b2fa5b60405190815260200161021a565b34801561024e57600080fd5b506101e761025d366004611d53565b610670565b34801561026e57600080fd5b506102776106e4565b60405161021a9190611db9565b34801561029057600080fd5b5061023461029f366004612004565b610776565b6102346102b2366004612004565b610976565b3480156102c357600080fd5b506102346102d2366004611d53565b610a49565b3480156102e357600080fd5b506001610234565b3480156102f757600080fd5b506102346103063660046120a9565b610a80565b34801561031757600080fd5b5061032b610326366004611d53565b610b14565b60405161021a919061210d565b34801561034457600080fd5b5061020e610353366004612135565b60008281526005602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b34801561038e57600080fd5b506103bc61039d366004611d53565b6000908152600560205260409020805460018201546002909201549092565b6040805193845260208401929092529082015260600161021a565b3480156103e357600080fd5b506040805180820190915260018152603160f81b6020820152610277565b34801561040d57600080fd5b5061023461041c366004612165565b610b1f565b34801561042d57600080fd5b5061023461043c366004612191565b610b48565b34801561044d57600080fd5b5061023461045c366004612217565b610b9a565b34801561046d57600080fd5b506064610234565b34801561048157600080fd5b50600454610234565b34801561049657600080fd5b506101e76104a53660046122d7565b610bb1565b3480156104b657600080fd5b506102346104c5366004611d53565b610c1d565b3480156104d657600080fd5b50683635c9adc5dea00000610234565b3480156104f257600080fd5b50610234610501366004611d53565b610cb8565b34801561051257600080fd5b50610234610521366004612004565b610ce7565b34801561053257600080fd5b506002546001600160a01b03165b6040516001600160a01b03909116815260200161021a565b34801561056457600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e90820152610277565b3480156105aa57600080fd5b506102347f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b3480156105de57600080fd5b506102346105ed3660046122f4565b610d21565b3480156105fe57600080fd5b5061023461060d366004611d53565b610d2d565b34801561061e57600080fd5b506105407f000000000000000000000000000000000000000000000000000000000000000081565b600061065a6002546001600160a01b031690565b905090565b600061066a82610d38565b92915050565b610678610646565b6001600160a01b0316336001600160a01b0316146106d85760405162461bcd60e51b8152602060048201526018602482015277476f7665726e6f723a206f6e6c79476f7665726e616e636560401b60448201526064015b60405180910390fd5b6106e181610d5d565b50565b6060600080546106f390612320565b80601f016020809104026020016040519081016040528092919081815260200182805461071f90612320565b801561076c5780601f106107415761010080835404028352916020019161076c565b820191906000526020600020905b81548152906001019060200180831161074f57829003601f168201915b5050505050905090565b60008061078586868686610ce7565b9050600461079282610b14565b60078111156107a3576107a36120f7565b146107c05760405162461bcd60e51b81526004016106cf90612354565b6002546040805163793d064960e11b815290516000926001600160a01b03169163f27a0c929160048083019260209291908290030181865afa15801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e9190612395565b60025460405163b1c5f42760e01b81529192506001600160a01b03169063b1c5f42790610868908a908a908a906000908b90600401612477565b602060405180830381865afa158015610885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a99190612395565b6000838152600360205260408082209290925560025491516308f2a0bb60e41b81526001600160a01b0390921691638f2a0bb0916108f4918b918b918b91908b9089906004016124c5565b600060405180830381600087803b15801561090e57600080fd5b505af1158015610922573d6000803e3d6000fd5b505050507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda28928282426109549190612533565b6040805192835260208301919091520160405180910390a15095945050505050565b60008061098586868686610ce7565b9050600061099282610b14565b905060048160078111156109a8576109a86120f7565b14806109c5575060058160078111156109c3576109c36120f7565b145b6109e15760405162461bcd60e51b81526004016106cf90612354565b600082815260016020818152604092839020600201805460ff191690921790915590518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f910160405180910390a1610a3f8288888888610e25565b5095945050505050565b60008181526001602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610aec90610ae49060800160405160208183030381529060405280519060200120610e39565b868686610e87565b9050610b0987828860405180602001604052806000815250610ea5565b979650505050505050565b600061066a82610fb0565b600080339050610b4084828560405180602001604052806000815250610ea5565b949350505050565b600080339050610b9086828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ea592505050565b9695505050505050565b6000610ba88585858561107e565b95945050505050565b610bb9610646565b6001600160a01b0316336001600160a01b031614610c145760405162461bcd60e51b8152602060048201526018602482015277476f7665726e6f723a206f6e6c79476f7665726e616e636560401b60448201526064016106cf565b6106e18161108c565b60025460008281526003602052604080822054905163d45c443560e01b81526004810191909152909182916001600160a01b039091169063d45c443590602401602060405180830381865afa158015610c7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9e9190612395565b905080600114610cae5780610cb1565b60005b9392505050565b60008181526001602081815260408084208151928301909152909101546001600160401b031690819052610a71565b600084848484604051602001610d00949392919061254b565b60408051601f19818403018152919052805160209091012095945050505050565b6000610cb183836110f5565b600061066a8261118b565b60006001600160e01b03198216636e665ced60e01b148061066a575061066a8261122f565b6064811115610de05760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a4016106cf565b600480549082905560408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b610e328585858585611264565b5050505050565b600061066a610e466112d8565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000610e98878787876113ff565b91509150610a3f816114ec565b6000848152600160208190526040822090610ebf87610b14565b6007811115610ed057610ed06120f7565b14610f295760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b60648201526084016106cf565b604080516020810190915281546001600160401b031690819052600090610f51908790610d21565b9050610f5f878787846116a2565b856001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda488878488604051610f9e9493929190612596565b60405180910390a29695505050505050565b600080610fbc8361181c565b90506004816007811115610fd257610fd26120f7565b14610fdd5792915050565b60008381526003602052604090205480610ff8575092915050565b600254604051632ab0f52960e01b8152600481018390526001600160a01b0390911690632ab0f52990602401602060405180830381865afa158015611041573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106591906125be565b15611074575060079392505050565b5060059392505050565b6000610ba885858585611980565b600254604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600280546001600160a01b0319166001600160a01b0392909216919091179055565b604051630748d63560e31b81526001600160a01b038381166004830152602482018390526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a890604401602060405180830381865afa158015611167573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb19190612395565b60006064600454604051632394e7a360e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e539e8c90602401602060405180830381865afa1580156111f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121b9190612395565b61122591906125e0565b61066a91906125ff565b60006001600160e01b0319821663bf26d89760e01b148061066a57506301ffc9a760e01b6001600160e01b031983161461066a565b60025460405163e38335e560e01b81526001600160a01b039091169063e38335e590349061129f908890889088906000908990600401612477565b6000604051808303818588803b1580156112b857600080fd5b505af11580156112cc573d6000803e3d6000fd5b50505050505050505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561133157507f000000000000000000000000000000000000000000000000000000000000000046145b1561135b57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561143657506000905060036114e3565b8460ff16601b1415801561144e57508460ff16601c14155b1561145f57506000905060046114e3565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156114b3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166114dc576000600192509250506114e3565b9150600090505b94509492505050565b6000816004811115611500576115006120f7565b036115085750565b600181600481111561151c5761151c6120f7565b036115695760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106cf565b600281600481111561157d5761157d6120f7565b036115ca5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106cf565b60038160048111156115de576115de6120f7565b036116365760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016106cf565b600481600481111561164a5761164a6120f7565b036106e15760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016106cf565b60008481526005602090815260408083206001600160a01b0387168452600381019092529091205460ff161561172a5760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b60648201526084016106cf565b6001600160a01b03841660009081526003820160205260409020805460ff1916600117905560ff8316611776578181600001600082825461176b9190612533565b90915550610e329050565b60001960ff841601611796578181600101600082825461176b9190612533565b60011960ff8416016117b6578181600201600082825461176b9190612533565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b60648201526084016106cf565b6000818152600160208181526040808420815160a08101835281546001600160401b0390811660808301908152825283518086018552958301541685529283019390935260029092015460ff808216158015948401949094526101009091041615156060820152906118915750600792915050565b8060600151156118a45750600292915050565b80515143906001600160401b0316106118c05750600092915050565b436118cd82602001515190565b6001600160401b0316106118e45750600192915050565b6118f18160200151611c57565b15611932576118ff83611c86565b801561191e575060008381526005602052604090208054600190910154115b611929576003610cb1565b60049392505050565b60405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c20696400000060448201526064016106cf565b50919050565b6000683635c9adc5dea0000061199b336105ed600143612621565b1015611a1b5760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72436f6d7061746962696c697479427261766f3a2070726f7060448201527f6f73657220766f7465732062656c6f772070726f706f73616c207468726573686064820152621bdb1960ea1b608482015260a4016106cf565b6000611a308686868680519060200120610ce7565b90508451865114611a535760405162461bcd60e51b81526004016106cf90612638565b8351865114611a745760405162461bcd60e51b81526004016106cf90612638565b6000865111611ac55760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c000000000000000060448201526064016106cf565b600081815260016020908152604091829020825191820190925281546001600160401b03169081905215611b455760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b60648201526084016106cf565b6000611b516001611cbd565b611b5a43611cbd565b611b649190612679565b90506000611b7361b2fa611cbd565b611b7d9083612679565b835467ffffffffffffffff19166001600160401b038416178455905060018301805467ffffffffffffffff19166001600160401b0383161790557f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b03811115611bf557611bf5611dcc565b604051908082528060200260200182016040528015611c2857816020015b6060815260200190600190039081611c135790505b508c88888e604051611c42999897969594939291906126a4565b60405180910390a15091979650505050505050565b6000611c6c82516001600160401b0316151590565b801561066a57505051436001600160401b03909116111590565b600081815260056020526040812060028101546001820154611ca89190612533565b611cb461060d85610a49565b11159392505050565b60006001600160401b03821115611d255760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b60648201526084016106cf565b5090565b600060208284031215611d3b57600080fd5b81356001600160e01b031981168114610cb157600080fd5b600060208284031215611d6557600080fd5b5035919050565b6000815180845260005b81811015611d9257602081850181015186830182015201611d76565b81811115611da4576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610cb16020830184611d6c565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611e0a57611e0a611dcc565b604052919050565b60006001600160401b03821115611e2b57611e2b611dcc565b5060051b60200190565b6001600160a01b03811681146106e157600080fd5b600082601f830112611e5b57600080fd5b81356020611e70611e6b83611e12565b611de2565b82815260059290921b84018101918181019086841115611e8f57600080fd5b8286015b84811015611eb3578035611ea681611e35565b8352918301918301611e93565b509695505050505050565b600082601f830112611ecf57600080fd5b81356020611edf611e6b83611e12565b82815260059290921b84018101918181019086841115611efe57600080fd5b8286015b84811015611eb35780358352918301918301611f02565b60006001600160401b03831115611f3257611f32611dcc565b611f45601f8401601f1916602001611de2565b9050828152838383011115611f5957600080fd5b828260208301376000602084830101529392505050565b600082601f830112611f8157600080fd5b81356020611f91611e6b83611e12565b82815260059290921b84018101918181019086841115611fb057600080fd5b8286015b84811015611eb35780356001600160401b03811115611fd35760008081fd5b8701603f81018913611fe55760008081fd5b611ff6898683013560408401611f19565b845250918301918301611fb4565b6000806000806080858703121561201a57600080fd5b84356001600160401b038082111561203157600080fd5b61203d88838901611e4a565b9550602087013591508082111561205357600080fd5b61205f88838901611ebe565b9450604087013591508082111561207557600080fd5b5061208287828801611f70565b949793965093946060013593505050565b803560ff811681146120a457600080fd5b919050565b600080600080600060a086880312156120c157600080fd5b853594506120d160208701612093565b93506120df60408701612093565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061212f57634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561214857600080fd5b82359150602083013561215a81611e35565b809150509250929050565b6000806040838503121561217857600080fd5b8235915061218860208401612093565b90509250929050565b600080600080606085870312156121a757600080fd5b843593506121b760208601612093565b925060408501356001600160401b03808211156121d357600080fd5b818701915087601f8301126121e757600080fd5b8135818111156121f657600080fd5b88602082850101111561220857600080fd5b95989497505060200194505050565b6000806000806080858703121561222d57600080fd5b84356001600160401b038082111561224457600080fd5b61225088838901611e4a565b9550602087013591508082111561226657600080fd5b61227288838901611ebe565b9450604087013591508082111561228857600080fd5b61229488838901611f70565b935060608701359150808211156122aa57600080fd5b508501601f810187136122bc57600080fd5b6122cb87823560208401611f19565b91505092959194509250565b6000602082840312156122e957600080fd5b8135610cb181611e35565b6000806040838503121561230757600080fd5b823561231281611e35565b946020939093013593505050565b600181811c9082168061233457607f821691505b60208210810361197a57634e487b7160e01b600052602260045260246000fd5b60208082526021908201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756040820152601b60fa1b606082015260800190565b6000602082840312156123a757600080fd5b5051919050565b600081518084526020808501945080840160005b838110156123e75781516001600160a01b0316875295820195908201906001016123c2565b509495945050505050565b600081518084526020808501945080840160005b838110156123e757815187529582019590820190600101612406565b600081518084526020808501808196508360051b8101915082860160005b8581101561246a578284038952612458848351611d6c565b98850198935090840190600101612440565b5091979650505050505050565b60a08152600061248a60a08301886123ae565b828103602084015261249c81886123f2565b905082810360408401526124b08187612422565b60608401959095525050608001529392505050565b60c0815260006124d860c08301896123ae565b82810360208401526124ea81896123f2565b905082810360408401526124fe8188612422565b60608401969096525050608081019290925260a0909101529392505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156125465761254661251d565b500190565b60808152600061255e60808301876123ae565b828103602084015261257081876123f2565b905082810360408401526125848186612422565b91505082606083015295945050505050565b84815260ff84166020820152826040820152608060608201526000610b906080830184611d6c565b6000602082840312156125d057600080fd5b81518015158114610cb157600080fd5b60008160001904831182151516156125fa576125fa61251d565b500290565b60008261261c57634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156126335761263361251d565b500390565b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b0380831681851680830382111561269b5761269b61251d565b01949350505050565b60006101208b8352602060018060a01b038c16818501528160408501526126cd8285018c6123ae565b915083820360608501526126e1828b6123f2565b915083820360808501528189518084528284019150828160051b850101838c0160005b8381101561273257601f19878403018552612720838351611d6c565b94860194925090850190600101612704565b505086810360a0880152612746818c612422565b94505050505061276160c08401876001600160401b03169052565b6001600160401b03851660e08401528281036101008401526127838185611d6c565b9c9b50505050505050505050505056fea26469706673582212207c43f5bf49205d74642acc8dbd90f73be6153add180b4a2fa2ca0217f93ee91e64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052600436106101c65760003560e01c80637b3c71d3116100f7578063c01f9e3711610095578063deaaa7cc11610064578063deaaa7cc1461059e578063eb9019d4146105d2578063f8ce560a146105f2578063fc0c546a1461061257600080fd5b8063c01f9e37146104e6578063c59057e414610506578063d33219b414610526578063dd4e2ba51461055857600080fd5b8063a7713a70116100d1578063a7713a7014610475578063a890c9101461048a578063ab58fb8e146104aa578063b58131b0146104ca57600080fd5b80637b3c71d3146104215780637d5e81e21461044157806397c3d3341461046157600080fd5b80633932abb111610164578063438596321161013e5780634385963214610338578063544ffc9c1461038257806354fd4d50146103d7578063567813881461040157600080fd5b80633932abb1146102d75780633bccf4fd146102eb5780633e4f49e61461030b57600080fd5b806306fdde03116101a057806306fdde0314610262578063160cbed7146102845780632656227d146102a45780632d63f693146102b757600080fd5b806301ffc9a7146101ee57806302a251a31461022357806306f3f9e61461024257600080fd5b366101e957306101d4610646565b6001600160a01b0316146101e757600080fd5b005b600080fd5b3480156101fa57600080fd5b5061020e610209366004611d29565b61065f565b60405190151581526020015b60405180910390f35b34801561022f57600080fd5b5061b2fa5b60405190815260200161021a565b34801561024e57600080fd5b506101e761025d366004611d53565b610670565b34801561026e57600080fd5b506102776106e4565b60405161021a9190611db9565b34801561029057600080fd5b5061023461029f366004612004565b610776565b6102346102b2366004612004565b610976565b3480156102c357600080fd5b506102346102d2366004611d53565b610a49565b3480156102e357600080fd5b506001610234565b3480156102f757600080fd5b506102346103063660046120a9565b610a80565b34801561031757600080fd5b5061032b610326366004611d53565b610b14565b60405161021a919061210d565b34801561034457600080fd5b5061020e610353366004612135565b60008281526005602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b34801561038e57600080fd5b506103bc61039d366004611d53565b6000908152600560205260409020805460018201546002909201549092565b6040805193845260208401929092529082015260600161021a565b3480156103e357600080fd5b506040805180820190915260018152603160f81b6020820152610277565b34801561040d57600080fd5b5061023461041c366004612165565b610b1f565b34801561042d57600080fd5b5061023461043c366004612191565b610b48565b34801561044d57600080fd5b5061023461045c366004612217565b610b9a565b34801561046d57600080fd5b506064610234565b34801561048157600080fd5b50600454610234565b34801561049657600080fd5b506101e76104a53660046122d7565b610bb1565b3480156104b657600080fd5b506102346104c5366004611d53565b610c1d565b3480156104d657600080fd5b50683635c9adc5dea00000610234565b3480156104f257600080fd5b50610234610501366004611d53565b610cb8565b34801561051257600080fd5b50610234610521366004612004565b610ce7565b34801561053257600080fd5b506002546001600160a01b03165b6040516001600160a01b03909116815260200161021a565b34801561056457600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e90820152610277565b3480156105aa57600080fd5b506102347f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b3480156105de57600080fd5b506102346105ed3660046122f4565b610d21565b3480156105fe57600080fd5b5061023461060d366004611d53565b610d2d565b34801561061e57600080fd5b506105407f000000000000000000000000000000000000000000000000000000000000000081565b600061065a6002546001600160a01b031690565b905090565b600061066a82610d38565b92915050565b610678610646565b6001600160a01b0316336001600160a01b0316146106d85760405162461bcd60e51b8152602060048201526018602482015277476f7665726e6f723a206f6e6c79476f7665726e616e636560401b60448201526064015b60405180910390fd5b6106e181610d5d565b50565b6060600080546106f390612320565b80601f016020809104026020016040519081016040528092919081815260200182805461071f90612320565b801561076c5780601f106107415761010080835404028352916020019161076c565b820191906000526020600020905b81548152906001019060200180831161074f57829003601f168201915b5050505050905090565b60008061078586868686610ce7565b9050600461079282610b14565b60078111156107a3576107a36120f7565b146107c05760405162461bcd60e51b81526004016106cf90612354565b6002546040805163793d064960e11b815290516000926001600160a01b03169163f27a0c929160048083019260209291908290030181865afa15801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e9190612395565b60025460405163b1c5f42760e01b81529192506001600160a01b03169063b1c5f42790610868908a908a908a906000908b90600401612477565b602060405180830381865afa158015610885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a99190612395565b6000838152600360205260408082209290925560025491516308f2a0bb60e41b81526001600160a01b0390921691638f2a0bb0916108f4918b918b918b91908b9089906004016124c5565b600060405180830381600087803b15801561090e57600080fd5b505af1158015610922573d6000803e3d6000fd5b505050507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda28928282426109549190612533565b6040805192835260208301919091520160405180910390a15095945050505050565b60008061098586868686610ce7565b9050600061099282610b14565b905060048160078111156109a8576109a86120f7565b14806109c5575060058160078111156109c3576109c36120f7565b145b6109e15760405162461bcd60e51b81526004016106cf90612354565b600082815260016020818152604092839020600201805460ff191690921790915590518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f910160405180910390a1610a3f8288888888610e25565b5095945050505050565b60008181526001602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610aec90610ae49060800160405160208183030381529060405280519060200120610e39565b868686610e87565b9050610b0987828860405180602001604052806000815250610ea5565b979650505050505050565b600061066a82610fb0565b600080339050610b4084828560405180602001604052806000815250610ea5565b949350505050565b600080339050610b9086828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ea592505050565b9695505050505050565b6000610ba88585858561107e565b95945050505050565b610bb9610646565b6001600160a01b0316336001600160a01b031614610c145760405162461bcd60e51b8152602060048201526018602482015277476f7665726e6f723a206f6e6c79476f7665726e616e636560401b60448201526064016106cf565b6106e18161108c565b60025460008281526003602052604080822054905163d45c443560e01b81526004810191909152909182916001600160a01b039091169063d45c443590602401602060405180830381865afa158015610c7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9e9190612395565b905080600114610cae5780610cb1565b60005b9392505050565b60008181526001602081815260408084208151928301909152909101546001600160401b031690819052610a71565b600084848484604051602001610d00949392919061254b565b60408051601f19818403018152919052805160209091012095945050505050565b6000610cb183836110f5565b600061066a8261118b565b60006001600160e01b03198216636e665ced60e01b148061066a575061066a8261122f565b6064811115610de05760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a4016106cf565b600480549082905560408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b610e328585858585611264565b5050505050565b600061066a610e466112d8565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000610e98878787876113ff565b91509150610a3f816114ec565b6000848152600160208190526040822090610ebf87610b14565b6007811115610ed057610ed06120f7565b14610f295760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b60648201526084016106cf565b604080516020810190915281546001600160401b031690819052600090610f51908790610d21565b9050610f5f878787846116a2565b856001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda488878488604051610f9e9493929190612596565b60405180910390a29695505050505050565b600080610fbc8361181c565b90506004816007811115610fd257610fd26120f7565b14610fdd5792915050565b60008381526003602052604090205480610ff8575092915050565b600254604051632ab0f52960e01b8152600481018390526001600160a01b0390911690632ab0f52990602401602060405180830381865afa158015611041573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106591906125be565b15611074575060079392505050565b5060059392505050565b6000610ba885858585611980565b600254604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600280546001600160a01b0319166001600160a01b0392909216919091179055565b604051630748d63560e31b81526001600160a01b038381166004830152602482018390526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a890604401602060405180830381865afa158015611167573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb19190612395565b60006064600454604051632394e7a360e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e539e8c90602401602060405180830381865afa1580156111f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121b9190612395565b61122591906125e0565b61066a91906125ff565b60006001600160e01b0319821663bf26d89760e01b148061066a57506301ffc9a760e01b6001600160e01b031983161461066a565b60025460405163e38335e560e01b81526001600160a01b039091169063e38335e590349061129f908890889088906000908990600401612477565b6000604051808303818588803b1580156112b857600080fd5b505af11580156112cc573d6000803e3d6000fd5b50505050505050505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561133157507f000000000000000000000000000000000000000000000000000000000000000046145b1561135b57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561143657506000905060036114e3565b8460ff16601b1415801561144e57508460ff16601c14155b1561145f57506000905060046114e3565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156114b3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166114dc576000600192509250506114e3565b9150600090505b94509492505050565b6000816004811115611500576115006120f7565b036115085750565b600181600481111561151c5761151c6120f7565b036115695760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106cf565b600281600481111561157d5761157d6120f7565b036115ca5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106cf565b60038160048111156115de576115de6120f7565b036116365760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016106cf565b600481600481111561164a5761164a6120f7565b036106e15760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016106cf565b60008481526005602090815260408083206001600160a01b0387168452600381019092529091205460ff161561172a5760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b60648201526084016106cf565b6001600160a01b03841660009081526003820160205260409020805460ff1916600117905560ff8316611776578181600001600082825461176b9190612533565b90915550610e329050565b60001960ff841601611796578181600101600082825461176b9190612533565b60011960ff8416016117b6578181600201600082825461176b9190612533565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b60648201526084016106cf565b6000818152600160208181526040808420815160a08101835281546001600160401b0390811660808301908152825283518086018552958301541685529283019390935260029092015460ff808216158015948401949094526101009091041615156060820152906118915750600792915050565b8060600151156118a45750600292915050565b80515143906001600160401b0316106118c05750600092915050565b436118cd82602001515190565b6001600160401b0316106118e45750600192915050565b6118f18160200151611c57565b15611932576118ff83611c86565b801561191e575060008381526005602052604090208054600190910154115b611929576003610cb1565b60049392505050565b60405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c20696400000060448201526064016106cf565b50919050565b6000683635c9adc5dea0000061199b336105ed600143612621565b1015611a1b5760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72436f6d7061746962696c697479427261766f3a2070726f7060448201527f6f73657220766f7465732062656c6f772070726f706f73616c207468726573686064820152621bdb1960ea1b608482015260a4016106cf565b6000611a308686868680519060200120610ce7565b90508451865114611a535760405162461bcd60e51b81526004016106cf90612638565b8351865114611a745760405162461bcd60e51b81526004016106cf90612638565b6000865111611ac55760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c000000000000000060448201526064016106cf565b600081815260016020908152604091829020825191820190925281546001600160401b03169081905215611b455760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b60648201526084016106cf565b6000611b516001611cbd565b611b5a43611cbd565b611b649190612679565b90506000611b7361b2fa611cbd565b611b7d9083612679565b835467ffffffffffffffff19166001600160401b038416178455905060018301805467ffffffffffffffff19166001600160401b0383161790557f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b03811115611bf557611bf5611dcc565b604051908082528060200260200182016040528015611c2857816020015b6060815260200190600190039081611c135790505b508c88888e604051611c42999897969594939291906126a4565b60405180910390a15091979650505050505050565b6000611c6c82516001600160401b0316151590565b801561066a57505051436001600160401b03909116111590565b600081815260056020526040812060028101546001820154611ca89190612533565b611cb461060d85610a49565b11159392505050565b60006001600160401b03821115611d255760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b60648201526084016106cf565b5090565b600060208284031215611d3b57600080fd5b81356001600160e01b031981168114610cb157600080fd5b600060208284031215611d6557600080fd5b5035919050565b6000815180845260005b81811015611d9257602081850181015186830182015201611d76565b81811115611da4576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610cb16020830184611d6c565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611e0a57611e0a611dcc565b604052919050565b60006001600160401b03821115611e2b57611e2b611dcc565b5060051b60200190565b6001600160a01b03811681146106e157600080fd5b600082601f830112611e5b57600080fd5b81356020611e70611e6b83611e12565b611de2565b82815260059290921b84018101918181019086841115611e8f57600080fd5b8286015b84811015611eb3578035611ea681611e35565b8352918301918301611e93565b509695505050505050565b600082601f830112611ecf57600080fd5b81356020611edf611e6b83611e12565b82815260059290921b84018101918181019086841115611efe57600080fd5b8286015b84811015611eb35780358352918301918301611f02565b60006001600160401b03831115611f3257611f32611dcc565b611f45601f8401601f1916602001611de2565b9050828152838383011115611f5957600080fd5b828260208301376000602084830101529392505050565b600082601f830112611f8157600080fd5b81356020611f91611e6b83611e12565b82815260059290921b84018101918181019086841115611fb057600080fd5b8286015b84811015611eb35780356001600160401b03811115611fd35760008081fd5b8701603f81018913611fe55760008081fd5b611ff6898683013560408401611f19565b845250918301918301611fb4565b6000806000806080858703121561201a57600080fd5b84356001600160401b038082111561203157600080fd5b61203d88838901611e4a565b9550602087013591508082111561205357600080fd5b61205f88838901611ebe565b9450604087013591508082111561207557600080fd5b5061208287828801611f70565b949793965093946060013593505050565b803560ff811681146120a457600080fd5b919050565b600080600080600060a086880312156120c157600080fd5b853594506120d160208701612093565b93506120df60408701612093565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061212f57634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561214857600080fd5b82359150602083013561215a81611e35565b809150509250929050565b6000806040838503121561217857600080fd5b8235915061218860208401612093565b90509250929050565b600080600080606085870312156121a757600080fd5b843593506121b760208601612093565b925060408501356001600160401b03808211156121d357600080fd5b818701915087601f8301126121e757600080fd5b8135818111156121f657600080fd5b88602082850101111561220857600080fd5b95989497505060200194505050565b6000806000806080858703121561222d57600080fd5b84356001600160401b038082111561224457600080fd5b61225088838901611e4a565b9550602087013591508082111561226657600080fd5b61227288838901611ebe565b9450604087013591508082111561228857600080fd5b61229488838901611f70565b935060608701359150808211156122aa57600080fd5b508501601f810187136122bc57600080fd5b6122cb87823560208401611f19565b91505092959194509250565b6000602082840312156122e957600080fd5b8135610cb181611e35565b6000806040838503121561230757600080fd5b823561231281611e35565b946020939093013593505050565b600181811c9082168061233457607f821691505b60208210810361197a57634e487b7160e01b600052602260045260246000fd5b60208082526021908201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756040820152601b60fa1b606082015260800190565b6000602082840312156123a757600080fd5b5051919050565b600081518084526020808501945080840160005b838110156123e75781516001600160a01b0316875295820195908201906001016123c2565b509495945050505050565b600081518084526020808501945080840160005b838110156123e757815187529582019590820190600101612406565b600081518084526020808501808196508360051b8101915082860160005b8581101561246a578284038952612458848351611d6c565b98850198935090840190600101612440565b5091979650505050505050565b60a08152600061248a60a08301886123ae565b828103602084015261249c81886123f2565b905082810360408401526124b08187612422565b60608401959095525050608001529392505050565b60c0815260006124d860c08301896123ae565b82810360208401526124ea81896123f2565b905082810360408401526124fe8188612422565b60608401969096525050608081019290925260a0909101529392505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156125465761254661251d565b500190565b60808152600061255e60808301876123ae565b828103602084015261257081876123f2565b905082810360408401526125848186612422565b91505082606083015295945050505050565b84815260ff84166020820152826040820152608060608201526000610b906080830184611d6c565b6000602082840312156125d057600080fd5b81518015158114610cb157600080fd5b60008160001904831182151516156125fa576125fa61251d565b500290565b60008261261c57634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156126335761263361251d565b500390565b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b0380831681851680830382111561269b5761269b61251d565b01949350505050565b60006101208b8352602060018060a01b038c16818501528160408501526126cd8285018c6123ae565b915083820360608501526126e1828b6123f2565b915083820360808501528189518084528284019150828160051b850101838c0160005b8381101561273257601f19878403018552612720838351611d6c565b94860194925090850190600101612704565b505086810360a0880152612746818c612422565b94505050505061276160c08401876001600160401b03169052565b6001600160401b03851660e08401528281036101008401526127838185611d6c565b9c9b50505050505050505050505056fea26469706673582212207c43f5bf49205d74642acc8dbd90f73be6153add180b4a2fa2ca0217f93ee91e64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "_token", "type": "address", "internalType": "contract ERC20Votes"}, {"name": "_timelock", "type": "address", "internalType": "contract TimelockController"}]}, {"type": "event", "name": "ProposalCanceled", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalCreated", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "proposer", "type": "address", "internalType": "address", "indexed": false}, {"name": "targets", "type": "address[]", "internalType": "address[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "signatures", "type": "string[]", "internalType": "string[]", "indexed": false}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]", "indexed": false}, {"name": "startBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "endBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "description", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalExecuted", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalQueued", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "eta", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "QuorumNumeratorUpdated", "inputs": [{"name": "oldQuorumNumerator", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newQuorumNumerator", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TimelockChange", "inputs": [{"name": "oldTimelock", "type": "address", "internalType": "address", "indexed": false}, {"name": "newTimelock", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VoteCast", "inputs": [{"name": "voter", "type": "address", "internalType": "address", "indexed": true}, {"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "support", "type": "uint8", "internalType": "uint8", "indexed": false}, {"name": "weight", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "reason", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "function", "name": "BALLOT_TYPEHASH", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "COUNTING_MODE", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "castVote", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteBySig", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteWithReason", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "reason", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "hasVoted", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "hashProposal", "stateMutability": "pure", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "proposalDeadline", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalEta", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalSnapshot", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalThreshold", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalVotes", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "againstVotes", "type": "uint256", "internalType": "uint256"}, {"name": "forVotes", "type": "uint256", "internalType": "uint256"}, {"name": "abstainVotes", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "queue", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorum", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorumDenominator", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorumNumerator", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "enum IGovernor.ProposalState"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "timelock", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "token", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "contract ERC20Votes"}]}, {"type": "function", "name": "updateQuorumNumerator", "stateMutability": "nonpayable", "inputs": [{"name": "newQuorumNumerator", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "updateTimelock", "stateMutability": "nonpayable", "inputs": [{"name": "newTimelock", "type": "address", "internalType": "contract TimelockController"}], "outputs": []}, {"type": "function", "name": "version", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "votingDelay", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "votingPeriod", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {"votingDelay()": {"notice": "module:user-config"}, "votingPeriod()": {"notice": "module:user-config"}}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"COUNTING_MODE()": {"details": "See {IGovernor-COUNTING_MODE}."}, "castVote(uint256,uint8)": {"details": "See {IGovernor-castVote}."}, "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {"details": "See {IGovernor-castVoteBySig}."}, "castVoteWithReason(uint256,uint8,string)": {"details": "See {IGovernor-castVoteWithReason}."}, "execute(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-execute}."}, "hasVoted(uint256,address)": {"details": "See {IGovernor-hasVoted}."}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."}, "name()": {"details": "See {IGovernor-name}."}, "proposalDeadline(uint256)": {"details": "See {IGovernor-proposalDeadline}."}, "proposalEta(uint256)": {"details": "Public accessor to check the eta of a queued proposal"}, "proposalSnapshot(uint256)": {"details": "See {IGovernor-proposalSnapshot}."}, "proposalThreshold()": {"details": "Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_."}, "proposalVotes(uint256)": {"details": "Accessor to the internal vote counts."}, "queue(address[],uint256[],bytes[],bytes32)": {"details": "Function to queue a proposal to the timelock."}, "timelock()": {"details": "Public accessor to check the address of the timelock"}, "updateTimelock(address)": {"details": "Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates must be proposed, scheduled and executed using the {Governor} workflow."}, "version()": {"details": "See {IGovernor-version}."}, "votingDelay()": {"details": "Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts."}, "votingPeriod()": {"details": "Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay."}}, "version": 1}}, "MyGovernor": {"contractName": "MyGovernor", "sourceId": "mocks/wizard/MyGovernor3.sol", "deploymentBytecode": {"bytecode": "0x6101606040523480156200001257600080fd5b506040516200420838038062004208833981016040819052620000359162000353565b600482826040518060400160405280600a81526020016926bca3b7bb32b93737b960b11b815250806200006d6200014360201b60201c565b815160208084019190912082518383012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c00190528051940193909320919290916080523060c052610120525050825162000113925060009150602084019062000294565b50620001219050816200015e565b506001600160a01b0316610140526200013a81620001c7565b505050620003ce565b6040805180820190915260018152603160f81b602082015290565b600254604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600280546001600160a01b0319166001600160a01b0392909216919091179055565b60648111156200024f5760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a40160405180910390fd5b600580549082905560408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b828054620002a29062000392565b90600052602060002090601f016020900481019282620002c6576000855562000311565b82601f10620002e157805160ff191683800117855562000311565b8280016001018555821562000311579182015b8281111562000311578251825591602001919060010190620002f4565b506200031f92915062000323565b5090565b5b808211156200031f576000815560010162000324565b6001600160a01b03811681146200035057600080fd5b50565b600080604083850312156200036757600080fd5b825162000374816200033a565b602084015190925062000387816200033a565b809150509250929050565b600181811c90821680620003a757607f821691505b602082108103620003c857634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051610100516101205161014051613dd16200043760003960008181610801015281816120cb01526121550152600061230f0152600061235e0152600061233901526000612292015260006122bc015260006122e60152613dd16000f3fe6080604052600436106102135760003560e01c80637d5e81e211610118578063da95691a116100a0578063e23a9a521161006f578063e23a9a52146106e5578063eb9019d4146107af578063f8ce560a146107cf578063fc0c546a146107ef578063fe0d94c11461082357600080fd5b8063da95691a1461062b578063dd4e2ba51461064b578063ddf0b00914610691578063deaaa7cc146106b157600080fd5b8063ab58fb8e116100e7578063ab58fb8e1461057d578063b58131b01461059d578063c01f9e37146105b9578063c59057e4146105d9578063d33219b4146105f957600080fd5b80637d5e81e21461051457806397c3d33414610534578063a7713a7014610548578063a890c9101461055d57600080fd5b8063328dd9821161019b57806340e58ee51161016a57806340e58ee514610440578063438596321461046057806354fd4d50146104aa57806356781388146104d45780637b3c71d3146104f457600080fd5b8063328dd982146103af5780633932abb1146103df5780633bccf4fd146103f35780633e4f49e61461041357600080fd5b806306fdde03116101e257806306fdde0314610325578063160cbed71461034757806324bc1a64146103675780632656227d1461037c5780632d63f6931461038f57600080fd5b8063013cf08b1461023b57806301ffc9a7146102b657806302a251a3146102e657806306f3f9e61461030557600080fd5b366102365730610221610836565b6001600160a01b03161461023457600080fd5b005b600080fd5b34801561024757600080fd5b5061025b610256366004613165565b61084f565b604080519a8b526001600160a01b0390991660208b0152978901969096526060880194909452608087019290925260a086015260c085015260e084015215156101008301521515610120820152610140015b60405180910390f35b3480156102c257600080fd5b506102d66102d136600461317e565b6108f8565b60405190151581526020016102ad565b3480156102f257600080fd5b5061b2fa5b6040519081526020016102ad565b34801561031157600080fd5b50610234610320366004613165565b610909565b34801561033157600080fd5b5061033a61097d565b6040516102ad9190613204565b34801561035357600080fd5b506102f761036236600461344f565b610a0f565b34801561037357600080fd5b506102f7610c10565b6102f761038a36600461344f565b610c20565b34801561039b57600080fd5b506102f76103aa366004613165565b610cf3565b3480156103bb57600080fd5b506103cf6103ca366004613165565b610d2a565b6040516102ad94939291906135a7565b3480156103eb57600080fd5b5060016102f7565b3480156103ff57600080fd5b506102f761040e36600461360a565b610fbb565b34801561041f57600080fd5b5061043361042e366004613165565b61104f565b6040516102ad919061366e565b34801561044c57600080fd5b5061023461045b366004613165565b61105a565b34801561046c57600080fd5b506102d661047b366004613696565b60008281526004602090815260408083206001600160a01b038516845260080190915290205460ff1692915050565b3480156104b657600080fd5b506040805180820190915260018152603160f81b602082015261033a565b3480156104e057600080fd5b506102f76104ef3660046136c6565b611374565b34801561050057600080fd5b506102f761050f3660046136f2565b61139d565b34801561052057600080fd5b506102f761052f366004613798565b6113ef565b34801561054057600080fd5b5060646102f7565b34801561055457600080fd5b506005546102f7565b34801561056957600080fd5b50610234610578366004613844565b611406565b34801561058957600080fd5b506102f7610598366004613165565b611472565b3480156105a957600080fd5b50683635c9adc5dea000006102f7565b3480156105c557600080fd5b506102f76105d4366004613165565b61150d565b3480156105e557600080fd5b506102f76105f436600461344f565b61153c565b34801561060557600080fd5b506002546001600160a01b03165b6040516001600160a01b0390911681526020016102ad565b34801561063757600080fd5b506102f76106463660046138e0565b611576565b34801561065757600080fd5b5060408051808201909152601a81527f737570706f72743d627261766f2671756f72756d3d627261766f000000000000602082015261033a565b34801561069d57600080fd5b506102346106ac366004613165565b61159b565b3480156106bd57600080fd5b506102f77f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b3480156106f157600080fd5b5061077f610700366004613696565b60408051606081018252600080825260208201819052918101919091525060009182526004602090815260408084206001600160a01b0393909316845260089092018152918190208151606081018352905460ff8082161515835261010082041693820193909352620100009092046001600160601b03169082015290565b6040805182511515815260208084015160ff1690820152918101516001600160601b0316908201526060016102ad565b3480156107bb57600080fd5b506102f76107ca3660046139b1565b611809565b3480156107db57600080fd5b506102f76107ea366004613165565b611815565b3480156107fb57600080fd5b506106137f000000000000000000000000000000000000000000000000000000000000000081565b610234610831366004613165565b611820565b600061084a6002546001600160a01b031690565b905090565b80600080808080808080806108638a611472565b975061086e8b610cf3565b96506108798b61150d565b60008c815260046020526040812080546005820154600683015460078401546001600160a01b039093169e50949a5098509296509194506108b98d61104f565b905060028160078111156108cf576108cf613658565b14935060078160078111156108e6576108e6613658565b14925050509193959799509193959799565b600061090382611a8e565b92915050565b610911610836565b6001600160a01b0316336001600160a01b0316146109715760405162461bcd60e51b8152602060048201526018602482015277476f7665726e6f723a206f6e6c79476f7665726e616e636560401b60448201526064015b60405180910390fd5b61097a81611ab3565b50565b60606000805461098c906139dd565b80601f01602080910402602001604051908101604052809291908181526020018280546109b8906139dd565b8015610a055780601f106109da57610100808354040283529160200191610a05565b820191906000526020600020905b8154815290600101906020018083116109e857829003601f168201915b5050505050905090565b600080610a1e8686868661153c565b90506004610a2b8261104f565b6007811115610a3c57610a3c613658565b14610a595760405162461bcd60e51b815260040161096890613a11565b6002546040805163793d064960e11b815290516000926001600160a01b03169163f27a0c929160048083019260209291908290030181865afa158015610aa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac79190613a52565b60025460405163b1c5f42760e01b81529192506001600160a01b03169063b1c5f42790610b01908a908a908a906000908b90600401613a6b565b602060405180830381865afa158015610b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b429190613a52565b6000838152600360205260408082209290925560025491516308f2a0bb60e41b81526001600160a01b0390921691638f2a0bb091610b8d918b918b918b91908b908990600401613ab9565b600060405180830381600087803b158015610ba757600080fd5b505af1158015610bbb573d6000803e3d6000fd5b505050507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda2892828242610bed9190613b27565b604080519283526020830191909152015b60405180910390a15095945050505050565b600061084a6107ea600143613b3f565b600080610c2f8686868661153c565b90506000610c3c8261104f565b90506004816007811115610c5257610c52613658565b1480610c6f57506005816007811115610c6d57610c6d613658565b145b610c8b5760405162461bcd60e51b815260040161096890613a11565b600082815260016020818152604092839020600201805460ff191690921790915590518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f910160405180910390a1610ce98288888888611b7b565b5095945050505050565b60008181526001602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b60608060608060006004600087815260200190815260200160002090508060010181600201826003018360040183805480602002602001604051908101604052809291908181526020018280548015610dac57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d8e575b5050505050935082805480602002602001604051908101604052809291908181526020018280548015610dfe57602002820191906000526020600020905b815481526020019060010190808311610dea575b5050505050925081805480602002602001604051908101604052809291908181526020016000905b82821015610ed2578382906000526020600020018054610e45906139dd565b80601f0160208091040260200160405190810160405280929190818152602001828054610e71906139dd565b8015610ebe5780601f10610e9357610100808354040283529160200191610ebe565b820191906000526020600020905b815481529060010190602001808311610ea157829003601f168201915b505050505081526020019060010190610e26565b50505050915080805480602002602001604051908101604052809291908181526020016000905b82821015610fa5578382906000526020600020018054610f18906139dd565b80601f0160208091040260200160405190810160405280929190818152602001828054610f44906139dd565b8015610f915780601f10610f6657610100808354040283529160200191610f91565b820191906000526020600020905b815481529060010190602001808311610f7457829003601f168201915b505050505081526020019060010190610ef9565b5050505090509450945094509450509193509193565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff8516606082015260009081906110279061101f9060800160405160208183030381529060405280519060200120611b8f565b868686611bdd565b905061104487828860405180602001604052806000815250611bfb565b979650505050505050565b600061090382611d06565b600081815260046020526040902080546001600160a01b0316336001600160a01b031614806110aa5750683635c9adc5dea0000081546110a8906001600160a01b03166107ca600143613b3f565b105b6111065760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72427261766f3a2070726f706f7365722061626f76652074686044820152661c995cda1bdb1960ca1b6064820152608401610968565b61136f8160010180548060200260200160405190810160405280929190818152602001828054801561116157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611143575b5050505050826002018054806020026020016040519081016040528092919081815260200182805480156111b457602002820191906000526020600020905b8154815260200190600101908083116111a0575b505050505061136584600301805480602002602001604051908101604052809291908181526020016000905b8282101561128c5783829060005260206000200180546111ff906139dd565b80601f016020809104026020016040519081016040528092919081815260200182805461122b906139dd565b80156112785780601f1061124d57610100808354040283529160200191611278565b820191906000526020600020905b81548152906001019060200180831161125b57829003601f168201915b5050505050815260200190600101906111e0565b50505060048701805460408051602080840282018101909252828152935060009084015b8282101561135c5783829060005260206000200180546112cf906139dd565b80601f01602080910402602001604051908101604052809291908181526020018280546112fb906139dd565b80156113485780601f1061131d57610100808354040283529160200191611348565b820191906000526020600020905b81548152906001019060200180831161132b57829003601f168201915b5050505050815260200190600101906112b0565b50505050611dd4565b8460090154611f06565b505050565b60008033905061139584828560405180602001604052806000815250611bfb565b949350505050565b6000803390506113e586828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611bfb92505050565b9695505050505050565b60006113fd85858585611f14565b95945050505050565b61140e610836565b6001600160a01b0316336001600160a01b0316146114695760405162461bcd60e51b8152602060048201526018602482015277476f7665726e6f723a206f6e6c79476f7665726e616e636560401b6044820152606401610968565b61097a81611f7c565b60025460008281526003602052604080822054905163d45c443560e01b81526004810191909152909182916001600160a01b039091169063d45c443590602401602060405180830381865afa1580156114cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f39190613a52565b9050806001146115035780611506565b60005b9392505050565b60008181526001602081815260408084208151928301909152909101546001600160401b031690819052610d1b565b6000848484846040516020016115559493929190613b56565b60408051601f19818403018152919052805160209091012095945050505050565b6000611586338787878787611fe5565b6113e586866115958787611dd4565b856113ef565b600081815260046020908152604091829020600181018054845181850281018501909552808552919361136f9390929083018282801561160457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115e6575b50505050508260020180548060200260200160405190810160405280929190818152602001828054801561165757602002820191906000526020600020905b815481526020019060010190808311611643575b50505050506117ff84600301805480602002602001604051908101604052809291908181526020016000905b8282101561172f5783829060005260206000200180546116a2906139dd565b80601f01602080910402602001604051908101604052809291908181526020018280546116ce906139dd565b801561171b5780601f106116f05761010080835404028352916020019161171b565b820191906000526020600020905b8154815290600101906020018083116116fe57829003601f168201915b505050505081526020019060010190611683565b50505060048701805460408051602080840282018101909252828152935060009084015b8282101561135c578382906000526020600020018054611772906139dd565b80601f016020809104026020016040519081016040528092919081815260200182805461179e906139dd565b80156117eb5780601f106117c0576101008083540402835291602001916117eb565b820191906000526020600020905b8154815290600101906020018083116117ce57829003601f168201915b505050505081526020019060010190611753565b8460090154610a0f565b600061150683836120a2565b600061090382612138565b600081815260046020908152604091829020600181018054845181850281018501909552808552919361136f9390929083018282801561188957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161186b575b5050505050826002018054806020026020016040519081016040528092919081815260200182805480156118dc57602002820191906000526020600020905b8154815260200190600101908083116118c8575b5050505050611a8484600301805480602002602001604051908101604052809291908181526020016000905b828210156119b4578382906000526020600020018054611927906139dd565b80601f0160208091040260200160405190810160405280929190818152602001828054611953906139dd565b80156119a05780601f10611975576101008083540402835291602001916119a0565b820191906000526020600020905b81548152906001019060200180831161198357829003601f168201915b505050505081526020019060010190611908565b50505060048701805460408051602080840282018101909252828152935060009084015b8282101561135c5783829060005260206000200180546119f7906139dd565b80601f0160208091040260200160405190810160405280929190818152602001828054611a23906139dd565b8015611a705780601f10611a4557610100808354040283529160200191611a70565b820191906000526020600020905b815481529060010190602001808311611a5357829003601f168201915b5050505050815260200190600101906119d8565b8460090154610c20565b60006001600160e01b03198216636e665ced60e01b14806109035750610903826121dc565b6064811115611b365760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a401610968565b600580549082905560408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b611b888585858585612211565b5050505050565b6000610903611b9c612285565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611bee878787876123ac565b91509150610ce981612499565b6000848152600160208190526040822090611c158761104f565b6007811115611c2657611c26613658565b14611c7f5760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b6064820152608401610968565b604080516020810190915281546001600160401b031690819052600090611ca7908790611809565b9050611cb58787878461264f565b856001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda488878488604051611cf49493929190613ba1565b60405180910390a29695505050505050565b600080611d12836127f4565b90506004816007811115611d2857611d28613658565b14611d335792915050565b60008381526003602052604090205480611d4e575092915050565b600254604051632ab0f52960e01b8152600481018390526001600160a01b0390911690632ab0f52990602401602060405180830381865afa158015611d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbb9190613bc9565b15611dca575060079392505050565b5060059392505050565b6060600082516001600160401b03811115611df157611df1613217565b604051908082528060200260200182016040528015611e2457816020015b6060815260200190600190039081611e0f5790505b50905060005b8451811015611efe57848181518110611e4557611e45613beb565b602002602001015151600014611eb557848181518110611e6757611e67613beb565b602002602001015180519060200120848281518110611e8857611e88613beb565b6020026020010151604051602001611ea1929190613c01565b604051602081830303815290604052611ed0565b838181518110611ec757611ec7613beb565b60200260200101515b828281518110611ee257611ee2613beb565b602002602001018190525080611ef790613c32565b9050611e2a565b509392505050565b60006113fd8585858561295b565b6000611f7033868686516001600160401b03811115611f3557611f35613217565b604051908082528060200260200182016040528015611f6857816020015b6060815260200190600190039081611f535790505b508787611fe5565b6113fd85858585612a0d565b600254604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600280546001600160a01b0319166001600160a01b0392909216919091179055565b8051602082012060006120038787611ffd8888611dd4565b8561153c565b60008181526004602052604090206009810154919250906120975780546001600160a01b0319166001600160a01b038a16178155875161204c90600183019060208b0190612f1b565b50865161206290600283019060208a0190612f7c565b5085516120789060038301906020890190612fb7565b50845161208e9060048301906020880190613010565b50600981018390555b505050505050505050565b604051630748d63560e31b81526001600160a01b038381166004830152602482018390526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a890604401602060405180830381865afa158015612114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115069190613a52565b60006064600554604051632394e7a360e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e539e8c90602401602060405180830381865afa1580156121a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c89190613a52565b6121d29190613c4b565b6109039190613c6a565b60006001600160e01b0319821663bf26d89760e01b148061090357506301ffc9a760e01b6001600160e01b0319831614610903565b60025460405163e38335e560e01b81526001600160a01b039091169063e38335e590349061224c908890889088906000908990600401613a6b565b6000604051808303818588803b15801561226557600080fd5b505af1158015612279573d6000803e3d6000fd5b50505050505050505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156122de57507f000000000000000000000000000000000000000000000000000000000000000046145b1561230857507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156123e35750600090506003612490565b8460ff16601b141580156123fb57508460ff16601c14155b1561240c5750600090506004612490565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612460573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661248957600060019250925050612490565b9150600090505b94509492505050565b60008160048111156124ad576124ad613658565b036124b55750565b60018160048111156124c9576124c9613658565b036125165760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610968565b600281600481111561252a5761252a613658565b036125775760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610968565b600381600481111561258b5761258b613658565b036125e35760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610968565b60048160048111156125f7576125f7613658565b0361097a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610968565b60008481526004602090815260408083206001600160a01b038716845260088101909252909120805460ff16156126de5760405162461bcd60e51b815260206004820152602d60248201527f476f7665726e6f72436f6d7061746962696c697479427261766f3a20766f746560448201526c08185b1c9958591e4818d85cdd609a1b6064820152608401610968565b805460ff85166101000261ffff199091161760011781556126fe83612ce4565b81546001600160601b039190911662010000026dffffffffffffffffffffffff00001990911617815560ff841661274e57828260060160008282546127439190613b27565b909155506127ec9050565b60001960ff85160161276e57828260050160008282546127439190613b27565b60011960ff85160161278e57828260070160008282546127439190613b27565b60405162461bcd60e51b815260206004820152602d60248201527f476f7665726e6f72436f6d7061746962696c697479427261766f3a20696e766160448201526c6c696420766f7465207479706560981b6064820152608401610968565b505050505050565b6000818152600160208181526040808420815160a08101835281546001600160401b0390811660808301908152825283518086018552958301541685529283019390935260029092015460ff808216158015948401949094526101009091041615156060820152906128695750600792915050565b80606001511561287c5750600292915050565b80515143906001600160401b0316106128985750600092915050565b436128a582602001515190565b6001600160401b0316106128bc5750600192915050565b6128c98160200151612d50565b1561290d576128d783612d7f565b80156128f9575060008381526004602052604090206006810154600590910154115b612904576003611506565b60049392505050565b60405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c2069640000006044820152606401610968565b50919050565b60008061296a86868686612da7565b600081815260036020526040902054909150156113fd576002546000828152600360205260409081902054905163c4d252f560e01b81526001600160a01b039092169163c4d252f5916129c39160040190815260200190565b600060405180830381600087803b1580156129dd57600080fd5b505af11580156129f1573d6000803e3d6000fd5b5050506000828152600360205260408120555095945050505050565b6000683635c9adc5dea00000612a28336107ca600143613b3f565b1015612aa85760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72436f6d7061746962696c697479427261766f3a2070726f7060448201527f6f73657220766f7465732062656c6f772070726f706f73616c207468726573686064820152621bdb1960ea1b608482015260a401610968565b6000612abd868686868051906020012061153c565b90508451865114612ae05760405162461bcd60e51b815260040161096890613c8c565b8351865114612b015760405162461bcd60e51b815260040161096890613c8c565b6000865111612b525760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c00000000000000006044820152606401610968565b600081815260016020908152604091829020825191820190925281546001600160401b03169081905215612bd25760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b6064820152608401610968565b6000612bde6001612eb3565b612be743612eb3565b612bf19190613ccd565b90506000612c0061b2fa612eb3565b612c0a9083613ccd565b835467ffffffffffffffff19166001600160401b038416178455905060018301805467ffffffffffffffff19166001600160401b0383161790557f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b03811115612c8257612c82613217565b604051908082528060200260200182016040528015612cb557816020015b6060815260200190600190039081612ca05790505b508c88888e604051612ccf99989796959493929190613cf8565b60405180910390a15091979650505050505050565b60006001600160601b03821115612d4c5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203960448201526536206269747360d01b6064820152608401610968565b5090565b6000612d6582516001600160401b0316151590565b801561090357505051436001600160401b03909116111590565b60008181526004602052604081206005810154612d9e6107ea85610cf3565b11159392505050565b600080612db68686868661153c565b90506000612dc38261104f565b90506002816007811115612dd957612dd9613658565b14158015612df957506006816007811115612df657612df6613658565b14155b8015612e1757506007816007811115612e1457612e14613658565b14155b612e635760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a2070726f706f73616c206e6f74206163746976650000006044820152606401610968565b60008281526001602052604090819020600201805461ff001916610100179055517f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c90610bfe9084815260200190565b60006001600160401b03821115612d4c5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610968565b828054828255906000526020600020908101928215612f70579160200282015b82811115612f7057825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612f3b565b50612d4c929150613069565b828054828255906000526020600020908101928215612f70579160200282015b82811115612f70578251825591602001919060010190612f9c565b828054828255906000526020600020908101928215613004579160200282015b828111156130045782518051612ff491849160209091019061307e565b5091602001919060010190612fd7565b50612d4c9291506130f1565b82805482825590600052602060002090810192821561305d579160200282015b8281111561305d578251805161304d91849160209091019061307e565b5091602001919060010190613030565b50612d4c92915061310e565b5b80821115612d4c576000815560010161306a565b82805461308a906139dd565b90600052602060002090601f0160209004810192826130ac5760008555612f70565b82601f106130c557805160ff1916838001178555612f70565b82800160010185558215612f705791820182811115612f70578251825591602001919060010190612f9c565b80821115612d4c576000613105828261312b565b506001016130f1565b80821115612d4c576000613122828261312b565b5060010161310e565b508054613137906139dd565b6000825580601f10613147575050565b601f01602090049060005260206000209081019061097a9190613069565b60006020828403121561317757600080fd5b5035919050565b60006020828403121561319057600080fd5b81356001600160e01b03198116811461150657600080fd5b60005b838110156131c35781810151838201526020016131ab565b838111156131d2576000848401525b50505050565b600081518084526131f08160208601602086016131a8565b601f01601f19169290920160200192915050565b60208152600061150660208301846131d8565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561325557613255613217565b604052919050565b60006001600160401b0382111561327657613276613217565b5060051b60200190565b6001600160a01b038116811461097a57600080fd5b600082601f8301126132a657600080fd5b813560206132bb6132b68361325d565b61322d565b82815260059290921b840181019181810190868411156132da57600080fd5b8286015b848110156132fe5780356132f181613280565b83529183019183016132de565b509695505050505050565b600082601f83011261331a57600080fd5b8135602061332a6132b68361325d565b82815260059290921b8401810191818101908684111561334957600080fd5b8286015b848110156132fe578035835291830191830161334d565b60006001600160401b0383111561337d5761337d613217565b613390601f8401601f191660200161322d565b90508281528383830111156133a457600080fd5b828260208301376000602084830101529392505050565b600082601f8301126133cc57600080fd5b813560206133dc6132b68361325d565b82815260059290921b840181019181810190868411156133fb57600080fd5b8286015b848110156132fe5780356001600160401b0381111561341e5760008081fd5b8701603f810189136134305760008081fd5b613441898683013560408401613364565b8452509183019183016133ff565b6000806000806080858703121561346557600080fd5b84356001600160401b038082111561347c57600080fd5b61348888838901613295565b9550602087013591508082111561349e57600080fd5b6134aa88838901613309565b945060408701359150808211156134c057600080fd5b506134cd878288016133bb565b949793965093946060013593505050565b600081518084526020808501945080840160005b838110156135175781516001600160a01b0316875295820195908201906001016134f2565b509495945050505050565b600081518084526020808501945080840160005b8381101561351757815187529582019590820190600101613536565b600081518084526020808501808196508360051b8101915082860160005b8581101561359a5782840389526135888483516131d8565b98850198935090840190600101613570565b5091979650505050505050565b6080815260006135ba60808301876134de565b82810360208401526135cc8187613522565b905082810360408401526135e08186613552565b905082810360608401526110448185613552565b803560ff8116811461360557600080fd5b919050565b600080600080600060a0868803121561362257600080fd5b85359450613632602087016135f4565b9350613640604087016135f4565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061369057634e487b7160e01b600052602160045260246000fd5b91905290565b600080604083850312156136a957600080fd5b8235915060208301356136bb81613280565b809150509250929050565b600080604083850312156136d957600080fd5b823591506136e9602084016135f4565b90509250929050565b6000806000806060858703121561370857600080fd5b84359350613718602086016135f4565b925060408501356001600160401b038082111561373457600080fd5b818701915087601f83011261374857600080fd5b81358181111561375757600080fd5b88602082850101111561376957600080fd5b95989497505060200194505050565b600082601f83011261378957600080fd5b61150683833560208501613364565b600080600080608085870312156137ae57600080fd5b84356001600160401b03808211156137c557600080fd5b6137d188838901613295565b955060208701359150808211156137e757600080fd5b6137f388838901613309565b9450604087013591508082111561380957600080fd5b613815888389016133bb565b9350606087013591508082111561382b57600080fd5b5061383887828801613778565b91505092959194509250565b60006020828403121561385657600080fd5b813561150681613280565b600082601f83011261387257600080fd5b813560206138826132b68361325d565b82815260059290921b840181019181810190868411156138a157600080fd5b8286015b848110156132fe5780356001600160401b038111156138c45760008081fd5b6138d28986838b0101613778565b8452509183019183016138a5565b600080600080600060a086880312156138f857600080fd5b85356001600160401b038082111561390f57600080fd5b61391b89838a01613295565b9650602088013591508082111561393157600080fd5b61393d89838a01613309565b9550604088013591508082111561395357600080fd5b61395f89838a01613861565b9450606088013591508082111561397557600080fd5b61398189838a016133bb565b9350608088013591508082111561399757600080fd5b506139a488828901613778565b9150509295509295909350565b600080604083850312156139c457600080fd5b82356139cf81613280565b946020939093013593505050565b600181811c908216806139f157607f821691505b60208210810361295557634e487b7160e01b600052602260045260246000fd5b60208082526021908201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756040820152601b60fa1b606082015260800190565b600060208284031215613a6457600080fd5b5051919050565b60a081526000613a7e60a08301886134de565b8281036020840152613a908188613522565b90508281036040840152613aa48187613552565b60608401959095525050608001529392505050565b60c081526000613acc60c08301896134de565b8281036020840152613ade8189613522565b90508281036040840152613af28188613552565b60608401969096525050608081019290925260a0909101529392505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115613b3a57613b3a613b11565b500190565b600082821015613b5157613b51613b11565b500390565b608081526000613b6960808301876134de565b8281036020840152613b7b8187613522565b90508281036040840152613b8f8186613552565b91505082606083015295945050505050565b84815260ff841660208201528260408201526080606082015260006113e560808301846131d8565b600060208284031215613bdb57600080fd5b8151801515811461150657600080fd5b634e487b7160e01b600052603260045260246000fd5b6001600160e01b0319831681528151600090613c248160048501602087016131a8565b919091016004019392505050565b600060018201613c4457613c44613b11565b5060010190565b6000816000190483118215151615613c6557613c65613b11565b500290565b600082613c8757634e487b7160e01b600052601260045260246000fd5b500490565b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b03808316818516808303821115613cef57613cef613b11565b01949350505050565b8981526001600160a01b038916602082015261012060408201819052600090613d238382018b6134de565b90508281036060840152613d37818a613522565b90508281036080840152613d4b8189613552565b905082810360a0840152613d5f8188613552565b6001600160401b0387811660c0860152861660e08501528381036101008501529050613d8b81856131d8565b9c9b50505050505050505050505056fea2646970667358221220131e21debe339156562c5d472d3aec1ec5e8daa1b4b7a9d95e011becd088a97964736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": ""}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "_token", "type": "address", "internalType": "contract ERC20Votes"}, {"name": "_timelock", "type": "address", "internalType": "contract TimelockController"}]}, {"type": "event", "name": "ProposalCanceled", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalCreated", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "proposer", "type": "address", "internalType": "address", "indexed": false}, {"name": "targets", "type": "address[]", "internalType": "address[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "signatures", "type": "string[]", "internalType": "string[]", "indexed": false}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]", "indexed": false}, {"name": "startBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "endBlock", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "description", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalExecuted", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "ProposalQueued", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "eta", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "QuorumNumeratorUpdated", "inputs": [{"name": "oldQuorumNumerator", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newQuorumNumerator", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TimelockChange", "inputs": [{"name": "oldTimelock", "type": "address", "internalType": "address", "indexed": false}, {"name": "newTimelock", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "VoteCast", "inputs": [{"name": "voter", "type": "address", "internalType": "address", "indexed": true}, {"name": "proposalId", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "support", "type": "uint8", "internalType": "uint8", "indexed": false}, {"name": "weight", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "reason", "type": "string", "internalType": "string", "indexed": false}], "anonymous": false}, {"type": "function", "name": "BALLOT_TYPEHASH", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "COUNTING_MODE", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "cancel", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "castVote", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteBySig", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "castVoteWithReason", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "reason", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "execute", "stateMutability": "payable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "getActions", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "signatures", "type": "string[]", "internalType": "string[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}]}, {"type": "function", "name": "getReceipt", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "voter", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "tuple", "components": [{"name": "hasVoted", "type": "bool", "internalType": "bool"}, {"name": "support", "type": "uint8", "internalType": "uint8"}, {"name": "votes", "type": "uint96", "internalType": "uint96"}], "internalType": "struct IGovernorCompatibilityBravo.Receipt"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "hasVoted", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "hashProposal", "stateMutability": "pure", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "proposalDeadline", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalEta", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalSnapshot", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposalThreshold", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "proposals", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "proposer", "type": "address", "internalType": "address"}, {"name": "eta", "type": "uint256", "internalType": "uint256"}, {"name": "startBlock", "type": "uint256", "internalType": "uint256"}, {"name": "endBlock", "type": "uint256", "internalType": "uint256"}, {"name": "forVotes", "type": "uint256", "internalType": "uint256"}, {"name": "againstVotes", "type": "uint256", "internalType": "uint256"}, {"name": "abstainVotes", "type": "uint256", "internalType": "uint256"}, {"name": "canceled", "type": "bool", "internalType": "bool"}, {"name": "executed", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "propose", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "signatures", "type": "string[]", "internalType": "string[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "description", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "queue", "stateMutability": "nonpayable", "inputs": [{"name": "targets", "type": "address[]", "internalType": "address[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "calldatas", "type": "bytes[]", "internalType": "bytes[]"}, {"name": "descriptionHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "queue", "stateMutability": "nonpayable", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "quorum", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorumDenominator", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorumNumerator", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "quorumVotes", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [{"name": "proposalId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint8", "internalType": "enum IGovernor.ProposalState"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "timelock", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "token", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "contract ERC20Votes"}]}, {"type": "function", "name": "updateQuorumNumerator", "stateMutability": "nonpayable", "inputs": [{"name": "newQuorumNumerator", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "updateTimelock", "stateMutability": "nonpayable", "inputs": [{"name": "newTimelock", "type": "address", "internalType": "contract TimelockController"}], "outputs": []}, {"type": "function", "name": "version", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "votingDelay", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "votingPeriod", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {"COUNTING_MODE()": {"notice": "module:voting"}, "votingDelay()": {"notice": "module:user-config"}, "votingPeriod()": {"notice": "module:user-config"}}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"COUNTING_MODE()": {"details": "A description of the possible `support` values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`. There are 2 standard keys: `support` and `quorum`. - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`. - `quorum=bravo` means that only For votes are counted towards quorum. - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`] JavaScript class."}, "cancel(uint256)": {"details": "Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold."}, "castVote(uint256,uint8)": {"details": "See {IGovernor-castVote}."}, "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {"details": "See {IGovernor-castVoteBySig}."}, "castVoteWithReason(uint256,uint8,string)": {"details": "See {IGovernor-castVoteWithReason}."}, "execute(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-execute}."}, "execute(uint256)": {"details": "See {IGovernorCompatibilityBravo-execute}."}, "getActions(uint256)": {"details": "See {IGovernorCompatibilityBravo-getActions}."}, "getReceipt(uint256,address)": {"details": "See {IGovernorCompatibilityBravo-getReceipt}."}, "hasVoted(uint256,address)": {"details": "See {IGovernor-hasVoted}."}, "hashProposal(address[],uint256[],bytes[],bytes32)": {"details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."}, "name()": {"details": "See {IGovernor-name}."}, "proposalDeadline(uint256)": {"details": "See {IGovernor-proposalDeadline}."}, "proposalEta(uint256)": {"details": "Public accessor to check the eta of a queued proposal"}, "proposalSnapshot(uint256)": {"details": "See {IGovernor-proposalSnapshot}."}, "proposalThreshold()": {"details": "Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_."}, "proposals(uint256)": {"details": "See {IGovernorCompatibilityBravo-proposals}."}, "propose(address[],uint256[],string[],bytes[],string)": {"details": "See {IGovernorCompatibilityBravo-propose}."}, "queue(address[],uint256[],bytes[],bytes32)": {"details": "Function to queue a proposal to the timelock."}, "queue(uint256)": {"details": "See {IGovernorCompatibilityBravo-queue}."}, "quorumVotes()": {"details": "See {IGovernorCompatibilityBravo-quorumVotes}."}, "timelock()": {"details": "Public accessor to check the address of the timelock"}, "updateTimelock(address)": {"details": "Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates must be proposed, scheduled and executed using the {Governor} workflow."}, "version()": {"details": "See {IGovernor-version}."}, "votingDelay()": {"details": "Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts."}, "votingPeriod()": {"details": "Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay."}}, "version": 1}}, "Clones": {"contractName": "Clones", "sourceId": "proxy/Clones.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220894dbfba6c74d17c81d73813b07b67989995d832dc6dfdb891958df4ca7efb2564736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220894dbfba6c74d17c81d73813b07b67989995d832dc6dfdb891958df4ca7efb2564736f6c634300080d0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for deploying minimal proxy contracts, also known as \"clones\". > To simply and cheaply clone contract functionality in an immutable way, this standard specifies > a minimal bytecode implementation that delegates all calls to a known, fixed address. The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2` (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the deterministic method. _Available since v3.4._", "kind": "dev", "methods": {}, "version": 1}}, "ERC1967Proxy": {"contractName": "ERC1967Proxy", "sourceId": "proxy/ERC1967/ERC1967Proxy.sol", "deploymentBytecode": {"bytecode": "0x608060405260405161078d38038061078d83398101604081905261002291610337565b61004d60017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd610405565b600080516020610746833981519152146100695761006961042a565b6100758282600061007c565b505061048f565b610085836100b2565b6000825111806100925750805b156100ad576100ab83836100f260201b6100291760201c565b505b505050565b6100bb8161011e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606101178383604051806060016040528060278152602001610766602791396101de565b9392505050565b610131816102b360201b6100551760201c565b6101985760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101bd60008051602061074683398151915260001b6102b960201b61005b1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060833b61023d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161018f565b600080856001600160a01b0316856040516102589190610440565b600060405180830381855af49150503d8060008114610293576040519150601f19603f3d011682016040523d82523d6000602084013e610298565b606091505b5090925090506102a98282866102bc565b9695505050505050565b3b151590565b90565b606083156102cb575081610117565b8251156102db5782518084602001fd5b8160405162461bcd60e51b815260040161018f919061045c565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561032657818101518382015260200161030e565b838111156100ab5750506000910152565b6000806040838503121561034a57600080fd5b82516001600160a01b038116811461036157600080fd5b60208401519092506001600160401b038082111561037e57600080fd5b818501915085601f83011261039257600080fd5b8151818111156103a4576103a46102f5565b604051601f8201601f19908116603f011681019083821181831017156103cc576103cc6102f5565b816040528281528860208487010111156103e557600080fd5b6103f683602083016020880161030b565b80955050505050509250929050565b60008282101561042557634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6000825161045281846020870161030b565b9190910192915050565b602081526000825180602084015261047b81604085016020870161030b565b601f01601f19169190910160400192915050565b6102a88061049e6000396000f3fe60806040523661001357610011610017565b005b6100115b61002761002261005e565b610096565b565b606061004e838360405180606001604052806027815260200161024c602791396100ba565b9392505050565b3b151590565b90565b60006100917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e8080156100b5573d6000f35b3d6000fd5b6060833b61011e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b03168560405161013991906101fc565b600060405180830381855af49150503d8060008114610174576040519150601f19603f3d011682016040523d82523d6000602084013e610179565b606091505b5091509150610189828286610193565b9695505050505050565b606083156101a257508161004e565b8251156101b25782518084602001fd5b8160405162461bcd60e51b81526004016101159190610218565b60005b838110156101e75781810151838201526020016101cf565b838111156101f6576000848401525b50505050565b6000825161020e8184602087016101cc565b9190910192915050565b60208152600082518060208401526102378160408501602087016101cc565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220edac95849db97d08c6582ec5e0df0c5a916c2705bafc6267371247c56e61a87f64736f6c634300080d0033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564"}, "runtimeBytecode": {"bytecode": "0x60806040523661001357610011610017565b005b6100115b61002761002261005e565b610096565b565b606061004e838360405180606001604052806027815260200161024c602791396100ba565b9392505050565b3b151590565b90565b60006100917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e8080156100b5573d6000f35b3d6000fd5b6060833b61011e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b03168560405161013991906101fc565b600060405180830381855af49150503d8060008114610174576040519150601f19603f3d011682016040523d82523d6000602084013e610179565b606091505b5091509150610189828286610193565b9695505050505050565b606083156101a257508161004e565b8251156101b25782518084602001fd5b8160405162461bcd60e51b81526004016101159190610218565b60005b838110156101e75781810151838201526020016101cf565b838111156101f6576000848401525b50505050565b6000825161020e8184602087016101cc565b9190910192915050565b60208152600082518060208401526102378160408501602087016101cc565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220edac95849db97d08c6582ec5e0df0c5a916c2705bafc6267371247c56e61a87f64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "payable", "inputs": [{"name": "_logic", "type": "address", "internalType": "address"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}]}, {"type": "event", "name": "AdminChanged", "inputs": [{"name": "previousAdmin", "type": "address", "internalType": "address", "indexed": false}, {"name": "newAdmin", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "BeaconUpgraded", "inputs": [{"name": "beacon", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Upgraded", "inputs": [{"name": "implementation", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "fallback", "stateMutability": "payable"}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an implementation address that can be changed. This address is stored in storage in the location specified by https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the implementation behind the proxy.", "kind": "dev", "methods": {"constructor": {"details": "Initializes the upgradeable proxy with an initial implementation specified by `_logic`. If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity constructor."}}, "version": 1}}, "ERC1967Upgrade": {"contractName": "ERC1967Upgrade", "sourceId": "proxy/ERC1967/ERC1967Upgrade.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "AdminChanged", "inputs": [{"name": "previousAdmin", "type": "address", "internalType": "address", "indexed": false}, {"name": "newAdmin", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "BeaconUpgraded", "inputs": [{"name": "beacon", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Upgraded", "inputs": [{"name": "implementation", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"custom:oz-upgrades-unsafe-allow": "delegatecall", "details": "This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._", "events": {"AdminChanged(address,address)": {"details": "Emitted when the admin account has changed."}, "BeaconUpgraded(address)": {"details": "Emitted when the beacon is upgraded."}, "Upgraded(address)": {"details": "Emitted when the implementation is upgraded."}}, "kind": "dev", "methods": {}, "stateVariables": {"_ADMIN_SLOT": {"details": "Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."}, "_BEACON_SLOT": {"details": "The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."}, "_IMPLEMENTATION_SLOT": {"details": "Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."}}, "version": 1}}, "Proxy": {"contractName": "Proxy", "sourceId": "proxy/Proxy.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "fallback", "stateMutability": "payable"}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.", "kind": "dev", "methods": {}, "version": 1}}, "BeaconProxy": {"contractName": "BeaconProxy", "sourceId": "proxy/beacon/BeaconProxy.sol", "deploymentBytecode": {"bytecode": "0x608060405260405161096638038061096683398101604081905261002291610479565b61004d60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d51610539565b60008051602061091f833981519152146100695761006961055e565b6100758282600061007c565b50506105de565b61008583610147565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a26000825111806100c65750805b1561014257610140836001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561010c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101309190610574565b836102d860201b6100291760201c565b505b505050565b61015a8161030460201b6100551760201c565b6101b95760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b61022d816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021e9190610574565b61030460201b6100551760201c565b6102925760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b60648201526084016101b0565b806102b760008051602061091f83398151915260001b61030a60201b61005b1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606102fd838360405180606001604052806027815260200161093f6027913961030d565b9392505050565b3b151590565b90565b6060833b61036c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016101b0565b600080856001600160a01b031685604051610387919061058f565b600060405180830381855af49150503d80600081146103c2576040519150601f19603f3d011682016040523d82523d6000602084013e6103c7565b606091505b5090925090506103d88282866103e2565b9695505050505050565b606083156103f15750816102fd565b8251156104015782518084602001fd5b8160405162461bcd60e51b81526004016101b091906105ab565b80516001600160a01b038116811461043257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015610468578181015183820152602001610450565b838111156101405750506000910152565b6000806040838503121561048c57600080fd5b6104958361041b565b60208401519092506001600160401b03808211156104b257600080fd5b818501915085601f8301126104c657600080fd5b8151818111156104d8576104d8610437565b604051601f8201601f19908116603f0116810190838211818310171561050057610500610437565b8160405282815288602084870101111561051957600080fd5b61052a83602083016020880161044d565b80955050505050509250929050565b60008282101561055957634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561058657600080fd5b6102fd8261041b565b600082516105a181846020870161044d565b9190910192915050565b60208152600082518060208401526105ca81604085016020870161044d565b601f01601f19169190910160400192915050565b610332806105ed6000396000f3fe60806040523661001357610011610017565b005b6100115b61002761002261005e565b6100f7565b565b606061004e83836040518060600160405280602781526020016102d66027913961011b565b9392505050565b3b151590565b90565b60006100917fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100f2919061022d565b905090565b3660008037600080366000845af43d6000803e808015610116573d6000f35b3d6000fd5b6060833b61017f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b03168560405161019a9190610286565b600060405180830381855af49150503d80600081146101d5576040519150601f19603f3d011682016040523d82523d6000602084013e6101da565b606091505b50915091506101ea8282866101f4565b9695505050505050565b6060831561020357508161004e565b8251156102135782518084602001fd5b8160405162461bcd60e51b815260040161017691906102a2565b60006020828403121561023f57600080fd5b81516001600160a01b038116811461004e57600080fd5b60005b83811015610271578181015183820152602001610259565b83811115610280576000848401525b50505050565b60008251610298818460208701610256565b9190910192915050565b60208152600082518060208401526102c1816040850160208701610256565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220b01d695cd9efd45bd13326a4fcd0c277f4af11801a245bc575f932655af76a2664736f6c634300080d0033a3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564"}, "runtimeBytecode": {"bytecode": "0x60806040523661001357610011610017565b005b6100115b61002761002261005e565b6100f7565b565b606061004e83836040518060600160405280602781526020016102d66027913961011b565b9392505050565b3b151590565b90565b60006100917fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100f2919061022d565b905090565b3660008037600080366000845af43d6000803e808015610116573d6000f35b3d6000fd5b6060833b61017f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b03168560405161019a9190610286565b600060405180830381855af49150503d80600081146101d5576040519150601f19603f3d011682016040523d82523d6000602084013e6101da565b606091505b50915091506101ea8282866101f4565b9695505050505050565b6060831561020357508161004e565b8251156102135782518084602001fd5b8160405162461bcd60e51b815260040161017691906102a2565b60006020828403121561023f57600080fd5b81516001600160a01b038116811461004e57600080fd5b60005b83811015610271578181015183820152602001610259565b83811115610280576000848401525b50505050565b60008251610298818460208701610256565b9190910192915050565b60208152600082518060208401526102c1816040850160208701610256565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220b01d695cd9efd45bd13326a4fcd0c277f4af11801a245bc575f932655af76a2664736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "payable", "inputs": [{"name": "beacon", "type": "address", "internalType": "address"}, {"name": "data", "type": "bytes", "internalType": "bytes"}]}, {"type": "event", "name": "AdminChanged", "inputs": [{"name": "previousAdmin", "type": "address", "internalType": "address", "indexed": false}, {"name": "newAdmin", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "BeaconUpgraded", "inputs": [{"name": "beacon", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Upgraded", "inputs": [{"name": "implementation", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "fallback", "stateMutability": "payable"}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}. The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't conflict with the storage layout of the implementation behind the proxy. _Available since v3.4._", "kind": "dev", "methods": {"constructor": {"details": "Initializes the proxy with `beacon`. If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity constructor. Requirements: - `beacon` must be a contract with the interface {IBeacon}."}}, "version": 1}}, "IBeacon": {"contractName": "IBeacon", "sourceId": "proxy/beacon/IBeacon.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "implementation", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "This is the interface that {BeaconProxy} expects of its beacon.", "kind": "dev", "methods": {"implementation()": {"details": "Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."}}, "version": 1}}, "UpgradeableBeacon": {"contractName": "UpgradeableBeacon", "sourceId": "proxy/beacon/UpgradeableBeacon.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5060405161050e38038061050e83398101604081905261002f91610148565b61003833610047565b61004181610097565b50610178565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6100aa8161014260201b61020a1760201c565b6101205760405162461bcd60e51b815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60448201527f6e206973206e6f74206120636f6e747261637400000000000000000000000000606482015260840160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b3b151590565b60006020828403121561015a57600080fd5b81516001600160a01b038116811461017157600080fd5b9392505050565b610387806101876000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633659cfe61461005c5780635c60da1b14610071578063715018a61461009a5780638da5cb5b146100a2578063f2fde38b146100b3575b600080fd5b61006f61006a3660046102ec565b6100c6565b005b6001546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b61006f610139565b6000546001600160a01b031661007e565b61006f6100c13660046102ec565b61016f565b6000546001600160a01b031633146100f95760405162461bcd60e51b81526004016100f09061031c565b60405180910390fd5b61010281610210565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6000546001600160a01b031633146101635760405162461bcd60e51b81526004016100f09061031c565b61016d600061029c565b565b6000546001600160a01b031633146101995760405162461bcd60e51b81526004016100f09061031c565b6001600160a01b0381166101fe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100f0565b6102078161029c565b50565b3b151590565b803b61027a5760405162461bcd60e51b815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f6044820152721b881a5cc81b9bdd08184818dbdb9d1c9858dd606a1b60648201526084016100f0565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156102fe57600080fd5b81356001600160a01b038116811461031557600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea26469706673582212203f13d3411237fb8586957532708e25c09c77e20ab456c46ec7a07dafce518db364736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80633659cfe61461005c5780635c60da1b14610071578063715018a61461009a5780638da5cb5b146100a2578063f2fde38b146100b3575b600080fd5b61006f61006a3660046102ec565b6100c6565b005b6001546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b61006f610139565b6000546001600160a01b031661007e565b61006f6100c13660046102ec565b61016f565b6000546001600160a01b031633146100f95760405162461bcd60e51b81526004016100f09061031c565b60405180910390fd5b61010281610210565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6000546001600160a01b031633146101635760405162461bcd60e51b81526004016100f09061031c565b61016d600061029c565b565b6000546001600160a01b031633146101995760405162461bcd60e51b81526004016100f09061031c565b6001600160a01b0381166101fe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100f0565b6102078161029c565b50565b3b151590565b803b61027a5760405162461bcd60e51b815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f6044820152721b881a5cc81b9bdd08184818dbdb9d1c9858dd606a1b60648201526084016100f0565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156102fe57600080fd5b81356001600160a01b038116811461031557600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea26469706673582212203f13d3411237fb8586957532708e25c09c77e20ab456c46ec7a07dafce518db364736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "implementation_", "type": "address", "internalType": "address"}]}, {"type": "event", "name": "OwnershipTransferred", "inputs": [{"name": "previousOwner", "type": "address", "internalType": "address", "indexed": true}, {"name": "newOwner", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Upgraded", "inputs": [{"name": "implementation", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "function", "name": "implementation", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "owner", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "renounceOwnership", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "transferOwnership", "stateMutability": "nonpayable", "inputs": [{"name": "newOwner", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "upgradeTo", "stateMutability": "nonpayable", "inputs": [{"name": "newImplementation", "type": "address", "internalType": "address"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their implementation contract, which is where they will delegate all function calls. An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.", "events": {"Upgraded(address)": {"details": "Emitted when the implementation returned by the beacon is changed."}}, "kind": "dev", "methods": {"constructor": {"details": "Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the beacon."}, "implementation()": {"details": "Returns the current implementation address."}, "owner()": {"details": "Returns the address of the current owner."}, "renounceOwnership()": {"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."}, "transferOwnership(address)": {"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}, "upgradeTo(address)": {"details": "Upgrades the beacon to a new implementation. Emits an {Upgraded} event. Requirements: - msg.sender must be the owner of the contract. - `newImplementation` must be a contract."}}, "version": 1}}, "ProxyAdmin": {"contractName": "ProxyAdmin", "sourceId": "proxy/transparent/ProxyAdmin.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6107238061007e6000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead1461016457600080fd5b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b3660046104ed565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee366004610511565b610254565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f366004610560565b6102de565b34801561013057600080fd5b506100d161013f366004610511565b61036f565b34801561015057600080fd5b506100d161015f3660046104ed565b6103c7565b34801561017057600080fd5b506100a061017f3660046104ed565b610462565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d9190610636565b949350505050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f90610653565b60405180910390fd5b6102526000610488565b565b6000546001600160a01b0316331461027e5760405162461bcd60e51b815260040161023f90610653565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b1580156102c257600080fd5b505af11580156102d6573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103085760405162461bcd60e51b815260040161023f90610653565b60405163278f794360e11b81526001600160a01b03841690634f1ef2869034906103389086908690600401610688565b6000604051808303818588803b15801561035157600080fd5b505af1158015610365573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146103995760405162461bcd60e51b815260040161023f90610653565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe6906024016102a8565b6000546001600160a01b031633146103f15760405162461bcd60e51b815260040161023f90610653565b6001600160a01b0381166104565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023f565b61045f81610488565b50565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461045f57600080fd5b6000602082840312156104ff57600080fd5b813561050a816104d8565b9392505050565b6000806040838503121561052457600080fd5b823561052f816104d8565b9150602083013561053f816104d8565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561057557600080fd5b8335610580816104d8565b92506020840135610590816104d8565b9150604084013567ffffffffffffffff808211156105ad57600080fd5b818601915086601f8301126105c157600080fd5b8135818111156105d3576105d361054a565b604051601f8201601f19908116603f011681019083821181831017156105fb576105fb61054a565b8160405282815289602084870101111561061457600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020828403121561064857600080fd5b815161050a816104d8565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60018060a01b038316815260006020604081840152835180604085015260005b818110156106c4578581018301518582016060015282016106a8565b818111156106d6576000606083870101525b50601f01601f19169290920160600194935050505056fea264697066735822122070e8d616be4282778ca2c0e34b4b138d8678bdf413e3f91739ee895f2698ad5c64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead1461016457600080fd5b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b3660046104ed565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee366004610511565b610254565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f366004610560565b6102de565b34801561013057600080fd5b506100d161013f366004610511565b61036f565b34801561015057600080fd5b506100d161015f3660046104ed565b6103c7565b34801561017057600080fd5b506100a061017f3660046104ed565b610462565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d9190610636565b949350505050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f90610653565b60405180910390fd5b6102526000610488565b565b6000546001600160a01b0316331461027e5760405162461bcd60e51b815260040161023f90610653565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b1580156102c257600080fd5b505af11580156102d6573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103085760405162461bcd60e51b815260040161023f90610653565b60405163278f794360e11b81526001600160a01b03841690634f1ef2869034906103389086908690600401610688565b6000604051808303818588803b15801561035157600080fd5b505af1158015610365573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146103995760405162461bcd60e51b815260040161023f90610653565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe6906024016102a8565b6000546001600160a01b031633146103f15760405162461bcd60e51b815260040161023f90610653565b6001600160a01b0381166104565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023f565b61045f81610488565b50565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461045f57600080fd5b6000602082840312156104ff57600080fd5b813561050a816104d8565b9392505050565b6000806040838503121561052457600080fd5b823561052f816104d8565b9150602083013561053f816104d8565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561057557600080fd5b8335610580816104d8565b92506020840135610590816104d8565b9150604084013567ffffffffffffffff808211156105ad57600080fd5b818601915086601f8301126105c157600080fd5b8135818111156105d3576105d361054a565b604051601f8201601f19908116603f011681019083821181831017156105fb576105fb61054a565b8160405282815289602084870101111561061457600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020828403121561064857600080fd5b815161050a816104d8565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60018060a01b038316815260006020604081840152835180604085015260005b818110156106c4578581018301518582016060015282016106a8565b818111156106d6576000606083870101525b50601f01601f19169290920160600194935050505056fea264697066735822122070e8d616be4282778ca2c0e34b4b138d8678bdf413e3f91739ee895f2698ad5c64736f6c634300080d0033"}, "abi": [{"type": "event", "name": "OwnershipTransferred", "inputs": [{"name": "previousOwner", "type": "address", "internalType": "address", "indexed": true}, {"name": "newOwner", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "function", "name": "changeProxyAdmin", "stateMutability": "nonpayable", "inputs": [{"name": "proxy", "type": "address", "internalType": "contract TransparentUpgradeableProxy"}, {"name": "newAdmin", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "getProxyAdmin", "stateMutability": "view", "inputs": [{"name": "proxy", "type": "address", "internalType": "contract TransparentUpgradeableProxy"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getProxyImplementation", "stateMutability": "view", "inputs": [{"name": "proxy", "type": "address", "internalType": "contract TransparentUpgradeableProxy"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "owner", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "renounceOwnership", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "transferOwnership", "stateMutability": "nonpayable", "inputs": [{"name": "newOwner", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "upgrade", "stateMutability": "nonpayable", "inputs": [{"name": "proxy", "type": "address", "internalType": "contract TransparentUpgradeableProxy"}, {"name": "implementation", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "upgradeAndCall", "stateMutability": "payable", "inputs": [{"name": "proxy", "type": "address", "internalType": "contract TransparentUpgradeableProxy"}, {"name": "implementation", "type": "address", "internalType": "address"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.", "kind": "dev", "methods": {"changeProxyAdmin(address,address)": {"details": "Changes the admin of `proxy` to `newAdmin`. Requirements: - This contract must be the current admin of `proxy`."}, "getProxyAdmin(address)": {"details": "Returns the current admin of `proxy`. Requirements: - This contract must be the admin of `proxy`."}, "getProxyImplementation(address)": {"details": "Returns the current implementation of `proxy`. Requirements: - This contract must be the admin of `proxy`."}, "owner()": {"details": "Returns the address of the current owner."}, "renounceOwnership()": {"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."}, "transferOwnership(address)": {"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}, "upgrade(address,address)": {"details": "Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}. Requirements: - This contract must be the admin of `proxy`."}, "upgradeAndCall(address,address,bytes)": {"details": "Upgrades `proxy` to `implementation` and calls a function on the new implementation. See {TransparentUpgradeableProxy-upgradeToAndCall}. Requirements: - This contract must be the admin of `proxy`."}}, "version": 1}}, "TransparentUpgradeableProxy": {"contractName": "TransparentUpgradeableProxy", "sourceId": "proxy/transparent/TransparentUpgradeableProxy.sol", "deploymentBytecode": {"bytecode": "0x608060405260405162000efd38038062000efd833981016040819052620000269162000507565b82816200005560017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd620005e7565b60008051602062000eb6833981519152146200007557620000756200060d565b6200008382826000620000e7565b50620000b3905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104620005e7565b60008051602062000e9683398151915214620000d357620000d36200060d565b620000de8262000124565b50505062000676565b620000f2836200017f565b600082511180620001005750805b156200011f576200011d8383620001c160201b6200022e1760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200014f620001f0565b604080516001600160a01b03928316815291841660208301520160405180910390a16200017c8162000229565b50565b6200018a81620002de565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060620001e9838360405180606001604052806027815260200162000ed66027913962000381565b9392505050565b60006200021a60008051602062000e9683398151915260001b6200045e60201b620001ea1760201c565b546001600160a01b0316919050565b6001600160a01b038116620002945760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620002bd60008051602062000e9683398151915260001b6200045e60201b620001ea1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b620002f4816200046160201b6200025a1760201c565b620003585760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016200028b565b80620002bd60008051602062000eb683398151915260001b6200045e60201b620001ea1760201c565b6060833b620003e25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016200028b565b600080856001600160a01b031685604051620003ff919062000623565b600060405180830381855af49150503d80600081146200043c576040519150601f19603f3d011682016040523d82523d6000602084013e62000441565b606091505b5090925090506200045482828662000467565b9695505050505050565b90565b3b151590565b6060831562000478575081620001e9565b825115620004895782518084602001fd5b8160405162461bcd60e51b81526004016200028b919062000641565b80516001600160a01b0381168114620004bd57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620004f5578181015183820152602001620004db565b838111156200011d5750506000910152565b6000806000606084860312156200051d57600080fd5b6200052884620004a5565b92506200053860208501620004a5565b60408501519092506001600160401b03808211156200055657600080fd5b818601915086601f8301126200056b57600080fd5b815181811115620005805762000580620004c2565b604051601f8201601f19908116603f01168101908382118183101715620005ab57620005ab620004c2565b81604052828152896020848701011115620005c557600080fd5b620005d8836020830160208801620004d8565b80955050505050509250925092565b6000828210156200060857634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6000825162000637818460208701620004d8565b9190910192915050565b602081526000825180602084015262000662816040850160208701620004d8565b601f01601f19169190910160400192915050565b61081080620006866000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b61008036600461069a565b610118565b61005b6100933660046106b5565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e436600461069a565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610260565b6101166101116102f5565b6102ff565b565b610120610323565b6001600160a01b0316330361014d5761014a81604051806020016040528060008152506000610356565b50565b61014a6100fe565b61015d610323565b6001600160a01b031633036101b4576101af8383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250610356915050565b505050565b6101af6100fe565b60006101c6610323565b6001600160a01b031633036101e2576101dd6102f5565b905090565b6101ea6100fe565b90565b6101f5610323565b6001600160a01b0316330361014d5761014a81610381565b6000610217610323565b6001600160a01b031633036101e2576101dd610323565b606061025383836040518060600160405280602781526020016107b4602791396103d5565b9392505050565b3b151590565b610268610323565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd6104a9565b3660008037600080366000845af43d6000803e80801561031e573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b61035f836104d1565b60008251118061036c5750805b156101af5761037b838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103aa610323565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a81610511565b6060833b6104345760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016102ec565b600080856001600160a01b03168560405161044f9190610764565b600060405180830381855af49150503d806000811461048a576040519150601f19603f3d011682016040523d82523d6000602084013e61048f565b606091505b509150915061049f8282866105ba565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610347565b6104da816105f3565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105765760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ec565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105c9575081610253565b8251156105d95782518084602001fd5b8160405162461bcd60e51b81526004016102ec9190610780565b803b6106575760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102ec565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610599565b80356001600160a01b038116811461069557600080fd5b919050565b6000602082840312156106ac57600080fd5b6102538261067e565b6000806000604084860312156106ca57600080fd5b6106d38461067e565b9250602084013567ffffffffffffffff808211156106f057600080fd5b818601915086601f83011261070457600080fd5b81358181111561071357600080fd5b87602082850101111561072557600080fd5b6020830194508093505050509250925092565b60005b8381101561075357818101518382015260200161073b565b8381111561037b5750506000910152565b60008251610776818460208701610738565b9190910192915050565b602081526000825180602084015261079f816040850160208701610738565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d139530637f07659312f580e7f105841d994a19b5514f9b5ab47158d194eeafd64736f6c634300080d0033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564"}, "runtimeBytecode": {"bytecode": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b61008036600461069a565b610118565b61005b6100933660046106b5565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e436600461069a565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610260565b6101166101116102f5565b6102ff565b565b610120610323565b6001600160a01b0316330361014d5761014a81604051806020016040528060008152506000610356565b50565b61014a6100fe565b61015d610323565b6001600160a01b031633036101b4576101af8383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250610356915050565b505050565b6101af6100fe565b60006101c6610323565b6001600160a01b031633036101e2576101dd6102f5565b905090565b6101ea6100fe565b90565b6101f5610323565b6001600160a01b0316330361014d5761014a81610381565b6000610217610323565b6001600160a01b031633036101e2576101dd610323565b606061025383836040518060600160405280602781526020016107b4602791396103d5565b9392505050565b3b151590565b610268610323565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd6104a9565b3660008037600080366000845af43d6000803e80801561031e573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b61035f836104d1565b60008251118061036c5750805b156101af5761037b838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103aa610323565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a81610511565b6060833b6104345760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016102ec565b600080856001600160a01b03168560405161044f9190610764565b600060405180830381855af49150503d806000811461048a576040519150601f19603f3d011682016040523d82523d6000602084013e61048f565b606091505b509150915061049f8282866105ba565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610347565b6104da816105f3565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105765760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ec565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105c9575081610253565b8251156105d95782518084602001fd5b8160405162461bcd60e51b81526004016102ec9190610780565b803b6106575760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102ec565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610599565b80356001600160a01b038116811461069557600080fd5b919050565b6000602082840312156106ac57600080fd5b6102538261067e565b6000806000604084860312156106ca57600080fd5b6106d38461067e565b9250602084013567ffffffffffffffff808211156106f057600080fd5b818601915086601f83011261070457600080fd5b81358181111561071357600080fd5b87602082850101111561072557600080fd5b6020830194508093505050509250925092565b60005b8381101561075357818101518382015260200161073b565b8381111561037b5750506000910152565b60008251610776818460208701610738565b9190910192915050565b602081526000825180602084015261079f816040850160208701610738565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d139530637f07659312f580e7f105841d994a19b5514f9b5ab47158d194eeafd64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "payable", "inputs": [{"name": "_logic", "type": "address", "internalType": "address"}, {"name": "admin_", "type": "address", "internalType": "address"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}]}, {"type": "event", "name": "AdminChanged", "inputs": [{"name": "previousAdmin", "type": "address", "internalType": "address", "indexed": false}, {"name": "newAdmin", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "BeaconUpgraded", "inputs": [{"name": "beacon", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Upgraded", "inputs": [{"name": "implementation", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "fallback", "stateMutability": "payable"}, {"type": "function", "name": "admin", "stateMutability": "nonpayable", "inputs": [], "outputs": [{"name": "admin_", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "changeAdmin", "stateMutability": "nonpayable", "inputs": [{"name": "newAdmin", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "implementation", "stateMutability": "nonpayable", "inputs": [], "outputs": [{"name": "implementation_", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "upgradeTo", "stateMutability": "nonpayable", "inputs": [{"name": "newImplementation", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "upgradeToAndCall", "stateMutability": "payable", "inputs": [{"name": "newImplementation", "type": "address", "internalType": "address"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "receive", "stateMutability": "payable"}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "This contract implements a proxy that is upgradeable by an admin. To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing], which can potentially be used in an attack, this contract uses the https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two things that go hand in hand: 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if that call matches one of the admin functions exposed by the proxy itself. 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the implementation. If the admin tries to call a function on the implementation it will fail with an error that says \"admin cannot fallback to proxy target\". These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due to sudden errors when trying to call a function from the proxy implementation. Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way, you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.", "kind": "dev", "methods": {"admin()": {"details": "Returns the current admin. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`"}, "changeAdmin(address)": {"details": "Changes the admin of the proxy. Emits an {AdminChanged} event. NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}."}, "constructor": {"details": "Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}."}, "implementation()": {"details": "Returns the current implementation. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`"}, "upgradeTo(address)": {"details": "Upgrade the implementation of the proxy. NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}."}, "upgradeToAndCall(address,bytes)": {"details": "Upgrade the implementation of the proxy, and then call a function from the new implementation as specified by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract. NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}."}}, "version": 1}}, "Initializable": {"contractName": "Initializable", "sourceId": "proxy/utils/Initializable.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"custom:oz-upgrades-unsafe-allow": "constructor constructor() initializer {} ``` ====", "details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed: [.hljs-theme-light.nopadding] ```", "kind": "dev", "methods": {}, "stateVariables": {"_initialized": {"details": "Indicates that the contract has been initialized."}, "_initializing": {"details": "Indicates that the contract is in the process of being initialized."}}, "version": 1}}, "UUPSUpgradeable": {"contractName": "UUPSUpgradeable", "sourceId": "proxy/utils/UUPSUpgradeable.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "AdminChanged", "inputs": [{"name": "previousAdmin", "type": "address", "internalType": "address", "indexed": false}, {"name": "newAdmin", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "BeaconUpgraded", "inputs": [{"name": "beacon", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Upgraded", "inputs": [{"name": "implementation", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "function", "name": "upgradeTo", "stateMutability": "nonpayable", "inputs": [{"name": "newImplementation", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "upgradeToAndCall", "stateMutability": "payable", "inputs": [{"name": "newImplementation", "type": "address", "internalType": "address"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._", "kind": "dev", "methods": {"upgradeTo(address)": {"details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}, "upgradeToAndCall(address,bytes)": {"details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}}, "stateVariables": {"__self": {"custom:oz-upgrades-unsafe-allow": "state-variable-immutable state-variable-assignment"}}, "version": 1}}, "Pausable": {"contractName": "Pausable", "sourceId": "security/Pausable.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "Paused", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Unpaused", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "function", "name": "paused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.", "events": {"Paused(address)": {"details": "Emitted when the pause is triggered by `account`."}, "Unpaused(address)": {"details": "Emitted when the pause is lifted by `account`."}}, "kind": "dev", "methods": {"constructor": {"details": "Initializes the contract in unpaused state."}, "paused()": {"details": "Returns true if the contract is paused, and false otherwise."}}, "version": 1}}, "PullPayment": {"contractName": "PullPayment", "sourceId": "security/PullPayment.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "payments", "stateMutability": "view", "inputs": [{"name": "dest", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "withdrawPayments", "stateMutability": "nonpayable", "inputs": [{"name": "payee", "type": "address", "internalType": "address payable"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Simple implementation of a https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment] strategy, where the paying contract doesn't interact directly with the receiver account, which must withdraw its payments itself. Pull-payments are often considered the best practice when it comes to sending Ether, security-wise. It prevents recipients from blocking execution, and eliminates reentrancy concerns. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]. To use, derive from the `PullPayment` contract, and use {_asyncTransfer} instead of Solidity's `transfer` function. Payees can query their due payments with {payments}, and retrieve them with {withdrawPayments}.", "kind": "dev", "methods": {"payments(address)": {"details": "Returns the payments owed to an address.", "params": {"dest": "The creditor's address."}}, "withdrawPayments(address)": {"details": "Withdraw accumulated payments, forwarding all gas to the recipient. Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.", "params": {"payee": "Whose payments will be withdrawn."}}}, "version": 1}}, "ReentrancyGuard": {"contractName": "ReentrancyGuard", "sourceId": "security/ReentrancyGuard.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].", "kind": "dev", "methods": {}, "version": 1}}, "ERC1155": {"contractName": "ERC1155", "sourceId": "token/ERC1155/ERC1155.sol", "deploymentBytecode": {"bytecode": "0x60806040523480156200001157600080fd5b50604051620015fe380380620015fe83398101604081905262000034916200011b565b6200003f8162000046565b5062000233565b80516200005b9060029060208401906200005f565b5050565b8280546200006d90620001f7565b90600052602060002090601f016020900481019282620000915760008555620000dc565b82601f10620000ac57805160ff1916838001178555620000dc565b82800160010185558215620000dc579182015b82811115620000dc578251825591602001919060010190620000bf565b50620000ea929150620000ee565b5090565b5b80821115620000ea5760008155600101620000ef565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200012f57600080fd5b82516001600160401b03808211156200014757600080fd5b818501915085601f8301126200015c57600080fd5b81518181111562000171576200017162000105565b604051601f8201601f19908116603f011681019083821181831017156200019c576200019c62000105565b816040528281528886848701011115620001b557600080fd5b600093505b82841015620001d95784840186015181850187015292850192620001ba565b82841115620001eb5760008684830101525b98975050505050505050565b600181811c908216806200020c57607f821691505b6020821081036200022d57634e487b7160e01b600052602260045260246000fd5b50919050565b6113bb80620002436000396000f3fe608060405234801561001057600080fd5b50600436106100875760003560e01c80634e1273f41161005b5780634e1273f41461010a578063a22cb4651461012a578063e985e9c51461013d578063f242432a1461017957600080fd5b8062fdd58e1461008c57806301ffc9a7146100b25780630e89341c146100d55780632eb2c2d6146100f5575b600080fd5b61009f61009a366004610bc0565b61018c565b6040519081526020015b60405180910390f35b6100c56100c0366004610c03565b610223565b60405190151581526020016100a9565b6100e86100e3366004610c27565b610275565b6040516100a99190610c8d565b610108610103366004610dec565b610309565b005b61011d610118366004610e96565b6103a0565b6040516100a99190610f9c565b610108610138366004610faf565b6104ca565b6100c561014b366004610feb565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61010861018736600461101e565b6104d9565b60006001600160a01b0383166101fd5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061025457506001600160e01b031982166303a24d0760e21b145b8061026f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606002805461028490611083565b80601f01602080910402602001604051908101604052809291908181526020018280546102b090611083565b80156102fd5780601f106102d2576101008083540402835291602001916102fd565b820191906000526020600020905b8154815290600101906020018083116102e057829003601f168201915b50505050509050919050565b6001600160a01b0385163314806103255750610325853361014b565b61038c5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016101f4565b6103998585858585610560565b5050505050565b606081518351146104055760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016101f4565b6000835167ffffffffffffffff81111561042157610421610ca0565b60405190808252806020026020018201604052801561044a578160200160208202803683370190505b50905060005b84518110156104c25761049585828151811061046e5761046e6110bd565b6020026020010151858381518110610488576104886110bd565b602002602001015161018c565b8282815181106104a7576104a76110bd565b60209081029190910101526104bb816110e9565b9050610450565b509392505050565b6104d533838361073d565b5050565b6001600160a01b0385163314806104f557506104f5853361014b565b6105535760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016101f4565b610399858585858561081d565b81518351146105c25760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016101f4565b6001600160a01b0384166105e85760405162461bcd60e51b81526004016101f490611102565b3360005b84518110156106cf576000858281518110610609576106096110bd565b602002602001015190506000858381518110610627576106276110bd565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156106775760405162461bcd60e51b81526004016101f490611147565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906106b4908490611191565b92505081905550505050806106c8906110e9565b90506105ec565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161071f9291906111a9565b60405180910390a4610735818787878787610943565b505050505050565b816001600160a01b0316836001600160a01b0316036107b05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016101f4565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166108435760405162461bcd60e51b81526004016101f490611102565b3361085c81878761085388610a9e565b61039988610a9e565b6000848152602081815260408083206001600160a01b038a1684529091529020548381101561089d5760405162461bcd60e51b81526004016101f490611147565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906108da908490611191565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461093a828888888888610ae9565b50505050505050565b6001600160a01b0384163b156107355760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061098790899089908890889088906004016111d7565b6020604051808303816000875af19250505080156109c2575060408051601f3d908101601f191682019092526109bf91810190611235565b60015b610a6e576109ce611252565b806308c379a003610a0757506109e261126e565b806109ed5750610a09565b8060405162461bcd60e51b81526004016101f49190610c8d565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016101f4565b6001600160e01b0319811663bc197c8160e01b1461093a5760405162461bcd60e51b81526004016101f4906112f8565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610ad857610ad86110bd565b602090810291909101015292915050565b6001600160a01b0384163b156107355760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610b2d9089908990889088908890600401611340565b6020604051808303816000875af1925050508015610b68575060408051601f3d908101601f19168201909252610b6591810190611235565b60015b610b74576109ce611252565b6001600160e01b0319811663f23a6e6160e01b1461093a5760405162461bcd60e51b81526004016101f4906112f8565b80356001600160a01b0381168114610bbb57600080fd5b919050565b60008060408385031215610bd357600080fd5b610bdc83610ba4565b946020939093013593505050565b6001600160e01b031981168114610c0057600080fd5b50565b600060208284031215610c1557600080fd5b8135610c2081610bea565b9392505050565b600060208284031215610c3957600080fd5b5035919050565b6000815180845260005b81811015610c6657602081850181015186830182015201610c4a565b81811115610c78576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610c206020830184610c40565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715610cdc57610cdc610ca0565b6040525050565b600067ffffffffffffffff821115610cfd57610cfd610ca0565b5060051b60200190565b600082601f830112610d1857600080fd5b81356020610d2582610ce3565b604051610d328282610cb6565b83815260059390931b8501820192828101915086841115610d5257600080fd5b8286015b84811015610d6d5780358352918301918301610d56565b509695505050505050565b600082601f830112610d8957600080fd5b813567ffffffffffffffff811115610da357610da3610ca0565b604051610dba601f8301601f191660200182610cb6565b818152846020838601011115610dcf57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215610e0457600080fd5b610e0d86610ba4565b9450610e1b60208701610ba4565b9350604086013567ffffffffffffffff80821115610e3857600080fd5b610e4489838a01610d07565b94506060880135915080821115610e5a57600080fd5b610e6689838a01610d07565b93506080880135915080821115610e7c57600080fd5b50610e8988828901610d78565b9150509295509295909350565b60008060408385031215610ea957600080fd5b823567ffffffffffffffff80821115610ec157600080fd5b818501915085601f830112610ed557600080fd5b81356020610ee282610ce3565b604051610eef8282610cb6565b83815260059390931b8501820192828101915089841115610f0f57600080fd5b948201945b83861015610f3457610f2586610ba4565b82529482019490820190610f14565b96505086013592505080821115610f4a57600080fd5b50610f5785828601610d07565b9150509250929050565b600081518084526020808501945080840160005b83811015610f9157815187529582019590820190600101610f75565b509495945050505050565b602081526000610c206020830184610f61565b60008060408385031215610fc257600080fd5b610fcb83610ba4565b915060208301358015158114610fe057600080fd5b809150509250929050565b60008060408385031215610ffe57600080fd5b61100783610ba4565b915061101560208401610ba4565b90509250929050565b600080600080600060a0868803121561103657600080fd5b61103f86610ba4565b945061104d60208701610ba4565b93506040860135925060608601359150608086013567ffffffffffffffff81111561107757600080fd5b610e8988828901610d78565b600181811c9082168061109757607f821691505b6020821081036110b757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016110fb576110fb6110d3565b5060010190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b600082198211156111a4576111a46110d3565b500190565b6040815260006111bc6040830185610f61565b82810360208401526111ce8185610f61565b95945050505050565b6001600160a01b0386811682528516602082015260a06040820181905260009061120390830186610f61565b82810360608401526112158186610f61565b905082810360808401526112298185610c40565b98975050505050505050565b60006020828403121561124757600080fd5b8151610c2081610bea565b600060033d111561126b5760046000803e5060005160e01c5b90565b600060443d101561127c5790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156112ac57505050505090565b82850191508151818111156112c45750505050505090565b843d87010160208285010111156112de5750505050505090565b6112ed60208286010187610cb6565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061137a90830184610c40565b97965050505050505056fea264697066735822122058e9ff8bbf78b128ac11f710e4a18e8b8edfee4aa220a547431234cb5569599764736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100875760003560e01c80634e1273f41161005b5780634e1273f41461010a578063a22cb4651461012a578063e985e9c51461013d578063f242432a1461017957600080fd5b8062fdd58e1461008c57806301ffc9a7146100b25780630e89341c146100d55780632eb2c2d6146100f5575b600080fd5b61009f61009a366004610bc0565b61018c565b6040519081526020015b60405180910390f35b6100c56100c0366004610c03565b610223565b60405190151581526020016100a9565b6100e86100e3366004610c27565b610275565b6040516100a99190610c8d565b610108610103366004610dec565b610309565b005b61011d610118366004610e96565b6103a0565b6040516100a99190610f9c565b610108610138366004610faf565b6104ca565b6100c561014b366004610feb565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61010861018736600461101e565b6104d9565b60006001600160a01b0383166101fd5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061025457506001600160e01b031982166303a24d0760e21b145b8061026f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606002805461028490611083565b80601f01602080910402602001604051908101604052809291908181526020018280546102b090611083565b80156102fd5780601f106102d2576101008083540402835291602001916102fd565b820191906000526020600020905b8154815290600101906020018083116102e057829003601f168201915b50505050509050919050565b6001600160a01b0385163314806103255750610325853361014b565b61038c5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016101f4565b6103998585858585610560565b5050505050565b606081518351146104055760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016101f4565b6000835167ffffffffffffffff81111561042157610421610ca0565b60405190808252806020026020018201604052801561044a578160200160208202803683370190505b50905060005b84518110156104c25761049585828151811061046e5761046e6110bd565b6020026020010151858381518110610488576104886110bd565b602002602001015161018c565b8282815181106104a7576104a76110bd565b60209081029190910101526104bb816110e9565b9050610450565b509392505050565b6104d533838361073d565b5050565b6001600160a01b0385163314806104f557506104f5853361014b565b6105535760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016101f4565b610399858585858561081d565b81518351146105c25760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016101f4565b6001600160a01b0384166105e85760405162461bcd60e51b81526004016101f490611102565b3360005b84518110156106cf576000858281518110610609576106096110bd565b602002602001015190506000858381518110610627576106276110bd565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156106775760405162461bcd60e51b81526004016101f490611147565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906106b4908490611191565b92505081905550505050806106c8906110e9565b90506105ec565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161071f9291906111a9565b60405180910390a4610735818787878787610943565b505050505050565b816001600160a01b0316836001600160a01b0316036107b05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016101f4565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166108435760405162461bcd60e51b81526004016101f490611102565b3361085c81878761085388610a9e565b61039988610a9e565b6000848152602081815260408083206001600160a01b038a1684529091529020548381101561089d5760405162461bcd60e51b81526004016101f490611147565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906108da908490611191565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461093a828888888888610ae9565b50505050505050565b6001600160a01b0384163b156107355760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061098790899089908890889088906004016111d7565b6020604051808303816000875af19250505080156109c2575060408051601f3d908101601f191682019092526109bf91810190611235565b60015b610a6e576109ce611252565b806308c379a003610a0757506109e261126e565b806109ed5750610a09565b8060405162461bcd60e51b81526004016101f49190610c8d565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016101f4565b6001600160e01b0319811663bc197c8160e01b1461093a5760405162461bcd60e51b81526004016101f4906112f8565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610ad857610ad86110bd565b602090810291909101015292915050565b6001600160a01b0384163b156107355760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610b2d9089908990889088908890600401611340565b6020604051808303816000875af1925050508015610b68575060408051601f3d908101601f19168201909252610b6591810190611235565b60015b610b74576109ce611252565b6001600160e01b0319811663f23a6e6160e01b1461093a5760405162461bcd60e51b81526004016101f4906112f8565b80356001600160a01b0381168114610bbb57600080fd5b919050565b60008060408385031215610bd357600080fd5b610bdc83610ba4565b946020939093013593505050565b6001600160e01b031981168114610c0057600080fd5b50565b600060208284031215610c1557600080fd5b8135610c2081610bea565b9392505050565b600060208284031215610c3957600080fd5b5035919050565b6000815180845260005b81811015610c6657602081850181015186830182015201610c4a565b81811115610c78576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610c206020830184610c40565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715610cdc57610cdc610ca0565b6040525050565b600067ffffffffffffffff821115610cfd57610cfd610ca0565b5060051b60200190565b600082601f830112610d1857600080fd5b81356020610d2582610ce3565b604051610d328282610cb6565b83815260059390931b8501820192828101915086841115610d5257600080fd5b8286015b84811015610d6d5780358352918301918301610d56565b509695505050505050565b600082601f830112610d8957600080fd5b813567ffffffffffffffff811115610da357610da3610ca0565b604051610dba601f8301601f191660200182610cb6565b818152846020838601011115610dcf57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215610e0457600080fd5b610e0d86610ba4565b9450610e1b60208701610ba4565b9350604086013567ffffffffffffffff80821115610e3857600080fd5b610e4489838a01610d07565b94506060880135915080821115610e5a57600080fd5b610e6689838a01610d07565b93506080880135915080821115610e7c57600080fd5b50610e8988828901610d78565b9150509295509295909350565b60008060408385031215610ea957600080fd5b823567ffffffffffffffff80821115610ec157600080fd5b818501915085601f830112610ed557600080fd5b81356020610ee282610ce3565b604051610eef8282610cb6565b83815260059390931b8501820192828101915089841115610f0f57600080fd5b948201945b83861015610f3457610f2586610ba4565b82529482019490820190610f14565b96505086013592505080821115610f4a57600080fd5b50610f5785828601610d07565b9150509250929050565b600081518084526020808501945080840160005b83811015610f9157815187529582019590820190600101610f75565b509495945050505050565b602081526000610c206020830184610f61565b60008060408385031215610fc257600080fd5b610fcb83610ba4565b915060208301358015158114610fe057600080fd5b809150509250929050565b60008060408385031215610ffe57600080fd5b61100783610ba4565b915061101560208401610ba4565b90509250929050565b600080600080600060a0868803121561103657600080fd5b61103f86610ba4565b945061104d60208701610ba4565b93506040860135925060608601359150608086013567ffffffffffffffff81111561107757600080fd5b610e8988828901610d78565b600181811c9082168061109757607f821691505b6020821081036110b757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016110fb576110fb6110d3565b5060010190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b600082198211156111a4576111a46110d3565b500190565b6040815260006111bc6040830185610f61565b82810360208401526111ce8185610f61565b95945050505050565b6001600160a01b0386811682528516602082015260a06040820181905260009061120390830186610f61565b82810360608401526112158186610f61565b905082810360808401526112298185610c40565b98975050505050505050565b60006020828403121561124757600080fd5b8151610c2081610bea565b600060033d111561126b5760046000803e5060005160e01c5b90565b600060443d101561127c5790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156112ac57505050505090565b82850191508151818111156112c45750505050505090565b843d87010160208285010111156112de5750505050505090565b6112ed60208286010187610cb6565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061137a90830184610c40565b97965050505050505056fea264697066735822122058e9ff8bbf78b128ac11f710e4a18e8b8edfee4aa220a547431234cb5569599764736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "uri_", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TransferBatch", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TransferSingle", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "URI", "inputs": [{"name": "value", "type": "string", "internalType": "string", "indexed": false}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfBatch", "stateMutability": "view", "inputs": [{"name": "accounts", "type": "address[]", "internalType": "address[]"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": [{"name": "", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "safeBatchTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "uri", "stateMutability": "view", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Implementation of the basic standard multi-token. See https://eips.ethereum.org/EIPS/eip-1155 Originally based on code by Enjin: https://github.com/enjin/erc-1155 _Available since v3.1._", "kind": "dev", "methods": {"balanceOf(address,uint256)": {"details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."}, "balanceOfBatch(address[],uint256[])": {"details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."}, "constructor": {"details": "See {_setURI}."}, "isApprovedForAll(address,address)": {"details": "See {IERC1155-isApprovedForAll}."}, "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {"details": "See {IERC1155-safeBatchTransferFrom}."}, "safeTransferFrom(address,address,uint256,uint256,bytes)": {"details": "See {IERC1155-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC1155-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "uri(uint256)": {"details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}}, "version": 1}}, "IERC1155": {"contractName": "IERC1155", "sourceId": "token/ERC1155/IERC1155.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TransferBatch", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TransferSingle", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "URI", "inputs": [{"name": "value", "type": "string", "internalType": "string", "indexed": false}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfBatch", "stateMutability": "view", "inputs": [{"name": "accounts", "type": "address[]", "internalType": "address[]"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": [{"name": "", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "safeBatchTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP]. _Available since v3.1._", "events": {"ApprovalForAll(address,address,bool)": {"details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."}, "TransferBatch(address,address,address,uint256[],uint256[])": {"details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."}, "TransferSingle(address,address,address,uint256,uint256)": {"details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."}, "URI(string,uint256)": {"details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}}, "kind": "dev", "methods": {"balanceOf(address,uint256)": {"details": "Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."}, "balanceOfBatch(address[],uint256[])": {"details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."}, "isApprovedForAll(address,address)": {"details": "Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."}, "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {"details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."}, "safeTransferFrom(address,address,uint256,uint256,bytes)": {"details": "Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."}, "setApprovalForAll(address,bool)": {"details": "Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."}, "supportsInterface(bytes4)": {"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}}, "version": 1}}, "IERC1155Receiver": {"contractName": "IERC1155Receiver", "sourceId": "token/ERC1155/IERC1155Receiver.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "onERC1155BatchReceived", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}, {"type": "function", "name": "onERC1155Received", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "_Available since v3.1._", "kind": "dev", "methods": {"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {"details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).", "params": {"data": "Additional data with no specified format", "from": "The address which previously owned the token", "ids": "An array containing ids of each token being transferred (order and length must match values array)", "operator": "The address which initiated the batch transfer (i.e. msg.sender)", "values": "An array containing amounts of each token being transferred (order and length must match ids array)"}, "returns": {"_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"}}, "onERC1155Received(address,address,uint256,uint256,bytes)": {"details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).", "params": {"data": "Additional data with no specified format", "from": "The address which previously owned the token", "id": "The ID of the token being transferred", "operator": "The address which initiated the transfer (i.e. msg.sender)", "value": "The amount of tokens being transferred"}, "returns": {"_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"}}, "supportsInterface(bytes4)": {"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}}, "version": 1}}, "ERC1155Burnable": {"contractName": "ERC1155Burnable", "sourceId": "token/ERC1155/extensions/ERC1155Burnable.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TransferBatch", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TransferSingle", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "URI", "inputs": [{"name": "value", "type": "string", "internalType": "string", "indexed": false}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfBatch", "stateMutability": "view", "inputs": [{"name": "accounts", "type": "address[]", "internalType": "address[]"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": [{"name": "", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "burnBatch", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": []}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "safeBatchTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "uri", "stateMutability": "view", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Extension of {ERC1155} that allows token holders to destroy both their own tokens and those that they have been approved to use. _Available since v3.1._", "kind": "dev", "methods": {"balanceOf(address,uint256)": {"details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."}, "balanceOfBatch(address[],uint256[])": {"details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."}, "isApprovedForAll(address,address)": {"details": "See {IERC1155-isApprovedForAll}."}, "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {"details": "See {IERC1155-safeBatchTransferFrom}."}, "safeTransferFrom(address,address,uint256,uint256,bytes)": {"details": "See {IERC1155-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC1155-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "uri(uint256)": {"details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}}, "version": 1}}, "ERC1155Pausable": {"contractName": "ERC1155Pausable", "sourceId": "token/ERC1155/extensions/ERC1155Pausable.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Paused", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TransferBatch", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TransferSingle", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "URI", "inputs": [{"name": "value", "type": "string", "internalType": "string", "indexed": false}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Unpaused", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfBatch", "stateMutability": "view", "inputs": [{"name": "accounts", "type": "address[]", "internalType": "address[]"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": [{"name": "", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "paused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "safeBatchTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "uri", "stateMutability": "view", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "ERC1155 token with pausable token transfers, minting and burning. Useful for scenarios such as preventing trades until the end of an evaluation period, or having an emergency switch for freezing all token transfers in the event of a large bug. _Available since v3.1._", "kind": "dev", "methods": {"balanceOf(address,uint256)": {"details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."}, "balanceOfBatch(address[],uint256[])": {"details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."}, "isApprovedForAll(address,address)": {"details": "See {IERC1155-isApprovedForAll}."}, "paused()": {"details": "Returns true if the contract is paused, and false otherwise."}, "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {"details": "See {IERC1155-safeBatchTransferFrom}."}, "safeTransferFrom(address,address,uint256,uint256,bytes)": {"details": "See {IERC1155-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC1155-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "uri(uint256)": {"details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}}, "version": 1}}, "ERC1155Supply": {"contractName": "ERC1155Supply", "sourceId": "token/ERC1155/extensions/ERC1155Supply.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TransferBatch", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TransferSingle", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "URI", "inputs": [{"name": "value", "type": "string", "internalType": "string", "indexed": false}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfBatch", "stateMutability": "view", "inputs": [{"name": "accounts", "type": "address[]", "internalType": "address[]"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": [{"name": "", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "function", "name": "exists", "stateMutability": "view", "inputs": [{"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "safeBatchTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [{"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "uri", "stateMutability": "view", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Extension of ERC1155 that adds tracking of total supply per id. Useful for scenarios where Fungible and Non-fungible tokens have to be clearly identified. Note: While a totalSupply of 1 might mean the corresponding is an NFT, there is no guarantees that no other token with the same id are not going to be minted.", "kind": "dev", "methods": {"balanceOf(address,uint256)": {"details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."}, "balanceOfBatch(address[],uint256[])": {"details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."}, "exists(uint256)": {"details": "Indicates whether any token exist with a given id, or not."}, "isApprovedForAll(address,address)": {"details": "See {IERC1155-isApprovedForAll}."}, "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {"details": "See {IERC1155-safeBatchTransferFrom}."}, "safeTransferFrom(address,address,uint256,uint256,bytes)": {"details": "See {IERC1155-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC1155-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "totalSupply(uint256)": {"details": "Total amount of tokens in with a given id."}, "uri(uint256)": {"details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}}, "version": 1}}, "IERC1155MetadataURI": {"contractName": "IERC1155MetadataURI", "sourceId": "token/ERC1155/extensions/IERC1155MetadataURI.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TransferBatch", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TransferSingle", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "URI", "inputs": [{"name": "value", "type": "string", "internalType": "string", "indexed": false}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfBatch", "stateMutability": "view", "inputs": [{"name": "accounts", "type": "address[]", "internalType": "address[]"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": [{"name": "", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "safeBatchTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "uri", "stateMutability": "view", "inputs": [{"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Interface of the optional ERC1155MetadataExtension interface, as defined in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP]. _Available since v3.1._", "kind": "dev", "methods": {"balanceOf(address,uint256)": {"details": "Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."}, "balanceOfBatch(address[],uint256[])": {"details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."}, "isApprovedForAll(address,address)": {"details": "Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."}, "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {"details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."}, "safeTransferFrom(address,address,uint256,uint256,bytes)": {"details": "Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."}, "setApprovalForAll(address,bool)": {"details": "Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."}, "supportsInterface(bytes4)": {"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}, "uri(uint256)": {"details": "Returns the URI for token type `id`. If the `\\{id\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID."}}, "version": 1}}, "ERC1155PresetMinterPauser": {"contractName": "ERC1155PresetMinterPauser", "sourceId": "token/ERC1155/presets/ERC1155PresetMinterPauser.sol", "deploymentBytecode": {"bytecode": "0x60806040523480156200001157600080fd5b5060405162002d3638038062002d368339810160408190526200003491620002e7565b806200004081620000b7565b506005805460ff1916905562000058600033620000d0565b620000847f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633620000d0565b620000b07f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33620000d0565b50620003ff565b8051620000cc9060049060208401906200022b565b5050565b620000cc8282620000ed82826200011960201b62000ad51760201c565b60008281526001602090815260409091206200011491839062000b59620001b9821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000cc576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001753390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620001d0836001600160a01b038416620001d9565b90505b92915050565b60008181526001830160205260408120546200022257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620001d3565b506000620001d3565b8280546200023990620003c3565b90600052602060002090601f0160209004810192826200025d5760008555620002a8565b82601f106200027857805160ff1916838001178555620002a8565b82800160010185558215620002a8579182015b82811115620002a85782518255916020019190600101906200028b565b50620002b6929150620002ba565b5090565b5b80821115620002b65760008155600101620002bb565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215620002fb57600080fd5b82516001600160401b03808211156200031357600080fd5b818501915085601f8301126200032857600080fd5b8151818111156200033d576200033d620002d1565b604051601f8201601f19908116603f01168101908382118183101715620003685762000368620002d1565b8160405282815288868487010111156200038157600080fd5b600093505b82841015620003a5578484018601518185018701529285019262000386565b82841115620003b75760008684830101525b98975050505050505050565b600181811c90821680620003d857607f821691505b602082108103620003f957634e487b7160e01b600052602260045260246000fd5b50919050565b612927806200040f6000396000f3fe608060405234801561001057600080fd5b50600436106101725760003560e01c8063731133e9116100de578063ca15c87311610097578063e63ab1e911610071578063e63ab1e914610358578063e985e9c51461037f578063f242432a146103bb578063f5298aca146103ce57600080fd5b8063ca15c8731461030b578063d53913931461031e578063d547741f1461034557600080fd5b8063731133e9146102975780638456cb59146102aa5780639010d07c146102b257806391d14854146102dd578063a217fddf146102f0578063a22cb465146102f857600080fd5b80632f2ff15d116101305780632f2ff15d1461022b57806336568abe1461023e5780633f4ba83a146102515780634e1273f4146102595780635c975abb146102795780636b20c4541461028457600080fd5b8062fdd58e1461017757806301ffc9a71461019d5780630e89341c146101c05780631f7fdffa146101e0578063248a9ca3146101f55780632eb2c2d614610218575b600080fd5b61018a610185366004611cc0565b6103e1565b6040519081526020015b60405180910390f35b6101b06101ab366004611d03565b61047d565b6040519015158152602001610194565b6101d36101ce366004611d20565b610488565b6040516101949190611d91565b6101f36101ee366004611ef0565b61051c565b005b61018a610203366004611d20565b60009081526020819052604090206001015490565b6101f3610226366004611f89565b610574565b6101f3610239366004612033565b61060b565b6101f361024c366004612033565b610636565b6101f36106b4565b61026c61026736600461205f565b61075a565b6040516101949190612165565b60055460ff166101b0565b6101f3610292366004612178565b610884565b6101f36102a53660046121ec565b6108c7565b6101f3610919565b6102c56102c0366004612241565b6109bd565b6040516001600160a01b039091168152602001610194565b6101b06102eb366004612033565b6109dc565b61018a600081565b6101f3610306366004612263565b610a05565b61018a610319366004611d20565b610a10565b61018a7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6101f3610353366004612033565b610a27565b61018a7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6101b061038d36600461229f565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b6101f36103c93660046122c9565b610a4d565b6101f36103dc36600461232e565b610a92565b60006001600160a01b0383166104525760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060008181526002602090815260408083206001600160a01b03861684529091529020545b92915050565b600061047782610b6e565b60606004805461049790612361565b80601f01602080910402602001604051908101604052809291908181526020018280546104c390612361565b80156105105780601f106104e557610100808354040283529160200191610510565b820191906000526020600020905b8154815290600101906020018083116104f357829003601f168201915b50505050509050919050565b6105467f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6336109dc565b6105625760405162461bcd60e51b81526004016104499061239b565b61056e84848484610bae565b50505050565b6001600160a01b0385163314806105905750610590853361038d565b6105f75760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610449565b6106048585858585610d09565b5050505050565b6000828152602081905260409020600101546106278133610eb6565b6106318383610f1a565b505050565b6001600160a01b03811633146106a65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610449565b6106b08282610f3c565b5050565b6106de7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336109dc565b6107505760405162461bcd60e51b815260206004820152603b60248201527f455243313135355072657365744d696e7465725061757365723a206d7573742060448201527f686176652070617573657220726f6c6520746f20756e706175736500000000006064820152608401610449565b610758610f5e565b565b606081518351146107bf5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610449565b6000835167ffffffffffffffff8111156107db576107db611da4565b604051908082528060200260200182016040528015610804578160200160208202803683370190505b50905060005b845181101561087c5761084f858281518110610828576108286123f8565b6020026020010151858381518110610842576108426123f8565b60200260200101516103e1565b828281518110610861576108616123f8565b602090810291909101015261087581612424565b905061080a565b509392505050565b6001600160a01b0383163314806108a057506108a0833361038d565b6108bc5760405162461bcd60e51b81526004016104499061243d565b610631838383610ff1565b6108f17f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6336109dc565b61090d5760405162461bcd60e51b81526004016104499061239b565b61056e84848484611182565b6109437f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336109dc565b6109b55760405162461bcd60e51b815260206004820152603960248201527f455243313135355072657365744d696e7465725061757365723a206d7573742060448201527f686176652070617573657220726f6c6520746f207061757365000000000000006064820152608401610449565b61075861125a565b60008281526001602052604081206109d590836112d5565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6106b03383836112e1565b6000818152600160205260408120610477906113c1565b600082815260208190526040902060010154610a438133610eb6565b6106318383610f3c565b6001600160a01b038516331480610a695750610a69853361038d565b610a855760405162461bcd60e51b81526004016104499061243d565b61060485858585856113cb565b6001600160a01b038316331480610aae5750610aae833361038d565b610aca5760405162461bcd60e51b81526004016104499061243d565b6106318383836114ec565b610adf82826109dc565b6106b0576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610b153390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006109d5836001600160a01b0384166115f1565b60006001600160e01b03198216636cdb3d1360e11b1480610b9f57506001600160e01b031982166303a24d0760e21b145b80610477575061047782611640565b6001600160a01b038416610bd45760405162461bcd60e51b815260040161044990612486565b8151835114610bf55760405162461bcd60e51b8152600401610449906124c7565b33610c0581600087878787611665565b60005b8451811015610ca157838181518110610c2357610c236123f8565b602002602001015160026000878481518110610c4157610c416123f8565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254610c89919061250f565b90915550819050610c9981612424565b915050610c08565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610cf2929190612527565b60405180910390a461060481600087878787611673565b8151835114610d2a5760405162461bcd60e51b8152600401610449906124c7565b6001600160a01b038416610d505760405162461bcd60e51b815260040161044990612555565b33610d5f818787878787611665565b60005b8451811015610e48576000858281518110610d7f57610d7f6123f8565b602002602001015190506000858381518110610d9d57610d9d6123f8565b60209081029190910181015160008481526002835260408082206001600160a01b038e168352909352919091205490915081811015610dee5760405162461bcd60e51b81526004016104499061259a565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610e2d90849061250f565b9250508190555050505080610e4190612424565b9050610d62565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610e98929190612527565b60405180910390a4610eae818787878787611673565b505050505050565b610ec082826109dc565b6106b057610ed8816001600160a01b031660146117ce565b610ee38360206117ce565b604051602001610ef49291906125e4565b60408051601f198184030181529082905262461bcd60e51b825261044991600401611d91565b610f248282610ad5565b60008281526001602052604090206106319082610b59565b610f46828261196a565b600082815260016020526040902061063190826119cf565b60055460ff16610fa75760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610449565b6005805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0383166110175760405162461bcd60e51b815260040161044990612659565b80518251146110385760405162461bcd60e51b8152600401610449906124c7565b600033905061105b81856000868660405180602001604052806000815250611665565b60005b835181101561112357600084828151811061107b5761107b6123f8565b602002602001015190506000848381518110611099576110996123f8565b60209081029190910181015160008481526002835260408082206001600160a01b038c1683529093529190912054909150818110156110ea5760405162461bcd60e51b81526004016104499061269c565b60009283526002602090815260408085206001600160a01b038b168652909152909220910390558061111b81612424565b91505061105e565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611174929190612527565b60405180910390a450505050565b6001600160a01b0384166111a85760405162461bcd60e51b815260040161044990612486565b336111c8816000876111b9886119e4565b6111c2886119e4565b87611665565b60008481526002602090815260408083206001600160a01b0389168452909152812080548592906111fa90849061250f565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461060481600087878787611a2f565b60055460ff16156112a05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610449565b6005805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610fd43390565b60006109d58383611aea565b816001600160a01b0316836001600160a01b0316036113545760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610449565b6001600160a01b03838116600081815260036020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000610477825490565b6001600160a01b0384166113f15760405162461bcd60e51b815260040161044990612555565b336114018187876111b9886119e4565b60008481526002602090815260408083206001600160a01b038a168452909152902054838110156114445760405162461bcd60e51b81526004016104499061259a565b60008581526002602090815260408083206001600160a01b038b811685529252808320878503905590881682528120805486929061148390849061250f565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46114e3828888888888611a2f565b50505050505050565b6001600160a01b0383166115125760405162461bcd60e51b815260040161044990612659565b3361154181856000611523876119e4565b61152c876119e4565b60405180602001604052806000815250611665565b60008381526002602090815260408083206001600160a01b0388168452909152902054828110156115845760405162461bcd60e51b81526004016104499061269c565b60008481526002602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b600081815260018301602052604081205461163857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610477565b506000610477565b60006001600160e01b03198216635a05180f60e01b1480610477575061047782611b14565b610eae868686868686611b49565b6001600160a01b0384163b15610eae5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906116b790899089908890889088906004016126e0565b6020604051808303816000875af19250505080156116f2575060408051601f3d908101601f191682019092526116ef9181019061273e565b60015b61179e576116fe61275b565b806308c379a0036117375750611712612777565b8061171d5750611739565b8060405162461bcd60e51b81526004016104499190611d91565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610449565b6001600160e01b0319811663bc197c8160e01b146114e35760405162461bcd60e51b815260040161044990612801565b606060006117dd836002612849565b6117e890600261250f565b67ffffffffffffffff81111561180057611800611da4565b6040519080825280601f01601f19166020018201604052801561182a576020820181803683370190505b509050600360fc1b81600081518110611845576118456123f8565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611874576118746123f8565b60200101906001600160f81b031916908160001a9053506000611898846002612849565b6118a390600161250f565b90505b600181111561191b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106118d7576118d76123f8565b1a60f81b8282815181106118ed576118ed6123f8565b60200101906001600160f81b031916908160001a90535060049490941c9361191481612868565b90506118a6565b5083156109d55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610449565b61197482826109dc565b156106b0576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006109d5836001600160a01b038416611bb1565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611a1e57611a1e6123f8565b602090810291909101015292915050565b6001600160a01b0384163b15610eae5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611a73908990899088908890889060040161287f565b6020604051808303816000875af1925050508015611aae575060408051601f3d908101601f19168201909252611aab9181019061273e565b60015b611aba576116fe61275b565b6001600160e01b0319811663f23a6e6160e01b146114e35760405162461bcd60e51b815260040161044990612801565b6000826000018281548110611b0157611b016123f8565b9060005260206000200154905092915050565b60006001600160e01b03198216637965db0b60e01b148061047757506301ffc9a760e01b6001600160e01b0319831614610477565b60055460ff1615610eae5760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201526b1dda1a5b19481c185d5cd95960a21b6064820152608401610449565b60008181526001830160205260408120548015611c9a576000611bd56001836128c4565b8554909150600090611be9906001906128c4565b9050818114611c4e576000866000018281548110611c0957611c096123f8565b9060005260206000200154905080876000018481548110611c2c57611c2c6123f8565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611c5f57611c5f6128db565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610477565b6000915050610477565b80356001600160a01b0381168114611cbb57600080fd5b919050565b60008060408385031215611cd357600080fd5b611cdc83611ca4565b946020939093013593505050565b6001600160e01b031981168114611d0057600080fd5b50565b600060208284031215611d1557600080fd5b81356109d581611cea565b600060208284031215611d3257600080fd5b5035919050565b60005b83811015611d54578181015183820152602001611d3c565b8381111561056e5750506000910152565b60008151808452611d7d816020860160208601611d39565b601f01601f19169290920160200192915050565b6020815260006109d56020830184611d65565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715611de057611de0611da4565b6040525050565b600067ffffffffffffffff821115611e0157611e01611da4565b5060051b60200190565b600082601f830112611e1c57600080fd5b81356020611e2982611de7565b604051611e368282611dba565b83815260059390931b8501820192828101915086841115611e5657600080fd5b8286015b84811015611e715780358352918301918301611e5a565b509695505050505050565b600082601f830112611e8d57600080fd5b813567ffffffffffffffff811115611ea757611ea7611da4565b604051611ebe601f8301601f191660200182611dba565b818152846020838601011115611ed357600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215611f0657600080fd5b611f0f85611ca4565b9350602085013567ffffffffffffffff80821115611f2c57600080fd5b611f3888838901611e0b565b94506040870135915080821115611f4e57600080fd5b611f5a88838901611e0b565b93506060870135915080821115611f7057600080fd5b50611f7d87828801611e7c565b91505092959194509250565b600080600080600060a08688031215611fa157600080fd5b611faa86611ca4565b9450611fb860208701611ca4565b9350604086013567ffffffffffffffff80821115611fd557600080fd5b611fe189838a01611e0b565b94506060880135915080821115611ff757600080fd5b61200389838a01611e0b565b9350608088013591508082111561201957600080fd5b5061202688828901611e7c565b9150509295509295909350565b6000806040838503121561204657600080fd5b8235915061205660208401611ca4565b90509250929050565b6000806040838503121561207257600080fd5b823567ffffffffffffffff8082111561208a57600080fd5b818501915085601f83011261209e57600080fd5b813560206120ab82611de7565b6040516120b88282611dba565b83815260059390931b85018201928281019150898411156120d857600080fd5b948201945b838610156120fd576120ee86611ca4565b825294820194908201906120dd565b9650508601359250508082111561211357600080fd5b5061212085828601611e0b565b9150509250929050565b600081518084526020808501945080840160005b8381101561215a5781518752958201959082019060010161213e565b509495945050505050565b6020815260006109d5602083018461212a565b60008060006060848603121561218d57600080fd5b61219684611ca4565b9250602084013567ffffffffffffffff808211156121b357600080fd5b6121bf87838801611e0b565b935060408601359150808211156121d557600080fd5b506121e286828701611e0b565b9150509250925092565b6000806000806080858703121561220257600080fd5b61220b85611ca4565b93506020850135925060408501359150606085013567ffffffffffffffff81111561223557600080fd5b611f7d87828801611e7c565b6000806040838503121561225457600080fd5b50508035926020909101359150565b6000806040838503121561227657600080fd5b61227f83611ca4565b91506020830135801515811461229457600080fd5b809150509250929050565b600080604083850312156122b257600080fd5b6122bb83611ca4565b915061205660208401611ca4565b600080600080600060a086880312156122e157600080fd5b6122ea86611ca4565b94506122f860208701611ca4565b93506040860135925060608601359150608086013567ffffffffffffffff81111561232257600080fd5b61202688828901611e7c565b60008060006060848603121561234357600080fd5b61234c84611ca4565b95602085013595506040909401359392505050565b600181811c9082168061237557607f821691505b60208210810361239557634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526038908201527f455243313135355072657365744d696e7465725061757365723a206d7573742060408201527f68617665206d696e74657220726f6c6520746f206d696e740000000000000000606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016124365761243661240e565b5060010190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b600082198211156125225761252261240e565b500190565b60408152600061253a604083018561212a565b828103602084015261254c818561212a565b95945050505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161261c816017850160208801611d39565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161264d816028840160208801611d39565b01602801949350505050565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b0386811682528516602082015260a06040820181905260009061270c9083018661212a565b828103606084015261271e818661212a565b905082810360808401526127328185611d65565b98975050505050505050565b60006020828403121561275057600080fd5b81516109d581611cea565b600060033d11156127745760046000803e5060005160e01c5b90565b600060443d10156127855790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156127b557505050505090565b82850191508151818111156127cd5750505050505090565b843d87010160208285010111156127e75750505050505090565b6127f660208286010187611dba565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60008160001904831182151516156128635761286361240e565b500290565b6000816128775761287761240e565b506000190190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906128b990830184611d65565b979650505050505050565b6000828210156128d6576128d661240e565b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212203696b0c24bb99173bbafbd9c1bfe0c8132b72eb4adada644d88c48597ebf12a464736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106101725760003560e01c8063731133e9116100de578063ca15c87311610097578063e63ab1e911610071578063e63ab1e914610358578063e985e9c51461037f578063f242432a146103bb578063f5298aca146103ce57600080fd5b8063ca15c8731461030b578063d53913931461031e578063d547741f1461034557600080fd5b8063731133e9146102975780638456cb59146102aa5780639010d07c146102b257806391d14854146102dd578063a217fddf146102f0578063a22cb465146102f857600080fd5b80632f2ff15d116101305780632f2ff15d1461022b57806336568abe1461023e5780633f4ba83a146102515780634e1273f4146102595780635c975abb146102795780636b20c4541461028457600080fd5b8062fdd58e1461017757806301ffc9a71461019d5780630e89341c146101c05780631f7fdffa146101e0578063248a9ca3146101f55780632eb2c2d614610218575b600080fd5b61018a610185366004611cc0565b6103e1565b6040519081526020015b60405180910390f35b6101b06101ab366004611d03565b61047d565b6040519015158152602001610194565b6101d36101ce366004611d20565b610488565b6040516101949190611d91565b6101f36101ee366004611ef0565b61051c565b005b61018a610203366004611d20565b60009081526020819052604090206001015490565b6101f3610226366004611f89565b610574565b6101f3610239366004612033565b61060b565b6101f361024c366004612033565b610636565b6101f36106b4565b61026c61026736600461205f565b61075a565b6040516101949190612165565b60055460ff166101b0565b6101f3610292366004612178565b610884565b6101f36102a53660046121ec565b6108c7565b6101f3610919565b6102c56102c0366004612241565b6109bd565b6040516001600160a01b039091168152602001610194565b6101b06102eb366004612033565b6109dc565b61018a600081565b6101f3610306366004612263565b610a05565b61018a610319366004611d20565b610a10565b61018a7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6101f3610353366004612033565b610a27565b61018a7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6101b061038d36600461229f565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b6101f36103c93660046122c9565b610a4d565b6101f36103dc36600461232e565b610a92565b60006001600160a01b0383166104525760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060008181526002602090815260408083206001600160a01b03861684529091529020545b92915050565b600061047782610b6e565b60606004805461049790612361565b80601f01602080910402602001604051908101604052809291908181526020018280546104c390612361565b80156105105780601f106104e557610100808354040283529160200191610510565b820191906000526020600020905b8154815290600101906020018083116104f357829003601f168201915b50505050509050919050565b6105467f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6336109dc565b6105625760405162461bcd60e51b81526004016104499061239b565b61056e84848484610bae565b50505050565b6001600160a01b0385163314806105905750610590853361038d565b6105f75760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610449565b6106048585858585610d09565b5050505050565b6000828152602081905260409020600101546106278133610eb6565b6106318383610f1a565b505050565b6001600160a01b03811633146106a65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610449565b6106b08282610f3c565b5050565b6106de7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336109dc565b6107505760405162461bcd60e51b815260206004820152603b60248201527f455243313135355072657365744d696e7465725061757365723a206d7573742060448201527f686176652070617573657220726f6c6520746f20756e706175736500000000006064820152608401610449565b610758610f5e565b565b606081518351146107bf5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610449565b6000835167ffffffffffffffff8111156107db576107db611da4565b604051908082528060200260200182016040528015610804578160200160208202803683370190505b50905060005b845181101561087c5761084f858281518110610828576108286123f8565b6020026020010151858381518110610842576108426123f8565b60200260200101516103e1565b828281518110610861576108616123f8565b602090810291909101015261087581612424565b905061080a565b509392505050565b6001600160a01b0383163314806108a057506108a0833361038d565b6108bc5760405162461bcd60e51b81526004016104499061243d565b610631838383610ff1565b6108f17f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6336109dc565b61090d5760405162461bcd60e51b81526004016104499061239b565b61056e84848484611182565b6109437f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336109dc565b6109b55760405162461bcd60e51b815260206004820152603960248201527f455243313135355072657365744d696e7465725061757365723a206d7573742060448201527f686176652070617573657220726f6c6520746f207061757365000000000000006064820152608401610449565b61075861125a565b60008281526001602052604081206109d590836112d5565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6106b03383836112e1565b6000818152600160205260408120610477906113c1565b600082815260208190526040902060010154610a438133610eb6565b6106318383610f3c565b6001600160a01b038516331480610a695750610a69853361038d565b610a855760405162461bcd60e51b81526004016104499061243d565b61060485858585856113cb565b6001600160a01b038316331480610aae5750610aae833361038d565b610aca5760405162461bcd60e51b81526004016104499061243d565b6106318383836114ec565b610adf82826109dc565b6106b0576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610b153390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006109d5836001600160a01b0384166115f1565b60006001600160e01b03198216636cdb3d1360e11b1480610b9f57506001600160e01b031982166303a24d0760e21b145b80610477575061047782611640565b6001600160a01b038416610bd45760405162461bcd60e51b815260040161044990612486565b8151835114610bf55760405162461bcd60e51b8152600401610449906124c7565b33610c0581600087878787611665565b60005b8451811015610ca157838181518110610c2357610c236123f8565b602002602001015160026000878481518110610c4157610c416123f8565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254610c89919061250f565b90915550819050610c9981612424565b915050610c08565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610cf2929190612527565b60405180910390a461060481600087878787611673565b8151835114610d2a5760405162461bcd60e51b8152600401610449906124c7565b6001600160a01b038416610d505760405162461bcd60e51b815260040161044990612555565b33610d5f818787878787611665565b60005b8451811015610e48576000858281518110610d7f57610d7f6123f8565b602002602001015190506000858381518110610d9d57610d9d6123f8565b60209081029190910181015160008481526002835260408082206001600160a01b038e168352909352919091205490915081811015610dee5760405162461bcd60e51b81526004016104499061259a565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610e2d90849061250f565b9250508190555050505080610e4190612424565b9050610d62565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610e98929190612527565b60405180910390a4610eae818787878787611673565b505050505050565b610ec082826109dc565b6106b057610ed8816001600160a01b031660146117ce565b610ee38360206117ce565b604051602001610ef49291906125e4565b60408051601f198184030181529082905262461bcd60e51b825261044991600401611d91565b610f248282610ad5565b60008281526001602052604090206106319082610b59565b610f46828261196a565b600082815260016020526040902061063190826119cf565b60055460ff16610fa75760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610449565b6005805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0383166110175760405162461bcd60e51b815260040161044990612659565b80518251146110385760405162461bcd60e51b8152600401610449906124c7565b600033905061105b81856000868660405180602001604052806000815250611665565b60005b835181101561112357600084828151811061107b5761107b6123f8565b602002602001015190506000848381518110611099576110996123f8565b60209081029190910181015160008481526002835260408082206001600160a01b038c1683529093529190912054909150818110156110ea5760405162461bcd60e51b81526004016104499061269c565b60009283526002602090815260408085206001600160a01b038b168652909152909220910390558061111b81612424565b91505061105e565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611174929190612527565b60405180910390a450505050565b6001600160a01b0384166111a85760405162461bcd60e51b815260040161044990612486565b336111c8816000876111b9886119e4565b6111c2886119e4565b87611665565b60008481526002602090815260408083206001600160a01b0389168452909152812080548592906111fa90849061250f565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461060481600087878787611a2f565b60055460ff16156112a05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610449565b6005805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610fd43390565b60006109d58383611aea565b816001600160a01b0316836001600160a01b0316036113545760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610449565b6001600160a01b03838116600081815260036020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000610477825490565b6001600160a01b0384166113f15760405162461bcd60e51b815260040161044990612555565b336114018187876111b9886119e4565b60008481526002602090815260408083206001600160a01b038a168452909152902054838110156114445760405162461bcd60e51b81526004016104499061259a565b60008581526002602090815260408083206001600160a01b038b811685529252808320878503905590881682528120805486929061148390849061250f565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46114e3828888888888611a2f565b50505050505050565b6001600160a01b0383166115125760405162461bcd60e51b815260040161044990612659565b3361154181856000611523876119e4565b61152c876119e4565b60405180602001604052806000815250611665565b60008381526002602090815260408083206001600160a01b0388168452909152902054828110156115845760405162461bcd60e51b81526004016104499061269c565b60008481526002602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b600081815260018301602052604081205461163857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610477565b506000610477565b60006001600160e01b03198216635a05180f60e01b1480610477575061047782611b14565b610eae868686868686611b49565b6001600160a01b0384163b15610eae5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906116b790899089908890889088906004016126e0565b6020604051808303816000875af19250505080156116f2575060408051601f3d908101601f191682019092526116ef9181019061273e565b60015b61179e576116fe61275b565b806308c379a0036117375750611712612777565b8061171d5750611739565b8060405162461bcd60e51b81526004016104499190611d91565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610449565b6001600160e01b0319811663bc197c8160e01b146114e35760405162461bcd60e51b815260040161044990612801565b606060006117dd836002612849565b6117e890600261250f565b67ffffffffffffffff81111561180057611800611da4565b6040519080825280601f01601f19166020018201604052801561182a576020820181803683370190505b509050600360fc1b81600081518110611845576118456123f8565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611874576118746123f8565b60200101906001600160f81b031916908160001a9053506000611898846002612849565b6118a390600161250f565b90505b600181111561191b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106118d7576118d76123f8565b1a60f81b8282815181106118ed576118ed6123f8565b60200101906001600160f81b031916908160001a90535060049490941c9361191481612868565b90506118a6565b5083156109d55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610449565b61197482826109dc565b156106b0576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006109d5836001600160a01b038416611bb1565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611a1e57611a1e6123f8565b602090810291909101015292915050565b6001600160a01b0384163b15610eae5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611a73908990899088908890889060040161287f565b6020604051808303816000875af1925050508015611aae575060408051601f3d908101601f19168201909252611aab9181019061273e565b60015b611aba576116fe61275b565b6001600160e01b0319811663f23a6e6160e01b146114e35760405162461bcd60e51b815260040161044990612801565b6000826000018281548110611b0157611b016123f8565b9060005260206000200154905092915050565b60006001600160e01b03198216637965db0b60e01b148061047757506301ffc9a760e01b6001600160e01b0319831614610477565b60055460ff1615610eae5760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201526b1dda1a5b19481c185d5cd95960a21b6064820152608401610449565b60008181526001830160205260408120548015611c9a576000611bd56001836128c4565b8554909150600090611be9906001906128c4565b9050818114611c4e576000866000018281548110611c0957611c096123f8565b9060005260206000200154905080876000018481548110611c2c57611c2c6123f8565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611c5f57611c5f6128db565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610477565b6000915050610477565b80356001600160a01b0381168114611cbb57600080fd5b919050565b60008060408385031215611cd357600080fd5b611cdc83611ca4565b946020939093013593505050565b6001600160e01b031981168114611d0057600080fd5b50565b600060208284031215611d1557600080fd5b81356109d581611cea565b600060208284031215611d3257600080fd5b5035919050565b60005b83811015611d54578181015183820152602001611d3c565b8381111561056e5750506000910152565b60008151808452611d7d816020860160208601611d39565b601f01601f19169290920160200192915050565b6020815260006109d56020830184611d65565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715611de057611de0611da4565b6040525050565b600067ffffffffffffffff821115611e0157611e01611da4565b5060051b60200190565b600082601f830112611e1c57600080fd5b81356020611e2982611de7565b604051611e368282611dba565b83815260059390931b8501820192828101915086841115611e5657600080fd5b8286015b84811015611e715780358352918301918301611e5a565b509695505050505050565b600082601f830112611e8d57600080fd5b813567ffffffffffffffff811115611ea757611ea7611da4565b604051611ebe601f8301601f191660200182611dba565b818152846020838601011115611ed357600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215611f0657600080fd5b611f0f85611ca4565b9350602085013567ffffffffffffffff80821115611f2c57600080fd5b611f3888838901611e0b565b94506040870135915080821115611f4e57600080fd5b611f5a88838901611e0b565b93506060870135915080821115611f7057600080fd5b50611f7d87828801611e7c565b91505092959194509250565b600080600080600060a08688031215611fa157600080fd5b611faa86611ca4565b9450611fb860208701611ca4565b9350604086013567ffffffffffffffff80821115611fd557600080fd5b611fe189838a01611e0b565b94506060880135915080821115611ff757600080fd5b61200389838a01611e0b565b9350608088013591508082111561201957600080fd5b5061202688828901611e7c565b9150509295509295909350565b6000806040838503121561204657600080fd5b8235915061205660208401611ca4565b90509250929050565b6000806040838503121561207257600080fd5b823567ffffffffffffffff8082111561208a57600080fd5b818501915085601f83011261209e57600080fd5b813560206120ab82611de7565b6040516120b88282611dba565b83815260059390931b85018201928281019150898411156120d857600080fd5b948201945b838610156120fd576120ee86611ca4565b825294820194908201906120dd565b9650508601359250508082111561211357600080fd5b5061212085828601611e0b565b9150509250929050565b600081518084526020808501945080840160005b8381101561215a5781518752958201959082019060010161213e565b509495945050505050565b6020815260006109d5602083018461212a565b60008060006060848603121561218d57600080fd5b61219684611ca4565b9250602084013567ffffffffffffffff808211156121b357600080fd5b6121bf87838801611e0b565b935060408601359150808211156121d557600080fd5b506121e286828701611e0b565b9150509250925092565b6000806000806080858703121561220257600080fd5b61220b85611ca4565b93506020850135925060408501359150606085013567ffffffffffffffff81111561223557600080fd5b611f7d87828801611e7c565b6000806040838503121561225457600080fd5b50508035926020909101359150565b6000806040838503121561227657600080fd5b61227f83611ca4565b91506020830135801515811461229457600080fd5b809150509250929050565b600080604083850312156122b257600080fd5b6122bb83611ca4565b915061205660208401611ca4565b600080600080600060a086880312156122e157600080fd5b6122ea86611ca4565b94506122f860208701611ca4565b93506040860135925060608601359150608086013567ffffffffffffffff81111561232257600080fd5b61202688828901611e7c565b60008060006060848603121561234357600080fd5b61234c84611ca4565b95602085013595506040909401359392505050565b600181811c9082168061237557607f821691505b60208210810361239557634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526038908201527f455243313135355072657365744d696e7465725061757365723a206d7573742060408201527f68617665206d696e74657220726f6c6520746f206d696e740000000000000000606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016124365761243661240e565b5060010190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b600082198211156125225761252261240e565b500190565b60408152600061253a604083018561212a565b828103602084015261254c818561212a565b95945050505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161261c816017850160208801611d39565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161264d816028840160208801611d39565b01602801949350505050565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b0386811682528516602082015260a06040820181905260009061270c9083018661212a565b828103606084015261271e818661212a565b905082810360808401526127328185611d65565b98975050505050505050565b60006020828403121561275057600080fd5b81516109d581611cea565b600060033d11156127745760046000803e5060005160e01c5b90565b600060443d10156127855790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156127b557505050505090565b82850191508151818111156127cd5750505050505090565b843d87010160208285010111156127e75750505050505090565b6127f660208286010187611dba565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60008160001904831182151516156128635761286361240e565b500290565b6000816128775761287761240e565b506000190190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906128b990830184611d65565b979650505050505050565b6000828210156128d6576128d661240e565b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212203696b0c24bb99173bbafbd9c1bfe0c8132b72eb4adada644d88c48597ebf12a464736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "uri", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Paused", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "RoleAdminChanged", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "previousAdminRole", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "newAdminRole", "type": "bytes32", "internalType": "bytes32", "indexed": true}], "anonymous": false}, {"type": "event", "name": "RoleGranted", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "sender", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "RoleRevoked", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "sender", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "TransferBatch", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]", "indexed": false}], "anonymous": false}, {"type": "event", "name": "TransferSingle", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "URI", "inputs": [{"name": "value", "type": "string", "internalType": "string", "indexed": false}, {"name": "id", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Unpaused", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "function", "name": "DEFAULT_ADMIN_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "MINTER_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "PAUSER_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfBatch", "stateMutability": "view", "inputs": [{"name": "accounts", "type": "address[]", "internalType": "address[]"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": [{"name": "", "type": "uint256[]", "internalType": "uint256[]"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "burnBatch", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}], "outputs": []}, {"type": "function", "name": "getRoleAdmin", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "getRoleMember", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getRoleMemberCount", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "grantRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "hasRole", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "mintBatch", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "pause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "paused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "renounceRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "revokeRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "safeBatchTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "amounts", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "unpause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "uri", "stateMutability": "view", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "{ERC1155} token, including:  - ability for holders to burn (destroy) their tokens  - a minter role that allows for token minting (creation)  - a pauser role that allows to stop all token transfers This contract uses {AccessControl} to lock permissioned functions using the different roles - head to its documentation for details. The account that deploys the contract will be granted the minter and pauser roles, as well as the default admin role, which will let it grant both minter and pauser roles to other accounts.", "kind": "dev", "methods": {"balanceOf(address,uint256)": {"details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."}, "balanceOfBatch(address[],uint256[])": {"details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."}, "constructor": {"details": "Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE`, and `PAUSER_ROLE` to the account that deploys the contract."}, "getRoleAdmin(bytes32)": {"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."}, "getRoleMember(bytes32,uint256)": {"details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."}, "getRoleMemberCount(bytes32)": {"details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."}, "grantRole(bytes32,address)": {"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."}, "hasRole(bytes32,address)": {"details": "Returns `true` if `account` has been granted `role`."}, "isApprovedForAll(address,address)": {"details": "See {IERC1155-isApprovedForAll}."}, "mint(address,uint256,uint256,bytes)": {"details": "Creates `amount` new tokens for `to`, of token type `id`. See {ERC1155-_mint}. Requirements: - the caller must have the `MINTER_ROLE`."}, "mintBatch(address,uint256[],uint256[],bytes)": {"details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}."}, "pause()": {"details": "Pauses all token transfers. See {ERC1155Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`."}, "paused()": {"details": "Returns true if the contract is paused, and false otherwise."}, "renounceRole(bytes32,address)": {"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."}, "revokeRole(bytes32,address)": {"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}, "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {"details": "See {IERC1155-safeBatchTransferFrom}."}, "safeTransferFrom(address,address,uint256,uint256,bytes)": {"details": "See {IERC1155-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC1155-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "unpause()": {"details": "Unpauses all token transfers. See {ERC1155Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`."}, "uri(uint256)": {"details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}}, "version": 1}}, "ERC1155Holder": {"contractName": "ERC1155Holder", "sourceId": "token/ERC1155/utils/ERC1155Holder.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506103c5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806301ffc9a714610046578063bc197c811461006e578063f23a6e61146100a6575b600080fd5b6100596100543660046100fc565b6100c5565b60405190151581526020015b60405180910390f35b61008d61007c366004610280565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610065565b61008d6100b436600461032a565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b14806100f657506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006020828403121561010e57600080fd5b81356001600160e01b03198116811461012657600080fd5b9392505050565b80356001600160a01b038116811461014457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561018857610188610149565b604052919050565b600082601f8301126101a157600080fd5b8135602067ffffffffffffffff8211156101bd576101bd610149565b8160051b6101cc82820161015f565b92835284810182019282810190878511156101e657600080fd5b83870192505b84831015610205578235825291830191908301906101ec565b979650505050505050565b600082601f83011261022157600080fd5b813567ffffffffffffffff81111561023b5761023b610149565b61024e601f8201601f191660200161015f565b81815284602083860101111561026357600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561029857600080fd5b6102a18661012d565b94506102af6020870161012d565b9350604086013567ffffffffffffffff808211156102cc57600080fd5b6102d889838a01610190565b945060608801359150808211156102ee57600080fd5b6102fa89838a01610190565b9350608088013591508082111561031057600080fd5b5061031d88828901610210565b9150509295509295909350565b600080600080600060a0868803121561034257600080fd5b61034b8661012d565b94506103596020870161012d565b93506040860135925060608601359150608086013567ffffffffffffffff81111561038357600080fd5b61031d8882890161021056fea26469706673582212207e2cdd35afe8ebcaad345b42ee9e78453af03663a6fd37a63d1cf736189ef00964736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806301ffc9a714610046578063bc197c811461006e578063f23a6e61146100a6575b600080fd5b6100596100543660046100fc565b6100c5565b60405190151581526020015b60405180910390f35b61008d61007c366004610280565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610065565b61008d6100b436600461032a565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b14806100f657506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006020828403121561010e57600080fd5b81356001600160e01b03198116811461012657600080fd5b9392505050565b80356001600160a01b038116811461014457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561018857610188610149565b604052919050565b600082601f8301126101a157600080fd5b8135602067ffffffffffffffff8211156101bd576101bd610149565b8160051b6101cc82820161015f565b92835284810182019282810190878511156101e657600080fd5b83870192505b84831015610205578235825291830191908301906101ec565b979650505050505050565b600082601f83011261022157600080fd5b813567ffffffffffffffff81111561023b5761023b610149565b61024e601f8201601f191660200161015f565b81815284602083860101111561026357600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561029857600080fd5b6102a18661012d565b94506102af6020870161012d565b9350604086013567ffffffffffffffff808211156102cc57600080fd5b6102d889838a01610190565b945060608801359150808211156102ee57600080fd5b6102fa89838a01610190565b9350608088013591508082111561031057600080fd5b5061031d88828901610210565b9150509295509295909350565b600080600080600060a0868803121561034257600080fd5b61034b8661012d565b94506103596020870161012d565b93506040860135925060608601359150608086013567ffffffffffffffff81111561038357600080fd5b61031d8882890161021056fea26469706673582212207e2cdd35afe8ebcaad345b42ee9e78453af03663a6fd37a63d1cf736189ef00964736f6c634300080d0033"}, "abi": [{"type": "function", "name": "onERC1155BatchReceived", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}, {"type": "function", "name": "onERC1155Received", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "_Available since v3.1._", "kind": "dev", "methods": {"supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}}, "version": 1}}, "ERC1155Receiver": {"contractName": "ERC1155Receiver", "sourceId": "token/ERC1155/utils/ERC1155Receiver.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "onERC1155BatchReceived", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "values", "type": "uint256[]", "internalType": "uint256[]"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}, {"type": "function", "name": "onERC1155Received", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "id", "type": "uint256", "internalType": "uint256"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "_Available since v3.1._", "kind": "dev", "methods": {"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {"details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).", "params": {"data": "Additional data with no specified format", "from": "The address which previously owned the token", "ids": "An array containing ids of each token being transferred (order and length must match values array)", "operator": "The address which initiated the batch transfer (i.e. msg.sender)", "values": "An array containing amounts of each token being transferred (order and length must match ids array)"}, "returns": {"_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"}}, "onERC1155Received(address,address,uint256,uint256,bytes)": {"details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).", "params": {"data": "Additional data with no specified format", "from": "The address which previously owned the token", "id": "The ID of the token being transferred", "operator": "The address which initiated the transfer (i.e. msg.sender)", "value": "The amount of tokens being transferred"}, "returns": {"_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"}}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}}, "version": 1}}, "ERC20": {"contractName": "ERC20", "sourceId": "token/ERC20/ERC20.sol", "deploymentBytecode": {"bytecode": "0x60806040523480156200001157600080fd5b5060405162000b5438038062000b548339810160408190526200003491620001db565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b50505062000281565b828054620000769062000245565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013657600080fd5b81516001600160401b03808211156200015357620001536200010e565b604051601f8301601f19908116603f011681019082821181831017156200017e576200017e6200010e565b816040528381526020925086838588010111156200019b57600080fd5b600091505b83821015620001bf5785820183015181830184015290820190620001a0565b83821115620001d15760008385830101525b9695505050505050565b60008060408385031215620001ef57600080fd5b82516001600160401b03808211156200020757600080fd5b620002158683870162000124565b935060208501519150808211156200022c57600080fd5b506200023b8582860162000124565b9150509250929050565b600181811c908216806200025a57607f821691505b6020821081036200027b57634e487b7160e01b600052602260045260246000fd5b50919050565b6108c380620002916000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101c6565b6040516100c39190610701565b60405180910390f35b6100df6100da366004610772565b610258565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f36600461079c565b61026e565b604051601281526020016100c3565b6100df610131366004610772565b61031d565b6100f36101443660046107d8565b6001600160a01b031660009081526020819052604090205490565b6100b6610359565b6100df610175366004610772565b610368565b6100df610188366004610772565b610401565b6100f361019b3660046107fa565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101d59061082d565b80601f01602080910402602001604051908101604052809291908181526020018280546102019061082d565b801561024e5780601f106102235761010080835404028352916020019161024e565b820191906000526020600020905b81548152906001019060200180831161023157829003601f168201915b5050505050905090565b600061026533848461040e565b50600192915050565b600061027b848484610532565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103055760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610312853385840361040e565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610265918590610354908690610867565b61040e565b6060600480546101d59061082d565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156103ea5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016102fc565b6103f7338585840361040e565b5060019392505050565b6000610265338484610532565b6001600160a01b0383166104705760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016102fc565b6001600160a01b0382166104d15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016102fc565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166105965760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016102fc565b6001600160a01b0382166105f85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016102fc565b6001600160a01b038316600090815260208190526040902054818110156106705760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016102fc565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106a7908490610867565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106f391815260200190565b60405180910390a350505050565b600060208083528351808285015260005b8181101561072e57858101830151858201604001528201610712565b81811115610740576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461076d57600080fd5b919050565b6000806040838503121561078557600080fd5b61078e83610756565b946020939093013593505050565b6000806000606084860312156107b157600080fd5b6107ba84610756565b92506107c860208501610756565b9150604084013590509250925092565b6000602082840312156107ea57600080fd5b6107f382610756565b9392505050565b6000806040838503121561080d57600080fd5b61081683610756565b915061082460208401610756565b90509250929050565b600181811c9082168061084157607f821691505b60208210810361086157634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561088857634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212209a9a301a380cdfb0390e49d7fd06c43a95227c8481cc05fc801e8e2a813b6fef64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101c6565b6040516100c39190610701565b60405180910390f35b6100df6100da366004610772565b610258565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f36600461079c565b61026e565b604051601281526020016100c3565b6100df610131366004610772565b61031d565b6100f36101443660046107d8565b6001600160a01b031660009081526020819052604090205490565b6100b6610359565b6100df610175366004610772565b610368565b6100df610188366004610772565b610401565b6100f361019b3660046107fa565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101d59061082d565b80601f01602080910402602001604051908101604052809291908181526020018280546102019061082d565b801561024e5780601f106102235761010080835404028352916020019161024e565b820191906000526020600020905b81548152906001019060200180831161023157829003601f168201915b5050505050905090565b600061026533848461040e565b50600192915050565b600061027b848484610532565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103055760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610312853385840361040e565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610265918590610354908690610867565b61040e565b6060600480546101d59061082d565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156103ea5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016102fc565b6103f7338585840361040e565b5060019392505050565b6000610265338484610532565b6001600160a01b0383166104705760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016102fc565b6001600160a01b0382166104d15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016102fc565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166105965760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016102fc565b6001600160a01b0382166105f85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016102fc565b6001600160a01b038316600090815260208190526040902054818110156106705760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016102fc565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106a7908490610867565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106f391815260200190565b60405180910390a350505050565b600060208083528351808285015260005b8181101561072e57858101830151858201604001528201610712565b81811115610740576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461076d57600080fd5b919050565b6000806040838503121561078557600080fd5b61078e83610756565b946020939093013593505050565b6000806000606084860312156107b157600080fd5b6107ba84610756565b92506107c860208501610756565b9150604084013590509250925092565b6000602082840312156107ea57600080fd5b6107f382610756565b9392505050565b6000806040838503121561080d57600080fd5b61081683610756565b915061082460208401610756565b90509250929050565b600181811c9082168061084157607f821691505b60208210810361086157634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561088857634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212209a9a301a380cdfb0390e49d7fd06c43a95227c8481cc05fc801e8e2a813b6fef64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name_", "type": "string", "internalType": "string"}, {"name": "symbol_", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.", "kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "constructor": {"details": "Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "IERC20": {"contractName": "IERC20", "sourceId": "token/ERC20/IERC20.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Interface of the ERC20 standard as defined in the EIP.", "events": {"Approval(address,address,uint256)": {"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."}, "Transfer(address,address,uint256)": {"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}}, "kind": "dev", "methods": {"allowance(address,address)": {"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."}, "approve(address,uint256)": {"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."}, "balanceOf(address)": {"details": "Returns the amount of tokens owned by `account`."}, "totalSupply()": {"details": "Returns the amount of tokens in existence."}, "transfer(address,uint256)": {"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}, "transferFrom(address,address,uint256)": {"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}}, "version": 1}}, "ERC20Burnable": {"contractName": "ERC20Burnable", "sourceId": "token/ERC20/extensions/ERC20Burnable.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "burnFrom", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).", "kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "burn(uint256)": {"details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."}, "burnFrom(address,uint256)": {"details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20Capped": {"contractName": "ERC20Capped", "sourceId": "token/ERC20/extensions/ERC20Capped.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "cap", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Extension of {ERC20} that adds a cap to the supply of tokens.", "kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "cap()": {"details": "Returns the cap on the token's total supply."}, "constructor": {"details": "Sets the value of the `cap`. This value is immutable, it can only be set once during construction."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20FlashMint": {"contractName": "ERC20FlashMint", "sourceId": "token/ERC20/extensions/ERC20FlashMint.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "flashFee", "stateMutability": "view", "inputs": [{"name": "token", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "flashLoan", "stateMutability": "nonpayable", "inputs": [{"name": "receiver", "type": "address", "internalType": "contract IERC3156FlashBorrower"}, {"name": "token", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "maxFlashLoan", "stateMutability": "view", "inputs": [{"name": "token", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Implementation of the ERC3156 Flash loans extension, as defined in https://eips.ethereum.org/EIPS/eip-3156[ERC-3156]. Adds the {flashLoan} method, which provides flash loan support at the token level. By default there is no fee, but this can be changed by overriding {flashFee}. _Available since v4.1._", "kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "flashFee(address,uint256)": {"details": "Returns the fee applied when doing flash loans. By default this implementation has 0 fees. This function can be overloaded to make the flash loan mechanism deflationary.", "params": {"amount": "The amount of tokens to be loaned.", "token": "The token to be flash loaned."}, "returns": {"_0": "The fees applied to the corresponding flash loan."}}, "flashLoan(address,address,uint256,bytes)": {"details": "Performs a flash loan. New tokens are minted and sent to the `receiver`, who is required to implement the {IERC3156FlashBorrower} interface. By the end of the flash loan, the receiver is expected to own amount + fee tokens and have them approved back to the token contract itself so they can be burned.", "params": {"amount": "The amount of tokens to be loaned.", "data": "An arbitrary datafield that is passed to the receiver.", "receiver": "The receiver of the flash loan. Should implement the {IERC3156FlashBorrower.onFlashLoan} interface.", "token": "The token to be flash loaned. Only `address(this)` is supported."}, "returns": {"_0": "`true` is the flash loan was successful."}}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "maxFlashLoan(address)": {"details": "Returns the maximum amount of tokens available for loan.", "params": {"token": "The address of the token that is requested."}, "returns": {"_0": "The amont of token that can be loaned."}}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20Pausable": {"contractName": "ERC20Pausable", "sourceId": "token/ERC20/extensions/ERC20Pausable.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Paused", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Unpaused", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "paused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "ERC20 token with pausable token transfers, minting and burning. Useful for scenarios such as preventing trades until the end of an evaluation period, or having an emergency switch for freezing all token transfers in the event of a large bug.", "kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "paused()": {"details": "Returns true if the contract is paused, and false otherwise."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20Snapshot": {"contractName": "ERC20Snapshot", "sourceId": "token/ERC20/extensions/ERC20Snapshot.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Snapshot", "inputs": [{"name": "id", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "balanceOfAt", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "snapshotId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "totalSupplyAt", "stateMutability": "view", "inputs": [{"name": "snapshotId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and total supply at the time are recorded for later access. This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting. In naive implementations it's possible to perform a \"double spend\" attack by reusing the same balance from different accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be used to create an efficient ERC20 forking mechanism. Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id and the account address. NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it return `block.number` will trigger the creation of snapshot at the begining of each new block. When overridding this function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract. Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient alternative consider {ERC20Votes}. ==== Gas Costs Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much smaller since identical balances in subsequent snapshots are stored as a single entry. There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent transfers will have normal cost until the next snapshot, and so on.", "events": {"Snapshot(uint256)": {"details": "Emitted by {_snapshot} when a snapshot identified by `id` is created."}}, "kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "balanceOfAt(address,uint256)": {"details": "Retrieves the balance of `account` at the time `snapshotId` was created."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "totalSupplyAt(uint256)": {"details": "Retrieves the total supply at the time `snapshotId` was created."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20Votes": {"contractName": "ERC20Votes", "sourceId": "token/ERC20/extensions/ERC20Votes.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "DelegateChanged", "inputs": [{"name": "delegator", "type": "address", "internalType": "address", "indexed": true}, {"name": "fromDelegate", "type": "address", "internalType": "address", "indexed": true}, {"name": "toDelegate", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "DelegateVotesChanged", "inputs": [{"name": "delegate", "type": "address", "internalType": "address", "indexed": true}, {"name": "previousBalance", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newBalance", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "DOMAIN_SEPARATOR", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "checkpoints", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "pos", "type": "uint32", "internalType": "uint32"}], "outputs": [{"name": "", "type": "tuple", "components": [{"name": "fromBlock", "type": "uint32", "internalType": "uint32"}, {"name": "votes", "type": "uint224", "internalType": "uint224"}], "internalType": "struct ERC20Votes.Checkpoint"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "delegate", "stateMutability": "nonpayable", "inputs": [{"name": "delegatee", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "delegateBySig", "stateMutability": "nonpayable", "inputs": [{"name": "delegatee", "type": "address", "internalType": "address"}, {"name": "nonce", "type": "uint256", "internalType": "uint256"}, {"name": "expiry", "type": "uint256", "internalType": "uint256"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "delegates", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getPastTotalSupply", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getPastVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "nonces", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "numCheckpoints", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint32", "internalType": "uint32"}]}, {"type": "function", "name": "permit", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "deadline", "type": "uint256", "internalType": "uint256"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's, and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1. NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module. This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting power can be queried through the public accessors {getVotes} and {getPastVotes}. By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked. Enabling self-delegation can easily be done by overriding the {delegates} function. Keep in mind however that this will significantly increase the base gas cost of transfers. _Available since v4.2._", "events": {"DelegateChanged(address,address,address)": {"details": "Emitted when an account changes their delegate."}, "DelegateVotesChanged(address,uint256,uint256)": {"details": "Emitted when a token transfer or delegate change results in changes to an account's voting power."}}, "kind": "dev", "methods": {"DOMAIN_SEPARATOR()": {"details": "See {IERC20Permit-DOMAIN_SEPARATOR}."}, "allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "checkpoints(address,uint32)": {"details": "Get the `pos`-th checkpoint for `account`."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "delegate(address)": {"details": "Delegate votes from the sender to `delegatee`."}, "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {"details": "Delegates votes from signer to `delegatee`"}, "delegates(address)": {"details": "Get the address `account` is currently delegating to."}, "getPastTotalSupply(uint256)": {"details": "Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances. It is but NOT the sum of all the delegated votes! Requirements: - `blockNumber` must have been already mined"}, "getPastVotes(address,uint256)": {"details": "Retrieve the number of votes for `account` at the end of `blockNumber`. Requirements: - `blockNumber` must have been already mined"}, "getVotes(address)": {"details": "Gets the current votes balance for `account`"}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "nonces(address)": {"details": "See {IERC20Permit-nonces}."}, "numCheckpoints(address)": {"details": "Get number of checkpoints for `account`."}, "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {"details": "See {IERC20Permit-permit}."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20VotesComp": {"contractName": "ERC20VotesComp", "sourceId": "token/ERC20/extensions/ERC20VotesComp.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "DelegateChanged", "inputs": [{"name": "delegator", "type": "address", "internalType": "address", "indexed": true}, {"name": "fromDelegate", "type": "address", "internalType": "address", "indexed": true}, {"name": "toDelegate", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "DelegateVotesChanged", "inputs": [{"name": "delegate", "type": "address", "internalType": "address", "indexed": true}, {"name": "previousBalance", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "newBalance", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "DOMAIN_SEPARATOR", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "checkpoints", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "pos", "type": "uint32", "internalType": "uint32"}], "outputs": [{"name": "", "type": "tuple", "components": [{"name": "fromBlock", "type": "uint32", "internalType": "uint32"}, {"name": "votes", "type": "uint224", "internalType": "uint224"}], "internalType": "struct ERC20Votes.Checkpoint"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "delegate", "stateMutability": "nonpayable", "inputs": [{"name": "delegatee", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "delegateBySig", "stateMutability": "nonpayable", "inputs": [{"name": "delegatee", "type": "address", "internalType": "address"}, {"name": "nonce", "type": "uint256", "internalType": "uint256"}, {"name": "expiry", "type": "uint256", "internalType": "uint256"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "delegates", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getCurrentVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint96", "internalType": "uint96"}]}, {"type": "function", "name": "getPastTotalSupply", "stateMutability": "view", "inputs": [{"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getPastVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getPriorVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "blockNumber", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint96", "internalType": "uint96"}]}, {"type": "function", "name": "getVotes", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "nonces", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "numCheckpoints", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint32", "internalType": "uint32"}]}, {"type": "function", "name": "permit", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "deadline", "type": "uint256", "internalType": "uint256"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Extension of ERC20 to support Compound's voting and delegation. This version exactly matches Compound's interface, with the drawback of only supporting supply up to (2^96^ - 1). NOTE: You should use this contract if you need exact compatibility with COMP (for example in order to use your token with Governor Alpha or Bravo) and if you are sure the supply cap of 2^96^ is enough for you. Otherwise, use the {ERC20Votes} variant of this module. This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting power can be queried through the public accessors {getCurrentVotes} and {getPriorVotes}. By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked. Enabling self-delegation can easily be done by overriding the {delegates} function. Keep in mind however that this will significantly increase the base gas cost of transfers. _Available since v4.2._", "kind": "dev", "methods": {"DOMAIN_SEPARATOR()": {"details": "See {IERC20Permit-DOMAIN_SEPARATOR}."}, "allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "checkpoints(address,uint32)": {"details": "Get the `pos`-th checkpoint for `account`."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "delegate(address)": {"details": "Delegate votes from the sender to `delegatee`."}, "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {"details": "Delegates votes from signer to `delegatee`"}, "delegates(address)": {"details": "Get the address `account` is currently delegating to."}, "getCurrentVotes(address)": {"details": "Comp version of the {getVotes} accessor, with `uint96` return type."}, "getPastTotalSupply(uint256)": {"details": "Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances. It is but NOT the sum of all the delegated votes! Requirements: - `blockNumber` must have been already mined"}, "getPastVotes(address,uint256)": {"details": "Retrieve the number of votes for `account` at the end of `blockNumber`. Requirements: - `blockNumber` must have been already mined"}, "getPriorVotes(address,uint256)": {"details": "Comp version of the {getPastVotes} accessor, with `uint96` return type."}, "getVotes(address)": {"details": "Gets the current votes balance for `account`"}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "nonces(address)": {"details": "See {IERC20Permit-nonces}."}, "numCheckpoints(address)": {"details": "Get number of checkpoints for `account`."}, "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {"details": "See {IERC20Permit-permit}."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20Wrapper": {"contractName": "ERC20Wrapper", "sourceId": "token/ERC20/extensions/ERC20Wrapper.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "depositFor", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "underlying", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "contract IERC20"}]}, {"type": "function", "name": "withdrawTo", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Extension of the ERC20 token contract to support token wrapping. Users can deposit and withdraw \"underlying tokens\" and receive a matching number of \"wrapped tokens\". This is useful in conjunction with other modules. For example, combining this wrapping mechanism with {ERC20Votes} will allow the wrapping of an existing \"basic\" ERC20 into a governance token. _Available since v4.2._", "kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "depositFor(address,uint256)": {"details": "Allow a user to deposit underlying tokens and mint the corresponding number of wrapped tokens."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}, "withdrawTo(address,uint256)": {"details": "Allow a user to burn a number of wrapped tokens and withdraw the corresponding number of underlying tokens."}}, "version": 1}}, "IERC20Metadata": {"contractName": "IERC20Metadata", "sourceId": "token/ERC20/extensions/IERC20Metadata.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._", "kind": "dev", "methods": {"allowance(address,address)": {"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."}, "approve(address,uint256)": {"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."}, "balanceOf(address)": {"details": "Returns the amount of tokens owned by `account`."}, "decimals()": {"details": "Returns the decimals places of the token."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token."}, "totalSupply()": {"details": "Returns the amount of tokens in existence."}, "transfer(address,uint256)": {"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}, "transferFrom(address,address,uint256)": {"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}}, "version": 1}}, "ERC20Permit": {"contractName": "ERC20Permit", "sourceId": "token/ERC20/extensions/draft-ERC20Permit.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "DOMAIN_SEPARATOR", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "nonces", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "permit", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "deadline", "type": "uint256", "internalType": "uint256"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._", "kind": "dev", "methods": {"DOMAIN_SEPARATOR()": {"details": "See {IERC20Permit-DOMAIN_SEPARATOR}."}, "allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "constructor": {"details": "Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "nonces(address)": {"details": "See {IERC20Permit-nonces}."}, "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {"details": "See {IERC20Permit-permit}."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "IERC20Permit": {"contractName": "IERC20Permit", "sourceId": "token/ERC20/extensions/draft-IERC20Permit.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "DOMAIN_SEPARATOR", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "nonces", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "permit", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}, {"name": "deadline", "type": "uint256", "internalType": "uint256"}, {"name": "v", "type": "uint8", "internalType": "uint8"}, {"name": "r", "type": "bytes32", "internalType": "bytes32"}, {"name": "s", "type": "bytes32", "internalType": "bytes32"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.", "kind": "dev", "methods": {"DOMAIN_SEPARATOR()": {"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."}, "nonces(address)": {"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."}, "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}}, "version": 1}}, "ERC20PresetFixedSupply": {"contractName": "ERC20PresetFixedSupply", "sourceId": "token/ERC20/presets/ERC20PresetFixedSupply.sol", "deploymentBytecode": {"bytecode": "0x60806040523480156200001157600080fd5b5060405162000f0f38038062000f0f8339810160408190526200003491620002dd565b8351849084906200004d9060039060208501906200016a565b508051620000639060049060208401906200016a565b5050506200007881836200008260201b60201c565b50505050620003d5565b6001600160a01b038216620000dd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620000f1919062000372565b90915550506001600160a01b038216600090815260208190526040812080548392906200012090849062000372565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001789062000399565b90600052602060002090601f0160209004810192826200019c5760008555620001e7565b82601f10620001b757805160ff1916838001178555620001e7565b82800160010185558215620001e7579182015b82811115620001e7578251825591602001919060010190620001ca565b50620001f5929150620001f9565b5090565b5b80821115620001f55760008155600101620001fa565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200023857600080fd5b81516001600160401b038082111562000255576200025562000210565b604051601f8301601f19908116603f0116810190828211818310171562000280576200028062000210565b816040528381526020925086838588010111156200029d57600080fd5b600091505b83821015620002c15785820183015181830184015290820190620002a2565b83821115620002d35760008385830101525b9695505050505050565b60008060008060808587031215620002f457600080fd5b84516001600160401b03808211156200030c57600080fd5b6200031a8883890162000226565b955060208701519150808211156200033157600080fd5b50620003408782880162000226565b60408701516060880151919550935090506001600160a01b03811681146200036757600080fd5b939692955090935050565b600082198211156200039457634e487b7160e01b600052601160045260246000fd5b500190565b600181811c90821680620003ae57607f821691505b602082108103620003cf57634e487b7160e01b600052602260045260246000fd5b50919050565b610b2a80620003e56000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806342966c681161008c57806395d89b411161006657806395d89b41146101ad578063a457c2d7146101b5578063a9059cbb146101c8578063dd62ed3e146101db57600080fd5b806342966c681461015c57806370a082311461017157806379cc67901461019a57600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd14610127578063313ce5671461013a5780633950935114610149575b600080fd5b6100dc610214565b6040516100e99190610930565b60405180910390f35b6101056101003660046109a1565b6102a6565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b6101056101353660046109cb565b6102bc565b604051601281526020016100e9565b6101056101573660046109a1565b61036b565b61016f61016a366004610a07565b6103a7565b005b61011961017f366004610a20565b6001600160a01b031660009081526020819052604090205490565b61016f6101a83660046109a1565b6103b4565b6100dc61043a565b6101056101c33660046109a1565b610449565b6101056101d63660046109a1565b6104e2565b6101196101e9366004610a42565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461022390610a75565b80601f016020809104026020016040519081016040528092919081815260200182805461024f90610a75565b801561029c5780601f106102715761010080835404028352916020019161029c565b820191906000526020600020905b81548152906001019060200180831161027f57829003601f168201915b5050505050905090565b60006102b33384846104ef565b50600192915050565b60006102c9848484610613565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103535760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61036085338584036104ef565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102b39185906103a2908690610ac5565b6104ef565b6103b133826107e2565b50565b60006103c083336101e9565b90508181101561041e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77604482015263616e636560e01b606482015260840161034a565b61042b83338484036104ef565b61043583836107e2565b505050565b60606004805461022390610a75565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104cb5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161034a565b6104d833858584036104ef565b5060019392505050565b60006102b3338484610613565b6001600160a01b0383166105515760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161034a565b6001600160a01b0382166105b25760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161034a565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166106775760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161034a565b6001600160a01b0382166106d95760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161034a565b6001600160a01b038316600090815260208190526040902054818110156107515760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161034a565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610788908490610ac5565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107d491815260200190565b60405180910390a350505050565b6001600160a01b0382166108425760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161034a565b6001600160a01b038216600090815260208190526040902054818110156108b65760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161034a565b6001600160a01b03831660009081526020819052604081208383039055600280548492906108e5908490610add565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b600060208083528351808285015260005b8181101561095d57858101830151858201604001528201610941565b8181111561096f576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461099c57600080fd5b919050565b600080604083850312156109b457600080fd5b6109bd83610985565b946020939093013593505050565b6000806000606084860312156109e057600080fd5b6109e984610985565b92506109f760208501610985565b9150604084013590509250925092565b600060208284031215610a1957600080fd5b5035919050565b600060208284031215610a3257600080fd5b610a3b82610985565b9392505050565b60008060408385031215610a5557600080fd5b610a5e83610985565b9150610a6c60208401610985565b90509250929050565b600181811c90821680610a8957607f821691505b602082108103610aa957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610ad857610ad8610aaf565b500190565b600082821015610aef57610aef610aaf565b50039056fea26469706673582212206b3c5445abf19842ca8d5aac3c7ade122a2e05d010bcc530a24f8378d5dd845d64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806342966c681161008c57806395d89b411161006657806395d89b41146101ad578063a457c2d7146101b5578063a9059cbb146101c8578063dd62ed3e146101db57600080fd5b806342966c681461015c57806370a082311461017157806379cc67901461019a57600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd14610127578063313ce5671461013a5780633950935114610149575b600080fd5b6100dc610214565b6040516100e99190610930565b60405180910390f35b6101056101003660046109a1565b6102a6565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b6101056101353660046109cb565b6102bc565b604051601281526020016100e9565b6101056101573660046109a1565b61036b565b61016f61016a366004610a07565b6103a7565b005b61011961017f366004610a20565b6001600160a01b031660009081526020819052604090205490565b61016f6101a83660046109a1565b6103b4565b6100dc61043a565b6101056101c33660046109a1565b610449565b6101056101d63660046109a1565b6104e2565b6101196101e9366004610a42565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461022390610a75565b80601f016020809104026020016040519081016040528092919081815260200182805461024f90610a75565b801561029c5780601f106102715761010080835404028352916020019161029c565b820191906000526020600020905b81548152906001019060200180831161027f57829003601f168201915b5050505050905090565b60006102b33384846104ef565b50600192915050565b60006102c9848484610613565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103535760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61036085338584036104ef565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102b39185906103a2908690610ac5565b6104ef565b6103b133826107e2565b50565b60006103c083336101e9565b90508181101561041e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77604482015263616e636560e01b606482015260840161034a565b61042b83338484036104ef565b61043583836107e2565b505050565b60606004805461022390610a75565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104cb5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161034a565b6104d833858584036104ef565b5060019392505050565b60006102b3338484610613565b6001600160a01b0383166105515760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161034a565b6001600160a01b0382166105b25760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161034a565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166106775760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161034a565b6001600160a01b0382166106d95760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161034a565b6001600160a01b038316600090815260208190526040902054818110156107515760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161034a565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610788908490610ac5565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107d491815260200190565b60405180910390a350505050565b6001600160a01b0382166108425760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161034a565b6001600160a01b038216600090815260208190526040902054818110156108b65760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161034a565b6001600160a01b03831660009081526020819052604081208383039055600280548492906108e5908490610add565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b600060208083528351808285015260005b8181101561095d57858101830151858201604001528201610941565b8181111561096f576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461099c57600080fd5b919050565b600080604083850312156109b457600080fd5b6109bd83610985565b946020939093013593505050565b6000806000606084860312156109e057600080fd5b6109e984610985565b92506109f760208501610985565b9150604084013590509250925092565b600060208284031215610a1957600080fd5b5035919050565b600060208284031215610a3257600080fd5b610a3b82610985565b9392505050565b60008060408385031215610a5557600080fd5b610a5e83610985565b9150610a6c60208401610985565b90509250929050565b600181811c90821680610a8957607f821691505b602082108103610aa957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610ad857610ad8610aaf565b500190565b600082821015610aef57610aef610aaf565b50039056fea26469706673582212206b3c5445abf19842ca8d5aac3c7ade122a2e05d010bcc530a24f8378d5dd845d64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}, {"name": "initialSupply", "type": "uint256", "internalType": "uint256"}, {"name": "owner", "type": "address", "internalType": "address"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "burnFrom", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "{ERC20} token, including:  - Preminted initial supply  - Ability for holders to burn (destroy) their tokens  - No access control mechanism (for minting/pausing) and hence no governance This contract uses {ERC20Burnable} to include burn capabilities - head to its documentation for details. _Available since v3.4._", "kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "burn(uint256)": {"details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."}, "burnFrom(address,uint256)": {"details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."}, "constructor": {"details": "Mints `initialSupply` amount of token and transfers them to `owner`. See {ERC20-constructor}."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "name()": {"details": "Returns the name of the token."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}, "version": 1}}, "ERC20PresetMinterPauser": {"contractName": "ERC20PresetMinterPauser", "sourceId": "token/ERC20/presets/ERC20PresetMinterPauser.sol", "deploymentBytecode": {"bytecode": "0x60806040523480156200001157600080fd5b5060405162001df638038062001df68339810160408190526200003491620003b5565b8151829082906200004d90600590602085019062000242565b5080516200006390600690602084019062000242565b50506007805460ff19169055506200007d600033620000dd565b620000a97f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633620000dd565b620000d57f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33620000dd565b50506200045b565b620000e98282620000ed565b5050565b6200010482826200013060201b62000a611760201c565b60008281526001602090815260409091206200012b91839062000ae5620001d0821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000e9576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556200018c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620001e7836001600160a01b038416620001f0565b90505b92915050565b60008181526001830160205260408120546200023957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620001ea565b506000620001ea565b82805462000250906200041f565b90600052602060002090601f016020900481019282620002745760008555620002bf565b82601f106200028f57805160ff1916838001178555620002bf565b82800160010185558215620002bf579182015b82811115620002bf578251825591602001919060010190620002a2565b50620002cd929150620002d1565b5090565b5b80821115620002cd5760008155600101620002d2565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200031057600080fd5b81516001600160401b03808211156200032d576200032d620002e8565b604051601f8301601f19908116603f01168101908282118183101715620003585762000358620002e8565b816040528381526020925086838588010111156200037557600080fd5b600091505b838210156200039957858201830151818301840152908201906200037a565b83821115620003ab5760008385830101525b9695505050505050565b60008060408385031215620003c957600080fd5b82516001600160401b0380821115620003e157600080fd5b620003ef86838701620002fe565b935060208501519150808211156200040657600080fd5b506200041585828601620002fe565b9150509250929050565b600181811c908216806200043457607f821691505b6020821081036200045557634e487b7160e01b600052602260045260246000fd5b50919050565b61198b806200046b6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806370a08231116100f9578063a457c2d711610097578063d539139311610071578063d5391393146103af578063d547741f146103d6578063dd62ed3e146103e9578063e63ab1e91461042257600080fd5b8063a457c2d714610376578063a9059cbb14610389578063ca15c8731461039c57600080fd5b80639010d07c116100d35780639010d07c1461032857806391d148541461035357806395d89b4114610366578063a217fddf1461036e57600080fd5b806370a08231146102e457806379cc67901461030d5780638456cb591461032057600080fd5b8063313ce567116101665780633f4ba83a116101405780633f4ba83a146102ab57806340c10f19146102b357806342966c68146102c65780635c975abb146102d957600080fd5b8063313ce5671461027657806336568abe14610285578063395093511461029857600080fd5b806318160ddd116101a257806318160ddd1461021957806323b872dd1461022b578063248a9ca31461023e5780632f2ff15d1461026157600080fd5b806301ffc9a7146101c957806306fdde03146101f1578063095ea7b314610206575b600080fd5b6101dc6101d7366004611632565b610449565b60405190151581526020015b60405180910390f35b6101f9610474565b6040516101e89190611688565b6101dc6102143660046116d7565b610506565b6004545b6040519081526020016101e8565b6101dc610239366004611701565b61051c565b61021d61024c36600461173d565b60009081526020819052604090206001015490565b61027461026f366004611756565b6105cb565b005b604051601281526020016101e8565b610274610293366004611756565b6105f6565b6101dc6102a63660046116d7565b610674565b6102746106b0565b6102746102c13660046116d7565b610756565b6102746102d436600461173d565b6107f5565b60075460ff166101dc565b61021d6102f2366004611782565b6001600160a01b031660009081526002602052604090205490565b61027461031b3660046116d7565b610802565b610274610883565b61033b61033636600461179d565b610927565b6040516001600160a01b0390911681526020016101e8565b6101dc610361366004611756565b610946565b6101f961096f565b61021d600081565b6101dc6103843660046116d7565b61097e565b6101dc6103973660046116d7565b610a17565b61021d6103aa36600461173d565b610a24565b61021d7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6102746103e4366004611756565b610a3b565b61021d6103f73660046117bf565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b61021d7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b60006001600160e01b03198216635a05180f60e01b148061046e575061046e82610afa565b92915050565b606060058054610483906117e9565b80601f01602080910402602001604051908101604052809291908181526020018280546104af906117e9565b80156104fc5780601f106104d1576101008083540402835291602001916104fc565b820191906000526020600020905b8154815290600101906020018083116104df57829003601f168201915b5050505050905090565b6000610513338484610b2f565b50600192915050565b6000610529848484610c53565b6001600160a01b0384166000908152600360209081526040808320338452909152902054828110156105b35760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6105c08533858403610b2f565b506001949350505050565b6000828152602081905260409020600101546105e78133610e2e565b6105f18383610e92565b505050565b6001600160a01b03811633146106665760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105aa565b6106708282610eb4565b5050565b3360008181526003602090815260408083206001600160a01b038716845290915281205490916105139185906106ab908690611839565b610b2f565b6106da7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610946565b61074c5760405162461bcd60e51b815260206004820152603960248201527f45524332305072657365744d696e7465725061757365723a206d75737420686160448201527f76652070617573657220726f6c6520746f20756e70617573650000000000000060648201526084016105aa565b610754610ed6565b565b6107807f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633610946565b6107eb5760405162461bcd60e51b815260206004820152603660248201527f45524332305072657365744d696e7465725061757365723a206d7573742068616044820152751d99481b5a5b9d195c881c9bdb19481d1bc81b5a5b9d60521b60648201526084016105aa565b6106708282610f69565b6107ff3382611054565b50565b600061080e83336103f7565b90508181101561086c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77604482015263616e636560e01b60648201526084016105aa565b6108798333848403610b2f565b6105f18383611054565b6108ad7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610946565b61091f5760405162461bcd60e51b815260206004820152603760248201527f45524332305072657365744d696e7465725061757365723a206d75737420686160448201527f76652070617573657220726f6c6520746f20706175736500000000000000000060648201526084016105aa565b6107546111ae565b600082815260016020526040812061093f9083611229565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b606060068054610483906117e9565b3360009081526003602090815260408083206001600160a01b038616845290915281205482811015610a005760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016105aa565b610a0d3385858403610b2f565b5060019392505050565b6000610513338484610c53565b600081815260016020526040812061046e90611235565b600082815260208190526040902060010154610a578133610e2e565b6105f18383610eb4565b610a6b8282610946565b610670576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610aa13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061093f836001600160a01b03841661123f565b60006001600160e01b03198216637965db0b60e01b148061046e57506301ffc9a760e01b6001600160e01b031983161461046e565b6001600160a01b038316610b915760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105aa565b6001600160a01b038216610bf25760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105aa565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610cb75760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105aa565b6001600160a01b038216610d195760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105aa565b610d2483838361128e565b6001600160a01b03831660009081526002602052604090205481811015610d9c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016105aa565b6001600160a01b03808516600090815260026020526040808220858503905591851681529081208054849290610dd3908490611839565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610e1f91815260200190565b60405180910390a35b50505050565b610e388282610946565b61067057610e50816001600160a01b03166014611299565b610e5b836020611299565b604051602001610e6c929190611851565b60408051601f198184030181529082905262461bcd60e51b82526105aa91600401611688565b610e9c8282610a61565b60008281526001602052604090206105f19082610ae5565b610ebe8282611435565b60008281526001602052604090206105f1908261149a565b60075460ff16610f1f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105aa565b6007805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038216610fbf5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105aa565b610fcb6000838361128e565b8060046000828254610fdd9190611839565b90915550506001600160a01b0382166000908152600260205260408120805483929061100a908490611839565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166110b45760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016105aa565b6110c08260008361128e565b6001600160a01b038216600090815260026020526040902054818110156111345760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016105aa565b6001600160a01b03831660009081526002602052604081208383039055600480548492906111639084906118c6565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60075460ff16156111f45760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105aa565b6007805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610f4c3390565b600061093f83836114af565b600061046e825490565b60008181526001830160205260408120546112865750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561046e565b50600061046e565b6105f18383836114d9565b606060006112a88360026118dd565b6112b3906002611839565b67ffffffffffffffff8111156112cb576112cb6118fc565b6040519080825280601f01601f1916602001820160405280156112f5576020820181803683370190505b509050600360fc1b8160008151811061131057611310611912565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061133f5761133f611912565b60200101906001600160f81b031916908160001a90535060006113638460026118dd565b61136e906001611839565b90505b60018111156113e6576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106113a2576113a2611912565b1a60f81b8282815181106113b8576113b8611912565b60200101906001600160f81b031916908160001a90535060049490941c936113df81611928565b9050611371565b50831561093f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105aa565b61143f8282610946565b15610670576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061093f836001600160a01b03841661153f565b60008260000182815481106114c6576114c6611912565b9060005260206000200154905092915050565b60075460ff16156105f15760405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e736665722077686044820152691a5b19481c185d5cd95960b21b60648201526084016105aa565b600081815260018301602052604081205480156116285760006115636001836118c6565b8554909150600090611577906001906118c6565b90508181146115dc57600086600001828154811061159757611597611912565b90600052602060002001549050808760000184815481106115ba576115ba611912565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806115ed576115ed61193f565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061046e565b600091505061046e565b60006020828403121561164457600080fd5b81356001600160e01b03198116811461093f57600080fd5b60005b8381101561167757818101518382015260200161165f565b83811115610e285750506000910152565b60208152600082518060208401526116a781604085016020870161165c565b601f01601f19169190910160400192915050565b80356001600160a01b03811681146116d257600080fd5b919050565b600080604083850312156116ea57600080fd5b6116f3836116bb565b946020939093013593505050565b60008060006060848603121561171657600080fd5b61171f846116bb565b925061172d602085016116bb565b9150604084013590509250925092565b60006020828403121561174f57600080fd5b5035919050565b6000806040838503121561176957600080fd5b82359150611779602084016116bb565b90509250929050565b60006020828403121561179457600080fd5b61093f826116bb565b600080604083850312156117b057600080fd5b50508035926020909101359150565b600080604083850312156117d257600080fd5b6117db836116bb565b9150611779602084016116bb565b600181811c908216806117fd57607f821691505b60208210810361181d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561184c5761184c611823565b500190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161188981601785016020880161165c565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516118ba81602884016020880161165c565b01602801949350505050565b6000828210156118d8576118d8611823565b500390565b60008160001904831182151516156118f7576118f7611823565b500290565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008161193757611937611823565b506000190190565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220d66b65a46bd6ab820c2d7764cc8a0a2a185db4be0516e306bd4af6c03a72ee8764736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c806370a08231116100f9578063a457c2d711610097578063d539139311610071578063d5391393146103af578063d547741f146103d6578063dd62ed3e146103e9578063e63ab1e91461042257600080fd5b8063a457c2d714610376578063a9059cbb14610389578063ca15c8731461039c57600080fd5b80639010d07c116100d35780639010d07c1461032857806391d148541461035357806395d89b4114610366578063a217fddf1461036e57600080fd5b806370a08231146102e457806379cc67901461030d5780638456cb591461032057600080fd5b8063313ce567116101665780633f4ba83a116101405780633f4ba83a146102ab57806340c10f19146102b357806342966c68146102c65780635c975abb146102d957600080fd5b8063313ce5671461027657806336568abe14610285578063395093511461029857600080fd5b806318160ddd116101a257806318160ddd1461021957806323b872dd1461022b578063248a9ca31461023e5780632f2ff15d1461026157600080fd5b806301ffc9a7146101c957806306fdde03146101f1578063095ea7b314610206575b600080fd5b6101dc6101d7366004611632565b610449565b60405190151581526020015b60405180910390f35b6101f9610474565b6040516101e89190611688565b6101dc6102143660046116d7565b610506565b6004545b6040519081526020016101e8565b6101dc610239366004611701565b61051c565b61021d61024c36600461173d565b60009081526020819052604090206001015490565b61027461026f366004611756565b6105cb565b005b604051601281526020016101e8565b610274610293366004611756565b6105f6565b6101dc6102a63660046116d7565b610674565b6102746106b0565b6102746102c13660046116d7565b610756565b6102746102d436600461173d565b6107f5565b60075460ff166101dc565b61021d6102f2366004611782565b6001600160a01b031660009081526002602052604090205490565b61027461031b3660046116d7565b610802565b610274610883565b61033b61033636600461179d565b610927565b6040516001600160a01b0390911681526020016101e8565b6101dc610361366004611756565b610946565b6101f961096f565b61021d600081565b6101dc6103843660046116d7565b61097e565b6101dc6103973660046116d7565b610a17565b61021d6103aa36600461173d565b610a24565b61021d7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6102746103e4366004611756565b610a3b565b61021d6103f73660046117bf565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b61021d7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b60006001600160e01b03198216635a05180f60e01b148061046e575061046e82610afa565b92915050565b606060058054610483906117e9565b80601f01602080910402602001604051908101604052809291908181526020018280546104af906117e9565b80156104fc5780601f106104d1576101008083540402835291602001916104fc565b820191906000526020600020905b8154815290600101906020018083116104df57829003601f168201915b5050505050905090565b6000610513338484610b2f565b50600192915050565b6000610529848484610c53565b6001600160a01b0384166000908152600360209081526040808320338452909152902054828110156105b35760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6105c08533858403610b2f565b506001949350505050565b6000828152602081905260409020600101546105e78133610e2e565b6105f18383610e92565b505050565b6001600160a01b03811633146106665760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105aa565b6106708282610eb4565b5050565b3360008181526003602090815260408083206001600160a01b038716845290915281205490916105139185906106ab908690611839565b610b2f565b6106da7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610946565b61074c5760405162461bcd60e51b815260206004820152603960248201527f45524332305072657365744d696e7465725061757365723a206d75737420686160448201527f76652070617573657220726f6c6520746f20756e70617573650000000000000060648201526084016105aa565b610754610ed6565b565b6107807f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633610946565b6107eb5760405162461bcd60e51b815260206004820152603660248201527f45524332305072657365744d696e7465725061757365723a206d7573742068616044820152751d99481b5a5b9d195c881c9bdb19481d1bc81b5a5b9d60521b60648201526084016105aa565b6106708282610f69565b6107ff3382611054565b50565b600061080e83336103f7565b90508181101561086c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77604482015263616e636560e01b60648201526084016105aa565b6108798333848403610b2f565b6105f18383611054565b6108ad7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610946565b61091f5760405162461bcd60e51b815260206004820152603760248201527f45524332305072657365744d696e7465725061757365723a206d75737420686160448201527f76652070617573657220726f6c6520746f20706175736500000000000000000060648201526084016105aa565b6107546111ae565b600082815260016020526040812061093f9083611229565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b606060068054610483906117e9565b3360009081526003602090815260408083206001600160a01b038616845290915281205482811015610a005760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016105aa565b610a0d3385858403610b2f565b5060019392505050565b6000610513338484610c53565b600081815260016020526040812061046e90611235565b600082815260208190526040902060010154610a578133610e2e565b6105f18383610eb4565b610a6b8282610946565b610670576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610aa13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061093f836001600160a01b03841661123f565b60006001600160e01b03198216637965db0b60e01b148061046e57506301ffc9a760e01b6001600160e01b031983161461046e565b6001600160a01b038316610b915760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105aa565b6001600160a01b038216610bf25760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105aa565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610cb75760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105aa565b6001600160a01b038216610d195760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105aa565b610d2483838361128e565b6001600160a01b03831660009081526002602052604090205481811015610d9c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016105aa565b6001600160a01b03808516600090815260026020526040808220858503905591851681529081208054849290610dd3908490611839565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610e1f91815260200190565b60405180910390a35b50505050565b610e388282610946565b61067057610e50816001600160a01b03166014611299565b610e5b836020611299565b604051602001610e6c929190611851565b60408051601f198184030181529082905262461bcd60e51b82526105aa91600401611688565b610e9c8282610a61565b60008281526001602052604090206105f19082610ae5565b610ebe8282611435565b60008281526001602052604090206105f1908261149a565b60075460ff16610f1f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105aa565b6007805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038216610fbf5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105aa565b610fcb6000838361128e565b8060046000828254610fdd9190611839565b90915550506001600160a01b0382166000908152600260205260408120805483929061100a908490611839565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166110b45760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016105aa565b6110c08260008361128e565b6001600160a01b038216600090815260026020526040902054818110156111345760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016105aa565b6001600160a01b03831660009081526002602052604081208383039055600480548492906111639084906118c6565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60075460ff16156111f45760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105aa565b6007805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610f4c3390565b600061093f83836114af565b600061046e825490565b60008181526001830160205260408120546112865750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561046e565b50600061046e565b6105f18383836114d9565b606060006112a88360026118dd565b6112b3906002611839565b67ffffffffffffffff8111156112cb576112cb6118fc565b6040519080825280601f01601f1916602001820160405280156112f5576020820181803683370190505b509050600360fc1b8160008151811061131057611310611912565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061133f5761133f611912565b60200101906001600160f81b031916908160001a90535060006113638460026118dd565b61136e906001611839565b90505b60018111156113e6576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106113a2576113a2611912565b1a60f81b8282815181106113b8576113b8611912565b60200101906001600160f81b031916908160001a90535060049490941c936113df81611928565b9050611371565b50831561093f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105aa565b61143f8282610946565b15610670576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061093f836001600160a01b03841661153f565b60008260000182815481106114c6576114c6611912565b9060005260206000200154905092915050565b60075460ff16156105f15760405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e736665722077686044820152691a5b19481c185d5cd95960b21b60648201526084016105aa565b600081815260018301602052604081205480156116285760006115636001836118c6565b8554909150600090611577906001906118c6565b90508181146115dc57600086600001828154811061159757611597611912565b90600052602060002001549050808760000184815481106115ba576115ba611912565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806115ed576115ed61193f565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061046e565b600091505061046e565b60006020828403121561164457600080fd5b81356001600160e01b03198116811461093f57600080fd5b60005b8381101561167757818101518382015260200161165f565b83811115610e285750506000910152565b60208152600082518060208401526116a781604085016020870161165c565b601f01601f19169190910160400192915050565b80356001600160a01b03811681146116d257600080fd5b919050565b600080604083850312156116ea57600080fd5b6116f3836116bb565b946020939093013593505050565b60008060006060848603121561171657600080fd5b61171f846116bb565b925061172d602085016116bb565b9150604084013590509250925092565b60006020828403121561174f57600080fd5b5035919050565b6000806040838503121561176957600080fd5b82359150611779602084016116bb565b90509250929050565b60006020828403121561179457600080fd5b61093f826116bb565b600080604083850312156117b057600080fd5b50508035926020909101359150565b600080604083850312156117d257600080fd5b6117db836116bb565b9150611779602084016116bb565b600181811c908216806117fd57607f821691505b60208210810361181d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561184c5761184c611823565b500190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161188981601785016020880161165c565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516118ba81602884016020880161165c565b01602801949350505050565b6000828210156118d8576118d8611823565b500390565b60008160001904831182151516156118f7576118f7611823565b500290565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008161193757611937611823565b506000190190565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220d66b65a46bd6ab820c2d7764cc8a0a2a185db4be0516e306bd4af6c03a72ee8764736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Paused", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "RoleAdminChanged", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "previousAdminRole", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "newAdminRole", "type": "bytes32", "internalType": "bytes32", "indexed": true}], "anonymous": false}, {"type": "event", "name": "RoleGranted", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "sender", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "RoleRevoked", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "sender", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Unpaused", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "function", "name": "DEFAULT_ADMIN_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "MINTER_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "PAUSER_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "burnFrom", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "decimals", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "decreaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "subtractedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "getRoleAdmin", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "getRoleMember", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getRoleMemberCount", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "grantRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "hasRole", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "increaseAllowance", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "addedValue", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "pause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "paused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "renounceRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "revokeRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "unpause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "{ERC20} token, including:  - ability for holders to burn (destroy) their tokens  - a minter role that allows for token minting (creation)  - a pauser role that allows to stop all token transfers This contract uses {AccessControl} to lock permissioned functions using the different roles - head to its documentation for details. The account that deploys the contract will be granted the minter and pauser roles, as well as the default admin role, which will let it grant both minter and pauser roles to other accounts.", "kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."}, "balanceOf(address)": {"details": "See {IERC20-balanceOf}."}, "burn(uint256)": {"details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."}, "burnFrom(address,uint256)": {"details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."}, "constructor": {"details": "Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the account that deploys the contract. See {ERC20-constructor}."}, "decimals()": {"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."}, "decreaseAllowance(address,uint256)": {"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."}, "getRoleAdmin(bytes32)": {"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."}, "getRoleMember(bytes32,uint256)": {"details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."}, "getRoleMemberCount(bytes32)": {"details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."}, "grantRole(bytes32,address)": {"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."}, "hasRole(bytes32,address)": {"details": "Returns `true` if `account` has been granted `role`."}, "increaseAllowance(address,uint256)": {"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."}, "mint(address,uint256)": {"details": "Creates `amount` new tokens for `to`. See {ERC20-_mint}. Requirements: - the caller must have the `MINTER_ROLE`."}, "name()": {"details": "Returns the name of the token."}, "pause()": {"details": "Pauses all token transfers. See {ERC20Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`."}, "paused()": {"details": "Returns true if the contract is paused, and false otherwise."}, "renounceRole(bytes32,address)": {"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."}, "revokeRole(bytes32,address)": {"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "See {IERC20-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}, "unpause()": {"details": "Unpauses all token transfers. See {ERC20Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`."}}, "version": 1}}, "SafeERC20": {"contractName": "SafeERC20", "sourceId": "token/ERC20/utils/SafeERC20.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122002e1f24589b80e491b90e4d9f6ce918a38891e6e7882999620d80c8ca9aade0964736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122002e1f24589b80e491b90e4d9f6ce918a38891e6e7882999620d80c8ca9aade0964736f6c634300080d0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.", "kind": "dev", "methods": {}, "title": "SafeERC20", "version": 1}}, "TokenTimelock": {"contractName": "TokenTimelock", "sourceId": "token/ERC20/utils/TokenTimelock.sol", "deploymentBytecode": {"bytecode": "0x60e060405234801561001057600080fd5b506040516107ad3803806107ad83398101604081905261002f916100d0565b42811161009d5760405162461bcd60e51b815260206004820152603260248201527f546f6b656e54696d656c6f636b3a2072656c656173652074696d65206973206260448201527165666f72652063757272656e742074696d6560701b606482015260840160405180910390fd5b6001600160a01b03928316608052911660a05260c052610113565b6001600160a01b03811681146100cd57600080fd5b50565b6000806000606084860312156100e557600080fd5b83516100f0816100b8565b6020850151909350610101816100b8565b80925050604084015190509250925092565b60805160a05160c05161065361015a60003960008181609f015260f00152600081816053015261029801526000818160ca01528181610182015261027601526106536000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806338af3eed1461005157806386d1a69f14610090578063b91d40011461009a578063fc0c546a146100c8575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020015b60405180910390f35b6100986100ee565b005b6040517f00000000000000000000000000000000000000000000000000000000000000008152602001610087565b7f0000000000000000000000000000000000000000000000000000000000000000610073565b7f000000000000000000000000000000000000000000000000000000000000000042101561017e5760405162461bcd60e51b815260206004820152603260248201527f546f6b656e54696d656c6f636b3a2063757272656e742074696d65206973206260448201527165666f72652072656c656173652074696d6560701b60648201526084015b60405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156101e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020b9190610563565b9050600081116102695760405162461bcd60e51b815260206004820152602360248201527f546f6b656e54696d656c6f636b3a206e6f20746f6b656e7320746f2072656c6560448201526261736560e81b6064820152608401610175565b6102bd6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836102c0565b50565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610312908490610317565b505050565b600061036c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166103e99092919063ffffffff16565b805190915015610312578080602001905181019061038a919061057c565b6103125760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610175565b60606103f88484600085610402565b90505b9392505050565b6060824710156104635760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610175565b843b6104b15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610175565b600080866001600160a01b031685876040516104cd91906105ce565b60006040518083038185875af1925050503d806000811461050a576040519150601f19603f3d011682016040523d82523d6000602084013e61050f565b606091505b509150915061051f82828661052a565b979650505050505050565b606083156105395750816103fb565b8251156105495782518084602001fd5b8160405162461bcd60e51b815260040161017591906105ea565b60006020828403121561057557600080fd5b5051919050565b60006020828403121561058e57600080fd5b815180151581146103fb57600080fd5b60005b838110156105b95781810151838201526020016105a1565b838111156105c8576000848401525b50505050565b600082516105e081846020870161059e565b9190910192915050565b602081526000825180602084015261060981604085016020870161059e565b601f01601f1916919091016040019291505056fea2646970667358221220cee27fe152d3ef7359d379d59a9c9fad60d770a92bffbea6a00c7f4f86bebbf764736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806338af3eed1461005157806386d1a69f14610090578063b91d40011461009a578063fc0c546a146100c8575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020015b60405180910390f35b6100986100ee565b005b6040517f00000000000000000000000000000000000000000000000000000000000000008152602001610087565b7f0000000000000000000000000000000000000000000000000000000000000000610073565b7f000000000000000000000000000000000000000000000000000000000000000042101561017e5760405162461bcd60e51b815260206004820152603260248201527f546f6b656e54696d656c6f636b3a2063757272656e742074696d65206973206260448201527165666f72652072656c656173652074696d6560701b60648201526084015b60405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156101e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020b9190610563565b9050600081116102695760405162461bcd60e51b815260206004820152602360248201527f546f6b656e54696d656c6f636b3a206e6f20746f6b656e7320746f2072656c6560448201526261736560e81b6064820152608401610175565b6102bd6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836102c0565b50565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610312908490610317565b505050565b600061036c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166103e99092919063ffffffff16565b805190915015610312578080602001905181019061038a919061057c565b6103125760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610175565b60606103f88484600085610402565b90505b9392505050565b6060824710156104635760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610175565b843b6104b15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610175565b600080866001600160a01b031685876040516104cd91906105ce565b60006040518083038185875af1925050503d806000811461050a576040519150601f19603f3d011682016040523d82523d6000602084013e61050f565b606091505b509150915061051f82828661052a565b979650505050505050565b606083156105395750816103fb565b8251156105495782518084602001fd5b8160405162461bcd60e51b815260040161017591906105ea565b60006020828403121561057557600080fd5b5051919050565b60006020828403121561058e57600080fd5b815180151581146103fb57600080fd5b60005b838110156105b95781810151838201526020016105a1565b838111156105c8576000848401525b50505050565b600082516105e081846020870161059e565b9190910192915050565b602081526000825180602084015261060981604085016020870161059e565b601f01601f1916919091016040019291505056fea2646970667358221220cee27fe152d3ef7359d379d59a9c9fad60d770a92bffbea6a00c7f4f86bebbf764736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "token_", "type": "address", "internalType": "contract IERC20"}, {"name": "beneficiary_", "type": "address", "internalType": "address"}, {"name": "releaseTime_", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "beneficiary", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "release", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "releaseTime", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "token", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "contract IERC20"}]}], "userdoc": {"kind": "user", "methods": {"release()": {"notice": "Transfers tokens held by timelock to beneficiary."}}, "version": 1}, "devdoc": {"details": "A token holder contract that will allow a beneficiary to extract the tokens after a given release time. Useful for simple vesting schedules like \"advisors get all of their tokens after 1 year\".", "kind": "dev", "methods": {"beneficiary()": {"returns": {"_0": "the beneficiary of the tokens."}}, "releaseTime()": {"returns": {"_0": "the time when the tokens are released."}}, "token()": {"returns": {"_0": "the token being held."}}}, "version": 1}}, "ERC721": {"contractName": "ERC721", "sourceId": "token/ERC721/ERC721.sol", "deploymentBytecode": {"bytecode": "0x60806040523480156200001157600080fd5b50604051620014e2380380620014e28339810160408190526200003491620001db565b81516200004990600090602085019062000068565b5080516200005f90600190602084019062000068565b50505062000281565b828054620000769062000245565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013657600080fd5b81516001600160401b03808211156200015357620001536200010e565b604051601f8301601f19908116603f011681019082821181831017156200017e576200017e6200010e565b816040528381526020925086838588010111156200019b57600080fd5b600091505b83821015620001bf5785820183015181830184015290820190620001a0565b83821115620001d15760008385830101525b9695505050505050565b60008060408385031215620001ef57600080fd5b82516001600160401b03808211156200020757600080fd5b620002158683870162000124565b935060208501519150808211156200022c57600080fd5b506200023b8582860162000124565b9150509250929050565b600181811c908216806200025a57607f821691505b6020821081036200027b57634e487b7160e01b600052602260045260246000fd5b50919050565b61125180620002916000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101b3578063b88d4fde146101c6578063c87b56dd146101d9578063e985e9c5146101ec57600080fd5b80636352211e1461017757806370a082311461018a57806395d89b41146101ab57600080fd5b806301ffc9a7146100d457806306fdde03146100fc578063081812fc14610111578063095ea7b31461013c57806323b872dd1461015157806342842e0e14610164575b600080fd5b6100e76100e2366004610d64565b610228565b60405190151581526020015b60405180910390f35b61010461027a565b6040516100f39190610dd9565b61012461011f366004610dec565b61030c565b6040516001600160a01b0390911681526020016100f3565b61014f61014a366004610e21565b6103a6565b005b61014f61015f366004610e4b565b6104bb565b61014f610172366004610e4b565b6104ec565b610124610185366004610dec565b610507565b61019d610198366004610e87565b61057e565b6040519081526020016100f3565b610104610605565b61014f6101c1366004610ea2565b610614565b61014f6101d4366004610ef4565b610623565b6101046101e7366004610dec565b61065b565b6100e76101fa366004610fd0565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061025957506001600160e01b03198216635b5e139f60e01b145b8061027457506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461028990611003565b80601f01602080910402602001604051908101604052809291908181526020018280546102b590611003565b80156103025780601f106102d757610100808354040283529160200191610302565b820191906000526020600020905b8154815290600101906020018083116102e557829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661038a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006103b182610507565b9050806001600160a01b0316836001600160a01b03160361041e5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610381565b336001600160a01b038216148061043a575061043a81336101fa565b6104ac5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610381565b6104b68383610743565b505050565b6104c533826107b1565b6104e15760405162461bcd60e51b81526004016103819061103d565b6104b68383836108a8565b6104b683838360405180602001604052806000815250610623565b6000818152600260205260408120546001600160a01b0316806102745760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610381565b60006001600160a01b0382166105e95760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610381565b506001600160a01b031660009081526003602052604090205490565b60606001805461028990611003565b61061f338383610a48565b5050565b61062d33836107b1565b6106495760405162461bcd60e51b81526004016103819061103d565b61065584848484610b16565b50505050565b6000818152600260205260409020546060906001600160a01b03166106da5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610381565b60006106f160408051602081019091526000815290565b90506000815111610711576040518060200160405280600081525061073c565b8061071b84610b49565b60405160200161072c92919061108e565b6040516020818303038152906040525b9392505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061077882610507565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b031661082a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610381565b600061083583610507565b9050806001600160a01b0316846001600160a01b031614806108705750836001600160a01b03166108658461030c565b6001600160a01b0316145b806108a057506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166108bb82610507565b6001600160a01b0316146109235760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610381565b6001600160a01b0382166109855760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610381565b610990600082610743565b6001600160a01b03831660009081526003602052604081208054600192906109b99084906110d3565b90915550506001600160a01b03821660009081526003602052604081208054600192906109e79084906110ea565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b031603610aa95760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610381565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610b218484846108a8565b610b2d84848484610c4a565b6106555760405162461bcd60e51b815260040161038190611102565b606081600003610b705750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610b9a5780610b8481611154565b9150610b939050600a83611183565b9150610b74565b60008167ffffffffffffffff811115610bb557610bb5610ede565b6040519080825280601f01601f191660200182016040528015610bdf576020820181803683370190505b5090505b84156108a057610bf46001836110d3565b9150610c01600a86611197565b610c0c9060306110ea565b60f81b818381518110610c2157610c216111ab565b60200101906001600160f81b031916908160001a905350610c43600a86611183565b9450610be3565b60006001600160a01b0384163b15610d4057604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610c8e9033908990889088906004016111c1565b6020604051808303816000875af1925050508015610cc9575060408051601f3d908101601f19168201909252610cc6918101906111fe565b60015b610d26573d808015610cf7576040519150601f19603f3d011682016040523d82523d6000602084013e610cfc565b606091505b508051600003610d1e5760405162461bcd60e51b815260040161038190611102565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506108a0565b506001949350505050565b6001600160e01b031981168114610d6157600080fd5b50565b600060208284031215610d7657600080fd5b813561073c81610d4b565b60005b83811015610d9c578181015183820152602001610d84565b838111156106555750506000910152565b60008151808452610dc5816020860160208601610d81565b601f01601f19169290920160200192915050565b60208152600061073c6020830184610dad565b600060208284031215610dfe57600080fd5b5035919050565b80356001600160a01b0381168114610e1c57600080fd5b919050565b60008060408385031215610e3457600080fd5b610e3d83610e05565b946020939093013593505050565b600080600060608486031215610e6057600080fd5b610e6984610e05565b9250610e7760208501610e05565b9150604084013590509250925092565b600060208284031215610e9957600080fd5b61073c82610e05565b60008060408385031215610eb557600080fd5b610ebe83610e05565b915060208301358015158114610ed357600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610f0a57600080fd5b610f1385610e05565b9350610f2160208601610e05565b925060408501359150606085013567ffffffffffffffff80821115610f4557600080fd5b818701915087601f830112610f5957600080fd5b813581811115610f6b57610f6b610ede565b604051601f8201601f19908116603f01168101908382118183101715610f9357610f93610ede565b816040528281528a6020848701011115610fac57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215610fe357600080fd5b610fec83610e05565b9150610ffa60208401610e05565b90509250929050565b600181811c9082168061101757607f821691505b60208210810361103757634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600083516110a0818460208801610d81565b8351908301906110b4818360208801610d81565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156110e5576110e56110bd565b500390565b600082198211156110fd576110fd6110bd565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600060018201611166576111666110bd565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826111925761119261116d565b500490565b6000826111a6576111a661116d565b500690565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906111f490830184610dad565b9695505050505050565b60006020828403121561121057600080fd5b815161073c81610d4b56fea26469706673582212205a7990f6e21ce04126d88014343237026163eb550d89924fe4ea287983fe846264736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101b3578063b88d4fde146101c6578063c87b56dd146101d9578063e985e9c5146101ec57600080fd5b80636352211e1461017757806370a082311461018a57806395d89b41146101ab57600080fd5b806301ffc9a7146100d457806306fdde03146100fc578063081812fc14610111578063095ea7b31461013c57806323b872dd1461015157806342842e0e14610164575b600080fd5b6100e76100e2366004610d64565b610228565b60405190151581526020015b60405180910390f35b61010461027a565b6040516100f39190610dd9565b61012461011f366004610dec565b61030c565b6040516001600160a01b0390911681526020016100f3565b61014f61014a366004610e21565b6103a6565b005b61014f61015f366004610e4b565b6104bb565b61014f610172366004610e4b565b6104ec565b610124610185366004610dec565b610507565b61019d610198366004610e87565b61057e565b6040519081526020016100f3565b610104610605565b61014f6101c1366004610ea2565b610614565b61014f6101d4366004610ef4565b610623565b6101046101e7366004610dec565b61065b565b6100e76101fa366004610fd0565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061025957506001600160e01b03198216635b5e139f60e01b145b8061027457506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461028990611003565b80601f01602080910402602001604051908101604052809291908181526020018280546102b590611003565b80156103025780601f106102d757610100808354040283529160200191610302565b820191906000526020600020905b8154815290600101906020018083116102e557829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661038a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006103b182610507565b9050806001600160a01b0316836001600160a01b03160361041e5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610381565b336001600160a01b038216148061043a575061043a81336101fa565b6104ac5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610381565b6104b68383610743565b505050565b6104c533826107b1565b6104e15760405162461bcd60e51b81526004016103819061103d565b6104b68383836108a8565b6104b683838360405180602001604052806000815250610623565b6000818152600260205260408120546001600160a01b0316806102745760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610381565b60006001600160a01b0382166105e95760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610381565b506001600160a01b031660009081526003602052604090205490565b60606001805461028990611003565b61061f338383610a48565b5050565b61062d33836107b1565b6106495760405162461bcd60e51b81526004016103819061103d565b61065584848484610b16565b50505050565b6000818152600260205260409020546060906001600160a01b03166106da5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610381565b60006106f160408051602081019091526000815290565b90506000815111610711576040518060200160405280600081525061073c565b8061071b84610b49565b60405160200161072c92919061108e565b6040516020818303038152906040525b9392505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061077882610507565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b031661082a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610381565b600061083583610507565b9050806001600160a01b0316846001600160a01b031614806108705750836001600160a01b03166108658461030c565b6001600160a01b0316145b806108a057506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166108bb82610507565b6001600160a01b0316146109235760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610381565b6001600160a01b0382166109855760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610381565b610990600082610743565b6001600160a01b03831660009081526003602052604081208054600192906109b99084906110d3565b90915550506001600160a01b03821660009081526003602052604081208054600192906109e79084906110ea565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b031603610aa95760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610381565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610b218484846108a8565b610b2d84848484610c4a565b6106555760405162461bcd60e51b815260040161038190611102565b606081600003610b705750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610b9a5780610b8481611154565b9150610b939050600a83611183565b9150610b74565b60008167ffffffffffffffff811115610bb557610bb5610ede565b6040519080825280601f01601f191660200182016040528015610bdf576020820181803683370190505b5090505b84156108a057610bf46001836110d3565b9150610c01600a86611197565b610c0c9060306110ea565b60f81b818381518110610c2157610c216111ab565b60200101906001600160f81b031916908160001a905350610c43600a86611183565b9450610be3565b60006001600160a01b0384163b15610d4057604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610c8e9033908990889088906004016111c1565b6020604051808303816000875af1925050508015610cc9575060408051601f3d908101601f19168201909252610cc6918101906111fe565b60015b610d26573d808015610cf7576040519150601f19603f3d011682016040523d82523d6000602084013e610cfc565b606091505b508051600003610d1e5760405162461bcd60e51b815260040161038190611102565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506108a0565b506001949350505050565b6001600160e01b031981168114610d6157600080fd5b50565b600060208284031215610d7657600080fd5b813561073c81610d4b565b60005b83811015610d9c578181015183820152602001610d84565b838111156106555750506000910152565b60008151808452610dc5816020860160208601610d81565b601f01601f19169290920160200192915050565b60208152600061073c6020830184610dad565b600060208284031215610dfe57600080fd5b5035919050565b80356001600160a01b0381168114610e1c57600080fd5b919050565b60008060408385031215610e3457600080fd5b610e3d83610e05565b946020939093013593505050565b600080600060608486031215610e6057600080fd5b610e6984610e05565b9250610e7760208501610e05565b9150604084013590509250925092565b600060208284031215610e9957600080fd5b61073c82610e05565b60008060408385031215610eb557600080fd5b610ebe83610e05565b915060208301358015158114610ed357600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610f0a57600080fd5b610f1385610e05565b9350610f2160208601610e05565b925060408501359150606085013567ffffffffffffffff80821115610f4557600080fd5b818701915087601f830112610f5957600080fd5b813581811115610f6b57610f6b610ede565b604051601f8201601f19908116603f01168101908382118183101715610f9357610f93610ede565b816040528281528a6020848701011115610fac57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215610fe357600080fd5b610fec83610e05565b9150610ffa60208401610e05565b90509250929050565b600181811c9082168061101757607f821691505b60208210810361103757634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600083516110a0818460208801610d81565b8351908301906110b4818360208801610d81565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156110e5576110e56110bd565b500390565b600082198211156110fd576110fd6110bd565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600060018201611166576111666110bd565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826111925761119261116d565b500490565b6000826111a6576111a661116d565b500690565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906111f490830184610dad565b9695505050505050565b60006020828403121561121057600080fd5b815161073c81610d4b56fea26469706673582212205a7990f6e21ce04126d88014343237026163eb550d89924fe4ea287983fe846264736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name_", "type": "string", "internalType": "string"}, {"name": "symbol_", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "tokenURI", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.", "kind": "dev", "methods": {"approve(address,uint256)": {"details": "See {IERC721-approve}."}, "balanceOf(address)": {"details": "See {IERC721-balanceOf}."}, "constructor": {"details": "Initializes the contract by setting a `name` and a `symbol` to the token collection."}, "getApproved(uint256)": {"details": "See {IERC721-getApproved}."}, "isApprovedForAll(address,address)": {"details": "See {IERC721-isApprovedForAll}."}, "name()": {"details": "See {IERC721Metadata-name}."}, "ownerOf(uint256)": {"details": "See {IERC721-ownerOf}."}, "safeTransferFrom(address,address,uint256)": {"details": "See {IERC721-safeTransferFrom}."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "See {IERC721-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC721-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "symbol()": {"details": "See {IERC721Metadata-symbol}."}, "tokenURI(uint256)": {"details": "See {IERC721Metadata-tokenURI}."}, "transferFrom(address,address,uint256)": {"details": "See {IERC721-transferFrom}."}}, "version": 1}}, "IERC721": {"contractName": "IERC721", "sourceId": "token/ERC721/IERC721.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "balance", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "operator", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "owner", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "_approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Required interface of an ERC721 compliant contract.", "events": {"Approval(address,address,uint256)": {"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."}, "ApprovalForAll(address,address,bool)": {"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."}, "Transfer(address,address,uint256)": {"details": "Emitted when `tokenId` token is transferred from `from` to `to`."}}, "kind": "dev", "methods": {"approve(address,uint256)": {"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."}, "balanceOf(address)": {"details": "Returns the number of tokens in ``owner``'s account."}, "getApproved(uint256)": {"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."}, "isApprovedForAll(address,address)": {"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"}, "ownerOf(uint256)": {"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."}, "safeTransferFrom(address,address,uint256)": {"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."}, "setApprovalForAll(address,bool)": {"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."}, "supportsInterface(bytes4)": {"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}, "transferFrom(address,address,uint256)": {"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}}, "version": 1}}, "IERC721Receiver": {"contractName": "IERC721Receiver", "sourceId": "token/ERC721/IERC721Receiver.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "onERC721Received", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.", "kind": "dev", "methods": {"onERC721Received(address,address,uint256,bytes)": {"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`."}}, "title": "ERC721 token receiver interface", "version": 1}}, "ERC721Burnable": {"contractName": "ERC721Burnable", "sourceId": "token/ERC721/extensions/ERC721Burnable.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "tokenURI", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "ERC721 Token that can be irreversibly burned (destroyed).", "kind": "dev", "methods": {"approve(address,uint256)": {"details": "See {IERC721-approve}."}, "balanceOf(address)": {"details": "See {IERC721-balanceOf}."}, "burn(uint256)": {"details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."}, "getApproved(uint256)": {"details": "See {IERC721-getApproved}."}, "isApprovedForAll(address,address)": {"details": "See {IERC721-isApprovedForAll}."}, "name()": {"details": "See {IERC721Metadata-name}."}, "ownerOf(uint256)": {"details": "See {IERC721-ownerOf}."}, "safeTransferFrom(address,address,uint256)": {"details": "See {IERC721-safeTransferFrom}."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "See {IERC721-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC721-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "symbol()": {"details": "See {IERC721Metadata-symbol}."}, "tokenURI(uint256)": {"details": "See {IERC721Metadata-tokenURI}."}, "transferFrom(address,address,uint256)": {"details": "See {IERC721-transferFrom}."}}, "title": "ERC721 Burnable Token", "version": 1}}, "ERC721Enumerable": {"contractName": "ERC721Enumerable", "sourceId": "token/ERC721/extensions/ERC721Enumerable.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "tokenByIndex", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenOfOwnerByIndex", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenURI", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "This implements an optional extension of {ERC721} defined in the EIP that adds enumerability of all the token ids in the contract as well as all token ids owned by each account.", "kind": "dev", "methods": {"approve(address,uint256)": {"details": "See {IERC721-approve}."}, "balanceOf(address)": {"details": "See {IERC721-balanceOf}."}, "getApproved(uint256)": {"details": "See {IERC721-getApproved}."}, "isApprovedForAll(address,address)": {"details": "See {IERC721-isApprovedForAll}."}, "name()": {"details": "See {IERC721Metadata-name}."}, "ownerOf(uint256)": {"details": "See {IERC721-ownerOf}."}, "safeTransferFrom(address,address,uint256)": {"details": "See {IERC721-safeTransferFrom}."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "See {IERC721-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC721-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "symbol()": {"details": "See {IERC721Metadata-symbol}."}, "tokenByIndex(uint256)": {"details": "See {IERC721Enumerable-tokenByIndex}."}, "tokenOfOwnerByIndex(address,uint256)": {"details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."}, "tokenURI(uint256)": {"details": "See {IERC721Metadata-tokenURI}."}, "totalSupply()": {"details": "See {IERC721Enumerable-totalSupply}."}, "transferFrom(address,address,uint256)": {"details": "See {IERC721-transferFrom}."}}, "version": 1}}, "ERC721Pausable": {"contractName": "ERC721Pausable", "sourceId": "token/ERC721/extensions/ERC721Pausable.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Paused", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Unpaused", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "paused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "tokenURI", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "ERC721 token with pausable token transfers, minting and burning. Useful for scenarios such as preventing trades until the end of an evaluation period, or having an emergency switch for freezing all token transfers in the event of a large bug.", "kind": "dev", "methods": {"approve(address,uint256)": {"details": "See {IERC721-approve}."}, "balanceOf(address)": {"details": "See {IERC721-balanceOf}."}, "getApproved(uint256)": {"details": "See {IERC721-getApproved}."}, "isApprovedForAll(address,address)": {"details": "See {IERC721-isApprovedForAll}."}, "name()": {"details": "See {IERC721Metadata-name}."}, "ownerOf(uint256)": {"details": "See {IERC721-ownerOf}."}, "paused()": {"details": "Returns true if the contract is paused, and false otherwise."}, "safeTransferFrom(address,address,uint256)": {"details": "See {IERC721-safeTransferFrom}."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "See {IERC721-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC721-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "symbol()": {"details": "See {IERC721Metadata-symbol}."}, "tokenURI(uint256)": {"details": "See {IERC721Metadata-tokenURI}."}, "transferFrom(address,address,uint256)": {"details": "See {IERC721-transferFrom}."}}, "version": 1}}, "ERC721URIStorage": {"contractName": "ERC721URIStorage", "sourceId": "token/ERC721/extensions/ERC721URIStorage.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "tokenURI", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "ERC721 token with storage based token URI management.", "kind": "dev", "methods": {"approve(address,uint256)": {"details": "See {IERC721-approve}."}, "balanceOf(address)": {"details": "See {IERC721-balanceOf}."}, "getApproved(uint256)": {"details": "See {IERC721-getApproved}."}, "isApprovedForAll(address,address)": {"details": "See {IERC721-isApprovedForAll}."}, "name()": {"details": "See {IERC721Metadata-name}."}, "ownerOf(uint256)": {"details": "See {IERC721-ownerOf}."}, "safeTransferFrom(address,address,uint256)": {"details": "See {IERC721-safeTransferFrom}."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "See {IERC721-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC721-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "symbol()": {"details": "See {IERC721Metadata-symbol}."}, "tokenURI(uint256)": {"details": "See {IERC721Metadata-tokenURI}."}, "transferFrom(address,address,uint256)": {"details": "See {IERC721-transferFrom}."}}, "version": 1}}, "IERC721Enumerable": {"contractName": "IERC721Enumerable", "sourceId": "token/ERC721/extensions/IERC721Enumerable.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "balance", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "operator", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "owner", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "_approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "tokenByIndex", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenOfOwnerByIndex", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "See https://eips.ethereum.org/EIPS/eip-721", "kind": "dev", "methods": {"approve(address,uint256)": {"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."}, "balanceOf(address)": {"details": "Returns the number of tokens in ``owner``'s account."}, "getApproved(uint256)": {"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."}, "isApprovedForAll(address,address)": {"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"}, "ownerOf(uint256)": {"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."}, "safeTransferFrom(address,address,uint256)": {"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."}, "setApprovalForAll(address,bool)": {"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."}, "supportsInterface(bytes4)": {"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}, "tokenByIndex(uint256)": {"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."}, "tokenOfOwnerByIndex(address,uint256)": {"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."}, "totalSupply()": {"details": "Returns the total amount of tokens stored by the contract."}, "transferFrom(address,address,uint256)": {"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}}, "title": "ERC-721 Non-Fungible Token Standard, optional enumeration extension", "version": 1}}, "IERC721Metadata": {"contractName": "IERC721Metadata", "sourceId": "token/ERC721/extensions/IERC721Metadata.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "balance", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "operator", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "owner", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "_approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "tokenURI", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "See https://eips.ethereum.org/EIPS/eip-721", "kind": "dev", "methods": {"approve(address,uint256)": {"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."}, "balanceOf(address)": {"details": "Returns the number of tokens in ``owner``'s account."}, "getApproved(uint256)": {"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."}, "isApprovedForAll(address,address)": {"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"}, "name()": {"details": "Returns the token collection name."}, "ownerOf(uint256)": {"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."}, "safeTransferFrom(address,address,uint256)": {"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."}, "setApprovalForAll(address,bool)": {"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."}, "supportsInterface(bytes4)": {"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}, "symbol()": {"details": "Returns the token collection symbol."}, "tokenURI(uint256)": {"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."}, "transferFrom(address,address,uint256)": {"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}}, "title": "ERC-721 Non-Fungible Token Standard, optional metadata extension", "version": 1}}, "ERC721PresetMinterPauserAutoId": {"contractName": "ERC721PresetMinterPauserAutoId", "sourceId": "token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol", "deploymentBytecode": {"bytecode": "0x60806040523480156200001157600080fd5b5060405162002a6538038062002a658339810160408190526200003491620003cc565b8251839083906200004d90600290602085019062000259565b5080516200006390600390602084019062000259565b5050600c805460ff191690555080516200008590600e90602084019062000259565b5062000093600033620000f4565b620000bf7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633620000f4565b620000eb7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33620000f4565b50505062000499565b62000100828262000104565b5050565b6200011b82826200014760201b62000e311760201c565b60008281526001602090815260409091206200014291839062000eb5620001e7821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000100576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001a33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620001fe836001600160a01b03841662000207565b90505b92915050565b6000818152600183016020526040812054620002505750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000201565b50600062000201565b82805462000267906200045d565b90600052602060002090601f0160209004810192826200028b5760008555620002d6565b82601f10620002a657805160ff1916838001178555620002d6565b82800160010185558215620002d6579182015b82811115620002d6578251825591602001919060010190620002b9565b50620002e4929150620002e8565b5090565b5b80821115620002e45760008155600101620002e9565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200032757600080fd5b81516001600160401b0380821115620003445762000344620002ff565b604051601f8301601f19908116603f011681019082821181831017156200036f576200036f620002ff565b816040528381526020925086838588010111156200038c57600080fd5b600091505b83821015620003b0578582018301518183018401529082019062000391565b83821115620003c25760008385830101525b9695505050505050565b600080600060608486031215620003e257600080fd5b83516001600160401b0380821115620003fa57600080fd5b620004088783880162000315565b945060208601519150808211156200041f57600080fd5b6200042d8783880162000315565b935060408601519150808211156200044457600080fd5b50620004538682870162000315565b9150509250925092565b600181811c908216806200047257607f821691505b6020821081036200049357634e487b7160e01b600052602260045260246000fd5b50919050565b6125bc80620004a96000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80636352211e1161010f578063a22cb465116100a2578063d539139311610071578063d5391393146103f7578063d547741f1461041e578063e63ab1e914610431578063e985e9c51461045857600080fd5b8063a22cb465146103ab578063b88d4fde146103be578063c87b56dd146103d1578063ca15c873146103e457600080fd5b80639010d07c116100de5780639010d07c1461037557806391d148541461038857806395d89b411461039b578063a217fddf146103a357600080fd5b80636352211e146103345780636a6278421461034757806370a082311461035a5780638456cb591461036d57600080fd5b80632f2ff15d1161018757806342842e0e1161015657806342842e0e146102f057806342966c68146103035780634f6ccce7146103165780635c975abb1461032957600080fd5b80632f2ff15d146102af5780632f745c59146102c257806336568abe146102d55780633f4ba83a146102e857600080fd5b8063095ea7b3116101c3578063095ea7b31461025257806318160ddd1461026757806323b872dd14610279578063248a9ca31461028c57600080fd5b806301ffc9a7146101ea57806306fdde0314610212578063081812fc14610227575b600080fd5b6101fd6101f8366004611fc9565b610494565b60405190151581526020015b60405180910390f35b61021a6104a5565b604051610209919061203e565b61023a610235366004612051565b610537565b6040516001600160a01b039091168152602001610209565b610265610260366004612086565b6105d1565b005b600a545b604051908152602001610209565b6102656102873660046120b0565b6106e6565b61026b61029a366004612051565b60009081526020819052604090206001015490565b6102656102bd3660046120ec565b610718565b61026b6102d0366004612086565b61073e565b6102656102e33660046120ec565b6107d4565b610265610852565b6102656102fe3660046120b0565b6108fa565b610265610311366004612051565b610915565b61026b610324366004612051565b61098f565b600c5460ff166101fd565b61023a610342366004612051565b610a22565b610265610355366004612118565b610a99565b61026b610368366004612118565b610b55565b610265610bdc565b61023a610383366004612133565b610c80565b6101fd6103963660046120ec565b610c9f565b61021a610cc8565b61026b600081565b6102656103b9366004612155565b610cd7565b6102656103cc3660046121a7565b610ce2565b61021a6103df366004612051565b610d1a565b61026b6103f2366004612051565b610df4565b61026b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61026561042c3660046120ec565b610e0b565b61026b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6101fd610466366004612283565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b600061049f82610eca565b92915050565b6060600280546104b4906122ad565b80601f01602080910402602001604051908101604052809291908181526020018280546104e0906122ad565b801561052d5780601f106105025761010080835404028352916020019161052d565b820191906000526020600020905b81548152906001019060200180831161051057829003601f168201915b5050505050905090565b6000818152600460205260408120546001600160a01b03166105b55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006105dc82610a22565b9050806001600160a01b0316836001600160a01b0316036106495760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016105ac565b336001600160a01b038216148061066557506106658133610466565b6106d75760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016105ac565b6106e18383610eef565b505050565b6106f1335b82610f5d565b61070d5760405162461bcd60e51b81526004016105ac906122e7565b6106e1838383611054565b60008281526020819052604090206001015461073481336111ff565b6106e18383611263565b600061074983610b55565b82106107ab5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016105ac565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b6001600160a01b03811633146108445760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105ac565b61084e8282611285565b5050565b61087c7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610c9f565b6108f0576040805162461bcd60e51b81526020600482015260248101919091527f4552433732315072657365744d696e7465725061757365724175746f49643a2060448201527f6d75737420686176652070617573657220726f6c6520746f20756e706175736560648201526084016105ac565b6108f86112a7565b565b6106e183838360405180602001604052806000815250610ce2565b61091e336106eb565b6109835760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b60648201526084016105ac565b61098c8161133a565b50565b600061099a600a5490565b82106109fd5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016105ac565b600a8281548110610a1057610a10612338565b90600052602060002001549050919050565b6000818152600460205260408120546001600160a01b03168061049f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016105ac565b610ac37f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633610c9f565b610b355760405162461bcd60e51b815260206004820152603d60248201527f4552433732315072657365744d696e7465725061757365724175746f49643a2060448201527f6d7573742068617665206d696e74657220726f6c6520746f206d696e7400000060648201526084016105ac565b610b4781610b42600d5490565b6113e1565b61098c600d80546001019055565b60006001600160a01b038216610bc05760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016105ac565b506001600160a01b031660009081526005602052604090205490565b610c067f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610c9f565b610c785760405162461bcd60e51b815260206004820152603e60248201527f4552433732315072657365744d696e7465725061757365724175746f49643a2060448201527f6d75737420686176652070617573657220726f6c6520746f207061757365000060648201526084016105ac565b6108f861152f565b6000828152600160205260408120610c9890836115aa565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6060600380546104b4906122ad565b61084e3383836115b6565b610cec3383610f5d565b610d085760405162461bcd60e51b81526004016105ac906122e7565b610d1484848484611684565b50505050565b6000818152600460205260409020546060906001600160a01b0316610d995760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016105ac565b6000610da36116b7565b90506000815111610dc35760405180602001604052806000815250610c98565b80610dcd846116c6565b604051602001610dde92919061234e565b6040516020818303038152906040529392505050565b600081815260016020526040812061049f906117c7565b600082815260208190526040902060010154610e2781336111ff565b6106e18383611285565b610e3b8282610c9f565b61084e576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610e713390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610c98836001600160a01b0384166117d1565b60006001600160e01b0319821663780e9d6360e01b148061049f575061049f82611820565b600081815260066020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610f2482610a22565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600460205260408120546001600160a01b0316610fd65760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016105ac565b6000610fe183610a22565b9050806001600160a01b0316846001600160a01b0316148061101c5750836001600160a01b031661101184610537565b6001600160a01b0316145b8061104c57506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661106782610a22565b6001600160a01b0316146110cf5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016105ac565b6001600160a01b0382166111315760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105ac565b61113c838383611860565b611147600082610eef565b6001600160a01b0383166000908152600560205260408120805460019290611170908490612393565b90915550506001600160a01b038216600090815260056020526040812080546001929061119e9084906123aa565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6112098282610c9f565b61084e57611221816001600160a01b0316601461186b565b61122c83602061186b565b60405160200161123d9291906123c2565b60408051601f198184030181529082905262461bcd60e51b82526105ac9160040161203e565b61126d8282610e31565b60008281526001602052604090206106e19082610eb5565b61128f8282611a07565b60008281526001602052604090206106e19082611a6c565b600c5460ff166112f05760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105ac565b600c805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600061134582610a22565b905061135381600084611860565b61135e600083610eef565b6001600160a01b0381166000908152600560205260408120805460019290611387908490612393565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0382166114375760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105ac565b6000818152600460205260409020546001600160a01b03161561149c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105ac565b6114a860008383611860565b6001600160a01b03821660009081526005602052604081208054600192906114d19084906123aa565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600c5460ff16156115755760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105ac565b600c805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861131d3390565b6000610c988383611a81565b816001600160a01b0316836001600160a01b0316036116175760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105ac565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61168f848484611054565b61169b84848484611aab565b610d145760405162461bcd60e51b81526004016105ac90612437565b6060600e80546104b4906122ad565b6060816000036116ed5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611717578061170181612489565b91506117109050600a836124b8565b91506116f1565b60008167ffffffffffffffff81111561173257611732612191565b6040519080825280601f01601f19166020018201604052801561175c576020820181803683370190505b5090505b841561104c57611771600183612393565b915061177e600a866124cc565b6117899060306123aa565b60f81b81838151811061179e5761179e612338565b60200101906001600160f81b031916908160001a9053506117c0600a866124b8565b9450611760565b600061049f825490565b60008181526001830160205260408120546118185750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561049f565b50600061049f565b60006001600160e01b031982166380ac58cd60e01b148061185157506001600160e01b03198216635b5e139f60e01b145b8061049f575061049f82611bac565b6106e1838383611bd1565b6060600061187a8360026124e0565b6118859060026123aa565b67ffffffffffffffff81111561189d5761189d612191565b6040519080825280601f01601f1916602001820160405280156118c7576020820181803683370190505b509050600360fc1b816000815181106118e2576118e2612338565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061191157611911612338565b60200101906001600160f81b031916908160001a90535060006119358460026124e0565b6119409060016123aa565b90505b60018111156119b8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061197457611974612338565b1a60f81b82828151811061198a5761198a612338565b60200101906001600160f81b031916908160001a90535060049490941c936119b1816124ff565b9050611943565b508315610c985760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105ac565b611a118282610c9f565b1561084e576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610c98836001600160a01b038416611c43565b6000826000018281548110611a9857611a98612338565b9060005260206000200154905092915050565b60006001600160a01b0384163b15611ba157604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611aef903390899088908890600401612516565b6020604051808303816000875af1925050508015611b2a575060408051601f3d908101601f19168201909252611b2791810190612553565b60015b611b87573d808015611b58576040519150601f19603f3d011682016040523d82523d6000602084013e611b5d565b606091505b508051600003611b7f5760405162461bcd60e51b81526004016105ac90612437565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061104c565b506001949350505050565b60006001600160e01b03198216635a05180f60e01b148061049f575061049f82611d36565b611bdc838383611d6b565b600c5460ff16156106e15760405162461bcd60e51b815260206004820152602b60248201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760448201526a1a1a5b19481c185d5cd95960aa1b60648201526084016105ac565b60008181526001830160205260408120548015611d2c576000611c67600183612393565b8554909150600090611c7b90600190612393565b9050818114611ce0576000866000018281548110611c9b57611c9b612338565b9060005260206000200154905080876000018481548110611cbe57611cbe612338565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611cf157611cf1612570565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061049f565b600091505061049f565b60006001600160e01b03198216637965db0b60e01b148061049f57506301ffc9a760e01b6001600160e01b031983161461049f565b6001600160a01b038316611dc657611dc181600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b611de9565b816001600160a01b0316836001600160a01b031614611de957611de98382611e23565b6001600160a01b038216611e00576106e181611ec0565b826001600160a01b0316826001600160a01b0316146106e1576106e18282611f6f565b60006001611e3084610b55565b611e3a9190612393565b600083815260096020526040902054909150808214611e8d576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a54600090611ed290600190612393565b6000838152600b6020526040812054600a8054939450909284908110611efa57611efa612338565b9060005260206000200154905080600a8381548110611f1b57611f1b612338565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a805480611f5357611f53612570565b6001900381819060005260206000200160009055905550505050565b6000611f7a83610b55565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b6001600160e01b03198116811461098c57600080fd5b600060208284031215611fdb57600080fd5b8135610c9881611fb3565b60005b83811015612001578181015183820152602001611fe9565b83811115610d145750506000910152565b6000815180845261202a816020860160208601611fe6565b601f01601f19169290920160200192915050565b602081526000610c986020830184612012565b60006020828403121561206357600080fd5b5035919050565b80356001600160a01b038116811461208157600080fd5b919050565b6000806040838503121561209957600080fd5b6120a28361206a565b946020939093013593505050565b6000806000606084860312156120c557600080fd5b6120ce8461206a565b92506120dc6020850161206a565b9150604084013590509250925092565b600080604083850312156120ff57600080fd5b8235915061210f6020840161206a565b90509250929050565b60006020828403121561212a57600080fd5b610c988261206a565b6000806040838503121561214657600080fd5b50508035926020909101359150565b6000806040838503121561216857600080fd5b6121718361206a565b91506020830135801515811461218657600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156121bd57600080fd5b6121c68561206a565b93506121d46020860161206a565b925060408501359150606085013567ffffffffffffffff808211156121f857600080fd5b818701915087601f83011261220c57600080fd5b81358181111561221e5761221e612191565b604051601f8201601f19908116603f0116810190838211818310171561224657612246612191565b816040528281528a602084870101111561225f57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561229657600080fd5b61229f8361206a565b915061210f6020840161206a565b600181811c908216806122c157607f821691505b6020821081036122e157634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008351612360818460208801611fe6565b835190830190612374818360208801611fe6565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156123a5576123a561237d565b500390565b600082198211156123bd576123bd61237d565b500190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516123fa816017850160208801611fe6565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161242b816028840160208801611fe6565b01602801949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60006001820161249b5761249b61237d565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826124c7576124c76124a2565b500490565b6000826124db576124db6124a2565b500690565b60008160001904831182151516156124fa576124fa61237d565b500290565b60008161250e5761250e61237d565b506000190190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061254990830184612012565b9695505050505050565b60006020828403121561256557600080fd5b8151610c9881611fb3565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220b12b77e82152249055f69fb146a3c4fa5268f3a36c95ea212d2a19671da144f164736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c80636352211e1161010f578063a22cb465116100a2578063d539139311610071578063d5391393146103f7578063d547741f1461041e578063e63ab1e914610431578063e985e9c51461045857600080fd5b8063a22cb465146103ab578063b88d4fde146103be578063c87b56dd146103d1578063ca15c873146103e457600080fd5b80639010d07c116100de5780639010d07c1461037557806391d148541461038857806395d89b411461039b578063a217fddf146103a357600080fd5b80636352211e146103345780636a6278421461034757806370a082311461035a5780638456cb591461036d57600080fd5b80632f2ff15d1161018757806342842e0e1161015657806342842e0e146102f057806342966c68146103035780634f6ccce7146103165780635c975abb1461032957600080fd5b80632f2ff15d146102af5780632f745c59146102c257806336568abe146102d55780633f4ba83a146102e857600080fd5b8063095ea7b3116101c3578063095ea7b31461025257806318160ddd1461026757806323b872dd14610279578063248a9ca31461028c57600080fd5b806301ffc9a7146101ea57806306fdde0314610212578063081812fc14610227575b600080fd5b6101fd6101f8366004611fc9565b610494565b60405190151581526020015b60405180910390f35b61021a6104a5565b604051610209919061203e565b61023a610235366004612051565b610537565b6040516001600160a01b039091168152602001610209565b610265610260366004612086565b6105d1565b005b600a545b604051908152602001610209565b6102656102873660046120b0565b6106e6565b61026b61029a366004612051565b60009081526020819052604090206001015490565b6102656102bd3660046120ec565b610718565b61026b6102d0366004612086565b61073e565b6102656102e33660046120ec565b6107d4565b610265610852565b6102656102fe3660046120b0565b6108fa565b610265610311366004612051565b610915565b61026b610324366004612051565b61098f565b600c5460ff166101fd565b61023a610342366004612051565b610a22565b610265610355366004612118565b610a99565b61026b610368366004612118565b610b55565b610265610bdc565b61023a610383366004612133565b610c80565b6101fd6103963660046120ec565b610c9f565b61021a610cc8565b61026b600081565b6102656103b9366004612155565b610cd7565b6102656103cc3660046121a7565b610ce2565b61021a6103df366004612051565b610d1a565b61026b6103f2366004612051565b610df4565b61026b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61026561042c3660046120ec565b610e0b565b61026b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6101fd610466366004612283565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b600061049f82610eca565b92915050565b6060600280546104b4906122ad565b80601f01602080910402602001604051908101604052809291908181526020018280546104e0906122ad565b801561052d5780601f106105025761010080835404028352916020019161052d565b820191906000526020600020905b81548152906001019060200180831161051057829003601f168201915b5050505050905090565b6000818152600460205260408120546001600160a01b03166105b55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006105dc82610a22565b9050806001600160a01b0316836001600160a01b0316036106495760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016105ac565b336001600160a01b038216148061066557506106658133610466565b6106d75760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016105ac565b6106e18383610eef565b505050565b6106f1335b82610f5d565b61070d5760405162461bcd60e51b81526004016105ac906122e7565b6106e1838383611054565b60008281526020819052604090206001015461073481336111ff565b6106e18383611263565b600061074983610b55565b82106107ab5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016105ac565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b6001600160a01b03811633146108445760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105ac565b61084e8282611285565b5050565b61087c7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610c9f565b6108f0576040805162461bcd60e51b81526020600482015260248101919091527f4552433732315072657365744d696e7465725061757365724175746f49643a2060448201527f6d75737420686176652070617573657220726f6c6520746f20756e706175736560648201526084016105ac565b6108f86112a7565b565b6106e183838360405180602001604052806000815250610ce2565b61091e336106eb565b6109835760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b60648201526084016105ac565b61098c8161133a565b50565b600061099a600a5490565b82106109fd5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016105ac565b600a8281548110610a1057610a10612338565b90600052602060002001549050919050565b6000818152600460205260408120546001600160a01b03168061049f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016105ac565b610ac37f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633610c9f565b610b355760405162461bcd60e51b815260206004820152603d60248201527f4552433732315072657365744d696e7465725061757365724175746f49643a2060448201527f6d7573742068617665206d696e74657220726f6c6520746f206d696e7400000060648201526084016105ac565b610b4781610b42600d5490565b6113e1565b61098c600d80546001019055565b60006001600160a01b038216610bc05760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016105ac565b506001600160a01b031660009081526005602052604090205490565b610c067f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610c9f565b610c785760405162461bcd60e51b815260206004820152603e60248201527f4552433732315072657365744d696e7465725061757365724175746f49643a2060448201527f6d75737420686176652070617573657220726f6c6520746f207061757365000060648201526084016105ac565b6108f861152f565b6000828152600160205260408120610c9890836115aa565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6060600380546104b4906122ad565b61084e3383836115b6565b610cec3383610f5d565b610d085760405162461bcd60e51b81526004016105ac906122e7565b610d1484848484611684565b50505050565b6000818152600460205260409020546060906001600160a01b0316610d995760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016105ac565b6000610da36116b7565b90506000815111610dc35760405180602001604052806000815250610c98565b80610dcd846116c6565b604051602001610dde92919061234e565b6040516020818303038152906040529392505050565b600081815260016020526040812061049f906117c7565b600082815260208190526040902060010154610e2781336111ff565b6106e18383611285565b610e3b8282610c9f565b61084e576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610e713390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610c98836001600160a01b0384166117d1565b60006001600160e01b0319821663780e9d6360e01b148061049f575061049f82611820565b600081815260066020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610f2482610a22565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600460205260408120546001600160a01b0316610fd65760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016105ac565b6000610fe183610a22565b9050806001600160a01b0316846001600160a01b0316148061101c5750836001600160a01b031661101184610537565b6001600160a01b0316145b8061104c57506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661106782610a22565b6001600160a01b0316146110cf5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016105ac565b6001600160a01b0382166111315760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105ac565b61113c838383611860565b611147600082610eef565b6001600160a01b0383166000908152600560205260408120805460019290611170908490612393565b90915550506001600160a01b038216600090815260056020526040812080546001929061119e9084906123aa565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6112098282610c9f565b61084e57611221816001600160a01b0316601461186b565b61122c83602061186b565b60405160200161123d9291906123c2565b60408051601f198184030181529082905262461bcd60e51b82526105ac9160040161203e565b61126d8282610e31565b60008281526001602052604090206106e19082610eb5565b61128f8282611a07565b60008281526001602052604090206106e19082611a6c565b600c5460ff166112f05760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105ac565b600c805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600061134582610a22565b905061135381600084611860565b61135e600083610eef565b6001600160a01b0381166000908152600560205260408120805460019290611387908490612393565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0382166114375760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105ac565b6000818152600460205260409020546001600160a01b03161561149c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105ac565b6114a860008383611860565b6001600160a01b03821660009081526005602052604081208054600192906114d19084906123aa565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600c5460ff16156115755760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105ac565b600c805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861131d3390565b6000610c988383611a81565b816001600160a01b0316836001600160a01b0316036116175760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105ac565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61168f848484611054565b61169b84848484611aab565b610d145760405162461bcd60e51b81526004016105ac90612437565b6060600e80546104b4906122ad565b6060816000036116ed5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611717578061170181612489565b91506117109050600a836124b8565b91506116f1565b60008167ffffffffffffffff81111561173257611732612191565b6040519080825280601f01601f19166020018201604052801561175c576020820181803683370190505b5090505b841561104c57611771600183612393565b915061177e600a866124cc565b6117899060306123aa565b60f81b81838151811061179e5761179e612338565b60200101906001600160f81b031916908160001a9053506117c0600a866124b8565b9450611760565b600061049f825490565b60008181526001830160205260408120546118185750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561049f565b50600061049f565b60006001600160e01b031982166380ac58cd60e01b148061185157506001600160e01b03198216635b5e139f60e01b145b8061049f575061049f82611bac565b6106e1838383611bd1565b6060600061187a8360026124e0565b6118859060026123aa565b67ffffffffffffffff81111561189d5761189d612191565b6040519080825280601f01601f1916602001820160405280156118c7576020820181803683370190505b509050600360fc1b816000815181106118e2576118e2612338565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061191157611911612338565b60200101906001600160f81b031916908160001a90535060006119358460026124e0565b6119409060016123aa565b90505b60018111156119b8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061197457611974612338565b1a60f81b82828151811061198a5761198a612338565b60200101906001600160f81b031916908160001a90535060049490941c936119b1816124ff565b9050611943565b508315610c985760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105ac565b611a118282610c9f565b1561084e576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610c98836001600160a01b038416611c43565b6000826000018281548110611a9857611a98612338565b9060005260206000200154905092915050565b60006001600160a01b0384163b15611ba157604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611aef903390899088908890600401612516565b6020604051808303816000875af1925050508015611b2a575060408051601f3d908101601f19168201909252611b2791810190612553565b60015b611b87573d808015611b58576040519150601f19603f3d011682016040523d82523d6000602084013e611b5d565b606091505b508051600003611b7f5760405162461bcd60e51b81526004016105ac90612437565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061104c565b506001949350505050565b60006001600160e01b03198216635a05180f60e01b148061049f575061049f82611d36565b611bdc838383611d6b565b600c5460ff16156106e15760405162461bcd60e51b815260206004820152602b60248201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760448201526a1a1a5b19481c185d5cd95960aa1b60648201526084016105ac565b60008181526001830160205260408120548015611d2c576000611c67600183612393565b8554909150600090611c7b90600190612393565b9050818114611ce0576000866000018281548110611c9b57611c9b612338565b9060005260206000200154905080876000018481548110611cbe57611cbe612338565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611cf157611cf1612570565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061049f565b600091505061049f565b60006001600160e01b03198216637965db0b60e01b148061049f57506301ffc9a760e01b6001600160e01b031983161461049f565b6001600160a01b038316611dc657611dc181600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b611de9565b816001600160a01b0316836001600160a01b031614611de957611de98382611e23565b6001600160a01b038216611e00576106e181611ec0565b826001600160a01b0316826001600160a01b0316146106e1576106e18282611f6f565b60006001611e3084610b55565b611e3a9190612393565b600083815260096020526040902054909150808214611e8d576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a54600090611ed290600190612393565b6000838152600b6020526040812054600a8054939450909284908110611efa57611efa612338565b9060005260206000200154905080600a8381548110611f1b57611f1b612338565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a805480611f5357611f53612570565b6001900381819060005260206000200160009055905550505050565b6000611f7a83610b55565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b6001600160e01b03198116811461098c57600080fd5b600060208284031215611fdb57600080fd5b8135610c9881611fb3565b60005b83811015612001578181015183820152602001611fe9565b83811115610d145750506000910152565b6000815180845261202a816020860160208601611fe6565b601f01601f19169290920160200192915050565b602081526000610c986020830184612012565b60006020828403121561206357600080fd5b5035919050565b80356001600160a01b038116811461208157600080fd5b919050565b6000806040838503121561209957600080fd5b6120a28361206a565b946020939093013593505050565b6000806000606084860312156120c557600080fd5b6120ce8461206a565b92506120dc6020850161206a565b9150604084013590509250925092565b600080604083850312156120ff57600080fd5b8235915061210f6020840161206a565b90509250929050565b60006020828403121561212a57600080fd5b610c988261206a565b6000806040838503121561214657600080fd5b50508035926020909101359150565b6000806040838503121561216857600080fd5b6121718361206a565b91506020830135801515811461218657600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156121bd57600080fd5b6121c68561206a565b93506121d46020860161206a565b925060408501359150606085013567ffffffffffffffff808211156121f857600080fd5b818701915087601f83011261220c57600080fd5b81358181111561221e5761221e612191565b604051601f8201601f19908116603f0116810190838211818310171561224657612246612191565b816040528281528a602084870101111561225f57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561229657600080fd5b61229f8361206a565b915061210f6020840161206a565b600181811c908216806122c157607f821691505b6020821081036122e157634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008351612360818460208801611fe6565b835190830190612374818360208801611fe6565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156123a5576123a561237d565b500390565b600082198211156123bd576123bd61237d565b500190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516123fa816017850160208801611fe6565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161242b816028840160208801611fe6565b01602801949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60006001820161249b5761249b61237d565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826124c7576124c76124a2565b500490565b6000826124db576124db6124a2565b500690565b60008160001904831182151516156124fa576124fa61237d565b500290565b60008161250e5761250e61237d565b506000190190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061254990830184612012565b9695505050505050565b60006020828403121561256557600080fd5b8151610c9881611fb3565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220b12b77e82152249055f69fb146a3c4fa5268f3a36c95ea212d2a19671da144f164736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}, {"name": "baseTokenURI", "type": "string", "internalType": "string"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "approved", "type": "bool", "internalType": "bool", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Paused", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "event", "name": "RoleAdminChanged", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "previousAdminRole", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "newAdminRole", "type": "bytes32", "internalType": "bytes32", "indexed": true}], "anonymous": false}, {"type": "event", "name": "RoleGranted", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "sender", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "RoleRevoked", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "sender", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "internalType": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Unpaused", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": false}], "anonymous": false}, {"type": "function", "name": "DEFAULT_ADMIN_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "MINTER_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "PAUSER_ROLE", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getRoleAdmin", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "getRoleMember", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getRoleMemberCount", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "grantRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "hasRole", "stateMutability": "view", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "operator", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "to", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "pause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "paused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "renounceRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "revokeRole", "stateMutability": "nonpayable", "inputs": [{"name": "role", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}, {"name": "_data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "approved", "type": "bool", "internalType": "bool"}], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "tokenByIndex", "stateMutability": "view", "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenOfOwnerByIndex", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}, {"name": "index", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "tokenURI", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "tokenId", "type": "uint256", "internalType": "uint256"}], "outputs": []}, {"type": "function", "name": "unpause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "{ERC721} token, including:  - ability for holders to burn (destroy) their tokens  - a minter role that allows for token minting (creation)  - a pauser role that allows to stop all token transfers  - token ID and URI autogeneration This contract uses {AccessControl} to lock permissioned functions using the different roles - head to its documentation for details. The account that deploys the contract will be granted the minter and pauser roles, as well as the default admin role, which will let it grant both minter and pauser roles to other accounts.", "kind": "dev", "methods": {"approve(address,uint256)": {"details": "See {IERC721-approve}."}, "balanceOf(address)": {"details": "See {IERC721-balanceOf}."}, "burn(uint256)": {"details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."}, "constructor": {"details": "Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the account that deploys the contract. Token URIs will be autogenerated based on `baseURI` and their token IDs. See {ERC721-tokenURI}."}, "getApproved(uint256)": {"details": "See {IERC721-getApproved}."}, "getRoleAdmin(bytes32)": {"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."}, "getRoleMember(bytes32,uint256)": {"details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."}, "getRoleMemberCount(bytes32)": {"details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."}, "grantRole(bytes32,address)": {"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."}, "hasRole(bytes32,address)": {"details": "Returns `true` if `account` has been granted `role`."}, "isApprovedForAll(address,address)": {"details": "See {IERC721-isApprovedForAll}."}, "mint(address)": {"details": "Creates a new token for `to`. Its token ID will be automatically assigned (and available on the emitted {IERC721-Transfer} event), and the token URI autogenerated based on the base URI passed at construction. See {ERC721-_mint}. Requirements: - the caller must have the `MINTER_ROLE`."}, "name()": {"details": "See {IERC721Metadata-name}."}, "ownerOf(uint256)": {"details": "See {IERC721-ownerOf}."}, "pause()": {"details": "Pauses all token transfers. See {ERC721Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`."}, "paused()": {"details": "Returns true if the contract is paused, and false otherwise."}, "renounceRole(bytes32,address)": {"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."}, "revokeRole(bytes32,address)": {"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}, "safeTransferFrom(address,address,uint256)": {"details": "See {IERC721-safeTransferFrom}."}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "See {IERC721-safeTransferFrom}."}, "setApprovalForAll(address,bool)": {"details": "See {IERC721-setApprovalForAll}."}, "supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}, "symbol()": {"details": "See {IERC721Metadata-symbol}."}, "tokenByIndex(uint256)": {"details": "See {IERC721Enumerable-tokenByIndex}."}, "tokenOfOwnerByIndex(address,uint256)": {"details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."}, "tokenURI(uint256)": {"details": "See {IERC721Metadata-tokenURI}."}, "totalSupply()": {"details": "See {IERC721Enumerable-totalSupply}."}, "transferFrom(address,address,uint256)": {"details": "See {IERC721-transferFrom}."}, "unpause()": {"details": "Unpauses all token transfers. See {ERC721Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`."}}, "version": 1}}, "ERC721Holder": {"contractName": "ERC721Holder", "sourceId": "token/ERC721/utils/ERC721Holder.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506101af806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b61004e61003e36600461009d565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200160405180910390f35b80356001600160a01b038116811461008257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156100b357600080fd5b6100bc8561006b565b93506100ca6020860161006b565b925060408501359150606085013567ffffffffffffffff808211156100ee57600080fd5b818701915087601f83011261010257600080fd5b81358181111561011457610114610087565b604051601f8201601f19908116603f0116810190838211818310171561013c5761013c610087565b816040528281528a602084870101111561015557600080fd5b8260208601602083013760006020848301015280955050505050509295919450925056fea2646970667358221220c9bd9f8fba7ae2c97a52452ffca6f07f70251d77acd5605003a63a1917ca8bd964736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b61004e61003e36600461009d565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200160405180910390f35b80356001600160a01b038116811461008257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156100b357600080fd5b6100bc8561006b565b93506100ca6020860161006b565b925060408501359150606085013567ffffffffffffffff808211156100ee57600080fd5b818701915087601f83011261010257600080fd5b81358181111561011457610114610087565b604051601f8201601f19908116603f0116810190838211818310171561013c5761013c610087565b816040528281528a602084870101111561015557600080fd5b8260208601602083013760006020848301015280955050505050509295919450925056fea2646970667358221220c9bd9f8fba7ae2c97a52452ffca6f07f70251d77acd5605003a63a1917ca8bd964736f6c634300080d0033"}, "abi": [{"type": "function", "name": "onERC721Received", "stateMutability": "nonpayable", "inputs": [{"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "address", "internalType": "address"}, {"name": "", "type": "uint256", "internalType": "uint256"}, {"name": "", "type": "bytes", "internalType": "bytes"}], "outputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Implementation of the {IERC721Receiver} interface. Accepts all token transfers. Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.", "kind": "dev", "methods": {"onERC721Received(address,address,uint256,bytes)": {"details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."}}, "version": 1}}, "ERC777": {"contractName": "ERC777", "sourceId": "token/ERC777/ERC777.sol", "deploymentBytecode": {"bytecode": "0x60806040523480156200001157600080fd5b5060405162001d4038038062001d408339810160408190526200003491620003f1565b82516200004990600290602086019062000215565b5081516200005f90600390602085019062000215565b50805162000075906004906020840190620002a4565b5060005b8151811015620000e5576001600560008484815181106200009e576200009e62000508565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620000dc816200051e565b91505062000079565b506040516329965a1d60e01b815230600482018190527fac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce217705460248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b1580156200016057600080fd5b505af115801562000175573d6000803e3d6000fd5b50506040516329965a1d60e01b815230600482018190527faea199e31a596269b42cdafd93407f14436db6e4cad65417994c2eb37381e05a60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad2492506329965a1d9150606401600060405180830381600087803b158015620001f357600080fd5b505af115801562000208573d6000803e3d6000fd5b5050505050505062000582565b828054620002239062000546565b90600052602060002090601f01602090048101928262000247576000855562000292565b82601f106200026257805160ff191683800117855562000292565b8280016001018555821562000292579182015b828111156200029257825182559160200191906001019062000275565b50620002a0929150620002fc565b5090565b82805482825590600052602060002090810192821562000292579160200282015b828111156200029257825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620002c5565b5b80821115620002a05760008155600101620002fd565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562000354576200035462000313565b604052919050565b600082601f8301126200036e57600080fd5b81516001600160401b038111156200038a576200038a62000313565b6020620003a0601f8301601f1916820162000329565b8281528582848701011115620003b557600080fd5b60005b83811015620003d5578581018301518282018401528201620003b8565b83811115620003e75760008385840101525b5095945050505050565b6000806000606084860312156200040757600080fd5b83516001600160401b03808211156200041f57600080fd5b6200042d878388016200035c565b94506020915081860151818111156200044557600080fd5b62000453888289016200035c565b9450506040860151818111156200046957600080fd5b8601601f810188136200047b57600080fd5b80518281111562000490576200049062000313565b8060051b9250620004a384840162000329565b818152928201840192848101908a851115620004be57600080fd5b928501925b84841015620004f857835192506001600160a01b0383168314620004e75760008081fd5b8282529285019290850190620004c3565b8096505050505050509250925092565b634e487b7160e01b600052603260045260246000fd5b6000600182016200053f57634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c908216806200055b57607f821691505b6020821081036200057c57634e487b7160e01b600052602260045260246000fd5b50919050565b6117ae80620005926000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063959b8c3f116100a2578063d95b637111610071578063d95b63711461022b578063dd62ed3e1461023e578063fad8b32a14610277578063fc673c4f1461028a578063fe9d93031461029d57600080fd5b8063959b8c3f146101ea57806395d89b41146101fd5780639bd9bbc614610205578063a9059cbb1461021857600080fd5b806323b872dd116100e957806323b872dd14610183578063313ce56714610196578063556f0dc7146101a557806362ad1b83146101ac57806370a08231146101c157600080fd5b806306e485381461011b57806306fdde0314610139578063095ea7b31461014e57806318160ddd14610171575b600080fd5b6101236102b0565b60405161013091906111df565b60405180910390f35b610141610312565b6040516101309190611279565b61016161015c3660046112a4565b61039b565b6040519015158152602001610130565b6001545b604051908152602001610130565b6101616101913660046112d0565b6103b3565b60405160128152602001610130565b6001610175565b6101bf6101ba3660046113b4565b61057c565b005b6101756101cf366004611447565b6001600160a01b031660009081526020819052604090205490565b6101bf6101f8366004611447565b6105b8565b6101416106d5565b6101bf610213366004611464565b6106e4565b6101616102263660046112a4565b610707565b6101616102393660046114bd565b6107ba565b61017561024c3660046114bd565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b6101bf610285366004611447565b61085c565b6101bf6102983660046114f6565b610977565b6101bf6102ab366004611576565b6109af565b6060600480548060200260200160405190810160405280929190818152602001828054801561030857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102ea575b5050505050905090565b606060028054610321906115bd565b80601f016020809104026020016040519081016040528092919081815260200182805461034d906115bd565b80156103085780601f1061036f57610100808354040283529160200191610308565b820191906000526020600020905b81548152906001019060200180831161037d57509395945050505050565b6000336103a98185856109ce565b5060019392505050565b60006001600160a01b0383166103e45760405162461bcd60e51b81526004016103db906115f7565b60405180910390fd5b6001600160a01b0384166104495760405162461bcd60e51b815260206004820152602660248201527f4552433737373a207472616e736665722066726f6d20746865207a65726f206160448201526564647265737360d01b60648201526084016103db565b600033905061047a818686866040518060200160405280600081525060405180602001604052806000815250610af5565b6104a6818686866040518060200160405280600081525060405180602001604052806000815250610c1d565b6001600160a01b038086166000908152600860209081526040808320938516835292905220548381101561052e5760405162461bcd60e51b815260206004820152602960248201527f4552433737373a207472616e7366657220616d6f756e74206578636565647320604482015268616c6c6f77616e636560b81b60648201526084016103db565b610542868361053d8785611651565b6109ce565b6105708287878760405180602001604052806000815250604051806020016040528060008152506000610d83565b50600195945050505050565b61058633866107ba565b6105a25760405162461bcd60e51b81526004016103db90611668565b6105b185858585856001610f48565b5050505050565b6001600160a01b038116330361061c5760405162461bcd60e51b8152602060048201526024808201527f4552433737373a20617574686f72697a696e672073656c66206173206f70657260448201526330ba37b960e11b60648201526084016103db565b6001600160a01b03811660009081526005602052604090205460ff161561066d573360009081526007602090815260408083206001600160a01b03851684529091529020805460ff1916905561069c565b3360009081526006602090815260408083206001600160a01b03851684529091529020805460ff191660011790555b60405133906001600160a01b038316907ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f990600090a350565b606060038054610321906115bd565b61070233848484604051806020016040528060008152506001610f48565b505050565b60006001600160a01b03831661072f5760405162461bcd60e51b81526004016103db906115f7565b6000339050610760818286866040518060200160405280600081525060405180602001604052806000815250610af5565b61078c818286866040518060200160405280600081525060405180602001604052806000815250610c1d565b6103a98182868660405180602001604052806000815250604051806020016040528060008152506000610d83565b6000816001600160a01b0316836001600160a01b0316148061082557506001600160a01b03831660009081526005602052604090205460ff16801561082557506001600160a01b0380831660009081526007602090815260408083209387168352929052205460ff16155b8061085557506001600160a01b0380831660009081526006602090815260408083209387168352929052205460ff165b9392505050565b336001600160a01b038216036108be5760405162461bcd60e51b815260206004820152602160248201527f4552433737373a207265766f6b696e672073656c66206173206f70657261746f6044820152603960f91b60648201526084016103db565b6001600160a01b03811660009081526005602052604090205460ff1615610912573360009081526007602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561093e565b3360009081526006602090815260408083206001600160a01b03851684529091529020805460ff191690555b60405133906001600160a01b038316907f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa190600090a350565b61098133856107ba565b61099d5760405162461bcd60e51b81526004016103db90611668565b6109a98484848461102b565b50505050565b6109ca3383836040518060200160405280600081525061102b565b5050565b6001600160a01b038316610a325760405162461bcd60e51b815260206004820152602560248201527f4552433737373a20617070726f76652066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103db565b6001600160a01b038216610a945760405162461bcd60e51b815260206004820152602360248201527f4552433737373a20617070726f766520746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103db565b6001600160a01b0383811660008181526008602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe8956024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa158015610b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9a91906116b4565b90506001600160a01b03811615610c1457604051633ad5cbc160e11b81526001600160a01b038216906375ab978290610be1908a908a908a908a908a908a906004016116d1565b600060405180830381600087803b158015610bfb57600080fd5b505af1158015610c0f573d6000803e3d6000fd5b505050505b50505050505050565b6001600160a01b03851660009081526020819052604090205483811015610c965760405162461bcd60e51b815260206004820152602760248201527f4552433737373a207472616e7366657220616d6f756e7420657863656564732060448201526662616c616e636560c81b60648201526084016103db565b6001600160a01b03808716600090815260208190526040808220878503905591871681529081208054869290610ccd90849061172b565b92505081905550846001600160a01b0316866001600160a01b0316886001600160a01b03167f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc82614677987878787604051610d2593929190611743565b60405180910390a4846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef86604051610d7291815260200190565b60405180910390a350505050505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b6024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa158015610e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2891906116b4565b90506001600160a01b03811615610ea4576040516223de2960e01b81526001600160a01b038216906223de2990610e6d908b908b908b908b908b908b906004016116d1565b600060405180830381600087803b158015610e8757600080fd5b505af1158015610e9b573d6000803e3d6000fd5b50505050610f3e565b8115610f3e576001600160a01b0386163b15610f3e5760405162461bcd60e51b815260206004820152604d60248201527f4552433737373a20746f6b656e20726563697069656e7420636f6e747261637460448201527f20686173206e6f20696d706c656d656e74657220666f7220455243373737546f60648201526c1ad95b9cd49958da5c1a595b9d609a1b608482015260a4016103db565b5050505050505050565b6001600160a01b038616610fa95760405162461bcd60e51b815260206004820152602260248201527f4552433737373a2073656e642066726f6d20746865207a65726f206164647265604482015261737360f01b60648201526084016103db565b6001600160a01b038516610fff5760405162461bcd60e51b815260206004820181905260248201527f4552433737373a2073656e6420746f20746865207a65726f206164647265737360448201526064016103db565b3361100e818888888888610af5565b61101c818888888888610c1d565b610c1481888888888888610d83565b6001600160a01b03841661108c5760405162461bcd60e51b815260206004820152602260248201527f4552433737373a206275726e2066726f6d20746865207a65726f206164647265604482015261737360f01b60648201526084016103db565b3361109c81866000878787610af5565b6001600160a01b038516600090815260208190526040902054848110156111115760405162461bcd60e51b815260206004820152602360248201527f4552433737373a206275726e20616d6f756e7420657863656564732062616c616044820152626e636560e81b60648201526084016103db565b6001600160a01b0386166000908152602081905260408120868303905560018054879290611140908490611651565b92505081905550856001600160a01b0316826001600160a01b03167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a409887878760405161118e93929190611743565b60405180910390a36040518581526000906001600160a01b038816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050505050565b6020808252825182820181905260009190848201906040850190845b818110156112205783516001600160a01b0316835292840192918401916001016111fb565b50909695505050505050565b6000815180845260005b8181101561125257602081850181015186830182015201611236565b81811115611264576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610855602083018461122c565b6001600160a01b03811681146112a157600080fd5b50565b600080604083850312156112b757600080fd5b82356112c28161128c565b946020939093013593505050565b6000806000606084860312156112e557600080fd5b83356112f08161128c565b925060208401356113008161128c565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261133857600080fd5b813567ffffffffffffffff8082111561135357611353611311565b604051601f8301601f19908116603f0116810190828211818310171561137b5761137b611311565b8160405283815286602085880101111561139457600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a086880312156113cc57600080fd5b85356113d78161128c565b945060208601356113e78161128c565b935060408601359250606086013567ffffffffffffffff8082111561140b57600080fd5b61141789838a01611327565b9350608088013591508082111561142d57600080fd5b5061143a88828901611327565b9150509295509295909350565b60006020828403121561145957600080fd5b81356108558161128c565b60008060006060848603121561147957600080fd5b83356114848161128c565b925060208401359150604084013567ffffffffffffffff8111156114a757600080fd5b6114b386828701611327565b9150509250925092565b600080604083850312156114d057600080fd5b82356114db8161128c565b915060208301356114eb8161128c565b809150509250929050565b6000806000806080858703121561150c57600080fd5b84356115178161128c565b935060208501359250604085013567ffffffffffffffff8082111561153b57600080fd5b61154788838901611327565b9350606087013591508082111561155d57600080fd5b5061156a87828801611327565b91505092959194509250565b6000806040838503121561158957600080fd5b82359150602083013567ffffffffffffffff8111156115a757600080fd5b6115b385828601611327565b9150509250929050565b600181811c908216806115d157607f821691505b6020821081036115f157634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526024908201527f4552433737373a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000828210156116635761166361163b565b500390565b6020808252602c908201527f4552433737373a2063616c6c6572206973206e6f7420616e206f70657261746f60408201526b39103337b9103437b63232b960a11b606082015260800190565b6000602082840312156116c657600080fd5b81516108558161128c565b6001600160a01b0387811682528681166020830152851660408201526060810184905260c06080820181905260009061170c9083018561122c565b82810360a084015261171e818561122c565b9998505050505050505050565b6000821982111561173e5761173e61163b565b500190565b83815260606020820152600061175c606083018561122c565b828103604084015261176e818561122c565b969550505050505056fea26469706673582212201869327f143ce28bc605d0d86cf4362d1aedb903bd3b360fbb83d834a999122364736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063959b8c3f116100a2578063d95b637111610071578063d95b63711461022b578063dd62ed3e1461023e578063fad8b32a14610277578063fc673c4f1461028a578063fe9d93031461029d57600080fd5b8063959b8c3f146101ea57806395d89b41146101fd5780639bd9bbc614610205578063a9059cbb1461021857600080fd5b806323b872dd116100e957806323b872dd14610183578063313ce56714610196578063556f0dc7146101a557806362ad1b83146101ac57806370a08231146101c157600080fd5b806306e485381461011b57806306fdde0314610139578063095ea7b31461014e57806318160ddd14610171575b600080fd5b6101236102b0565b60405161013091906111df565b60405180910390f35b610141610312565b6040516101309190611279565b61016161015c3660046112a4565b61039b565b6040519015158152602001610130565b6001545b604051908152602001610130565b6101616101913660046112d0565b6103b3565b60405160128152602001610130565b6001610175565b6101bf6101ba3660046113b4565b61057c565b005b6101756101cf366004611447565b6001600160a01b031660009081526020819052604090205490565b6101bf6101f8366004611447565b6105b8565b6101416106d5565b6101bf610213366004611464565b6106e4565b6101616102263660046112a4565b610707565b6101616102393660046114bd565b6107ba565b61017561024c3660046114bd565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b6101bf610285366004611447565b61085c565b6101bf6102983660046114f6565b610977565b6101bf6102ab366004611576565b6109af565b6060600480548060200260200160405190810160405280929190818152602001828054801561030857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102ea575b5050505050905090565b606060028054610321906115bd565b80601f016020809104026020016040519081016040528092919081815260200182805461034d906115bd565b80156103085780601f1061036f57610100808354040283529160200191610308565b820191906000526020600020905b81548152906001019060200180831161037d57509395945050505050565b6000336103a98185856109ce565b5060019392505050565b60006001600160a01b0383166103e45760405162461bcd60e51b81526004016103db906115f7565b60405180910390fd5b6001600160a01b0384166104495760405162461bcd60e51b815260206004820152602660248201527f4552433737373a207472616e736665722066726f6d20746865207a65726f206160448201526564647265737360d01b60648201526084016103db565b600033905061047a818686866040518060200160405280600081525060405180602001604052806000815250610af5565b6104a6818686866040518060200160405280600081525060405180602001604052806000815250610c1d565b6001600160a01b038086166000908152600860209081526040808320938516835292905220548381101561052e5760405162461bcd60e51b815260206004820152602960248201527f4552433737373a207472616e7366657220616d6f756e74206578636565647320604482015268616c6c6f77616e636560b81b60648201526084016103db565b610542868361053d8785611651565b6109ce565b6105708287878760405180602001604052806000815250604051806020016040528060008152506000610d83565b50600195945050505050565b61058633866107ba565b6105a25760405162461bcd60e51b81526004016103db90611668565b6105b185858585856001610f48565b5050505050565b6001600160a01b038116330361061c5760405162461bcd60e51b8152602060048201526024808201527f4552433737373a20617574686f72697a696e672073656c66206173206f70657260448201526330ba37b960e11b60648201526084016103db565b6001600160a01b03811660009081526005602052604090205460ff161561066d573360009081526007602090815260408083206001600160a01b03851684529091529020805460ff1916905561069c565b3360009081526006602090815260408083206001600160a01b03851684529091529020805460ff191660011790555b60405133906001600160a01b038316907ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f990600090a350565b606060038054610321906115bd565b61070233848484604051806020016040528060008152506001610f48565b505050565b60006001600160a01b03831661072f5760405162461bcd60e51b81526004016103db906115f7565b6000339050610760818286866040518060200160405280600081525060405180602001604052806000815250610af5565b61078c818286866040518060200160405280600081525060405180602001604052806000815250610c1d565b6103a98182868660405180602001604052806000815250604051806020016040528060008152506000610d83565b6000816001600160a01b0316836001600160a01b0316148061082557506001600160a01b03831660009081526005602052604090205460ff16801561082557506001600160a01b0380831660009081526007602090815260408083209387168352929052205460ff16155b8061085557506001600160a01b0380831660009081526006602090815260408083209387168352929052205460ff165b9392505050565b336001600160a01b038216036108be5760405162461bcd60e51b815260206004820152602160248201527f4552433737373a207265766f6b696e672073656c66206173206f70657261746f6044820152603960f91b60648201526084016103db565b6001600160a01b03811660009081526005602052604090205460ff1615610912573360009081526007602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561093e565b3360009081526006602090815260408083206001600160a01b03851684529091529020805460ff191690555b60405133906001600160a01b038316907f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa190600090a350565b61098133856107ba565b61099d5760405162461bcd60e51b81526004016103db90611668565b6109a98484848461102b565b50505050565b6109ca3383836040518060200160405280600081525061102b565b5050565b6001600160a01b038316610a325760405162461bcd60e51b815260206004820152602560248201527f4552433737373a20617070726f76652066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103db565b6001600160a01b038216610a945760405162461bcd60e51b815260206004820152602360248201527f4552433737373a20617070726f766520746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103db565b6001600160a01b0383811660008181526008602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe8956024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa158015610b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9a91906116b4565b90506001600160a01b03811615610c1457604051633ad5cbc160e11b81526001600160a01b038216906375ab978290610be1908a908a908a908a908a908a906004016116d1565b600060405180830381600087803b158015610bfb57600080fd5b505af1158015610c0f573d6000803e3d6000fd5b505050505b50505050505050565b6001600160a01b03851660009081526020819052604090205483811015610c965760405162461bcd60e51b815260206004820152602760248201527f4552433737373a207472616e7366657220616d6f756e7420657863656564732060448201526662616c616e636560c81b60648201526084016103db565b6001600160a01b03808716600090815260208190526040808220878503905591871681529081208054869290610ccd90849061172b565b92505081905550846001600160a01b0316866001600160a01b0316886001600160a01b03167f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc82614677987878787604051610d2593929190611743565b60405180910390a4846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef86604051610d7291815260200190565b60405180910390a350505050505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b6024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa158015610e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2891906116b4565b90506001600160a01b03811615610ea4576040516223de2960e01b81526001600160a01b038216906223de2990610e6d908b908b908b908b908b908b906004016116d1565b600060405180830381600087803b158015610e8757600080fd5b505af1158015610e9b573d6000803e3d6000fd5b50505050610f3e565b8115610f3e576001600160a01b0386163b15610f3e5760405162461bcd60e51b815260206004820152604d60248201527f4552433737373a20746f6b656e20726563697069656e7420636f6e747261637460448201527f20686173206e6f20696d706c656d656e74657220666f7220455243373737546f60648201526c1ad95b9cd49958da5c1a595b9d609a1b608482015260a4016103db565b5050505050505050565b6001600160a01b038616610fa95760405162461bcd60e51b815260206004820152602260248201527f4552433737373a2073656e642066726f6d20746865207a65726f206164647265604482015261737360f01b60648201526084016103db565b6001600160a01b038516610fff5760405162461bcd60e51b815260206004820181905260248201527f4552433737373a2073656e6420746f20746865207a65726f206164647265737360448201526064016103db565b3361100e818888888888610af5565b61101c818888888888610c1d565b610c1481888888888888610d83565b6001600160a01b03841661108c5760405162461bcd60e51b815260206004820152602260248201527f4552433737373a206275726e2066726f6d20746865207a65726f206164647265604482015261737360f01b60648201526084016103db565b3361109c81866000878787610af5565b6001600160a01b038516600090815260208190526040902054848110156111115760405162461bcd60e51b815260206004820152602360248201527f4552433737373a206275726e20616d6f756e7420657863656564732062616c616044820152626e636560e81b60648201526084016103db565b6001600160a01b0386166000908152602081905260408120868303905560018054879290611140908490611651565b92505081905550856001600160a01b0316826001600160a01b03167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a409887878760405161118e93929190611743565b60405180910390a36040518581526000906001600160a01b038816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050505050565b6020808252825182820181905260009190848201906040850190845b818110156112205783516001600160a01b0316835292840192918401916001016111fb565b50909695505050505050565b6000815180845260005b8181101561125257602081850181015186830182015201611236565b81811115611264576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610855602083018461122c565b6001600160a01b03811681146112a157600080fd5b50565b600080604083850312156112b757600080fd5b82356112c28161128c565b946020939093013593505050565b6000806000606084860312156112e557600080fd5b83356112f08161128c565b925060208401356113008161128c565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261133857600080fd5b813567ffffffffffffffff8082111561135357611353611311565b604051601f8301601f19908116603f0116810190828211818310171561137b5761137b611311565b8160405283815286602085880101111561139457600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a086880312156113cc57600080fd5b85356113d78161128c565b945060208601356113e78161128c565b935060408601359250606086013567ffffffffffffffff8082111561140b57600080fd5b61141789838a01611327565b9350608088013591508082111561142d57600080fd5b5061143a88828901611327565b9150509295509295909350565b60006020828403121561145957600080fd5b81356108558161128c565b60008060006060848603121561147957600080fd5b83356114848161128c565b925060208401359150604084013567ffffffffffffffff8111156114a757600080fd5b6114b386828701611327565b9150509250925092565b600080604083850312156114d057600080fd5b82356114db8161128c565b915060208301356114eb8161128c565b809150509250929050565b6000806000806080858703121561150c57600080fd5b84356115178161128c565b935060208501359250604085013567ffffffffffffffff8082111561153b57600080fd5b61154788838901611327565b9350606087013591508082111561155d57600080fd5b5061156a87828801611327565b91505092959194509250565b6000806040838503121561158957600080fd5b82359150602083013567ffffffffffffffff8111156115a757600080fd5b6115b385828601611327565b9150509250929050565b600181811c908216806115d157607f821691505b6020821081036115f157634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526024908201527f4552433737373a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000828210156116635761166361163b565b500390565b6020808252602c908201527f4552433737373a2063616c6c6572206973206e6f7420616e206f70657261746f60408201526b39103337b9103437b63232b960a11b606082015260800190565b6000602082840312156116c657600080fd5b81516108558161128c565b6001600160a01b0387811682528681166020830152851660408201526060810184905260c06080820181905260009061170c9083018561122c565b82810360a084015261171e818561122c565b9998505050505050505050565b6000821982111561173e5761173e61163b565b500190565b83815260606020820152600061175c606083018561122c565b828103604084015261176e818561122c565b969550505050505056fea26469706673582212201869327f143ce28bc605d0d86cf4362d1aedb903bd3b360fbb83d834a999122364736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name_", "type": "string", "internalType": "string"}, {"name": "symbol_", "type": "string", "internalType": "string"}, {"name": "defaultOperators_", "type": "address[]", "internalType": "address[]"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "AuthorizedOperator", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenHolder", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Burned", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "amount", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "operatorData", "type": "bytes", "internalType": "bytes", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Minted", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "amount", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "operatorData", "type": "bytes", "internalType": "bytes", "indexed": false}], "anonymous": false}, {"type": "event", "name": "RevokedOperator", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenHolder", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Sent", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "amount", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "operatorData", "type": "bytes", "internalType": "bytes", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "holder", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "authorizeOperator", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "tokenHolder", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "decimals", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "defaultOperators", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address[]", "internalType": "address[]"}]}, {"type": "function", "name": "granularity", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "isOperatorFor", "stateMutability": "view", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "tokenHolder", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "operatorBurn", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "operatorSend", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "revokeOperator", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "send", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "holder", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Implementation of the {IERC777} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. Support for ERC20 is included in this contract, as specified by the EIP: both the ERC777 and ERC20 interfaces can be safely used when interacting with it. Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token movements. Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there are no special restrictions in the amount of tokens that created, moved, or destroyed. This makes integration with ERC20 applications seamless.", "kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}. Note that operator and allowance concepts are orthogonal: operators may not have allowance, and accounts with allowance may not be operators themselves."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Note that accounts cannot have allowance issued by their operators."}, "authorizeOperator(address)": {"details": "See {IERC777-authorizeOperator}."}, "balanceOf(address)": {"details": "Returns the amount of tokens owned by an account (`tokenHolder`)."}, "burn(uint256,bytes)": {"details": "See {IERC777-burn}. Also emits a {IERC20-Transfer} event for ERC20 compatibility."}, "constructor": {"details": "`defaultOperators` may be an empty array."}, "decimals()": {"details": "See {ERC20-decimals}. Always returns 18, as per the [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility)."}, "defaultOperators()": {"details": "See {IERC777-defaultOperators}."}, "granularity()": {"details": "See {IERC777-granularity}. This implementation always returns `1`."}, "isOperatorFor(address,address)": {"details": "See {IERC777-isOperatorFor}."}, "name()": {"details": "See {IERC777-name}."}, "operatorBurn(address,uint256,bytes,bytes)": {"details": "See {IERC777-operatorBurn}. Emits {Burned} and {IERC20-Transfer} events."}, "operatorSend(address,address,uint256,bytes,bytes)": {"details": "See {IERC777-operatorSend}. Emits {Sent} and {IERC20-Transfer} events."}, "revokeOperator(address)": {"details": "See {IERC777-revokeOperator}."}, "send(address,uint256,bytes)": {"details": "See {IERC777-send}. Also emits a {IERC20-Transfer} event for ERC20 compatibility."}, "symbol()": {"details": "See {IERC777-symbol}."}, "totalSupply()": {"details": "See {IERC777-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient} interface if it is a contract. Also emits a {Sent} event."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Note that operator and allowance concepts are orthogonal: operators cannot call `transferFrom` (unless they have allowance), and accounts with allowance cannot call `operatorSend` (unless they are operators). Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events."}}, "version": 1}}, "IERC777": {"contractName": "IERC777", "sourceId": "token/ERC777/IERC777.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "AuthorizedOperator", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenHolder", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Burned", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "amount", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "operatorData", "type": "bytes", "internalType": "bytes", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Minted", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "amount", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "operatorData", "type": "bytes", "internalType": "bytes", "indexed": false}], "anonymous": false}, {"type": "event", "name": "RevokedOperator", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenHolder", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Sent", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "amount", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "operatorData", "type": "bytes", "internalType": "bytes", "indexed": false}], "anonymous": false}, {"type": "function", "name": "authorizeOperator", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "owner", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "defaultOperators", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address[]", "internalType": "address[]"}]}, {"type": "function", "name": "granularity", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "isOperatorFor", "stateMutability": "view", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "tokenHolder", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "operatorBurn", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "operatorSend", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "revokeOperator", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "send", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Interface of the ERC777Token standard as defined in the EIP. This contract uses the https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let token holders and recipients react to token movements by using setting implementers for the associated interfaces in said registry. See {IERC1820Registry} and {ERC1820Implementer}.", "kind": "dev", "methods": {"authorizeOperator(address)": {"details": "Make an account an operator of the caller. See {isOperatorFor}. Emits an {AuthorizedOperator} event. Requirements - `operator` cannot be calling address."}, "balanceOf(address)": {"details": "Returns the amount of tokens owned by an account (`owner`)."}, "burn(uint256,bytes)": {"details": "Destroys `amount` tokens from the caller's account, reducing the total supply. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - the caller must have at least `amount` tokens."}, "defaultOperators()": {"details": "Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false."}, "granularity()": {"details": "Returns the smallest part of the token that is not divisible. This means all token operations (creation, movement and destruction) must have amounts that are a multiple of this number. For most token contracts, this value will equal 1."}, "isOperatorFor(address,address)": {"details": "Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}."}, "name()": {"details": "Returns the name of the token."}, "operatorBurn(address,uint256,bytes,bytes)": {"details": "Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - `account` cannot be the zero address. - `account` must have at least `amount` tokens. - the caller must be an operator for `account`."}, "operatorSend(address,address,uint256,bytes,bytes)": {"details": "Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - `sender` cannot be the zero address. - `sender` must have at least `amount` tokens. - the caller must be an operator for `sender`. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface."}, "revokeOperator(address)": {"details": "Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}. Emits a {RevokedOperator} event. Requirements - `operator` cannot be calling address."}, "send(address,uint256,bytes)": {"details": "Moves `amount` tokens from the caller's account to `recipient`. If send or receive hooks are registered for the caller and `recipient`, the corresponding functions will be called with `data` and empty `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - the caller must have at least `amount` tokens. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface."}, "symbol()": {"details": "Returns the symbol of the token, usually a shorter version of the name."}, "totalSupply()": {"details": "Returns the amount of tokens in existence."}}, "version": 1}}, "IERC777Recipient": {"contractName": "IERC777Recipient", "sourceId": "token/ERC777/IERC777Recipient.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "tokensReceived", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "userData", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Interface of the ERC777TokensRecipient standard as defined in the EIP. Accounts can be notified of {IERC777} tokens being sent to them by having a contract implement this interface (contract holders can be their own implementer) and registering it on the https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry]. See {IERC1820Registry} and {ERC1820Implementer}.", "kind": "dev", "methods": {"tokensReceived(address,address,address,uint256,bytes,bytes)": {"details": "Called by an {IERC777} token contract whenever tokens are being moved or created into a registered account (`to`). The type of operation is conveyed by `from` being the zero address or not. This call occurs _after_ the token contract's state is updated, so {IERC777-balanceOf}, etc., can be used to query the post-operation state. This function may revert to prevent the operation from being executed."}}, "version": 1}}, "IERC777Sender": {"contractName": "IERC777Sender", "sourceId": "token/ERC777/IERC777Sender.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "tokensToSend", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "from", "type": "address", "internalType": "address"}, {"name": "to", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "userData", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Interface of the ERC777TokensSender standard as defined in the EIP. {IERC777} Token holders can be notified of operations performed on their tokens by having a contract implement this interface (contract holders can be their own implementer) and registering it on the https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry]. See {IERC1820Registry} and {ERC1820Implementer}.", "kind": "dev", "methods": {"tokensToSend(address,address,address,uint256,bytes,bytes)": {"details": "Called by an {IERC777} token contract whenever a registered holder's (`from`) tokens are about to be moved or destroyed. The type of operation is conveyed by `to` being the zero address or not. This call occurs _before_ the token contract's state is updated, so {IERC777-balanceOf}, etc., can be used to query the pre-operation state. This function may revert to prevent the operation from being executed."}}, "version": 1}}, "ERC777PresetFixedSupply": {"contractName": "ERC777PresetFixedSupply", "sourceId": "token/ERC777/presets/ERC777PresetFixedSupply.sol", "deploymentBytecode": {"bytecode": ""}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063959b8c3f116100a2578063d95b637111610071578063d95b63711461022b578063dd62ed3e1461023e578063fad8b32a14610277578063fc673c4f1461028a578063fe9d93031461029d57600080fd5b8063959b8c3f146101ea57806395d89b41146101fd5780639bd9bbc614610205578063a9059cbb1461021857600080fd5b806323b872dd116100e957806323b872dd14610183578063313ce56714610196578063556f0dc7146101a557806362ad1b83146101ac57806370a08231146101c157600080fd5b806306e485381461011b57806306fdde0314610139578063095ea7b31461014e57806318160ddd14610171575b600080fd5b6101236102b0565b60405161013091906111e5565b60405180910390f35b610141610312565b604051610130919061127f565b61016161015c3660046112aa565b61039b565b6040519015158152602001610130565b6001545b604051908152602001610130565b6101616101913660046112d6565b6103b3565b60405160128152602001610130565b6001610175565b6101bf6101ba3660046113ba565b61057c565b005b6101756101cf36600461144d565b6001600160a01b031660009081526020819052604090205490565b6101bf6101f836600461144d565b6105b8565b6101416106d5565b6101bf61021336600461146a565b6106e4565b6101616102263660046112aa565b610707565b6101616102393660046114c3565b6107ba565b61017561024c3660046114c3565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b6101bf61028536600461144d565b61085c565b6101bf6102983660046114fc565b610977565b6101bf6102ab36600461157c565b6109af565b6060600480548060200260200160405190810160405280929190818152602001828054801561030857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102ea575b5050505050905090565b606060028054610321906115c3565b80601f016020809104026020016040519081016040528092919081815260200182805461034d906115c3565b80156103085780601f1061036f57610100808354040283529160200191610308565b820191906000526020600020905b81548152906001019060200180831161037d57509395945050505050565b6000336103a98185856109d4565b5060019392505050565b60006001600160a01b0383166103e45760405162461bcd60e51b81526004016103db906115fd565b60405180910390fd5b6001600160a01b0384166104495760405162461bcd60e51b815260206004820152602660248201527f4552433737373a207472616e736665722066726f6d20746865207a65726f206160448201526564647265737360d01b60648201526084016103db565b600033905061047a818686866040518060200160405280600081525060405180602001604052806000815250610afb565b6104a6818686866040518060200160405280600081525060405180602001604052806000815250610c23565b6001600160a01b038086166000908152600860209081526040808320938516835292905220548381101561052e5760405162461bcd60e51b815260206004820152602960248201527f4552433737373a207472616e7366657220616d6f756e74206578636565647320604482015268616c6c6f77616e636560b81b60648201526084016103db565b610542868361053d8785611657565b6109d4565b6105708287878760405180602001604052806000815250604051806020016040528060008152506000610d89565b50600195945050505050565b61058633866107ba565b6105a25760405162461bcd60e51b81526004016103db9061166e565b6105b185858585856001610f4e565b5050505050565b6001600160a01b038116330361061c5760405162461bcd60e51b8152602060048201526024808201527f4552433737373a20617574686f72697a696e672073656c66206173206f70657260448201526330ba37b960e11b60648201526084016103db565b6001600160a01b03811660009081526005602052604090205460ff161561066d573360009081526007602090815260408083206001600160a01b03851684529091529020805460ff1916905561069c565b3360009081526006602090815260408083206001600160a01b03851684529091529020805460ff191660011790555b60405133906001600160a01b038316907ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f990600090a350565b606060038054610321906115c3565b61070233848484604051806020016040528060008152506001610f4e565b505050565b60006001600160a01b03831661072f5760405162461bcd60e51b81526004016103db906115fd565b6000339050610760818286866040518060200160405280600081525060405180602001604052806000815250610afb565b61078c818286866040518060200160405280600081525060405180602001604052806000815250610c23565b6103a98182868660405180602001604052806000815250604051806020016040528060008152506000610d89565b6000816001600160a01b0316836001600160a01b0316148061082557506001600160a01b03831660009081526005602052604090205460ff16801561082557506001600160a01b0380831660009081526007602090815260408083209387168352929052205460ff16155b8061085557506001600160a01b0380831660009081526006602090815260408083209387168352929052205460ff165b9392505050565b336001600160a01b038216036108be5760405162461bcd60e51b815260206004820152602160248201527f4552433737373a207265766f6b696e672073656c66206173206f70657261746f6044820152603960f91b60648201526084016103db565b6001600160a01b03811660009081526005602052604090205460ff1615610912573360009081526007602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561093e565b3360009081526006602090815260408083206001600160a01b03851684529091529020805460ff191690555b60405133906001600160a01b038316907f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa190600090a350565b61098133856107ba565b61099d5760405162461bcd60e51b81526004016103db9061166e565b6109a984848484611031565b50505050565b6109ca33838360405180602001604052806000815250611031565b5050565b3b151590565b6001600160a01b038316610a385760405162461bcd60e51b815260206004820152602560248201527f4552433737373a20617070726f76652066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103db565b6001600160a01b038216610a9a5760405162461bcd60e51b815260206004820152602360248201527f4552433737373a20617070726f766520746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103db565b6001600160a01b0383811660008181526008602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe8956024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa158015610b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba091906116ba565b90506001600160a01b03811615610c1a57604051633ad5cbc160e11b81526001600160a01b038216906375ab978290610be7908a908a908a908a908a908a906004016116d7565b600060405180830381600087803b158015610c0157600080fd5b505af1158015610c15573d6000803e3d6000fd5b505050505b50505050505050565b6001600160a01b03851660009081526020819052604090205483811015610c9c5760405162461bcd60e51b815260206004820152602760248201527f4552433737373a207472616e7366657220616d6f756e7420657863656564732060448201526662616c616e636560c81b60648201526084016103db565b6001600160a01b03808716600090815260208190526040808220878503905591871681529081208054869290610cd3908490611731565b92505081905550846001600160a01b0316866001600160a01b0316886001600160a01b03167f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc82614677987878787604051610d2b93929190611749565b60405180910390a4846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef86604051610d7891815260200190565b60405180910390a350505050505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b6024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa158015610e0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2e91906116ba565b90506001600160a01b03811615610eaa576040516223de2960e01b81526001600160a01b038216906223de2990610e73908b908b908b908b908b908b906004016116d7565b600060405180830381600087803b158015610e8d57600080fd5b505af1158015610ea1573d6000803e3d6000fd5b50505050610f44565b8115610f44576001600160a01b0386163b15610f445760405162461bcd60e51b815260206004820152604d60248201527f4552433737373a20746f6b656e20726563697069656e7420636f6e747261637460448201527f20686173206e6f20696d706c656d656e74657220666f7220455243373737546f60648201526c1ad95b9cd49958da5c1a595b9d609a1b608482015260a4016103db565b5050505050505050565b6001600160a01b038616610faf5760405162461bcd60e51b815260206004820152602260248201527f4552433737373a2073656e642066726f6d20746865207a65726f206164647265604482015261737360f01b60648201526084016103db565b6001600160a01b0385166110055760405162461bcd60e51b815260206004820181905260248201527f4552433737373a2073656e6420746f20746865207a65726f206164647265737360448201526064016103db565b33611014818888888888610afb565b611022818888888888610c23565b610c1a81888888888888610d89565b6001600160a01b0384166110925760405162461bcd60e51b815260206004820152602260248201527f4552433737373a206275726e2066726f6d20746865207a65726f206164647265604482015261737360f01b60648201526084016103db565b336110a281866000878787610afb565b6001600160a01b038516600090815260208190526040902054848110156111175760405162461bcd60e51b815260206004820152602360248201527f4552433737373a206275726e20616d6f756e7420657863656564732062616c616044820152626e636560e81b60648201526084016103db565b6001600160a01b0386166000908152602081905260408120868303905560018054879290611146908490611657565b92505081905550856001600160a01b0316826001600160a01b03167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a409887878760405161119493929190611749565b60405180910390a36040518581526000906001600160a01b038816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050505050565b6020808252825182820181905260009190848201906040850190845b818110156112265783516001600160a01b031683529284019291840191600101611201565b50909695505050505050565b6000815180845260005b818110156112585760208185018101518683018201520161123c565b8181111561126a576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006108556020830184611232565b6001600160a01b03811681146112a757600080fd5b50565b600080604083850312156112bd57600080fd5b82356112c881611292565b946020939093013593505050565b6000806000606084860312156112eb57600080fd5b83356112f681611292565b9250602084013561130681611292565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261133e57600080fd5b813567ffffffffffffffff8082111561135957611359611317565b604051601f8301601f19908116603f0116810190828211818310171561138157611381611317565b8160405283815286602085880101111561139a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a086880312156113d257600080fd5b85356113dd81611292565b945060208601356113ed81611292565b935060408601359250606086013567ffffffffffffffff8082111561141157600080fd5b61141d89838a0161132d565b9350608088013591508082111561143357600080fd5b506114408882890161132d565b9150509295509295909350565b60006020828403121561145f57600080fd5b813561085581611292565b60008060006060848603121561147f57600080fd5b833561148a81611292565b925060208401359150604084013567ffffffffffffffff8111156114ad57600080fd5b6114b98682870161132d565b9150509250925092565b600080604083850312156114d657600080fd5b82356114e181611292565b915060208301356114f181611292565b809150509250929050565b6000806000806080858703121561151257600080fd5b843561151d81611292565b935060208501359250604085013567ffffffffffffffff8082111561154157600080fd5b61154d8883890161132d565b9350606087013591508082111561156357600080fd5b506115708782880161132d565b91505092959194509250565b6000806040838503121561158f57600080fd5b82359150602083013567ffffffffffffffff8111156115ad57600080fd5b6115b98582860161132d565b9150509250929050565b600181811c908216806115d757607f821691505b6020821081036115f757634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526024908201527f4552433737373a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008282101561166957611669611641565b500390565b6020808252602c908201527f4552433737373a2063616c6c6572206973206e6f7420616e206f70657261746f60408201526b39103337b9103437b63232b960a11b606082015260800190565b6000602082840312156116cc57600080fd5b815161085581611292565b6001600160a01b0387811682528681166020830152851660408201526060810184905260c06080820181905260009061171290830185611232565b82810360a08401526117248185611232565b9998505050505050505050565b6000821982111561174457611744611641565b500190565b8381526060602082015260006117626060830185611232565b82810360408401526117748185611232565b969550505050505056fea26469706673582212209a608268f444da0b2d5471570a10c5a7f615b3cf7db80ce322d517d7ae40928e64736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "name", "type": "string", "internalType": "string"}, {"name": "symbol", "type": "string", "internalType": "string"}, {"name": "defaultOperators", "type": "address[]", "internalType": "address[]"}, {"name": "initialSupply", "type": "uint256", "internalType": "uint256"}, {"name": "owner", "type": "address", "internalType": "address"}]}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "internalType": "address", "indexed": true}, {"name": "spender", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "AuthorizedOperator", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenHolder", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Burned", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "amount", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "operatorData", "type": "bytes", "internalType": "bytes", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Minted", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "amount", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "operatorData", "type": "bytes", "internalType": "bytes", "indexed": false}], "anonymous": false}, {"type": "event", "name": "RevokedOperator", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "tokenHolder", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Sent", "inputs": [{"name": "operator", "type": "address", "internalType": "address", "indexed": true}, {"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "amount", "type": "uint256", "internalType": "uint256", "indexed": false}, {"name": "data", "type": "bytes", "internalType": "bytes", "indexed": false}, {"name": "operatorData", "type": "bytes", "internalType": "bytes", "indexed": false}], "anonymous": false}, {"type": "event", "name": "Transfer", "inputs": [{"name": "from", "type": "address", "internalType": "address", "indexed": true}, {"name": "to", "type": "address", "internalType": "address", "indexed": true}, {"name": "value", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "allowance", "stateMutability": "view", "inputs": [{"name": "holder", "type": "address", "internalType": "address"}, {"name": "spender", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address", "internalType": "address"}, {"name": "value", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "authorizeOperator", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "tokenHolder", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "burn", "stateMutability": "nonpayable", "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "decimals", "stateMutability": "pure", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}]}, {"type": "function", "name": "defaultOperators", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address[]", "internalType": "address[]"}]}, {"type": "function", "name": "granularity", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "isOperatorFor", "stateMutability": "view", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}, {"name": "tokenHolder", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "name", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "operatorBurn", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "operatorSend", "stateMutability": "nonpayable", "inputs": [{"name": "sender", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}, {"name": "operatorData", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "revokeOperator", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "send", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}, {"name": "data", "type": "bytes", "internalType": "bytes"}], "outputs": []}, {"type": "function", "name": "symbol", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "totalSupply", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "transfer", "stateMutability": "nonpayable", "inputs": [{"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "holder", "type": "address", "internalType": "address"}, {"name": "recipient", "type": "address", "internalType": "address"}, {"name": "amount", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "{ERC777} token, including:  - Preminted initial supply  - No access control mechanism (for minting/pausing) and hence no governance _Available since v3.4._", "kind": "dev", "methods": {"allowance(address,address)": {"details": "See {IERC20-allowance}. Note that operator and allowance concepts are orthogonal: operators may not have allowance, and accounts with allowance may not be operators themselves."}, "approve(address,uint256)": {"details": "See {IERC20-approve}. Note that accounts cannot have allowance issued by their operators."}, "authorizeOperator(address)": {"details": "See {IERC777-authorizeOperator}."}, "balanceOf(address)": {"details": "Returns the amount of tokens owned by an account (`tokenHolder`)."}, "burn(uint256,bytes)": {"details": "See {IERC777-burn}. Also emits a {IERC20-Transfer} event for ERC20 compatibility."}, "constructor": {"details": "Mints `initialSupply` amount of token and transfers them to `owner`. See {ERC777-constructor}."}, "decimals()": {"details": "See {ERC20-decimals}. Always returns 18, as per the [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility)."}, "defaultOperators()": {"details": "See {IERC777-defaultOperators}."}, "granularity()": {"details": "See {IERC777-granularity}. This implementation always returns `1`."}, "isOperatorFor(address,address)": {"details": "See {IERC777-isOperatorFor}."}, "name()": {"details": "See {IERC777-name}."}, "operatorBurn(address,uint256,bytes,bytes)": {"details": "See {IERC777-operatorBurn}. Emits {Burned} and {IERC20-Transfer} events."}, "operatorSend(address,address,uint256,bytes,bytes)": {"details": "See {IERC777-operatorSend}. Emits {Sent} and {IERC20-Transfer} events."}, "revokeOperator(address)": {"details": "See {IERC777-revokeOperator}."}, "send(address,uint256,bytes)": {"details": "See {IERC777-send}. Also emits a {IERC20-Transfer} event for ERC20 compatibility."}, "symbol()": {"details": "See {IERC777-symbol}."}, "totalSupply()": {"details": "See {IERC777-totalSupply}."}, "transfer(address,uint256)": {"details": "See {IERC20-transfer}. Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient} interface if it is a contract. Also emits a {Sent} event."}, "transferFrom(address,address,uint256)": {"details": "See {IERC20-transferFrom}. Note that operator and allowance concepts are orthogonal: operators cannot call `transferFrom` (unless they have allowance), and accounts with allowance cannot call `operatorSend` (unless they are operators). Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events."}}, "version": 1}}, "Address": {"contractName": "Address", "sourceId": "utils/Address.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f067b81e7fd0deec35e662cbe4568a561d1b48ecf2307403894b486bb830261464736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f067b81e7fd0deec35e662cbe4568a561d1b48ecf2307403894b486bb830261464736f6c634300080d0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Collection of functions related to the address type", "kind": "dev", "methods": {}, "version": 1}}, "Arrays": {"contractName": "Arrays", "sourceId": "utils/Arrays.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203149b2e270087c03520c6f947ffeab989aec1c065b5bc97a0177e55f824c9ddb64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203149b2e270087c03520c6f947ffeab989aec1c065b5bc97a0177e55f824c9ddb64736f6c634300080d0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Collection of functions related to array types.", "kind": "dev", "methods": {}, "version": 1}}, "Context": {"contractName": "Context", "sourceId": "utils/Context.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.", "kind": "dev", "methods": {}, "version": 1}}, "Counters": {"contractName": "Counters", "sourceId": "utils/Counters.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220901e6e549d2957ca4cb80621be4788579540eddf3f97ea499b720dc379fdacfb64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220901e6e549d2957ca4cb80621be4788579540eddf3f97ea499b720dc379fdacfb64736f6c634300080d0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"author": "Matt Condon (@shrugs)", "details": "Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`", "kind": "dev", "methods": {}, "title": "Counters", "version": 1}}, "Create2": {"contractName": "Create2", "sourceId": "utils/Create2.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fa441cc579c75094706f665fa99c8edd6fa9d62e939227b37a8409c1bf4bcd2264736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fa441cc579c75094706f665fa99c8edd6fa9d62e939227b37a8409c1bf4bcd2264736f6c634300080d0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Helper to make usage of the `CREATE2` EVM opcode easier and safer. `CREATE2` can be used to compute in advance the address where a smart contract will be deployed, which allows for interesting new mechanisms known as 'counterfactual interactions'. See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more information.", "kind": "dev", "methods": {}, "version": 1}}, "Multicall": {"contractName": "Multicall", "sourceId": "utils/Multicall.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "multicall", "stateMutability": "nonpayable", "inputs": [{"name": "data", "type": "bytes[]", "internalType": "bytes[]"}], "outputs": [{"name": "results", "type": "bytes[]", "internalType": "bytes[]"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Provides a function to batch together multiple calls in a single external call. _Available since v4.1._", "kind": "dev", "methods": {"multicall(bytes[])": {"details": "Receives and executes a batch of function calls on this contract."}}, "version": 1}}, "StorageSlot": {"contractName": "StorageSlot", "sourceId": "utils/StorageSlot.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207f83b388b71c4a564a629fec647c16cda6198dbd01c8741f59b88c0cfcbf428364736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207f83b388b71c4a564a629fec647c16cda6198dbd01c8741f59b88c0cfcbf428364736f6c634300080d0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._", "kind": "dev", "methods": {}, "version": 1}}, "Strings": {"contractName": "Strings", "sourceId": "utils/Strings.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a8c9305407947088eecb5a7d91fc8d5e9d043d6ef300fa801cc3b739cfc8752464736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a8c9305407947088eecb5a7d91fc8d5e9d043d6ef300fa801cc3b739cfc8752464736f6c634300080d0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "String operations.", "kind": "dev", "methods": {}, "version": 1}}, "Timers": {"contractName": "Timers", "sourceId": "utils/Timers.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122005554132ec1541a8d9b41af39e07907894a0141f5d9a333431f5d69f8e99d3eb64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122005554132ec1541a8d9b41af39e07907894a0141f5d9a333431f5d69f8e99d3eb64736f6c634300080d0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Tooling for timepoints, timers and delays", "kind": "dev", "methods": {}, "version": 1}}, "ECDSA": {"contractName": "ECDSA", "sourceId": "utils/cryptography/ECDSA.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202e38bdef70d9e006e79c3925b284c8495aa87679bcfbb6bf14b798c32e51c4e064736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202e38bdef70d9e006e79c3925b284c8495aa87679bcfbb6bf14b798c32e51c4e064736f6c634300080d0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.", "kind": "dev", "methods": {}, "version": 1}}, "MerkleProof": {"contractName": "MerkleProof", "sourceId": "utils/cryptography/MerkleProof.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204215a1310c6cc1fb6080d0a2038e679da4535e98675305d26803cb4a1ae06bf764736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204215a1310c6cc1fb6080d0a2038e679da4535e98675305d26803cb4a1ae06bf764736f6c634300080d0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "These functions deal with verification of Merkle Trees proofs. The proofs can be generated using the JavaScript library https://github.com/miguelmota/merkletreejs[merkletreejs]. Note: the hashing algorithm should be keccak256 and pair sorting should be enabled. See `test/utils/cryptography/MerkleProof.test.js` for some examples.", "kind": "dev", "methods": {}, "version": 1}}, "SignatureChecker": {"contractName": "SignatureChecker", "sourceId": "utils/cryptography/SignatureChecker.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220aae8859e796fea2421f245436180d3c8b060fdff84644e764eb4376ec77410ee64736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220aae8859e796fea2421f245436180d3c8b060fdff84644e764eb4376ec77410ee64736f6c634300080d0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Signature verification helper: Provide a single mechanism to verify both private-key (EOA) ECDSA signature and ERC1271 contract signatures. Using this instead of ECDSA.recover in your contract will make them compatible with smart contract wallets such as Argent and Gnosis. Note: unlike ECDSA signatures, contract signature's are revocable, and the outcome of this function can thus change through time. It could return true at block N and false at block N+1 (or the opposite). _Available since v4.1._", "kind": "dev", "methods": {}, "version": 1}}, "EIP712": {"contractName": "EIP712", "sourceId": "utils/cryptography/draft-EIP712.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._", "kind": "dev", "methods": {"constructor": {"details": "Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade]."}}, "version": 1}}, "ConditionalEscrow": {"contractName": "ConditionalEscrow", "sourceId": "utils/escrow/ConditionalEscrow.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "Deposited", "inputs": [{"name": "payee", "type": "address", "internalType": "address", "indexed": true}, {"name": "weiAmount", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "OwnershipTransferred", "inputs": [{"name": "previousOwner", "type": "address", "internalType": "address", "indexed": true}, {"name": "newOwner", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Withdrawn", "inputs": [{"name": "payee", "type": "address", "internalType": "address", "indexed": true}, {"name": "weiAmount", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "deposit", "stateMutability": "payable", "inputs": [{"name": "payee", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "depositsOf", "stateMutability": "view", "inputs": [{"name": "payee", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "owner", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "renounceOwnership", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "transferOwnership", "stateMutability": "nonpayable", "inputs": [{"name": "newOwner", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "withdraw", "stateMutability": "nonpayable", "inputs": [{"name": "payee", "type": "address", "internalType": "address payable"}], "outputs": []}, {"type": "function", "name": "withdrawalAllowed", "stateMutability": "view", "inputs": [{"name": "payee", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Base abstract escrow to only allow withdrawal if a condition is met.Intended usage: See {Escrow}. Same usage guidelines apply here.", "kind": "dev", "methods": {"deposit(address)": {"details": "Stores the sent amount as credit to be withdrawn.", "params": {"payee": "The destination address of the funds."}}, "owner()": {"details": "Returns the address of the current owner."}, "renounceOwnership()": {"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."}, "transferOwnership(address)": {"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}, "withdraw(address)": {"details": "Withdraw accumulated balance for a payee, forwarding all gas to the recipient. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.", "params": {"payee": "The address whose funds will be withdrawn and transferred to."}}, "withdrawalAllowed(address)": {"details": "Returns whether an address is allowed to withdraw their funds. To be implemented by derived contracts.", "params": {"payee": "The destination address of the funds."}}}, "title": "ConditionalEscrow", "version": 1}}, "Escrow": {"contractName": "Escrow", "sourceId": "utils/escrow/Escrow.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105748061007e6000396000f3fe6080604052600436106100555760003560e01c806351cff8d91461005a578063715018a61461007c5780638da5cb5b14610091578063e3a9db1a146100be578063f2fde38b14610102578063f340fa0114610122575b600080fd5b34801561006657600080fd5b5061007a6100753660046104bf565b610135565b005b34801561008857600080fd5b5061007a6101d7565b34801561009d57600080fd5b506000546040516001600160a01b0390911681526020015b60405180910390f35b3480156100ca57600080fd5b506100f46100d93660046104bf565b6001600160a01b031660009081526001602052604090205490565b6040519081526020016100b5565b34801561010e57600080fd5b5061007a61011d3660046104bf565b61020d565b61007a6101303660046104bf565b6102a8565b6000546001600160a01b031633146101685760405162461bcd60e51b815260040161015f906104e3565b60405180910390fd5b6001600160a01b0381166000818152600160205260408120805491905590610190908261033c565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826040516101cb91815260200190565b60405180910390a25050565b6000546001600160a01b031633146102015760405162461bcd60e51b815260040161015f906104e3565b61020b600061045a565b565b6000546001600160a01b031633146102375760405162461bcd60e51b815260040161015f906104e3565b6001600160a01b03811661029c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161015f565b6102a58161045a565b50565b6000546001600160a01b031633146102d25760405162461bcd60e51b815260040161015f906104e3565b6001600160a01b0381166000908152600160205260408120805434928392916102fc908490610518565b90915550506040518181526001600160a01b038316907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4906020016101cb565b8047101561038c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161015f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146103d9576040519150601f19603f3d011682016040523d82523d6000602084013e6103de565b606091505b50509050806104555760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161015f565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146102a557600080fd5b6000602082840312156104d157600080fd5b81356104dc816104aa565b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561053957634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212206cc97246e6fbc2b4eac8231f2c0a9d93b40fba36a34b504db86a101136dc96f164736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052600436106100555760003560e01c806351cff8d91461005a578063715018a61461007c5780638da5cb5b14610091578063e3a9db1a146100be578063f2fde38b14610102578063f340fa0114610122575b600080fd5b34801561006657600080fd5b5061007a6100753660046104bf565b610135565b005b34801561008857600080fd5b5061007a6101d7565b34801561009d57600080fd5b506000546040516001600160a01b0390911681526020015b60405180910390f35b3480156100ca57600080fd5b506100f46100d93660046104bf565b6001600160a01b031660009081526001602052604090205490565b6040519081526020016100b5565b34801561010e57600080fd5b5061007a61011d3660046104bf565b61020d565b61007a6101303660046104bf565b6102a8565b6000546001600160a01b031633146101685760405162461bcd60e51b815260040161015f906104e3565b60405180910390fd5b6001600160a01b0381166000818152600160205260408120805491905590610190908261033c565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826040516101cb91815260200190565b60405180910390a25050565b6000546001600160a01b031633146102015760405162461bcd60e51b815260040161015f906104e3565b61020b600061045a565b565b6000546001600160a01b031633146102375760405162461bcd60e51b815260040161015f906104e3565b6001600160a01b03811661029c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161015f565b6102a58161045a565b50565b6000546001600160a01b031633146102d25760405162461bcd60e51b815260040161015f906104e3565b6001600160a01b0381166000908152600160205260408120805434928392916102fc908490610518565b90915550506040518181526001600160a01b038316907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4906020016101cb565b8047101561038c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161015f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146103d9576040519150601f19603f3d011682016040523d82523d6000602084013e6103de565b606091505b50509050806104555760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161015f565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146102a557600080fd5b6000602082840312156104d157600080fd5b81356104dc816104aa565b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561053957634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212206cc97246e6fbc2b4eac8231f2c0a9d93b40fba36a34b504db86a101136dc96f164736f6c634300080d0033"}, "abi": [{"type": "event", "name": "Deposited", "inputs": [{"name": "payee", "type": "address", "internalType": "address", "indexed": true}, {"name": "weiAmount", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "OwnershipTransferred", "inputs": [{"name": "previousOwner", "type": "address", "internalType": "address", "indexed": true}, {"name": "newOwner", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Withdrawn", "inputs": [{"name": "payee", "type": "address", "internalType": "address", "indexed": true}, {"name": "weiAmount", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "deposit", "stateMutability": "payable", "inputs": [{"name": "payee", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "depositsOf", "stateMutability": "view", "inputs": [{"name": "payee", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "owner", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "renounceOwnership", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "transferOwnership", "stateMutability": "nonpayable", "inputs": [{"name": "newOwner", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "withdraw", "stateMutability": "nonpayable", "inputs": [{"name": "payee", "type": "address", "internalType": "address payable"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Base escrow contract, holds funds designated for a payee until they withdraw them. Intended usage: This contract (and derived escrow contracts) should be a standalone contract, that only interacts with the contract that instantiated it. That way, it is guaranteed that all Ether will be handled according to the `Escrow` rules, and there is no need to check for payable functions or transfers in the inheritance tree. The contract that uses the escrow as its payment method should be its owner, and provide public methods redirecting to the escrow's deposit and withdraw.", "kind": "dev", "methods": {"deposit(address)": {"details": "Stores the sent amount as credit to be withdrawn.", "params": {"payee": "The destination address of the funds."}}, "owner()": {"details": "Returns the address of the current owner."}, "renounceOwnership()": {"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."}, "transferOwnership(address)": {"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}, "withdraw(address)": {"details": "Withdraw accumulated balance for a payee, forwarding all gas to the recipient. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.", "params": {"payee": "The address whose funds will be withdrawn and transferred to."}}}, "title": "Escrow", "version": 1}}, "RefundEscrow": {"contractName": "RefundEscrow", "sourceId": "utils/escrow/RefundEscrow.sol", "deploymentBytecode": {"bytecode": "0x60a060405234801561001057600080fd5b50604051610bcd380380610bcd83398101604081905261002f91610113565b610038336100c3565b6001600160a01b0381166100a85760405162461bcd60e51b815260206004820152602d60248201527f526566756e64457363726f773a2062656e65666963696172792069732074686560448201526c207a65726f206164647265737360981b606482015260840160405180910390fd5b6001600160a01b03166080526002805460ff19169055610143565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561012557600080fd5b81516001600160a01b038116811461013c57600080fd5b9392505050565b608051610a696101646000396000818160bb01526105850152610a696000f3fe6080604052600436106100a75760003560e01c80638da5cb5b116100645780638da5cb5b146101895780639af6549a146101a7578063c19d93fb146101bc578063e3a9db1a146101dc578063f2fde38b14610220578063f340fa011461024057600080fd5b806338af3eed146100ac57806343d726d6146100f857806351cff8d91461010f578063685ca1941461012f578063715018a61461015f5780638c52dc4114610174575b600080fd5b3480156100b857600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020015b60405180910390f35b34801561010457600080fd5b5061010d610253565b005b34801561011b57600080fd5b5061010d61012a366004610976565b610335565b34801561013b57600080fd5b5061014f61014a366004610976565b6103b2565b60405190151581526020016100ef565b34801561016b57600080fd5b5061010d6103d4565b34801561018057600080fd5b5061010d61040a565b34801561019557600080fd5b506000546001600160a01b03166100db565b3480156101b357600080fd5b5061010d6104ed565b3480156101c857600080fd5b5060025460ff166040516100ef91906109b0565b3480156101e857600080fd5b506102126101f7366004610976565b6001600160a01b031660009081526001602052604090205490565b6040519081526020016100ef565b34801561022c57600080fd5b5061010d61023b366004610976565b6105ab565b61010d61024e366004610976565b610643565b6000546001600160a01b031633146102865760405162461bcd60e51b815260040161027d906109d8565b60405180910390fd5b600060025460ff16600281111561029f5761029f61099a565b146102fe5760405162461bcd60e51b815260206004820152602960248201527f526566756e64457363726f773a2063616e206f6e6c7920636c6f7365207768696044820152686c652061637469766560b81b606482015260840161027d565b6002805460ff1916811790556040517f088672c3a6e342f7cd94a65ba63b79df24a8973927b4d05d803c44bbf787d12f90600090a1565b61033e816103b2565b6103a65760405162461bcd60e51b815260206004820152603360248201527f436f6e646974696f6e616c457363726f773a207061796565206973206e6f7420604482015272616c6c6f77656420746f20776974686472617760681b606482015260840161027d565b6103af816106c6565b50565b6000600160025460ff1660028111156103cd576103cd61099a565b1492915050565b6000546001600160a01b031633146103fe5760405162461bcd60e51b815260040161027d906109d8565b610408600061075f565b565b6000546001600160a01b031633146104345760405162461bcd60e51b815260040161027d906109d8565b600060025460ff16600281111561044d5761044d61099a565b146104b55760405162461bcd60e51b815260206004820152603260248201527f526566756e64457363726f773a2063616e206f6e6c7920656e61626c6520726560448201527166756e6473207768696c652061637469766560701b606482015260840161027d565b6002805460ff191660011790556040517f599d8e5a83cffb867d051598c4d70e805d59802d8081c1c7d6dffc5b6aca2b8990600090a1565b6002805460ff1660028111156105055761050561099a565b146105785760405162461bcd60e51b815260206004820152603860248201527f526566756e64457363726f773a2062656e65666963696172792063616e206f6e60448201527f6c79207769746864726177207768696c6520636c6f7365640000000000000000606482015260840161027d565b6104086001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016476107af565b6000546001600160a01b031633146105d55760405162461bcd60e51b815260040161027d906109d8565b6001600160a01b03811661063a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161027d565b6103af8161075f565b600060025460ff16600281111561065c5761065c61099a565b146106bd5760405162461bcd60e51b815260206004820152602b60248201527f526566756e64457363726f773a2063616e206f6e6c79206465706f736974207760448201526a68696c652061637469766560a81b606482015260840161027d565b6103af816108cd565b6000546001600160a01b031633146106f05760405162461bcd60e51b815260040161027d906109d8565b6001600160a01b038116600081815260016020526040812080549190559061071890826107af565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58260405161075391815260200190565b60405180910390a25050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b804710156107ff5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161027d565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461084c576040519150601f19603f3d011682016040523d82523d6000602084013e610851565b606091505b50509050806108c85760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161027d565b505050565b6000546001600160a01b031633146108f75760405162461bcd60e51b815260040161027d906109d8565b6001600160a01b038116600090815260016020526040812080543492839291610921908490610a0d565b90915550506040518181526001600160a01b038316907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c490602001610753565b6001600160a01b03811681146103af57600080fd5b60006020828403121561098857600080fd5b813561099381610961565b9392505050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106109d257634e487b7160e01b600052602160045260246000fd5b91905290565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610a2e57634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212207b39938cbe824b26e34c2c131303ea13e2c2fce6018512ecf422c27da0cbf95264736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052600436106100a75760003560e01c80638da5cb5b116100645780638da5cb5b146101895780639af6549a146101a7578063c19d93fb146101bc578063e3a9db1a146101dc578063f2fde38b14610220578063f340fa011461024057600080fd5b806338af3eed146100ac57806343d726d6146100f857806351cff8d91461010f578063685ca1941461012f578063715018a61461015f5780638c52dc4114610174575b600080fd5b3480156100b857600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020015b60405180910390f35b34801561010457600080fd5b5061010d610253565b005b34801561011b57600080fd5b5061010d61012a366004610976565b610335565b34801561013b57600080fd5b5061014f61014a366004610976565b6103b2565b60405190151581526020016100ef565b34801561016b57600080fd5b5061010d6103d4565b34801561018057600080fd5b5061010d61040a565b34801561019557600080fd5b506000546001600160a01b03166100db565b3480156101b357600080fd5b5061010d6104ed565b3480156101c857600080fd5b5060025460ff166040516100ef91906109b0565b3480156101e857600080fd5b506102126101f7366004610976565b6001600160a01b031660009081526001602052604090205490565b6040519081526020016100ef565b34801561022c57600080fd5b5061010d61023b366004610976565b6105ab565b61010d61024e366004610976565b610643565b6000546001600160a01b031633146102865760405162461bcd60e51b815260040161027d906109d8565b60405180910390fd5b600060025460ff16600281111561029f5761029f61099a565b146102fe5760405162461bcd60e51b815260206004820152602960248201527f526566756e64457363726f773a2063616e206f6e6c7920636c6f7365207768696044820152686c652061637469766560b81b606482015260840161027d565b6002805460ff1916811790556040517f088672c3a6e342f7cd94a65ba63b79df24a8973927b4d05d803c44bbf787d12f90600090a1565b61033e816103b2565b6103a65760405162461bcd60e51b815260206004820152603360248201527f436f6e646974696f6e616c457363726f773a207061796565206973206e6f7420604482015272616c6c6f77656420746f20776974686472617760681b606482015260840161027d565b6103af816106c6565b50565b6000600160025460ff1660028111156103cd576103cd61099a565b1492915050565b6000546001600160a01b031633146103fe5760405162461bcd60e51b815260040161027d906109d8565b610408600061075f565b565b6000546001600160a01b031633146104345760405162461bcd60e51b815260040161027d906109d8565b600060025460ff16600281111561044d5761044d61099a565b146104b55760405162461bcd60e51b815260206004820152603260248201527f526566756e64457363726f773a2063616e206f6e6c7920656e61626c6520726560448201527166756e6473207768696c652061637469766560701b606482015260840161027d565b6002805460ff191660011790556040517f599d8e5a83cffb867d051598c4d70e805d59802d8081c1c7d6dffc5b6aca2b8990600090a1565b6002805460ff1660028111156105055761050561099a565b146105785760405162461bcd60e51b815260206004820152603860248201527f526566756e64457363726f773a2062656e65666963696172792063616e206f6e60448201527f6c79207769746864726177207768696c6520636c6f7365640000000000000000606482015260840161027d565b6104086001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016476107af565b6000546001600160a01b031633146105d55760405162461bcd60e51b815260040161027d906109d8565b6001600160a01b03811661063a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161027d565b6103af8161075f565b600060025460ff16600281111561065c5761065c61099a565b146106bd5760405162461bcd60e51b815260206004820152602b60248201527f526566756e64457363726f773a2063616e206f6e6c79206465706f736974207760448201526a68696c652061637469766560a81b606482015260840161027d565b6103af816108cd565b6000546001600160a01b031633146106f05760405162461bcd60e51b815260040161027d906109d8565b6001600160a01b038116600081815260016020526040812080549190559061071890826107af565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58260405161075391815260200190565b60405180910390a25050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b804710156107ff5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161027d565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461084c576040519150601f19603f3d011682016040523d82523d6000602084013e610851565b606091505b50509050806108c85760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161027d565b505050565b6000546001600160a01b031633146108f75760405162461bcd60e51b815260040161027d906109d8565b6001600160a01b038116600090815260016020526040812080543492839291610921908490610a0d565b90915550506040518181526001600160a01b038316907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c490602001610753565b6001600160a01b03811681146103af57600080fd5b60006020828403121561098857600080fd5b813561099381610961565b9392505050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106109d257634e487b7160e01b600052602160045260246000fd5b91905290565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610a2e57634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212207b39938cbe824b26e34c2c131303ea13e2c2fce6018512ecf422c27da0cbf95264736f6c634300080d0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "beneficiary_", "type": "address", "internalType": "address payable"}]}, {"type": "event", "name": "Deposited", "inputs": [{"name": "payee", "type": "address", "internalType": "address", "indexed": true}, {"name": "weiAmount", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "event", "name": "OwnershipTransferred", "inputs": [{"name": "previousOwner", "type": "address", "internalType": "address", "indexed": true}, {"name": "newOwner", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "RefundsClosed", "inputs": [], "anonymous": false}, {"type": "event", "name": "RefundsEnabled", "inputs": [], "anonymous": false}, {"type": "event", "name": "Withdrawn", "inputs": [{"name": "payee", "type": "address", "internalType": "address", "indexed": true}, {"name": "weiAmount", "type": "uint256", "internalType": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "beneficiary", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address payable"}]}, {"type": "function", "name": "beneficiaryWithdraw", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "close", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "deposit", "stateMutability": "payable", "inputs": [{"name": "refundee", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "depositsOf", "stateMutability": "view", "inputs": [{"name": "payee", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "enableRefunds", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "owner", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "renounceOwnership", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "state", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "uint8", "internalType": "enum RefundEscrow.State"}]}, {"type": "function", "name": "transferOwnership", "stateMutability": "nonpayable", "inputs": [{"name": "newOwner", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "withdraw", "stateMutability": "nonpayable", "inputs": [{"name": "payee", "type": "address", "internalType": "address payable"}], "outputs": []}, {"type": "function", "name": "withdrawalAllowed", "stateMutability": "view", "inputs": [{"name": "", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Escrow that holds funds for a beneficiary, deposited from multiple parties.Intended usage: See {Escrow}. Same usage guidelines apply here.The owner account (that is, the contract that instantiates this contract) may deposit, close the deposit period, and allow for either withdrawal by the beneficiary, or refunds to the depositors. All interactions with `RefundEscrow` will be made through the owner contract.", "kind": "dev", "methods": {"beneficiary()": {"returns": {"_0": "The beneficiary of the escrow."}}, "beneficiaryWithdraw()": {"details": "Withdraws the beneficiary's funds."}, "close()": {"details": "Allows for the beneficiary to withdraw their funds, rejecting further deposits."}, "constructor": {"details": "Constructor.", "params": {"beneficiary_": "The beneficiary of the deposits."}}, "deposit(address)": {"details": "Stores funds that may later be refunded.", "params": {"refundee": "The address funds will be sent to if a refund occurs."}}, "enableRefunds()": {"details": "Allows for refunds to take place, rejecting further deposits."}, "owner()": {"details": "Returns the address of the current owner."}, "renounceOwnership()": {"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."}, "state()": {"returns": {"_0": "The current state of the escrow."}}, "transferOwnership(address)": {"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}, "withdraw(address)": {"details": "Withdraw accumulated balance for a payee, forwarding all gas to the recipient. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.", "params": {"payee": "The address whose funds will be withdrawn and transferred to."}}, "withdrawalAllowed(address)": {"details": "Returns whether refundees can withdraw their deposits (be refunded). The overridden function receives a 'payee' argument, but we ignore it here since the condition is global, not per-payee."}}, "title": "RefundEscrow", "version": 1}}, "ERC165": {"contractName": "ERC165", "sourceId": "utils/introspection/ERC165.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.", "kind": "dev", "methods": {"supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}}, "version": 1}}, "ERC165Checker": {"contractName": "ERC165Checker", "sourceId": "utils/introspection/ERC165Checker.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220364ecd5895198a06e6aa30eae3781d291f01a8dcdea05c9e33f2b906dddc669664736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220364ecd5895198a06e6aa30eae3781d291f01a8dcdea05c9e33f2b906dddc669664736f6c634300080d0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Library used to query support of an interface declared via {IERC165}. Note that these functions return the actual result of the query: they do not `revert` if an interface is not supported. It is up to the caller to decide what to do in these cases.", "kind": "dev", "methods": {}, "version": 1}}, "ERC165Storage": {"contractName": "ERC165Storage", "sourceId": "utils/introspection/ERC165Storage.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Storage based implementation of the {IERC165} interface. Contracts may inherit from this and call {_registerInterface} to declare their support of an interface.", "kind": "dev", "methods": {"supportsInterface(bytes4)": {"details": "See {IERC165-supportsInterface}."}}, "stateVariables": {"_supportedInterfaces": {"details": "Mapping of interface ids to whether or not it's supported."}}, "version": 1}}, "ERC1820Implementer": {"contractName": "ERC1820Implementer", "sourceId": "utils/introspection/ERC1820Implementer.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50610114806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063249cb3fa14602d575b600080fd5b603c603836600460a4565b604e565b60405190815260200160405180910390f35b6000828152602081815260408083206001600160a01b038516845290915281205460ff16607b576000609d565b7fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b9392505050565b6000806040838503121560b657600080fd5b8235915060208301356001600160a01b038116811460d357600080fd5b80915050925092905056fea2646970667358221220640cc461f323b6dd9a283fba2a01542533a6eba087367e4b74b31b2b9d6322a064736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x6080604052348015600f57600080fd5b506004361060285760003560e01c8063249cb3fa14602d575b600080fd5b603c603836600460a4565b604e565b60405190815260200160405180910390f35b6000828152602081815260408083206001600160a01b038516845290915281205460ff16607b576000609d565b7fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b9392505050565b6000806040838503121560b657600080fd5b8235915060208301356001600160a01b038116811460d357600080fd5b80915050925092905056fea2646970667358221220640cc461f323b6dd9a283fba2a01542533a6eba087367e4b74b31b2b9d6322a064736f6c634300080d0033"}, "abi": [{"type": "function", "name": "canImplementInterfaceForAddress", "stateMutability": "view", "inputs": [{"name": "interfaceHash", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Implementation of the {IERC1820Implementer} interface. Contracts may inherit from this and call {_registerInterfaceForAddress} to declare their willingness to be implementers. {IERC1820Registry-setInterfaceImplementer} should then be called for the registration to be complete.", "kind": "dev", "methods": {"canImplementInterfaceForAddress(bytes32,address)": {"details": "See {IERC1820Implementer-canImplementInterfaceForAddress}."}}, "version": 1}}, "IERC165": {"contractName": "IERC165", "sourceId": "utils/introspection/IERC165.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "supportsInterface", "stateMutability": "view", "inputs": [{"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.", "kind": "dev", "methods": {"supportsInterface(bytes4)": {"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}}, "version": 1}}, "IERC1820Implementer": {"contractName": "IERC1820Implementer", "sourceId": "utils/introspection/IERC1820Implementer.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "canImplementInterfaceForAddress", "stateMutability": "view", "inputs": [{"name": "interfaceHash", "type": "bytes32", "internalType": "bytes32"}, {"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Interface for an ERC1820 implementer, as defined in the https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP]. Used by contracts that will be registered as implementers in the {IERC1820Registry}.", "kind": "dev", "methods": {"canImplementInterfaceForAddress(bytes32,address)": {"details": "Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract implements `interfaceHash` for `account`. See {IERC1820Registry-setInterfaceImplementer}."}}, "version": 1}}, "IERC1820Registry": {"contractName": "IERC1820Registry", "sourceId": "utils/introspection/IERC1820Registry.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "event", "name": "InterfaceImplementerSet", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "interfaceHash", "type": "bytes32", "internalType": "bytes32", "indexed": true}, {"name": "implementer", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "event", "name": "ManagerChanged", "inputs": [{"name": "account", "type": "address", "internalType": "address", "indexed": true}, {"name": "newManager", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "function", "name": "getInterfaceImplementer", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "_interfaceHash", "type": "bytes32", "internalType": "bytes32"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "getManager", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "implementsERC165Interface", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "implementsERC165InterfaceNoCache", "stateMutability": "view", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "interfaceHash", "stateMutability": "pure", "inputs": [{"name": "interfaceName", "type": "string", "internalType": "string"}], "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}]}, {"type": "function", "name": "setInterfaceImplementer", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "_interfaceHash", "type": "bytes32", "internalType": "bytes32"}, {"name": "implementer", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "setManager", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "newManager", "type": "address", "internalType": "address"}], "outputs": []}, {"type": "function", "name": "updateERC165Cache", "stateMutability": "nonpayable", "inputs": [{"name": "account", "type": "address", "internalType": "address"}, {"name": "interfaceId", "type": "bytes4", "internalType": "bytes4"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {"implementsERC165Interface(address,bytes4)": {"notice": "Checks whether a contract implements an ERC165 interface or not. If the result is not cached a direct lookup on the contract address is performed. If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling {updateERC165Cache} with the contract address."}, "implementsERC165InterfaceNoCache(address,bytes4)": {"notice": "Checks whether a contract implements an ERC165 interface or not without using nor updating the cache."}, "updateERC165Cache(address,bytes4)": {"notice": "Updates the cache with whether the contract implements an ERC165 interface or not."}}, "version": 1}, "devdoc": {"details": "Interface of the global ERC1820 Registry, as defined in the https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register implementers for interfaces in this registry, as well as query support. Implementers may be shared by multiple accounts, and can also implement more than a single interface for each account. Contracts can implement interfaces for themselves, but externally-owned accounts (EOA) must delegate this to a contract. {IERC165} interfaces can also be queried via the registry. For an in-depth explanation and source code analysis, see the EIP text.", "kind": "dev", "methods": {"getInterfaceImplementer(address,bytes32)": {"details": "Returns the implementer of `interfaceHash` for `account`. If no such implementer is registered, returns the zero address. If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28 zeroes), `account` will be queried for support of it. `account` being the zero address is an alias for the caller's address."}, "getManager(address)": {"details": "Returns the manager for `account`. See {setManager}."}, "implementsERC165Interface(address,bytes4)": {"params": {"account": "Address of the contract to check.", "interfaceId": "ERC165 interface to check."}, "returns": {"_0": "True if `account` implements `interfaceId`, false otherwise."}}, "implementsERC165InterfaceNoCache(address,bytes4)": {"params": {"account": "Address of the contract to check.", "interfaceId": "ERC165 interface to check."}, "returns": {"_0": "True if `account` implements `interfaceId`, false otherwise."}}, "interfaceHash(string)": {"details": "Returns the interface hash for an `interfaceName`, as defined in the corresponding https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP]."}, "setInterfaceImplementer(address,bytes32,address)": {"details": "Sets the `implementer` contract as ``account``'s implementer for `interfaceHash`. `account` being the zero address is an alias for the caller's address. The zero address can also be used in `implementer` to remove an old one. See {interfaceHash} to learn how these are created. Emits an {InterfaceImplementerSet} event. Requirements: - the caller must be the current manager for `account`. - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not end in 28 zeroes). - `implementer` must implement {IERC1820Implementer} and return true when queried for support, unless `implementer` is the caller. See {IERC1820Implementer-canImplementInterfaceForAddress}."}, "setManager(address,address)": {"details": "Sets `newManager` as the manager for `account`. A manager of an account is able to set interface implementers for it. By default, each account is its own manager. Passing a value of `0x0` in `newManager` will reset the manager to this initial state. Emits a {ManagerChanged} event. Requirements: - the caller must be the current manager for `account`."}, "updateERC165Cache(address,bytes4)": {"params": {"account": "Address of the contract for which to update the cache.", "interfaceId": "ERC165 interface for which to update the cache."}}}, "version": 1}}, "Math": {"contractName": "Math", "sourceId": "utils/math/Math.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122073f8ff23793139dcc9e369afe55c3707292e66e15385147cf120cbb5ff00243164736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122073f8ff23793139dcc9e369afe55c3707292e66e15385147cf120cbb5ff00243164736f6c634300080d0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Standard math utilities missing in the Solidity language.", "kind": "dev", "methods": {}, "version": 1}}, "SafeCast": {"contractName": "SafeCast", "sourceId": "utils/math/SafeCast.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a55003de683a7a6c4f6301f9e7bb827d167a9fe6279cd7bed6aa8bb2f252ecd464736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a55003de683a7a6c4f6301f9e7bb827d167a9fe6279cd7bed6aa8bb2f252ecd464736f6c634300080d0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Wrappers over Solidity's uintXX/intXX casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always. Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing all math on `uint256` and `int256` and then downcasting.", "kind": "dev", "methods": {}, "version": 1}}, "SafeMath": {"contractName": "SafeMath", "sourceId": "utils/math/SafeMath.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122043fd03f2516614dacafc6619106c979c072f4a43a91591cb66de8800bc18713464736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122043fd03f2516614dacafc6619106c979c072f4a43a91591cb66de8800bc18713464736f6c634300080d0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.", "kind": "dev", "methods": {}, "version": 1}}, "SignedSafeMath": {"contractName": "SignedSafeMath", "sourceId": "utils/math/SignedSafeMath.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b7bf89d44b1db8e6c61bbf0e7f36a60893d875d87183d08de141f0cbaea774e964736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b7bf89d44b1db8e6c61bbf0e7f36a60893d875d87183d08de141f0cbaea774e964736f6c634300080d0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Wrappers over Solidity's arithmetic operations. NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler now has built in overflow checking.", "kind": "dev", "methods": {}, "version": 1}}, "BitMaps": {"contractName": "BitMaps", "sourceId": "utils/structs/BitMaps.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202e29cd17bbc551d999b8f5c42667b5a21dc655fd179d75cb7061024d6300453564736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202e29cd17bbc551d999b8f5c42667b5a21dc655fd179d75cb7061024d6300453564736f6c634300080d0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential. Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].", "kind": "dev", "methods": {}, "version": 1}}, "EnumerableMap": {"contractName": "EnumerableMap", "sourceId": "utils/structs/EnumerableMap.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e6982f7a9e641e3dc9544e051a14a27385257d7912785d4b9d97a8f0213c7f1064736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e6982f7a9e641e3dc9544e051a14a27385257d7912785d4b9d97a8f0213c7f1064736f6c634300080d0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Library for managing an enumerable variant of Solidity's https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`] type. Maps have the following properties: - Entries are added, removed, and checked for existence in constant time (O(1)). - Entries are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableMap for EnumerableMap.UintToAddressMap;     // Declare a set state variable     EnumerableMap.UintToAddressMap private myMap; } ``` As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are supported.", "kind": "dev", "methods": {}, "version": 1}}, "EnumerableSet": {"contractName": "EnumerableSet", "sourceId": "utils/structs/EnumerableSet.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c71cf6bdb92d9837ae62fee6396f6707abc0d5c5ef30993a6f954ca45828394264736f6c634300080d0033"}, "runtimeBytecode": {"bytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c71cf6bdb92d9837ae62fee6396f6707abc0d5c5ef30993a6f954ca45828394264736f6c634300080d0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported.", "kind": "dev", "methods": {}, "version": 1}}}}